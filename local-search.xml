<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mac版微信备份</title>
    <link href="/2024/04/02/mac%E7%89%88%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD/"/>
    <url>/2024/04/02/mac%E7%89%88%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="1-快速将iPhone上微信的聊天记录备份到电脑"><a href="#1-快速将iPhone上微信的聊天记录备份到电脑" class="headerlink" title="1.快速将iPhone上微信的聊天记录备份到电脑"></a>1.快速将iPhone上微信的聊天记录备份到电脑</h1><h2 id="第1步"><a href="#第1步" class="headerlink" title="第1步"></a>第1步</h2><p>用数据线将手机与电脑连接</p><h2 id="第2步"><a href="#第2步" class="headerlink" title="第2步"></a>第2步</h2><p>打开iPhone里的个人热点，关闭电脑的WiFi和本地连接（或者直接拔掉网线）。这样电脑就可以经由数据线通过手机的WiFi进行上网。</p><p>当然我们的目的并不是让电脑通过手机连接外网，而是让电脑和手机处于同一WiFi环境内。</p><h2 id="第3步"><a href="#第3步" class="headerlink" title="第3步"></a>第3步</h2><p>打开电脑端和手机端微信，电脑端选择备份聊天记录，手机端会自动弹出选择要备份的会话.</p><p>看到这里有小伙伴儿可能会问了，电脑连接手机的热点以后，是不是通过手机的流量备份的？会不会消耗我太多的流量？</p><p>其实大家完全不用担心，备份是通过局域网环境进行的，并没有外网的流量流入和流出，不信可以看我的截图。可以看到，此时的上网速度约等于0，也就是说并不消耗手机的流量。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021051676.png" alt="image-20240402105117625"></p><h1 id="2-Mac-版微信聊天记录备份文件路径"><a href="#2-Mac-版微信聊天记录备份文件路径" class="headerlink" title="2.Mac 版微信聊天记录备份文件路径"></a>2.Mac 版微信聊天记录备份文件路径</h1><p>访达打开路径快捷键:<code>CMD + SHIFT + G</code></p><p><code>/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.0b4.0.9</code></p><p>在 Mac 电脑系统内，微信的备份文件会存放在 2.0b4.0.9 的 Backup 文件夹内，并且备份目录的路径不会改变。每一个微信账号的聊天记录备份对应此目录下的一个文件夹，名称通常为<strong>一长串字母和数字</strong>的组合。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021053647.png" alt="image-20240402105325620"></p><p>如需把备份文件存储到网盘或硬盘,操作Backup 文件夹即可.</p><p>例如压缩文件夹保存到阿里云盘,下次备份后(增量备份)再次压缩保存阿里云盘,需要恢复时只需最新的一个备份文件即可.</p>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macos</tag>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10个有趣的linux命令</title>
    <link href="/2024/04/01/10%20%E4%B8%AA%20%E6%9C%89%E8%B6%A3%E7%9A%84Linux%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/04/01/10%20%E4%B8%AA%20%E6%9C%89%E8%B6%A3%E7%9A%84Linux%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-rev命令"><a href="#1-rev命令" class="headerlink" title="1.rev命令"></a>1.rev命令</h1><p><strong>一行接一行地颠倒所输入的字符串。</strong></p><p>运行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$rev</span></span><br></code></pre></td></tr></table></figure><p>如输入：shiyanlou</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">shiyanlou</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011056756.png" alt="image-20240401105646687"></p><h1 id="2-asciiview命令"><a href="#2-asciiview命令" class="headerlink" title="2.asciiview命令"></a><strong>2.asciiview命令</strong></h1><p>1.先安装aview</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install aview<br></code></pre></td></tr></table></figure><p>2.再安装imagemagick</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install imagemagick<br></code></pre></td></tr></table></figure><p>3.使用asciiview</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$asciiview</span> shiyanlou.png -driver curses</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011058483.png" alt="image-20240401105807449"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="3-sl命令"><a href="#3-sl命令" class="headerlink" title="3.sl命令"></a><strong>3.sl命令</strong></h1><p>你会看到一辆火车从屏幕右边开往左边……</p><p>安装</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ sudo apt-<span class="hljs-meta">get</span> install <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011058207.png" alt="image-20240401105832176"></p><h1 id="4-aafire命令"><a href="#4-aafire命令" class="headerlink" title="4.aafire命令"></a><strong>4.aafire命令</strong></h1><p><strong>在你的终端放一把火。</strong></p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install libaa-bin<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$aafire</span></span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011058294.png" alt="image-20240401105857259"></p><h1 id="5-cmatrix命令"><a href="#5-cmatrix命令" class="headerlink" title="5.cmatrix命令"></a><strong>5.cmatrix命令</strong></h1><p>这个很酷！《黑客帝国》那种矩阵风格的动画效果。</p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install cmatrix<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$cmatrix</span></span><br></code></pre></td></tr></table></figure><p>要关闭效果，按ctrl+c 结束。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011059135.png" alt="image-20240401105922096"></p><h1 id="6-factor命令"><a href="#6-factor命令" class="headerlink" title="6.factor命令"></a><strong>6.factor命令</strong></h1><p><strong>分解因数</strong>，这个……可以帮家里的小学生解题</p><p>运行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$factor60</span></span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011059323.png" alt="image-20240401105939292"></p><h1 id="7-oneko命令"><a href="#7-oneko命令" class="headerlink" title="7.oneko命令"></a><strong>7.oneko命令</strong></h1><p><strong>桌面上出现一只喵星人</strong>，跟着你的鼠标跑，你不动了它就睡觉。哈哈，这个挺不错!</p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install oneko<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$oneko</span></span><br></code></pre></td></tr></table></figure><p>要关掉这家伙，按ctrl+c 结束。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011059412.png" alt="image-20240401105957379"></p><h1 id="8-boxes命令"><a href="#8-boxes命令" class="headerlink" title="8.boxes命令"></a><strong>8.boxes命令</strong></h1><p><strong>在输入的文本或者代码周围框上各种ASCII 艺术画。</strong></p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install boxes<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shiyanlou.com&quot;</span> | boxes</span><br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shiyanlou.com&quot;</span> | boxes -d dog</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011100842.png" alt="image-20240401110019807"></p><h1 id="9-xeyes命令"><a href="#9-xeyes命令" class="headerlink" title="9.xeyes命令"></a><strong>9.xeyes命令</strong></h1><p>xeyes命令是一个图形显示程序。运行这个程序，你会看到一双萌萌的眼睛会一直盯着你。</p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install xeyes<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>xeyes<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011100297.png" alt="image-20240401110033259"></p><h1 id="10-pv命令"><a href="#10-pv命令" class="headerlink" title="10.pv命令"></a><strong>10.pv命令</strong></h1><p>有时候我们在电影屏幕上看到一些<strong>字幕一个个匀速显示出来</strong>，像有人在边敲键盘，边显示一样。Linux上的pv命令可以实现这种效果。</p><p>安装</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-built_in">pv</span><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;welcome to shiyanlou.com , you can learn IT by doing&quot;</span> | pv -qL 10</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011100480.png" alt="image-20240401110055448"></p><p><strong><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzQ4MTE4Mw==&mid=2247521333&idx=1&sn=b3250351772d98994580b2d9b0a4ebcc&chksm=eadb59729f996d7366bc250855930a6d7117fdb53e66dad562496faf1670241d6cf5f4e9de0c&scene=132&exptype=timeline_recommend_article_extendread_extendread_for_notrec&show_related_article=1&subscene=132&scene=132#wechat_redirect">内容来源</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源SSH软件Tabby</title>
    <link href="/2024/04/01/mac%20ssh%E8%BD%AF%E4%BB%B6Tabby/"/>
    <url>/2024/04/01/mac%20ssh%E8%BD%AF%E4%BB%B6Tabby/</url>
    
    <content type="html"><![CDATA[<h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p>Tabby 是一名老外在 Github 开源的终端连接的工具(ssh工具)，至今已经累积 45K+ star。</p><p>Tabby 的功能特性大概有：</p><ul><li>支持多平台，Windows、MacOS（Intel 芯片&#x2F;M1 芯片）、Linux 都有对应的安装包的；</li><li>自带 SFTP 功能，能够与 Linux 系统传输文件；(rz sz命令)</li><li>炫酷的终端页面，简单易用，以及各种插件支持等</li></ul><h1 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a><a href="https://github.com/Eugeny/tabby/releases">github地址</a></h1><h1 id="网页版入口"><a href="#网页版入口" class="headerlink" title="网页版入口"></a><a href="https://app.tabby.sh/">网页版入口</a></h1>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tabby</tag>
      
      <tag>ssh</tag>
      
      <tag>macos</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全使用 SMB实现局域网共享</title>
    <link href="/2024/03/27/%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8SMB%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB/"/>
    <url>/2024/03/27/%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8SMB%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="不要使用-SMB1"><a href="#不要使用-SMB1" class="headerlink" title="不要使用 SMB1"></a>不要使用 SMB1</h1><p>在查找 SMB 协议相关资料的时候，发现很多解决 SMB 问题的资料中还会教用户开启 SMB1 协议，UP 是非常不推荐的。</p><blockquote><p>SMB1 可以追溯到20世纪80年代 IBM 和 <a href="https://pinpai.smzdm.com/1461/">微软</a>DOS 时代，距离今天已经有三十多年的时间，当时计算机安全还不存在，它在拦截攻击方面有重大的架构问题 。具体的内容就不放在本文中了，如果你感兴趣的话可以查看 《<a href="https://go.smzdm.com/73a594639ab02156/ca_aa_yc_163_akxwkxqk_14197_0_1641_0">Stop using SMB1</a>》文章。</p></blockquote><p>如今版本的 windows 10&#x2F;11 都默认禁用了 SMB1，因此如果你还在使用这一协议的话，UP 强烈建议你去关闭，方法如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215007658.png" alt="windows设置-应用"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215031091.png" alt="程序和功能"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215116409.png" alt="启用或关闭 Windows 功能"></p><h1 id="安全使用-SMB-共享的步骤"><a href="#安全使用-SMB-共享的步骤" class="headerlink" title="安全使用 SMB 共享的步骤"></a>安全使用 SMB 共享的步骤</h1><p>SMB 安全是一个可以聊三天三夜的话题，但多数人不需要涉及到深层面的安全运维设置，但如果你感兴趣，可以从下面的参考资料开始了解：</p><p><a href="https://go.smzdm.com/694444eceb20c89e/ca_aa_yc_163_akxwkxqk_14197_0_1641_0">How to Defend Users from Interception Attacks via SMB Client Defense</a></p><p><a href="https://go.smzdm.com/1a3463dea99ce5eb/ca_aa_yc_163_akxwkxqk_14197_0_1641_0">Beyond the Edge: How to Secure SMB Traffic in Windows</a></p><p>这里提供一个简单的，可以在工作或家庭的局域网中显著提高安全性且不会太复杂的 SMB 共享设置方法（如果你有更好的方法和建议，欢迎留言）：</p><ol><li><strong>新建一个用户专门用于共享文件的授权，并合理设置此用户的权限；</strong></li><li><strong>合理设置网络共享和系统安全的相关设置；</strong></li><li><strong>开启共享，授权指定用户；</strong></li><li><strong>手动添加证书，采用“映射网络驱动器”的方式访问共享。</strong></li></ol><h1 id="创建专用的用户"><a href="#创建专用的用户" class="headerlink" title="创建专用的用户"></a>创建专用的用户</h1><p>这里我们来给系统新建一个本地用户，此用户只用在 SMB 共享。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215525782.png" alt="右击 此电脑"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea5b1c19a8241.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea5b7685fd3456.png_e1080.jpg" alt="右键空白处，点击“新用户”"></p><p>这里新建了一个账号为 “joker” 的用户，相关设置如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea5c645e375865.png_e1080.jpg" alt="由于只是用于共享，因此可以设置不能更改密码，且密码不会过期"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea6db857341022.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h1 id="合理设置网络共享和系统安全的相关设置"><a href="#合理设置网络共享和系统安全的相关设置" class="headerlink" title="合理设置网络共享和系统安全的相关设置"></a>合理设置网络共享和系统安全的相关设置</h1><h2 id="禁用“启用不安全的来宾登录”"><a href="#禁用“启用不安全的来宾登录”" class="headerlink" title="禁用“启用不安全的来宾登录”"></a>禁用“启用不安全的来宾登录”</h2><p>默认情况下，在 SMB2 和 SMB3 版本中，Windows 10 &#x2F; 11 系统下是禁用此服务的，按照本文的思路，如果你开启了我建议你关闭，步骤如下：</p><p>按住 windows 键 + R，在弹出的“运行”窗口中输入 gpedit.msc 打开“本地组策略编辑器”：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea7862c5694171.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea7b29711f3962.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea7fddccfb8225.png_e1080.jpg" alt="微软也明确说明了，开启此项功能会产生很大的安全漏洞"></p><p>微软也明确说明了，开启此项功能会产生很大的安全漏洞</p><p>为什么要禁用？因为很容易遭受中间人攻击。</p><p>简单来说，在你使用 SMB1 协议去共享文件时，虽然别人访问你的共享文件时 SMB1 会去验证访问者提供的用户证书是否有效，但是如果验证此证书为无效之后，SMB1 将会尝试开启“来宾”（guest）登录模式，允许访问者以“来宾”（guest）的身份进行登录。</p><p>换句话说，就相当于“<strong>我不认识你，也不知道你是好人还是坏人，但是来者皆视为宾客</strong>”。</p><p>所以你知道为啥要关闭这个设置了吧？<img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/46.png" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享">  </p><p>UP 看到很多教程都会教用户开启此项设置开解决某些 SMB 问题（比如说下图），UP 真心不建议。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe85bbab821081.jpg_e1080.jpg" alt="图片网络"></p><p>上图产生的错误，就是因为我们禁用了“来宾”身份的登录，<strong>但是大家不要认为这是不好的结果，恰恰相反，我们禁用此项功能就是为了实现这个目的——更好地保护我们的 SMB 共享资料安全</strong>。</p><p>那么该如何正确的使用 SMB 共享，请继续往下看。</p><h2 id="合理分配用户权限"><a href="#合理分配用户权限" class="headerlink" title="合理分配用户权限"></a>合理分配用户权限</h2><p>同样的，使用“运行”窗框输入 <code>secpol.msc</code> 打开 “本地安全策略”设置窗口：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eae8de94e46440.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><strong>（1）授予用户“从网络访问此计算机”的权限：</strong></p><blockquote><p>“<strong>从网络访问此计算机</strong>”指只有授权的用户能够通过网络来访问到本机上的共享文件资源（包括共享的打印机）</p></blockquote><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf6f96fe3732.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf7b8d3391245.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf82791016374.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf8a7b3595421.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf906fb054546.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf964dd0a4134.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><strong>（2）限制此用户登录到系统上：“拒绝本地登录”和“拒绝通过远程桌面服务登录”</strong></p><p>按照同样的方法，将此用户添加到以下两项设置的名单中：</p><blockquote><p><strong>拒绝本地登录</strong>：即不允许特定用户在本<a href="https://www.smzdm.com/ju/sp4x11p/">电脑</a>上进行登录</p></blockquote><blockquote><p><strong>拒绝通过远程桌面服务登录</strong>：即不允许此账户使用远程桌面登录到本系统</p></blockquote><p>设置好之后，<code>joker</code> 用户就无法本地登录到系统，同时也无法通过远程桌面的形式登录到本机，因为我们的目的就是让 joker 只能用来使用 <code>SMB</code> 共享。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617f619033ba43842.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h2 id="本地安全选项设置"><a href="#本地安全选项设置" class="headerlink" title="本地安全选项设置"></a>本地安全选项设置</h2><p>请参考下图的设置进行设置：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617faa4314b368533.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><blockquote><p><strong>Microsoft网络<a href="https://www.smzdm.com/fenlei/fuwuqi/">服务器</a>：对通信进行数字签名(始终)</strong> <strong>—— 禁用</strong></p><p>此项设置用来确定 SMB 的数据包是否需要进行数字签名（类似于加密的意思），用来防止中间人攻击。比如说当我们设置了一个文件夹的 SMB 共享，那么当网络里面的其他人（相当于客户端）来想要访问我们的这个文件夹时，我们（相当于服务端）就会要求其他人也开启 SMB 数字签名的功能，否则我们不允许他们来访问我们的文件夹（不允许建立连接）。对于一般人来说是不需要开启的，除非你有很明确的理由。</p><p>默认情况下此项设置处于禁用状态，一般情况下也不需要打开。如果你打开了，说明要么你是专业人士，要么是误打误撞开启了这个选项，在你不理解这个设置背后的逻辑情况下，我建议你关掉，否则会产生访问错误。</p></blockquote><blockquote><p><strong>Microsoft网络客户端：对通信进行数字签名(如果服务器允许)</strong> <strong>—— 启用</strong></p><p>建议打开，原因是我们在访问别人的 SMB 共享文件夹时，如果对方（服务器端）要求数字签名，那么如果此项设置没有启用，对方的服务器就不会允许我们（客户端）进行连接。</p></blockquote><blockquote><p><strong>Microsoft网络客户端：对通信进行数字签名(始****终) —— 禁用</strong></p><p>默认情况下是关闭的，建议不要打开。如果开启了，并且服务器端没有启用数字签名，那么将无法实现访问 —— 因为我们坚持要对 SMB 数据包进行数字签名，不签名不访问。</p></blockquote><blockquote><p><strong>设备：防止用户安装打印机驱动程****序 —— 禁用</strong></p><p>假如开启了此项设置，那么当你共享了一个打印机让别人来使用时，别人将没有办法直接从你这边下载这个打印机的驱动（除非别人用的是你电脑的管理员账号，否则无法下载驱动），建议关闭（默认也是关闭的）。</p></blockquote><p><strong>重点，请将  “网络访问：本地账户的共享和安全模型”  设置为  “经典-对本地用户进行身份验证，不改变其本来身份”</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fb13432bbd7491.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>很多教程会教你选择第二个选项 —— “仅来宾-对本地用户进行身份验证，其身份为来宾”来解决某些问题，但跟我前面说的一样，“来宾”身份存在很大的安全漏洞，不建议设置。</p><p>微软在这一项设置中也明确说明了具体的细节：</p><blockquote><p>此安全设置确定如何对使用本地帐户的网络登录进行身份验证。如果将此设置设为“经典”，使用本地帐户凭据的网络登录通过这些凭据进行身份验证。“<strong>经典”模型能够对资源的访问权限进行精细的控制。通过使用“经典”模型，你可以针对同一个资源为不同用户授予不同类型的访问权限。</strong></p><p><strong>如果将此设置设为“仅来宾”，使用本地帐户的网络登录会自动映射到来宾帐户。使用“仅来宾”模型，所有用户都可得到平等对待。</strong>所有用户都以来宾身份进行验证，并且都获得相同的访问权限级别来访问指定的资源，这些权限可以为只读或修改。</p><p><strong>使用“仅来宾”模型时，所有可以通过网络访问计算机的用户(包括匿名 Internet 用户)都可以访问共享资源。</strong>你必须使用 Windows 防火墙或其他类似设备来防止对计算机进行未经授权的访问。同样，使用“经典”模型时，本地帐户必须受密码保护；否则，这些用户帐户可以被任何人用来访问共享的系统资源。</p></blockquote><p>至此，我们用户和系统的相关设置已经处理完毕，接下来我们来设置“网络和共享中心”。</p><h1 id="“网络和共享中心”：开启有保护的共享"><a href="#“网络和共享中心”：开启有保护的共享" class="headerlink" title="“网络和共享中心”：开启有保护的共享"></a>“网络和共享中心”：开启有保护的共享</h1><p>打开共享设置：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fcedf979866180.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fcf04721e97301.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd21f2496c3214.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>下面讲解一下上面相关共享设置的作用：</p><h2 id="“启用网络发现”：其实可以不用开启"><a href="#“启用网络发现”：其实可以不用开启" class="headerlink" title="“启用网络发现”：其实可以不用开启"></a>“启用网络发现”：其实可以不用开启</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd528023518744.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>当你勾选此项设置，那么当你在使用“网络”面板时就能发现同局域网下面的其他<a href="https://www.smzdm.com/ju/sp3rz02/">主机</a>（对方也要开启网络发现）：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd4e9c29f18188.png_e1080.jpg" alt="如果不启用将无法查看，但其实影响不大"></p><p>其实这一项设置不开启也是没问题的，不影响我们去做 SMB 共享，而且关闭此项设置能将我们从其他 Windows 主机的网络面板中隐藏起来，提高安全性。</p><h2 id="启用“文件和打印机共享”"><a href="#启用“文件和打印机共享”" class="headerlink" title="启用“文件和打印机共享”"></a>启用“文件和打印机共享”</h2><p>如果不开启，是无法实现 SMB 共享的，因此需要启用：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd6deb9eea494.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h2 id="启用密码保护"><a href="#启用密码保护" class="headerlink" title="启用密码保护"></a>启用密码保护</h2><p>这就不必多说了，密码保护必定要开启。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd7301f3f19823.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h1 id="设置-SMB-共享"><a href="#设置-SMB-共享" class="headerlink" title="设置 SMB 共享"></a>设置 SMB 共享</h1><p>这里我们新建了一个 “share” 文件夹，我们将对此文件夹开启共享：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd8287fea72620.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe1667e1208869.png_e1080.jpg" alt="文件夹里面有一张图片"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98f381ea6469.png_e1080.jpg" alt="右键文件夹，点击“属性”"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98f2b500970.png_e1080.jpg" alt="点击“高级共享”"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98ea44ae2557.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98ea97ee3421.png_e1080.jpg" alt="删除 Everyone 用户，不然谁都可以进行访问就不好了"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98eaa6461203.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98e2af36109.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98e28fb46051.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98e21333337.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><blockquote><p>上图中的“网络路径”：我们可以在资源管理器的地址栏中输入此地址来访问，但是不建议采用此种方式。</p></blockquote><p>我们设置好了文件夹的共享，并且此文件夹只有 “joker” 用户以及我们管理员用户才能进行访问，接下来教大家如何正确的访问我们共享的文件夹。</p><h1 id="添加证书，并通过映射网络驱动器来访问共享的文件夹"><a href="#添加证书，并通过映射网络驱动器来访问共享的文件夹" class="headerlink" title="添加证书，并通过映射网络驱动器来访问共享的文件夹"></a>添加证书，并通过映射网络驱动器来访问共享的文件夹</h1><p>这里我们用另一个 Windows 系统来访问我们设置好的 “share” 文件夹。</p><p>此处关于 SMB 证书的相关知识，可以看<a href="https://post.smzdm.com/p/a7dmllm9/">另一篇文章</a>：</p><h2 id="添加-Windows-凭证"><a href="#添加-Windows-凭证" class="headerlink" title="添加 Windows 凭证"></a>添加 Windows 凭证</h2><p>首先，我们在另一台 Windows 系统上，可以先手动生成一份证书保存到系统中，这样以后我们在去访问 “share” 文件夹时就不需要手动输入 “joker” 用户的账号和密码了：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fdf8f54a442158.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fdf92f35c34932.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fdf9953eae1308.png_e1080.jpg" alt="注意，这里的地址我们不要用主机名的形式，而应该用ip地址"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe009e426b3576.png_e1080.jpg" alt="添加完成"></p><h2 id="映射网络驱动器"><a href="#映射网络驱动器" class="headerlink" title="映射网络驱动器"></a>映射网络驱动器</h2><p>这里，我们不要使用网络面板的形式去访问我们设置的 “share” 文件夹（如果你跟着的设置，在上面关闭了网络发现，那么通过网络面板是找不到我们的主机的），而应该是使用“映射网络启动器”的形式：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe0aacd1d21049.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe10a6dbb19742.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe1ee9ac594986.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>至此，我们完成所有的相关设置，并已经能够正确的访问我们设置的共享文件夹了。 </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们来回顾一下本文的重点：</p><ul><li>为了数据的安全，我们不应该去使用 SMB1 协议；</li><li>我们可以新建一个低权限的用户来使用 SMB 共享，做到安全的隔离；</li><li>在本地安全策略中，应该禁止启用“来宾”身份相关的安全设置；</li><li>我们在启用网络发现时，应该开启密码保护；</li><li>不建议通过“网络”面板去访问共享资源，而应该是使用“映射网络驱动器”的形式；</li></ul><h1 id="小米摄像头视频通过SMB保存到win11电脑上"><a href="#小米摄像头视频通过SMB保存到win11电脑上" class="headerlink" title="小米摄像头视频通过SMB保存到win11电脑上"></a>小米摄像头视频通过SMB保存到win11电脑上</h1><p>由于win11默认禁止了SMB1.0，但小米智能摄像机只支持SMB1.0，故需要通过上述第一步开启SMB1.0，开启后重启电脑生效。</p><h2 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327221145706.png" alt="image-20240327221145706"></p><h2 id="效果如图："><a href="#效果如图：" class="headerlink" title="效果如图："></a>效果如图：</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327221224267.png" alt="image-20240327221224267"></p><h1 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h1><p><a href="https://post.smzdm.com/p/akxwkxqk/">https://post.smzdm.com/p/akxwkxqk/</a></p>]]></content>
    
    
    <categories>
      
      <category>折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smb</tag>
      
      <tag>局域网共享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rclone</title>
    <link href="/2024/03/27/Rclone/"/>
    <url>/2024/03/27/Rclone/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://rclone.org/">官网</a></p><p><a href="https://www.rclone.cn/">中文站</a></p><p><a href="https://github.com/rclone/rclone">GitHub项目地址</a></p><p><a href="https://rclone.org/downloads/">下载地址</a></p><p>rclone是一个命令行程序，用于同步文件和目录，管理各种云存储服务。</p><p>rclone 支持多种文件传输方式，包括复制，同步，移动，删除文件。它还支持文件加密和压缩，支持分块上传和分块下载，可以暂停和恢复传输，支持文件的校验和合并。</p><p>rclone 的主要优势在于它的灵活性和可扩展性。它可以用来做很多事情，包括备份，文件同步，数据迁移等。它可以在各种平台上运行，包括 Windows，macOS，Linux，FreeBSD，NetBSD 等。</p><p>rclone 的配置简单，可以使用命令行或者配置文件来配置。使用 rclone 可以非常方便的操作云存储，支持的命令也非常丰富，使用起来非常方便。</p><p>简单来讲，主要的功能如下：</p><ul><li>将文件备份（和加密）到云存储</li><li>从云存储还原（和解密）文件</li><li>将云数据镜像到其他云服务或本地</li><li>将数据迁移到云，或在云存储供应商之间迁移</li><li>将多个、加密、缓存或不同的云存储挂载为磁盘</li><li>使用 lsf、ljson、size、ncdu 分析和核算云存储上保存的数据</li><li>将文件系统合并在一起，将多个本地和&#x2F;或云文件系统呈现为一个</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这个工具就是一个二进制文件，可以直接<a href="https://rclone.org/downloads/">下载</a>使用.</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p><code>brew install rclone</code></p><p>验证安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ rclone -V<br>rclone v1.66.0<br>- os/version: darwin 13.3.1 (64 bit)<br>- os/kernel: 22.4.0 (arm64)<br>- os/type: darwin<br>- os/arch: arm64 (ARMv8 compatible)<br>- go/version: go1.22.1<br>- go/linking: dynamic<br>- go/tags: none<br></code></pre></td></tr></table></figure><h1 id="可同步网盘"><a href="#可同步网盘" class="headerlink" title="可同步网盘"></a>可同步网盘</h1><ul><li>Amazon Drive</li><li>Amazon S3</li><li>Backblaze B2</li><li>Box</li><li>Ceph</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-DigitalOcean.html&source=article&objectId=1764095">DigitalOcean</a> Spaces</li><li>Dre<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-amh.html&source=article&objectId=1764095">amh</a>ost</li><li>Dropbox</li><li>FTP</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Google.html&source=article&objectId=1764095">Google</a> Cloud Storage</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Google-Drive.html&source=article&objectId=1764095">Google Drive</a></li><li>HTTP</li><li>Hubic</li><li>Jottacloud</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-IBM.html&source=article&objectId=1764095">IBM</a> COS S3</li><li>Memset Memstore</li><li>Mega</li><li>Microsoft Azure Blob Storage</li><li>Microsoft <a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-OneDrive.html&source=article&objectId=1764095">OneDrive</a></li><li>Minio</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Nextcloud.html&source=article&objectId=1764095">Nextcloud</a></li><li>OVH</li><li>OpenDrive</li><li>Openstack Swift</li><li>Oracle Cloud Storage</li><li>ownCloud</li><li>pCloud</li><li>put.io</li><li>QingStor</li><li>Rackspace Cloud Files</li><li>SFTP</li><li>Wasabi</li><li>WebDAV</li><li>Yandex Disk</li><li>The local filesystem</li></ul><h1 id="常用的rclone命令"><a href="#常用的rclone命令" class="headerlink" title="常用的rclone命令"></a>常用的rclone命令</h1><ul><li>rclone config : 配置会话；</li><li>rclone config file : 显示配置文件的路径，一般配置文件默认为 ~&#x2F;.config&#x2F;rclone&#x2F;rclone.conf</li><li>rclone config show : 显示配置文件信息</li><li>rclone copy : 将文件从原文件夹复制至目标文件夹，跳过已复制的文件；</li><li>rclone sync : 将文件从原文件夹同步至目标文件夹，只修改目的地；</li><li>rclone move : 将文件从原文件夹移动至目标文件夹；</li><li>rclone delete : 删除路径中的内容；</li><li>rclone purge : 清空指定路径下的所有文件数据；</li><li>rclone mkdir : 创建一个新目录； </li><li>rclone rmdir : 删除一个空目录；</li><li>rclone rmdirs : 删除路径下的所有空目录；</li><li>rclone check : 检查源和目标的数据是否匹配；</li><li>rclone ls : 列出指定路径下所有的文件包含文件的大小及路径；</li><li>rclone lsd : 列出路径中的所有目录containers和buckets；</li><li>rclone lsl : 列出具有大小、修改时间和路径中的所有对象；</li><li>rclone md5sum : 为路径中的所有对象生成一个md5sum文件；</li><li>rclone sha1sum : 为路径中的所有对象生成一个sha1sum文件；</li><li>rclone size : 返回远程路径中对象的总大小和数量；</li><li>rclone version : 显示版本号；</li><li>rclone cleanup : 如果可能的话，清理remote；</li><li>rclone d<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-edu.html&source=article&objectId=1764095">edu</a>pe : 交互式查找<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6.html&source=article&objectId=1764095">重复文件</a>并删除重命名它们；</li><li>rclone authorize : 远程认证；</li><li>rclone cat : 连接文件并将它们发送到stdout；</li><li>rclone copyto : 将文件从源复制到目标，跳过已复制的文件；</li><li>rclone genautocomplete : rclone输出完成脚本；</li><li>rclone gendocs : rclone将markdown文档输出到所提供的目录；</li><li>rclone listremotes : 列出所有远程的配置文件；</li><li>rclone mount : 将远程目标挂载至本地；</li><li>rclone moveto : 将文件或目录从源移动至目标；</li><li>rclone obscure : 在rclone.conf文件中使用模糊密码；</li><li>rclone cryptcheck : 检验远程认证；</li><li>rclone about : 获取配额信息；</li></ul><h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><h2 id="–backup-dir-DIR"><a href="#–backup-dir-DIR" class="headerlink" title="–backup-dir&#x3D;DIR"></a>–backup-dir&#x3D;DIR</h2><p>当使用<code>sync、copy or move</code>时，所有涉及到覆盖或删除的文件变动，原始文件会被移动到<code>--backup-dir=DIR</code>选项所设置的目录中，如果设置了后缀选项<code>--suffix</code>，则在文件后缀附加指定字符串，例如原文件’abc.txt’，如果指定<code>--suffix 20181101</code>，则<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E5%A4%87%E4%BB%BD.html&source=article&objectId=1764095">备份</a>后的文件名全称为”abc.txt20181101”      # 同步本地目录至远程目录current的文件，并且备份已经覆盖或删除文件至远程old文件夹中     $ rclone sync &#x2F;path&#x2F;to&#x2F;local remote:current –backup-dir remote:old     # 同步本地目录“.&#x2F;“至远程”test“目录，覆盖或删除的文件移动至远程old文件夹中，并将后缀名后附加”20181108“     $ sudo rclone sync .&#x2F; One:test –backup-dir One:old –suffix 20181108  </p><h2 id="–bind-string"><a href="#–bind-string" class="headerlink" title="–bind string"></a>–bind string</h2><p>要绑定到输出连接的本地地址。这可以是IPv4地址、IPv6地址或主机名。如果主机名没有解析或解析为多个IP地址，则会出错。</p><h2 id="–bwlimit-BANDWIDTH-SPEC"><a href="#–bwlimit-BANDWIDTH-SPEC" class="headerlink" title="–bwlimit&#x3D;BANDWIDTH_SPEC"></a>–bwlimit&#x3D;BANDWIDTH_S<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-PE.html&source=article&objectId=1764095">PE</a>C</h2><p>此选项控制带宽限制。限制可以通过两种方式指定：单个限制或依据时间表限制。指定带宽限制单位为kBytes&#x2F;s，或使用后缀b、k、M、G，默认值为0，表示不限制带宽。例如，要将带宽限制为10MB&#x2F;s，则使用–bwlimit 10M。</p><p>还可以指定限制的”时间表“，这将导致在某些时间应用某些限制。要指定时间表，请将条目格式设置为”WEEKDAY-HH:MM, BANDWIDTH WEEKDAY-HH:MM, BANDWIDTH…“，其中：WEEKDAY是可选元素。它可以写成整个世界或仅使用3个第一个字符。HH:MM从00：00到23：59是一小时。</p><p>例1：如下时间表避免白天工作时间，早8:00限制带宽512kBytes&#x2F;sec，12:00限制提升至10M，下午13:00降至512kBytes&#x2F;sec，18:00提升至30M，在23:00开始完全禁用，网络全速运行。      –bwlimit “08:00,512 12:00,10M 13:00,512 18:00,30M 23:00,off”  </p><p>例2：周一带宽限制为512kBytes&#x2F;sec，周五结束前提升至10Mbytes&#x2F;s。周日10:00，它将设置为1Mbyte&#x2F;s。从周日的20：00起将是无限的。      –bwlimit “Mon-00:00,512 Fri-23:59,10M Sat-10:00,1M Sun-20:00,off”  </p><p>例3：等价于例4      –bwlimit “Mon-00:00,512 12:00,1M Sun-20:00,off”  </p><p>例4：      –bwlimit “Mon-00:00,512 Mon-12:00,1M Tue-12:00,1M Wed-12:00,1M Thu-12:00,1M Fri-12:00,1M Sat-12:00,1M Sun-12:00,1M Sun-20:00,off”  </p><p>带宽限制仅适用于数据传输。它们不适用于目录列表的带宽。注意，这些单位是字节&#x2F;秒,而不是比特&#x2F;秒。通常连接是以比特&#x2F;秒来测量的，转换时需要除以8。例如10Mbit&#x2F;s连接，那么在指定参数时需要计算10&#x2F;8&#x3D;1.25Mbyte&#x2F;s，即”–bwlimit 1.25M“</p><p>在Unix系统（<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Linux.html&source=article&objectId=1764095">Linux</a>, MacOS, …）上，可以通过向rclone发送SIGUSR2信号来切换带宽限制器。它允许消除长时间运行的rclone传输的限制，并在需要时将其恢复为使用<code>--bwlimit</code>指定的值。假设只有一个rclone实例在运行，你可以像这样切换限制器：      kill -SIGUSR2 $(pidof rclone)  </p><p>通过如下配置可以动态更改bwlimit      rclone rc core&#x2F;bwlimit rate&#x3D;1M  </p><h2 id="–buffer-size-SIZE"><a href="#–buffer-size-SIZE" class="headerlink" title="–buffer-size&#x3D;SIZE"></a>–buffer-size&#x3D;SIZE</h2><p>设置缓冲区大小来加速文件传输。每个-transfer都会使用这么多内存来缓冲。当使用mount或cmount时，每个打开的文件描述符将使用设置的缓冲区大小的内存进行缓冲。设置为0可禁用最小内存使用的缓冲。</p><h2 id="–checkers-N"><a href="#–checkers-N" class="headerlink" title="–checkers&#x3D;N"></a>–checkers&#x3D;N</h2><p>并行运行的检查器数量。检查程序在同步期间对文件进行等同性检查。对于某些存储系统（例如S3, Swift, Dropbox），这可能需要很长时间才能并行运行。默认是并行运行8个检查程序。</p><h2 id="c-–checksum"><a href="#c-–checksum" class="headerlink" title="-c, –checksum"></a>-c, –checksum</h2><p>通常，rclone会查看文件的修改时间和大小，以查看它们是否相等。如果设置此标志，则rclone将检查文件哈希和大小以确定文件是否相等。当远程不支持设置修改时间并且需要比仅检查文件大小更准确的同步时，这非常有用。</p><p>当在对象上存储相同散列类型的远程之间进行传输时，这非常有用，例如Drive和Swift。有关哪些远程控制支持哪种散列类型的详细信息，<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/overview/&source=article&objectId=1764095">请参阅概述部分中的表</a>。</p><p>例如<code>rclone --checksum sync s3:/bucket swift:/bucket</code>比没有–checksum标志的运行得快的多。使用些标志时，如果远程文件不正常，rclone将不会更新远程文件的mtimes。</p><h2 id="–config-CONFIG-FILE"><a href="#–config-CONFIG-FILE" class="headerlink" title="–config&#x3D;CONFIG_FILE"></a>–config&#x3D;CONFIG_FILE</h2><p>指定rclone配置文件的位置。通常配置文件位于主目录中.config&#x2F;rclone&#x2F;rclone.conf，如果设置了XDGCONFIGHOME，它将位于XDG_CONFIG_HOME&#x2F;rclone&#x2F;rclone.conf</p><p>如果您运行rclone -h并查看–config选项帮助，您将看到默认位置的位置。使用此标志可覆盖配置位置，例如<code>rclone --config=&#39;.myconfig&quot;</code></p><h2 id="–contimeout-TIME"><a href="#–contimeout-TIME" class="headerlink" title="–contimeout&#x3D;TIME"></a>–contimeout&#x3D;TIME</h2><p>设置连接超时时间。TIME为时间格式，5秒参数为5s，10分钟为10m或3h30m。连接超时是rclone等待连接进入远程<a href="https://cloud.tencent.com/product/cos?from_column=20065&from=20065">对象存储</a>系统的时间。默认为1m（1分钟）</p><h2 id="–dedupe-mode-MODE"><a href="#–dedupe-mode-MODE" class="headerlink" title="–dedupe-mode MODE"></a>–dedupe-mode MODE</h2><p>运行重复数据删除命令模式。模式分为interactive, skip, first, newest, oldest, rename。缺省为interactive（交互式）</p><h2 id="–disable-FEATURE-FEATURE-…"><a href="#–disable-FEATURE-FEATURE-…" class="headerlink" title="–disable FEATURE, FEATURE, …"></a>–disable FEATURE, FEATURE, …</h2><p>禁用以逗号分隔的可选功能列表。例如：禁用<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E6%9C%8D%E5%8A%A1%E5%99%A8.html&source=article&objectId=1764095">服务器</a>端move和<a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065">服务器</a>copy的使用：      –disable move, copy  </p><p>查看可以禁用哪些功能的列表：      –disable help  </p><p>请<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/overview/%23features&source=article&objectId=1764095">参阅概览功能</a>和<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/overview/%23optional-features&source=article&objectId=1764095">可选功能</a>，了解哪个功能能做到什么。 此标志可用于调试和特殊情况（例如Google Drive将服务器端copy总量限制为100GB&#x2F;天）</p><h2 id="n-–dry-run"><a href="#n-–dry-run" class="headerlink" title="-n, –dry-run"></a>-n, –dry-run</h2><p>进行试运行而不进行永久性更改。使用它来查看rclone在没有实际操作的情况下会做什么。设置同步命令以删除目标中的文件时很有用。</p><h2 id="–ignore-checksum"><a href="#–ignore-checksum" class="headerlink" title="–ignore-checksum"></a>–ignore-checksum</h2><p>通常，rclone会检查传输文件的校验和是否匹配，如果没有，则会在传输时出现”损坏“错误。您可以使用些选项跳过该检查。您应该只在遇到”传输损坏“错误消息时才使用它，并且您确定可能要传输可能已损坏的数据。</p><h2 id="–ignore-existing"><a href="#–ignore-existing" class="headerlink" title="–ignore-existing"></a>–ignore-existing</h2><p>使用此选项将使rclone无条件地跳过目标上存在的所有文件，无论这些文件的内容如何。虽然这不是一般推荐的选项，但在文件因加密而发生变化的情况下，它可能很有用。但是，如果传输中断，则无法纠正部分传输。</p><h2 id="–ignore-size"><a href="#–ignore-size" class="headerlink" title="–ignore-size"></a>–ignore-size</h2><p>通常，rclone会查看文件的修改时间和大小，以查看它们是否相等。如果设置此标志，则rclone将仅检查修改时间。如果设置–checksum，那么它只检查checksum。它还会导致rclone跳过验证传输后大小相同。</p><p>这对于向<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://onedrive.live.com/&source=article&objectId=1764095">OneDrive</a>传输文件和从OneDrive传输文件非常有用，OneDrive偶尔会误报图像文件的大小([有关详细信息，请参阅#399])[<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/ncw/rclone/issues/399%5D&source=article&objectId=1764095">https://github.com/ncw/rclone/issues/399]</a></p><h2 id="i-–ignore-times"><a href="#i-–ignore-times" class="headerlink" title="-i, –ignore-times"></a>-i, –ignore-times</h2><p>使用此选项将导致rclone无条件地上载所有文件，而不管目标上的文件状态如何。通常，rclone会跳过任何具有相同修改时间且大小相同的文件（如果使用–checksum，则具有相同的checksum）。</p><h2 id="–immutable"><a href="#–immutable" class="headerlink" title="–immutable"></a>–immutable</h2><p>将源文件和目标文件视为不可变并禁止修改。设置此选项后，将根据请求创建和删除文件，但永远不会更新现有文件。如果源和目标之间的现有文件不匹配，则rclone将给出错误源和目标存在但不匹配：修改了不可变文件。</p><p>请注意，只有传输文件的命令（例如sync、copy、move）才会受到此行为影响，并且只允许修改。文件仍然可以被明确删除（例如delete、purge）或隐式删除（例如sync、move）。如果需要避免删除和修改，请使用copy -immutable。</p><p>这用作不可变或仅附加数据集（特别是备份存档）的附加保护层，其中修改意味着损坏并且不应传播。</p><h2 id="–leave-root"><a href="#–leave-root" class="headerlink" title="–leave-root"></a>–leave-root</h2><p>在rmdirs中，即使它是空的，它也不会删除根目录。</p><h2 id="–log-file-FILE"><a href="#–log-file-FILE" class="headerlink" title="–log-file&#x3D;FILE"></a>–log-file&#x3D;FILE</h2><p>将输出记录输出至FILE。默认情况下，此选项无效。这对于跟踪同步和-v标志的问题非常有用。有关详细信息，请参阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/docs/%23logging&source=article&objectId=1764095">“日志记录部分”</a>。</p><p>请注意，如果您使用logrotate程序来<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E7%AE%A1%E7%90%86.html&source=article&objectId=1764095">管理</a>rclone的<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E6%97%A5%E5%BF%97.html&source=article&objectId=1764095">日志</a>，那么您应该使用copytruncate选项，因为rclone没有旋转日志的信号。</p><h2 id="–log-format-LIST"><a href="#–log-format-LIST" class="headerlink" title="–log-format LIST"></a>–log-format LIST</h2><p>日志格式选项是以逗号来分隔的列表。date, time, microseconds, longfile, shortfile, UTC。默认为“date,time”</p><h2 id="–log-level-LEVEL"><a href="#–log-level-LEVEL" class="headerlink" title="–log-level LEVEL"></a>–log-level LEVEL</h2><p>设置rclone的日志级别：默认的日志级别为NOTICE（警告）</p><ol><li>DEBUG（调试）：等效于-vv。它输出大量的调试信息及有用的<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-bug.html&source=article&objectId=1764095">bug</a>报告，并真正打出rclone正在做什么。</li><li>INFO（信息）：等效于-v。它全出差于每个传输的信息，默认情况下每分钟打印一次STATS。</li><li>NOTICE（警告）：如果没有提供日志标志，则为默认日志级别。当工作时它输出的信息有限，只输出警告及重要的信息。</li><li>ERROR（错误）：等效于-q。它只输出错误消息。</li></ol><h2 id="–low-level-retries-NUMBNER"><a href="#–low-level-retries-NUMBNER" class="headerlink" title="–low-level-retries NUMBNER"></a>–low-level-retries NUMBNER</h2><p>这个选项可以控制rclone的低级重试次数，它用于重试失败的操作，通常是一个HTTP请求。例如，这可能是上传大文件的一部分。你将在日志中看到带有-v标志的低级重试。 这不应该从正常操作中的默认值更改。但是，如果您进行了大量的低级重试，则可能希望减小该值，以便rclone更快的进行高级重试，请参阅–retries标志。</p><p>禁用低次重试，使用命令<code>--low-level-retries 1</code></p><h2 id="–max-backlog-N"><a href="#–max-backlog-N" class="headerlink" title="–max-backlog&#x3D;N"></a>–max-backlog&#x3D;N</h2><p>设定检测或传输用于sync、copy或move的最大的的排队等候的文件积压。你可以任意设定它，它只会在队列使用的时候占用内存。需要注意的是，当使用积压时，它将以数字N单位kb的内存顺序完成。</p><p>设置N的值越大则rclone可以能够更准确地计算待处理文件的数量，并能够更精准地预估完成时间。N值越小则rclone同步至远程列表的越快。</p><h2 id="–max-delete-N"><a href="#–max-delete-N" class="headerlink" title="–max-delete&#x3D;N"></a>–max-delete&#x3D;N</h2><p>设置rclone不要删除超过N个文件。如果超出限制，那么返回错误信息并且rclone将停止正在进行的操作。</p><h2 id="–max-depth-N"><a href="#–max-depth-N" class="headerlink" title="–max-depth&#x3D;N"></a>–max-depth&#x3D;N</h2><p>设置除了purge（清空）命令之外所有命令的递归深度。例如：<code>rclone --max-depth 1 ls remote:path</code>命令，它只能看到远程设定目录中的顶级目录文件，使用<code>--max-depth 2</code>则意味着您将看到两层目录级别中的所有文件，依次类推。</p><p>由于历史的原因，lsd命令默认使用<code>--max-depth</code>为1，您可以使用命令行标志覆盖它。也可以使用<code>--max-depth 1</code>命令来禁用递归操作。需要注意的是，如果与sync并使用–delete-excluded一起使用，则会将未递归的文件视为已经排除，并将在目标上删除。如果你不确定会发生什么，请先使用–dry-run进行测试。</p><h2 id="–max-transfer-SIZE"><a href="#–max-transfer-SIZE" class="headerlink" title="–max-transfer&#x3D;SIZE"></a>–max-transfer&#x3D;SIZE</h2><p>设定传输的最大值，rclone当达到指定的大小时，它将停止传输，并将退出代码标记为8。默认为关闭。</p><h2 id="–modify-window-TIME"><a href="#–modify-window-TIME" class="headerlink" title="–modify-window&#x3D;TIME"></a>–modify-window&#x3D;TIME</h2><p>检查文件是否已被修改时，这是文件可以具有的最大允许时间差，仍然被视为等效。默认值为1ns，除非被远程控制覆盖。 例如，OS X仅将修改时间存储到最近的秒，因此如果您正在读取和写入OSX文件系统，则默认情况下这将是1秒。此命令行标志允许您覆盖该计算的默认值。</p><h2 id="–no-gzip-encoding"><a href="#–no-gzip-encoding" class="headerlink" title="–no-gzip-encoding"></a>–no-gzip-en<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-coding.html&source=article&objectId=1764095">coding</a></h2><p>不要设置Accept-Encoding：gzip。 这意味着rclone不会自动向服务器请求压缩文件。如果您已将服务器设置为使用Content-Encoding返回文件：gzip但您上传了压缩文件，则非常有用。没有必要在正常操作中设置它，这样做会降低rclone的网络传输效率。</p><h2 id="–no-update-modtime"><a href="#–no-update-modtime" class="headerlink" title="–no-update-modtime"></a>–no-update-modtime</h2><p>使用此标志时，如果远程文件不正常，rclone将不会更新远程文件的修改时间。如果远程与其他<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E5%B7%A5%E5%85%B7.html&source=article&objectId=1764095">工具</a>同步（例如Google Drive客户端），则可以使用此功能。</p><h2 id="P-–progress"><a href="#P-–progress" class="headerlink" title="-P, –progress"></a>-P, –progress</h2><p>此标志使rclone更新终端中静态块中的统计信息，提供传输的实时概述。任何日志消息都将在静态块上方滚动。 日志消息会将静态块向下推到终端的底部。通常每500mS更新一次，但可以使用–stats标志覆盖此期间。这可以与–stats-one-line标志一起使用，以实现更简单的显示。注意：在Windows上，在修复此错误之前，所有非ASCII字符都将替换为。 当–progress正在使用时。</p><h2 id="q-–quiet"><a href="#q-–quiet" class="headerlink" title="-q, –quiet"></a>-q, –quiet</h2><p>通常，rclone输出统计信息和完成消息。 如果设置此标志，它将尽可能少地输出。</p><h2 id="–retries-int"><a href="#–retries-int" class="headerlink" title="–retries int"></a>–retries int</h2><p>如果失败多次失败，则重试整个同步（默认值为3）。一些遥控器可能不可靠，一些重试有助于获取由于错误而未被转移的文件。使用–retries 1禁用重试。</p><h2 id="–retries-sleep-time"><a href="#–retries-sleep-time" class="headerlink" title="–retries-sleep&#x3D;time"></a>–retries-sleep&#x3D;time</h2><p>这将设置–retries指定的每次重试之间的间隔默认值为0.使用0禁用。</p><h2 id="–size-only"><a href="#–size-only" class="headerlink" title="–size-only"></a>–size-only</h2><p>通常，rclone会查看文件的修改时间和大小，以查看它们是否相等。 如果设置此标志，则rclone将仅检查大小。这可以用于从Dropbox传输文件，这些文件已经被桌面同步客户端修改，该客户端没有像rclone那样设置修改时间的校验和。</p><h2 id="–stats-TIME"><a href="#–stats-TIME" class="headerlink" title="–stats&#x3D;TIME"></a>–stats&#x3D;TIME</h2><p>传输数据（sync, copy, copyto, move, moveto）的命令将定期打印数据传输统计信息以显示其进度。默认值为1m，使用0禁用。如果设置统计间隔，则所有命令都可以显示统计信息。这在运行其他命令，检查或安装时非常有用。</p><p>默认情况下，统计信息记录在INFO级别，这意味着它们不会以默认日志级别显示NOTICE。使用–stats-log-level NOTICE或-v使它们显示。有关日志级别的详细信息，请参阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/docs/%23logging&source=article&objectId=1764095">“日志记录”</a>部分。</p><p>请注意，在macOS上，你可以发送SIGINFO(通常是终端中的ctrl-T)以立即打印统计信息。</p><h2 id="–stats-file-name-length-integer"><a href="#–stats-file-name-length-integer" class="headerlink" title="–stats-file-name-length integer"></a>–stats-file-name-length integer</h2><p>默认情况下，-stats输出将截断超过40个字符的文件名和路径。 这相当于提供–stats-file-name-length 40.使用–stats-file-name-length 0禁用由stats打印的文件名截断。</p><h2 id="–stats-log-level-string"><a href="#–stats-log-level-string" class="headerlink" title="–stats-log-level string"></a>–stats-log-level string</h2><p>日志级别显示–stats输出。 这可以是DEBUG，INFO，NOTICE或ERROR。 默认值为INFO。 这意味着在默认的日志记录级别，即注意，统计信息将不会显示 - 如果您希望它们使用–stats-log-level NOTICE。 有关日志级别的详细信息，请参阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/docs/%23logging&source=article&objectId=1764095">“日志记录”</a>部分。</p><h2 id="–stats-one-line"><a href="#–stats-one-line" class="headerlink" title="–stats-one-line"></a>–stats-one-line</h2><p>指定此值后，rclone会将统计信息压缩为一行，仅显示最重要的统计信息。</p><h2 id="–stats-unit-bits-bytes"><a href="#–stats-unit-bits-bytes" class="headerlink" title="–stats-unit&#x3D;bits|bytes"></a>–stats-unit&#x3D;bits|bytes</h2><p>默认情况下，数据传输速率将以bytes&#x2F;s打印。此选项允许以bit&#x2F;s打印数据速率</p><h2 id="–suffix-SUFFIX"><a href="#–suffix-SUFFIX" class="headerlink" title="–suffix&#x3D;SUFFIX"></a>–suffix&#x3D;SUFFIX</h2><p>这仅适用于–backup-dir。 如果未设置，则–backup-dir将使用其原始名称移动文件。 如果已设置，则文件将添加SUFFIX。有关详细信息，请参阅–backup-dir。</p><h2 id="–syslog"><a href="#–syslog" class="headerlink" title="–syslog"></a>–syslog</h2><p>在功能强大的操作系统（不是Windows或Plan9）上，将所有日志输出发送到syslog。这对于在脚本或rclone挂载中运行rclone非常有用。</p><h2 id="–syslog-facility-string"><a href="#–syslog-facility-string" class="headerlink" title="–syslog-facility string"></a>–syslog-facility string</h2><p>如果使用–syslog，则设置syslog工具（例如KERN，USER）。 请参阅man syslog以获取可能的设施列表。 默认设施是DAEMON。</p><h2 id="–tpslimit-float"><a href="#–tpslimit-float" class="headerlink" title="–tpslimit float"></a>–tpslimit float</h2><p>每秒限制HTTP事务。 默认值为0，用于表示每秒无限制的事务数。例如，要将rclone限制为每秒10个HTTP事务使用–tpslimit 10，或者每2秒限制1个事务使用–tpslimit 0.5。当rclone每秒的事务数导致<a href="https://cloud.tencent.com/product/cos?from_column=20065&from=20065">云存储</a>提供程序出现问题时（例如，禁止您或限制速率），请使用此选项。这对于rclone mount来控制使用它的应用程序的行为非常有用。另见–tpslimit-burst。</p><h2 id="–tpslimit-burst-int"><a href="#–tpslimit-burst-int" class="headerlink" title="–tpslimit-burst int"></a>–tpslimit-burst int</h2><p>–tpslimit的最大交易次数。 （默认1） 通常–tpslimit将完成指定的每秒事务数。 但是，如果你提供–tps-burst，那么rclone可以在空闲时保存一些事务，从而提供一个高达所提供参数的突发。例如，如果你提供–tpslimit-burst 10那么如果rclone已经空闲超过10 *  -tpslimit那么它可以在它们再次受限之前非常快地完成10个事务。 这可用于提高–tpslimit的性能，而不会更改每秒的长期平均事务数。</p><h2 id="–track-renames"><a href="#–track-renames" class="headerlink" title="–track-renames"></a>–track-renames</h2><p>默认情况下，rclone不会跟踪重命名的文件，因此如果您在本地重命名文件然后将其同步到远程文件，rclone将删除远程文件上的旧文件并上传新副本。</p><p>如果您使用些标志，并且远程支持服务器端副本或服务器端移动，并且源和目标具有兼容的哈希，则这将在同步操作期间跟踪重命名并执行服务器端重命名。文件将按大小和哈希匹配，如果两者都不匹配，则将考虑重命名。</p><p>如果目标不支持服务器端复制或移动，则rclone将回退到默认行为并将错误级别消息记录到控制台。注意：–track-renames不支持加密。</p><h2 id="–delete-before-during-after"><a href="#–delete-before-during-after" class="headerlink" title="–delete-(before, during, after)"></a>–delete-(before, during, after)</h2><p>此选项允许您指定在同步文件夹时删除目标上的文件时间。在开始传输任何新文件或更新文件之前，指定值–delete-before将删除目标上存在的所有文件，但不删除源文件。这使用两次通过文件系统，一次用于删除，一次用于复制。</p><p>指定–delete-during将在检查和上载文件时删除文件。这是最快的选项，使用的内存最少。</p><p>指定–delete-after（默认值）将延迟删除文件，直到成功传输所有新的&#x2F;更新的文件。要删除的文件将在复制传递中收集，然后在复制传递成功完成后删除。要删除的文件保存在内存中，因此此模式可能会占用更多内存。这是最安全的模式，因为如果之后没有错误，它只会删除文件。如果在删除开始之前出现错误，那么由于存在IO错误，您将收不到删除文件的消息。</p><h2 id="–fast-list"><a href="#–fast-list" class="headerlink" title="–fast-list"></a>–fast-list</h2><p>任何涉及目录列表的事件（例如sync, copy, ls ）时，rclone通常会列出一个目录并在使用更多目录列表处理任何子目录之前对其进行处理。这可以并行化，前且使用最少的内存可以非常快速地工作。</p><p>但是，某些云存储可以在一个（或少量）事务中列出目录下的所有文件。它些往往是基于bucket的云存储（例如S3, B2, GCS, Swift, Hubic）。</p><p>如果使用–fast-list标志，则rclone将使用些方法列出目录。这将对列表产生以下影响：</p><ul><li>它将使用更少的交易</li><li>它将使用更多内存，rclone必须将整个列表加载到内存中</li><li>它可能更快，因为它使用更少的事务</li><li>它可能会更慢，因为它无法并行化</li><li>rclone应始终使用和不使用–fast-list提供相同的结果</li></ul><p>如果您为交易付费并且可以将整个同步列表放入内存中，则建议使用–fast-list。如果你有一个非常大的同步，那么不要使用–fast-list否则你将耗尽内存。如果你在不支持的的云存储上使用–fast-list，那么rclone将忽略它。</p><h2 id="–timeout-TIME"><a href="#–timeout-TIME" class="headerlink" title="–timeout&#x3D;TIME"></a>–timeout&#x3D;TIME</h2><p>此参数将设置IO空闲超过。如果传输已经开始但是在这么长时间内变为空闲，则认为它已断开并断开连接。默认为5分钟，设置0为禁用。</p><h2 id="–transfers-N"><a href="#–transfers-N" class="headerlink" title="–transfers&#x3D;N"></a>–transfers&#x3D;N</h2><p>并行运行的文件传输数。如果云存储提供大量超时，或者如果你有足够的带宽和快速的云存储，那么将它设置为较小的数字有时会很有用。默认设置是并行运行4个文件传输。</p><h2 id="u-–update"><a href="#u-–update" class="headerlink" title="-u, –update"></a>-u, –update</h2><p>该参数会强制rclone跳过目标上存在的任何文件，并且修改时间比源文件更新。如果现有目标文件的修改时间与源文件的修改时间相等，则在大小不同时将更新。不支持MOD时间的云存储上，检查的时间将是上传的时间。这意味着如果上传到其中一个云存储，rclone将跳过目标上存在的任何文件，并且上传的时间比源文件的修改时间更新。当转移到不直接支持MOD时间的云存储时，这很有用，因为它比–size-only检查更准确，比使用–checksum更快。</p><h2 id="–use-server-modtime"><a href="#–use-server-modtime" class="headerlink" title="–use-server-modtime"></a>–use-server-modtime</h2><p>一些云存储是不保留文件修改时间的（例如：Swift, S3）。在此类的云存储上，rclone将原始的modtime存储为对象的附加元数据。默认情况下，当操作modtime时，它将进行API调用以检索元数据。 使用此参数，可以禁用额外的API调有用，而是依赖服务器的修改时间。通常情况下，本地同步远程数据，只要知道本地文件比服务器文件的时间更新就足够了，因此它可以加快进程并减少所需的API调用次数。</p><h2 id="v-w-–verbose"><a href="#v-w-–verbose" class="headerlink" title="-v, -w, –verbose"></a>-v, -w, –verbose</h2><p>使用参数-v，则rclone会返回每个传输文件的少量重要事件；</p><p>使用参数-vv，则rclone会返回每个传输文件执行每一步的详细的信息。</p><h2 id="V-–VERSION"><a href="#V-–VERSION" class="headerlink" title="-V, –VERSION"></a>-V, –VERSION</h2><p>显示rclone版本信息</p><h1 id="语法及示例"><a href="#语法及示例" class="headerlink" title="语法及示例"></a>语法及示例</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 本地到网盘</span><br>rclone [功能选项] <span class="hljs-variable">&lt;本地路径&gt;</span> <span class="hljs-variable">&lt;配置名称:路径&gt;</span> [参数] [参数]<br><span class="hljs-comment"># 网盘到本地</span><br>rclone [功能选项] <span class="hljs-variable">&lt;配置名称:路径&gt;</span> <span class="hljs-variable">&lt;本地路径&gt;</span> [参数] [参数]<br><span class="hljs-comment"># 网盘到网盘</span><br>rclone [功能选项] <span class="hljs-variable">&lt;配置名称:路径&gt;</span> <span class="hljs-variable">&lt;配置名称:路径&gt;</span> [参数] [参数]<br> <br><span class="hljs-comment"># [参数]为可选项</span><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">同步本地/data/file的文件夹内容到tencent-cos存储下的/beifen文件夹中,并且排除/root/excludes.txt中指定的文件内容</span><br>rclone sync /data/file tencent-cos:/beifen --exclude-from &#x27;/root/excludes.txt&#x27;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">两个网盘文件同步</span><br>rclone copy 配置网盘名称1:网盘路径 配置网盘名称2:网盘路径<br></code></pre></td></tr></table></figure><h1 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1764095">https://cloud.tencent.com/developer/article/1764095</a></li><li><a href="https://blog.csdn.net/qq_22903531/article/details/131434705">https://blog.csdn.net/qq_22903531/article/details/131434705</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ventoy打造最强U盘启动盘,安装istoreOS系统</title>
    <link href="/2024/03/24/Ventoy%E6%89%93%E9%80%A0%E6%9C%80%E5%BC%BAU%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
    <url>/2024/03/24/Ventoy%E6%89%93%E9%80%A0%E6%9C%80%E5%BC%BAU%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Ventoy是一个制作可启动山盘的工具,官可以将你喜欢的PE全部整合到一起,例如优启通\ FirePE\微PE,如果你的U盘容量够大,也可以将多个系统安装镜像统统塞进去,例如Win7.ISO \Win8.ISO \Wini0.lSO\ Win1l.ISO.</p><p>不仅如此,你还可以将Windows等系统装进U盘,随时随地就可以打开你的个人电脑.</p></blockquote><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>32g以上u盘</li></ul><h1 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h1><p><a href="https://www.ventoy.net/cn/download.html">官网</a>下载ventoy,解压,打开安装程序.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215206822.png" alt="image-20240324215206822"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215227266.png"></p><p>选择你的u盘</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215541049.png" alt="image-20240324215541049"></p><p>分区类型选GPT</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215609107.png" alt="image-20240324215609107"></p><p>点击安装,提示格式化硬盘.</p><p>完成后如果u盘名称变为<code>Ventoy</code>,表示安装成功.</p><h1 id="iStoreOS系统安装"><a href="#iStoreOS系统安装" class="headerlink" title="iStoreOS系统安装"></a>iStoreOS系统安装</h1><p><a href="https://fw.koolcenter.com/iStoreOS/x86_64_efi/">下载最新iStoreOS固件</a>,下载完固件后需要先解压，再放到Ventoy启动盘的根目录下U盘才能识别到。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215915851.png" alt="image-20240324215915851"></p><p>把u盘插入要刷系统的主机,开机进入BIOS界面,</p><blockquote><p>注意:如果找不到U盘的原因可能是U盘不兼容，需要换一个兼容的U盘</p></blockquote><p>进入Ventoy界面,选择IstoreOS固件,按回车.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220209542.png" alt="image-20240324220209542"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220254495.png" alt="image-20240324220254495"></p><p>然后输入 <code>quickstart</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220405683.png" alt="image-20240324220405683"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220436139.png" alt="image-20240324220436139"></p><p>完成后拔掉u盘,重启系统即可.</p><p>重启完成进入后台 管理页面:默认IP是。192.168.100.1 默认密码是。password</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220659443.png" alt="image-20240324220659443"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220736193.png" alt="image-20240324220736193"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220815873.png" alt="image-20240324220815873"></p><p> 现在我们的Ventov启动盘就有两个(StoreOS固件（新版和测试版）,我们可以两个固件随时切换使用</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>本文来源:  <a href="https://www.bilibili.com/list/watchlater?oid=572960814&bvid=BV1qz4y1n7pu&spm_id_from=333.788.top_right_bar_window_view_later.content.click">https://www.bilibili.com/list/watchlater?oid=572960814&amp;bvid=BV1qz4y1n7pu&amp;spm_id_from=333.788.top_right_bar_window_view_later.content.click</a></p><p>Ventoy下载：<a href="https://www.ventoy.net/cn/download.html">https://www.ventoy.net/cn/download.html</a> </p><p>iStoreOS最新版固件下载：<a href="https://fw.koolcenter.com/iStoreOS/x86_64_efi/">https://fw.koolcenter.com/iStoreOS/x86_64_efi/</a> </p><p>iStoreOS测试版固件下载：<a href="https://fw.koolcenter.com/iStoreOS/alpha/x86/x86_64_efi/">https://fw.koolcenter.com/iStoreOS/alpha/x86/x86_64_efi/</a> </p><p>酷友社的QQ频道： <a href="https://pd.qq.com/s/448pvg3jq">https://pd.qq.com/s/448pvg3jq</a> </p><p>iStoreOS官网： <a href="https://www.istoreos.com/">https://www.istoreos.com/</a> </p><p>易有云官网： <a href="https://www.linkease.com/">https://www.linkease.com/</a> </p><p>关于我们： <a href="https://www.istoreos.com/about/">https://www.istoreos.com/about/</a></p>]]></content>
    
    
    <categories>
      
      <category>折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ventoy</tag>
      
      <tag>u盘</tag>
      
      <tag>istoreOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Alist搭建本地影音系统挂载阿里云盘为本地</title>
    <link href="/2024/03/22/Alist/"/>
    <url>/2024/03/22/Alist/</url>
    
    <content type="html"><![CDATA[<p><a href="https://alist.nn.ci/zh/guide/install/script.html">官方文档</a></p><h1 id="一键脚本安装"><a href="#一键脚本安装" class="headerlink" title="一键脚本安装"></a>一键脚本安装</h1><p>默认安装在 <code>/opt/alist</code> 中。 自定义安装路径，将安装路径作为第二个参数添加，必须是绝对路径（如果路径以 alist 结尾，则直接安装到给定路径，否则会安装在给定路径 alist 目录下），如 安装到 <code>/root</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Install</span><br>curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s install /root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">update</span><br>curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s update /root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Uninstall</span><br>curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s uninstall /root<br></code></pre></td></tr></table></figure><h1 id="安装完毕提示"><a href="#安装完毕提示" class="headerlink" title="安装完毕提示"></a>安装完毕提示</h1><p>用户名默认<code>admin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">Alist 安装成功！<br><br>访问地址：http://YOUR_IP:5244/<br><br>配置文件路径：/root/alist/data/config.json<br>---------如何获取密码？--------<br>先cd到alist所在目录:<br>cd /root/alist<br>随机设置新密码:<br>./alist admin random<br>或者手动设置新密码:<br>./alist admin set NEW_PASSWORD<br>----------------------------<br>启动服务中<br><br>查看状态：systemctl status alist<br>启动服务：systemctl start alist<br>重启服务：systemctl restart alist<br>停止服务：systemctl stop alist<br><br>温馨提示：如果端口无法正常访问，请检查 服务器安全组、本机防火墙、Alist状态<br></code></pre></td></tr></table></figure><h1 id="配置阿里云盘"><a href="#配置阿里云盘" class="headerlink" title="配置阿里云盘"></a>配置阿里云盘</h1><p>首次进入<a href="http://your_ip:5244/">网站</a>会有如下提示,需要点下面的manage进入配置:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240322101908638.png" alt="image-20240322101908638"></p><p>参考:</p><p><a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive">官方文档</a></p><p><a href="https://www.zhihu.com/question/567047941">知乎</a></p><p>点击左侧的存储，点击添加。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-66c2f637b8e505be57eab2e6c4ac19aa_1440w.png" alt="img"></p><p><strong>驱动一定要选择阿里云盘Open</strong>，不要选“阿里云盘”，千万别搞错了。<strong>挂载路径可以自己填写喜欢的名称，前面的斜杠要加上</strong>。我这里就写阿里云盘备份盘。</p><p><strong>序号是给我们挂载的云盘排序用的，这是第一个，就从0开始</strong>。<strong>Web代理关闭，WebDAV策略选择<a href="https://www.zhihu.com/search?q=302%E9%87%8D%E5%AE%9A%E5%90%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">302重定向</a>。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-74ec08721c218bc490de72b396dc65da_1440w.png" alt="img"></p><p>往下滚动，其他选项均保持默认不变，<strong>将云盘类型设置为资源库</strong>，然后<strong>填入自己阿里云盘的刷新令牌(重点！)，如何获得刷新令牌呢？需要从电脑浏览器访问下面这个网站：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://alist.nn.ci/tool/aliyundrive/request<br></code></pre></td></tr></table></figure><p>打开后，先点击Scan QrCode，然后用手机版阿里云盘app扫码，授权成功后，再点击页面最下方的I have scan。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-15420860a19c65ccb06f5abe6fcead71_1440w.webp" alt="img"></p><p>接下来就会获得阿里云盘的<a href="https://www.zhihu.com/search?q=refresh_token&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">refresh_token</a>，全选并复制。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-eac0db32e33889e69eb5ae2cfef672d1_1440w.webp" alt="img"></p><p>填入alist的“刷新令牌”框中即可。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240322145721358.png" alt="image-20240322145721358"></p><p>页面继续往下滚动，确认Oauth令牌链接为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">https://api.xhofe.top/alist/ali_open/token<br>或者<br>https://api.nn.ci/alist/ali_open/token<br></code></pre></td></tr></table></figure><p>移除方式可以选择删除或者回收站，看自己需求。其他选项保持默认，设置完毕后点击添加。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-5e82757bfe67087779345815531a0c0d_1440w.webp" alt="img"></p><p>我们可以按照以上方式，同样将阿里云盘资源库也挂载一次，除了将挂载路径和云盘类型更换为资源库及设置一个新的序号外，其他内容全部保持不变，包括刷新令牌也不变。两个盘都挂载成功后，会在alist的存储页面显示出来，并且状态为WORK：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-28ac4b6d80720ef96f1f49aa81beef06_1440w.png" alt="img"></p><p>点击alist左下角的“主页”，回到主页后，可以看到我们的阿里云盘已经能正常显示了：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-35899a6058e9c9efe4cf8f426972f536_1440w.webp" alt="img"></p><p>作者：袋鼠叔叔<br>链接：<a href="https://www.zhihu.com/question/567047941/answer/3206878540">https://www.zhihu.com/question/567047941/answer/3206878540</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h1 id="配置夸克网盘"><a href="#配置夸克网盘" class="headerlink" title="配置夸克网盘"></a>配置夸克网盘</h1><p>夸克网盘也是阿里旗下的产品，主要优势在于88VIP免费赠送会员，所以这两年也非常火爆，用户数量已经不逊于阿里云盘，甚至有赶超百度网盘的势头。夸克网盘的alist挂载方法和前面的阿里云盘有一些区别，主要是获取Cookie的方式不一样，下面我们开始。</p><p><strong>仍然进入Alist管理页面，添加一个新的驱动，驱动选择“夸克”。挂载路径和序号根据自己需求填写，缓存过期时间仍然填0。Webdav策略选择“<a href="https://www.zhihu.com/search?q=%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">本地代理</a>”。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-630b18f25dada42db400cecb9ffa16cb_1440w.webp" alt="img"></p><p><strong>继续往下滚动，我们需要获取Cookie。</strong>打开电脑浏览器并登录夸克网盘账号(用网页版登录)，然后按键盘上的F12，进入开发者模式。</p><p>点击上方的Network(网络)选项卡，在左侧的Name(名称)中找到“sort?<a href="https://www.zhihu.com/search?q=pr=u&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">pr&#x3D;u</a>”开头的条目并选中(如果该条目没刷新出来，需要稍等几秒钟)，然后在右侧的Request Headers中，找到<a href="https://www.zhihu.com/search?q=Cookie%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">Cookie值</a>并复制：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-19dbf01b385ef70908ab3cab7facfd2f_1440w.png" alt="img"></p><p>将复制的Cookie值填入alist设置页面，其他选项全部保持默认，然后点击添加即可。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-5527d6db8f3ae448658c0c4f807e9397_1440w.webp" alt="img"></p><p>夸克网盘挂载成功。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-8faecfea8c376e69d4a9297197a89aa3_1440w.webp" alt="img"></p><h1 id="配置百度网盘"><a href="#配置百度网盘" class="headerlink" title="配置百度网盘"></a><strong>配置百度网盘</strong></h1><p><strong>目前使用人数最多，市场最大的网盘。VIP会员价格不便宜，速度快，资源多，但是对非会员限速很厉害。使用Alist挂载的情况下，如果是VIP会员，请优先选择官方API接口。非会员可以尝试使用第三方接口，但有时候会不太稳定。</strong></p><p>仍然打开Alist管理页面—存储—添加。驱动选择百度网盘，挂载路径和序号按需填写。特别注意，一定要打开<a href="https://www.zhihu.com/search?q=web%E4%BB%A3%E7%90%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">web代理</a>，并且将WebDAV策略设置为302重定向，才能正常在线播放视频。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-901d6bda7ccf4a9da5d18a4e6c67f27d_1440w.webp" alt="img"></p><p>继续往下滚动，这里只有一个地方需要我们自己填写，就是刷新令牌。那么如何获取呢？首先用电脑浏览器登录<a href="https://pan.baidu.com/login?redirecturl=https://pan.baidu.com/disk/main%23/index">网页版百度网盘</a>，然后访问以下地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://alist.nn.ci/zh/guide/drivers/baidu.html<br></code></pre></td></tr></table></figure><p>在页面中找到刷新令牌链接，并点击：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-b0cda62dffed703c1ad7b5d712e30938_1440w.png" alt="img"></p><p>点击后就可以看到refresh_token，这个就是刷新令牌。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-03f17f9504a2ac219d81d9f8fd663d38_1440w.webp" alt="img"></p><p>将其复制粘贴到alist的页面中即可：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-c3bda8bbb79f8e8a8e30e1b5c7a2d050_1440w.webp" alt="img"></p><p>下面的自定义UA，上传线程及上传api全部保持默认，点击添加完成，百度云盘成功挂载至Alist。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-ebb12034a958e4a93cc121fe4791a784_1440w.webp" alt="img"></p><p><strong>我以上仅展示了最常用的百度，夸克和阿里云盘作为实操案例。但实际上Alist作为目前市面上最强大的网盘挂载工具，支持几乎所有的网盘类型及厂商，如果有其他网盘需求，可以自己搜索一下方法，基本大同小异。Alist官网也为大家贴心的准备了每一种网盘的说明文档供参考。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-0e56b6405dd69ad09a774dca4bb70384_1440w.webp" alt="img"></p><h1 id="大招-使用RaiDrive将Alist中的云盘挂载到电脑"><a href="#大招-使用RaiDrive将Alist中的云盘挂载到电脑" class="headerlink" title="大招:使用RaiDrive将Alist中的云盘挂载到电脑"></a>大招:使用RaiDrive将Alist中的云盘挂载到电脑</h1><p>现在，我们已经可以通过浏览器的alist管理页面，从而访问所有已挂载的云盘，但这还不是结束。<strong>我们的最终目的是将这些网盘全部挂载到电脑，像使用本地硬盘那样使用网盘</strong>。接下来要用到的就是RaiDrive这款强大的<a href="https://www.zhihu.com/search?q=%E6%9C%AC%E5%9C%B0%E7%A3%81%E7%9B%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">本地磁盘</a>映射软件。</p><blockquote><p><strong>RaiDrive目前只支持Windows平台，但在苹果macOS平台上，你可以考虑使用Folx开发商出品的Cloud Mounter作为替代。Cloud Mounter是一款类似于RaiDrive的工具，可以帮助你将网盘挂载映射成电脑本地硬盘。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240325120020339.png" alt="image-20240325120020339"></p></blockquote><p>百度搜索RaiDrive官网，点击download并选择合适的版本，32位系统选择X86，64位系统选择X64，下载后安装在电脑中：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-552220a75d9592c72fea25b6578a8d65_1440w.webp" alt="img"></p><p>接下来点击设置页面最上方的添加，新建一个<a href="https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">虚拟服务器</a>，服务类型为NAS—WebDAV。<a href="https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E9%A9%B1%E5%8A%A8%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">虚拟驱动器</a>选择一个自己喜欢且尚未被占用的，盘符随意填写。</p><p>最重要的是把地址后面的√去掉，使用http方式连接，然后在http:&#x2F;&#x2F;后输入NAS的ip地址+Alist端口号。最后输入自己的Alist登录账户和密码，确认连接即可。我把所有要点击或填写的位置都明确标注在下图，方便大家跟着设置：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-f501520896c8588272276be189065127_1440w.webp" alt="img"></p><p>连接成功后，在“我的电脑”中就可以看到由RaiDrive虚拟的本地硬盘盘符了，打开以后和我们日常使用本地硬盘并无二致：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-7ae64622a9479a1a7af1e8a6e6ffba27_1440w.webp" alt="img"></p><p>经过测试，只要跟着这个教程一步一步走，我们既可以使用浏览器正常下载，上传及播放云盘中的文件(视频)，也可以通过RaiDrive像操作本地硬盘那样使用云盘，在几个云盘之间来回复制粘贴也没有问题，完全能够跑满宽带的上传和下载速度：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-9519bd92bbb78320f5d1ca653ce673c4_1440w.webp" alt="img"></p><p>夸克网盘复制到阿里云盘稳定在3M&#x2F;S，跑满上行</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-8a33347680d52aa5572f71c280e2ca8d_1440w.png" alt="img"></p><p>百度网盘复制到电脑桌面稳定在20M&#x2F;S以上，跑满200M宽带下行</p><p>当然，如果想要在手机上挂载alist中的网盘到本地，也没有任何问题，使用支持WebDAV协议的App即可，如ES<a href="https://www.zhihu.com/search?q=%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">文件浏览器</a>，SolidExplorer等，设置方法和RaiDrive是完全一样的。比如我这里以Solid Explorer为例：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-87f2e168e6765f5e7ab816d0bb88d5ff_1440w.webp" alt="img"></p><p>如果想要在手机或TV端集中观看网盘中的视频，只要使用支持WebDAV的播放器即可，如Kodi，Emby，Jellyfin等，实测无论是播放还是拖拽，都非常丝滑:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-0bc8f0abbcd5f7d7aaa53abec12f55fc_1440w.webp" alt="img"></p><p>作者：袋鼠叔叔<br>链接：<a href="https://www.zhihu.com/question/567047941/answer/3206878540">https://www.zhihu.com/question/567047941/answer/3206878540</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>alist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合分页工具类</title>
    <link href="/2024/03/14/%E9%9B%86%E5%90%88%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/03/14/%E9%9B%86%E5%90%88%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.demo;<br><br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 集合分页工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListPageUtil</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; data;<br><br>    <span class="hljs-comment">/** 上一页 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> lastPage;<br><br>    <span class="hljs-comment">/** 当前页 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> currentPage;<br><br>    <span class="hljs-comment">/** 下一页 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nextPage;<br><span class="hljs-comment">//</span><br>    <span class="hljs-comment">/** 每页条数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<br><br>    <span class="hljs-comment">/** 总页数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalPage;<br><br>    <span class="hljs-comment">/** 总数据条数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalCount;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListPageUtil</span><span class="hljs-params">(List&lt;T&gt; data,<span class="hljs-type">int</span> currentPage,<span class="hljs-type">int</span> pageSize)</span> &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;data must be not empty!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.pageSize = pageSize;<br>        <span class="hljs-built_in">this</span>.currentPage = currentPage;<br>        <span class="hljs-built_in">this</span>.totalCount = data.size();<br>        <span class="hljs-built_in">this</span>.totalPage = (totalCount + pageSize - <span class="hljs-number">1</span>) / pageSize;<br>        <span class="hljs-built_in">this</span>.lastPage = currentPage-<span class="hljs-number">1</span>&gt;<span class="hljs-number">1</span>? currentPage-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">this</span>.nextPage = currentPage&gt;=totalPage? totalPage: currentPage + <span class="hljs-number">1</span>;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPageSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pageSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">fromIndex</span> <span class="hljs-operator">=</span> (currentPage - <span class="hljs-number">1</span>) * pageSize;<br>        <span class="hljs-keyword">if</span> (fromIndex &gt;= data.size()) &#123;<br>            <span class="hljs-keyword">return</span> Collections.emptyList();<span class="hljs-comment">//空数组</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(fromIndex&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> Collections.emptyList();<span class="hljs-comment">//空数组</span><br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">toIndex</span> <span class="hljs-operator">=</span> currentPage * pageSize;<br>        <span class="hljs-keyword">if</span> (toIndex &gt;= data.size()) &#123;<br>            toIndex = data.size();<br>        &#125;<br>        <span class="hljs-keyword">return</span> data.subList(fromIndex, toIndex);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLastPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCurrentPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNextPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nextPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalCount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.demo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>            strings.add(<span class="hljs-string">&quot;str_&quot;</span>+i);<br>        &#125;<br>        ListPageUtil&lt;String&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListPageUtil</span>&lt;&gt;(strings, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>        System.err.println(<span class="hljs-string">&quot;分页数据：&quot;</span>+pageInfo.getData());<br>        System.err.println(<span class="hljs-string">&quot;总页数：&quot;</span>+pageInfo.getTotalPage());<br>        System.err.println(<span class="hljs-string">&quot;总条数：&quot;</span>+pageInfo.getTotalCount());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举</title>
    <link href="/2024/03/14/%E6%9E%9A%E4%B8%BE/"/>
    <url>/2024/03/14/%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="单值enum"><a href="#单值enum" class="headerlink" title="单值enum"></a>单值enum</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserRole</span> &#123;<br>        ROLE_ROOT_ADMIN,  <span class="hljs-comment">// 系统管理员</span><br>        ROLE_ORDER_ADMIN, <span class="hljs-comment">// 订单管理员</span><br>        ROLE_NORMAL       <span class="hljs-comment">// 普通用户</span><br>    &#125;<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">role1</span> <span class="hljs-operator">=</span> UserRole.ROLE_ROOT_ADMIN;<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">role2</span> <span class="hljs-operator">=</span> UserRole.ROLE_ORDER_ADMIN;<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">role3</span> <span class="hljs-operator">=</span> UserRole.ROLE_NORMAL;<br></code></pre></td></tr></table></figure><h2 id="values-方法：返回所有枚举常量的数组集合"><a href="#values-方法：返回所有枚举常量的数组集合" class="headerlink" title="values()方法：返回所有枚举常量的数组集合"></a>values()方法：返回所有枚举常量的数组集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> ( UserRole role : UserRole.values() ) &#123;<br>     System.out.println(role);<br>&#125;<br><span class="hljs-comment">// 打印：</span><br><span class="hljs-comment">// ROLE_ROOT_ADMIN</span><br><span class="hljs-comment">// ROLE_ORDER_ADMIN</span><br><span class="hljs-comment">// ROLE_NORMAL</span><br></code></pre></td></tr></table></figure><h2 id="ordinal-方法：返回枚举常量的序数，注意从0开始"><a href="#ordinal-方法：返回枚举常量的序数，注意从0开始" class="headerlink" title="ordinal()方法：返回枚举常量的序数，注意从0开始"></a>ordinal()方法：返回枚举常量的序数，注意从0开始</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( role1.ordinal() ); <span class="hljs-comment">// 打印0</span><br>System.out.println( role2.ordinal() ); <span class="hljs-comment">// 打印1</span><br>System.out.println( role3.ordinal() ); <span class="hljs-comment">// 打印2</span><br></code></pre></td></tr></table></figure><h2 id="compareTo-方法：枚举常量间的比较"><a href="#compareTo-方法：枚举常量间的比较" class="headerlink" title="compareTo()方法：枚举常量间的比较"></a>compareTo()方法：枚举常量间的比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( role1.compareTo(role2) ); <span class="hljs-comment">//打印-1</span><br>System.out.println( role2.compareTo(role3) ); <span class="hljs-comment">//打印-1</span><br>System.out.println( role1.compareTo(role3) ); <span class="hljs-comment">//打印-2</span><br></code></pre></td></tr></table></figure><h2 id="name-方法：获得枚举常量的名称"><a href="#name-方法：获得枚举常量的名称" class="headerlink" title="name()方法：获得枚举常量的名称"></a>name()方法：获得枚举常量的名称</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( role1.name() ); <span class="hljs-comment">// 打印ROLE_ROOT_ADMIN</span><br>System.out.println( role2.name() ); <span class="hljs-comment">// 打印ROLE_ORDER_ADMIN</span><br>System.out.println( role3.name() ); <span class="hljs-comment">// 打印ROLE_NORMAL</span><br></code></pre></td></tr></table></figure><h2 id="valueOf-方法：返回指定名称的枚举常量"><a href="#valueOf-方法：返回指定名称的枚举常量" class="headerlink" title="valueOf()方法：返回指定名称的枚举常量"></a>valueOf()方法：返回指定名称的枚举常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserRole</span> <span class="hljs-variable">roleRootAdmin</span> <span class="hljs-operator">=</span> UserRole.valueOf(<span class="hljs-string">&quot;ROLE_ROOT_ADMIN&quot;</span>);<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">roleOrderAdmin</span> <span class="hljs-operator">=</span> UserRole.valueOf(<span class="hljs-string">&quot;ROLE_ORDER_ADMIN&quot;</span>);<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">roleNormal</span> <span class="hljs-operator">=</span> UserRole.valueOf(<span class="hljs-string">&quot;ROLE_NORMAL&quot;</span>);<br>System.out.println(roleRootAdmin);<span class="hljs-comment">//ROLE_ROOT_ADMIN</span><br>System.out.println(roleOrderAdmin);<span class="hljs-comment">//ROLE_ORDER_ADMIN</span><br>System.out.println(roleNormal);<span class="hljs-comment">//ROLE_NORMAL</span><br></code></pre></td></tr></table></figure><h2 id="用于switch语句中，而且意义更加明确"><a href="#用于switch语句中，而且意义更加明确" class="headerlink" title="用于switch语句中，而且意义更加明确"></a>用于switch语句中，而且意义更加明确</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserRole</span> <span class="hljs-variable">userRole</span> <span class="hljs-operator">=</span> UserRole.ROLE_ORDER_ADMIN;<br><span class="hljs-keyword">switch</span> (userRole) &#123;<br>    <span class="hljs-keyword">case</span> ROLE_ROOT_ADMIN:  <span class="hljs-comment">// 比如此处的意义就非常清晰了，比1，2，3这种数字好！</span><br>        System.out.println(<span class="hljs-string">&quot;这是系统管理员角色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ROLE_ORDER_ADMIN:<br>        System.out.println(<span class="hljs-string">&quot;这是订单管理员角色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ROLE_NORMAL:<br>        System.out.println(<span class="hljs-string">&quot;这是普通用户角色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多值enum"><a href="#多值enum" class="headerlink" title="多值enum"></a>多值enum</h1><blockquote><p>在enum枚举类中完全可以像在普通Class里一样声明属性、构造函数以及成员方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">publicenum UserRole &#123;<br><br>    ROLE_ROOT_ADMIN( <span class="hljs-string">&quot;系统管理员&quot;</span>, <span class="hljs-number">000000</span> ),<br>    ROLE_ORDER_ADMIN( <span class="hljs-string">&quot;订单管理员&quot;</span>, <span class="hljs-number">100000</span> ),<br>    ROLE_NORMAL( <span class="hljs-string">&quot;普通用户&quot;</span>, <span class="hljs-number">200000</span> ),<br>    ;<br><br>    <span class="hljs-comment">// 以下为自定义属性</span><br>    privatefinal String roleName;  <span class="hljs-comment">//角色名称</span><br>    privatefinal Integer roleCode; <span class="hljs-comment">//角色编码</span><br><br>    <span class="hljs-comment">// 以下为自定义构造函数</span><br>    UserRole( String roleName, Integer roleCode ) &#123;<br>        <span class="hljs-built_in">this</span>.roleName = roleName;<br>        <span class="hljs-built_in">this</span>.roleCode = roleCode;<br>    &#125;<br><br>    <span class="hljs-comment">// 以下为自定义方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRoleName</span><span class="hljs-params">()</span> &#123;<br>        returnthis.roleName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getRoleCode</span><span class="hljs-params">()</span> &#123;<br>        returnthis.roleCode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getRoleCodeByRoleName</span><span class="hljs-params">( String roleName )</span> &#123;<br>        <span class="hljs-keyword">for</span>( UserRole enums : UserRole.values() ) &#123;<br>            <span class="hljs-keyword">if</span>( enums.getRoleName().equals( roleName ) ) &#123;<br>                <span class="hljs-keyword">return</span> enums.getRoleCode();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举-接口"><a href="#枚举-接口" class="headerlink" title="枚举 + 接口"></a>枚举 + 接口</h1><p>先定义一个公用的接口RoleOperation，表示不同角色所能做的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RoleOperation</span> &#123;<br>    String <span class="hljs-title function_">op</span><span class="hljs-params">()</span>;  <span class="hljs-comment">// 表示某个角色可以做哪些op操作</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将不同角色的情况全部交由枚举类来做，定义一个枚举类RoleEnum，并让它去实现RoleOperation接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RoleEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RoleOperation</span> &#123;<br><br>    <span class="hljs-comment">// 系统管理员(有A操作权限)</span><br>    ROLE_ROOT_ADMIN &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">op</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;ROLE_ROOT_ADMIN:&quot;</span> + <span class="hljs-string">&quot; has AAA permission&quot;</span>;<br>        &#125;<br>    &#125;,<br><br>    <span class="hljs-comment">// 订单管理员(有B操作权限)</span><br>    ROLE_ORDER_ADMIN &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">op</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;ROLE_ORDER_ADMIN:&quot;</span> + <span class="hljs-string">&quot; has BBB permission&quot;</span>;<br>        &#125;<br>    &#125;,<br><br>    <span class="hljs-comment">// 普通用户(有C操作权限)</span><br>    ROLE_NORMAL &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">op</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;ROLE_NORMAL:&quot;</span> + <span class="hljs-string">&quot; has CCC permission&quot;</span>;<br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><p>这样，在调用处就变得异常简单了，一行代码就行了，根本不需要什么<code>if/else</code>：</p><p>而且这样一来，以后假如我想扩充条件，只需要去枚举类中<strong>加代码</strong>即可，而不用改任何老代码，非常符合<strong>开闭原则</strong>！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JudgeRole</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">judge</span><span class="hljs-params">( String roleName )</span> &#123;<br>        <span class="hljs-comment">// 一行代码搞定！之前的if/else灰飞烟灭</span><br>        <span class="hljs-keyword">return</span> RoleEnum.valueOf(roleName).op();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举与设计模式"><a href="#枚举与设计模式" class="headerlink" title="枚举与设计模式"></a>枚举与设计模式</h1><blockquote><p>枚举还能实现设计模式？是的！不仅能而且还能实现好几种！</p></blockquote><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-comment">// 构造函数私有化，避免外部创建实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//定义一个内部枚举</span><br>    publicenum SingletonEnum&#123;<br><br>        SEED;  <span class="hljs-comment">// 唯一一个枚举对象，我们称它为“种子选手”！</span><br><br>        <span class="hljs-keyword">private</span> Singleton singleton;<br><br>        SingletonEnum()&#123;<br>            singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>(); <span class="hljs-comment">//真正的对象创建隐蔽在此！</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Singleton <span class="hljs-title function_">getInstnce</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> singleton;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 故意外露的对象获取方法，也是外面获取实例的唯一入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonEnum.SEED.getInstnce(); <span class="hljs-comment">// 通过枚举的种子选手来完成</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>比如用枚举就可以写出一个基于策略模式的加减乘除计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>        ADDITION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x + y; <span class="hljs-comment">// 加法</span><br>            &#125;<br>        &#125;,<br><br>        SUBTRACTION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x - y; <span class="hljs-comment">// 减法</span><br>            &#125;<br>        &#125;,<br><br>        MULTIPLICATION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x * y; <span class="hljs-comment">// 乘法</span><br>            &#125;<br>        &#125;,<br>      <br>        DIVISION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x/y;  <span class="hljs-comment">// 除法</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">(Double x, Double y)</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println( Calculator.ADDITION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 6.0</span><br>        System.out.println( Calculator.SUBTRACTION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 2.0</span><br>        System.out.println( Calculator.MULTIPLICATION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 8.0</span><br>        System.out.println( Calculator.DIVISION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 2.0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="专门用于枚举的集合类"><a href="#专门用于枚举的集合类" class="headerlink" title="专门用于枚举的集合类"></a>专门用于枚举的集合类</h1><blockquote><p>对于枚举，有它专门的集合类：EnumSet和EnumMap</p></blockquote><h2 id="EnumSet-是专门为盛放枚举类型所设计的-Set-类型。"><a href="#EnumSet-是专门为盛放枚举类型所设计的-Set-类型。" class="headerlink" title="EnumSet 是专门为盛放枚举类型所设计的 Set 类型。"></a>EnumSet 是专门为盛放枚举类型所设计的 Set 类型。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserRole</span> &#123;<br><br>    ROLE_ROOT_ADMIN,  <span class="hljs-comment">// 系统管理员</span><br><br>    ROLE_ORDER_ADMIN, <span class="hljs-comment">// 订单管理员</span><br><br>    ROLE_NORMAL       <span class="hljs-comment">// 普通用户</span><br>&#125;<br></code></pre></td></tr></table></figure><p>比如系统里来了一批人，我们需要查看他是不是某个角色中的一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个管理员角色的专属集合</span><br>EnumSet&lt;UserRole&gt; userRolesForAdmin = EnumSet.of(<br>        UserRole.ROLE_ROOT_ADMIN,<br>        UserRole.ROLE_ORDER_ADMIN<br>    );<br><br><span class="hljs-comment">// 判断某个进来的用户是不是管理员</span><br>Boolean <span class="hljs-title function_">isAdmin</span><span class="hljs-params">( User user )</span> &#123;<br>    <span class="hljs-keyword">if</span>( userRolesForAdmin.contains( user.getUserRole()))&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="EnumMap-是用来专门盛放枚举类型为key的-Map-类型。"><a href="#EnumMap-是用来专门盛放枚举类型为key的-Map-类型。" class="headerlink" title="EnumMap 是用来专门盛放枚举类型为key的 Map 类型。"></a>EnumMap 是用来专门盛放枚举类型为key的 Map 类型。</h2><p>比如，系统里来了一批人，我们需要统计不同的角色到底有多少人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;UserRole,Integer&gt; userStatisticMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;&gt;(UserRole.class);<br><br><span class="hljs-keyword">for</span> ( User user : userList ) &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> userStatisticMap.get( user.getUserRole() );<br>    <span class="hljs-keyword">if</span>( <span class="hljs-literal">null</span> != num ) &#123;<br>        userStatisticMap.put( user.getUserRole(), num+<span class="hljs-number">1</span> );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        userStatisticMap.put( user.getUserRole(), <span class="hljs-number">1</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ps</title>
    <link href="/2024/03/13/PS/"/>
    <url>/2024/03/13/PS/</url>
    
    <content type="html"><![CDATA[<h1 id="1-常用操作快捷键"><a href="#1-常用操作快捷键" class="headerlink" title="1.常用操作快捷键"></a>1.常用操作快捷键</h1><ul><li>打开文件： <code>Ctrl+O</code></li><li>复制图层： <code>Ctrl +J</code></li><li>放大缩小画面：<code>Alt</code>+鼠标滚轮</li><li>移动画面：按住空格键 ,鼠标变成小手形状，拖动即可</li><li>取消选区： <code>Ctrl+D</code></li><li>保存文件：【文件】-【存储为】-选择路径 选择保存的文件类型</li><li>前进一步:<code>Shift+ Ctrl +Z</code></li><li>后退一步:<code>Alt + Ctrl +Z</code></li><li>画笔变大:<code>[</code></li><li>画笔变小:<code>]</code></li><li>图层重命名:（双击文字）</li><li>新建一份空白PSD文档：<code>Ctrl+N</code></li><li>创建新的图层:<code>Shift+Alt+Ctrl+N</code> 或点击右下角新建图层的按钮(折纸形状图标)</li></ul><h1 id="2-修补工具"><a href="#2-修补工具" class="headerlink" title="2.修补工具"></a>2.修补工具</h1><ul><li><p>污点修复画笔工具  <code>shift J</code></p><p>选择修补工具，点击鼠标右键，选择【<strong>污点修复画笔工具</strong>】,将鼠标移动到唇印位置，按住鼠标左键进行涂抹（可以根据需要自动调整画笔大小）.画笔更小调整更精细.</p></li><li><p>修补工具  <code>shift J</code></p><p>选择修补工具，点击鼠标右键，选择【<strong>修补工具</strong>】,鼠标左键圈选区域并移动到其他干净的位置,放开鼠标,原圈选区域被修补干净.</p></li><li><p>修复画笔工具  <code>shift J</code></p><p>1.取样：按住 At 键，光标变为靶心,选取干净的皮肤处，单击一下左键</p><p>2.涂抹：左键单击或涂抹污点处</p></li><li><p>内容识别  <code>shift F5</code></p><p>去除水印:使用<code>套索工具</code>或<code>修补工具</code>,画出水印位置,按shift F5,选<code>内容识别</code>,点击<code>确定</code>.</p></li></ul><h1 id="3-图层"><a href="#3-图层" class="headerlink" title="3.图层"></a>3.图层</h1><h2 id="如何多选图层？"><a href="#如何多选图层？" class="headerlink" title="如何多选图层？"></a>如何多选图层？</h2><ul><li><p>通过右键选择</p></li><li><p><code>Ctrl</code>多选。按住<code>Ctr</code>！鼠标点击需要的图层.或者,<code>Shift</code>多选。按住<code>Shft</code>只可选择相邻图层</p></li><li><p>鼠标框选图层</p></li><li><p>链接图层</p><p>为了方便我们选择图层，我可以把两个图层绑定，这样就能同时移动了</p></li></ul><h2 id="对齐图层"><a href="#对齐图层" class="headerlink" title="对齐图层"></a>对齐图层</h2><ul><li>移动工具 自动对齐</li><li>使用居中对齐功能</li></ul><h2 id="调整图层顺序"><a href="#调整图层顺序" class="headerlink" title="调整图层顺序"></a>调整图层顺序</h2><ul><li>手动移动 <code>Ctrl+]</code> 图层向上移一层 <code>ctrl +[</code> 图层向下移一层 <code>shift +ctrl+]</code> 图层至顶 <code>shift+ctrl +[</code> 图层至底</li></ul><h2 id="复制图层"><a href="#复制图层" class="headerlink" title="复制图层:"></a>复制图层:</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ctrl J</span><br></code></pre></td></tr></table></figure><h2 id="图层分组"><a href="#图层分组" class="headerlink" title="图层分组"></a>图层分组</h2><h2 id="如何调出混合选项"><a href="#如何调出混合选项" class="headerlink" title="如何调出混合选项"></a>如何调出混合选项</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172730896.png" alt="image-20240313172730896"></p><h2 id="常见的图层样式"><a href="#常见的图层样式" class="headerlink" title="常见的图层样式"></a>常见的图层样式</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172802350.png" alt="image-20240313172802350"></p><h2 id="快速定位-查找图层"><a href="#快速定位-查找图层" class="headerlink" title="快速定位&#x2F;查找图层"></a>快速定位&#x2F;查找图层</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172857445.png" alt="image-20240313172857445"></p><h2 id="图层快速导出PNG"><a href="#图层快速导出PNG" class="headerlink" title="图层快速导出PNG"></a>图层快速导出PNG</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172919844.png" alt="image-20240313172919844"></p><h2 id="不透明度和填充的区别"><a href="#不透明度和填充的区别" class="headerlink" title="不透明度和填充的区别"></a>不透明度和填充的区别</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172938485.png" alt="image-20240313172938485"></p><h2 id="只显示当前图层："><a href="#只显示当前图层：" class="headerlink" title="只显示当前图层："></a>只显示当前图层：</h2><p>按住At键点击当前图层眼睛</p>]]></content>
    
    
    <categories>
      
      <category>ps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx如何处理请求</title>
    <link href="/2024/03/07/Nginx%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-%E5%AE%98%E7%BF%BB%E6%96%87%E6%A1%A3/"/>
    <url>/2024/03/07/Nginx%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-%E5%AE%98%E7%BF%BB%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>翻自<a href="http://nginx.org/en/docs/http/request_processing.html">官网</a> <a href="http://nginx.org/en/docs/http/server_names.html">server_name官网文档</a></p></blockquote><h1 id="1-基于名称的虚拟服务器"><a href="#1-基于名称的虚拟服务器" class="headerlink" title="1.基于名称的虚拟服务器"></a>1.基于名称的虚拟服务器</h1><p><strong>nginx首先决定哪个服务器应该处理请求。</strong>让我们从一个简单的配置开始，其中所有三个虚拟服务器都在端口*上侦听：80:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">www.example.com;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在这个配置中，nginx只验证请求头字<code>Host</code>以确定请求应该路由到哪个服务器</strong>。如果它的值与任何服务器名称都不匹配，或者请求根本不包含这个头字段，那么nginx会将请求路由到这个端口的默认服务器。在上面的配置中，默认服务器是第一个服务器，这是nginx的标准默认行为。还可以使用listen指令中的default_server参数显式设置哪个服务器应为默认服务器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span> <span class="hljs-string">default_server;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><em>default_server参数自0.8.21版本以来一直可用。在早期版本中，应使用默认参数。</em></p></blockquote><p>请注意，<strong>default_server是侦听端口的属性，而不是服务器名称的属性</strong>。稍后将对此进行详细介绍。</p><h1 id="2-如何拦截未携带Host请求头参数的请求"><a href="#2-如何拦截未携带Host请求头参数的请求" class="headerlink" title="2.如何拦截未携带Host请求头参数的请求"></a>2.如何拦截未携带Host请求头参数的请求</h1><p>如果不允许没有“Host”请求头字段的请求，则可以定义一个丢弃请求的服务器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">return</span>      <span class="hljs-number">444</span><span class="hljs-string">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，服务器名称被设置为一个空字符串，该字符串将匹配没有“Host”请求头字段的请求，并返回一个特殊的nginx的非标准代码444来关闭连接。</p><blockquote><p>从版本0.8.48开始，这是服务器名称的默认设置，因此可以省略server_name “”。在早期版本中，机器的主机名被用作默认服务器名称。</p></blockquote><h1 id="3-同时配置了ip和域名-server-name-的混合虚拟服务器"><a href="#3-同时配置了ip和域名-server-name-的混合虚拟服务器" class="headerlink" title="3.同时配置了ip和域名(server_name)的混合虚拟服务器"></a>3.同时配置了ip和域名(server_name)的混合虚拟服务器</h1><p>让我们来看一个更复杂的配置，其中一些虚拟服务器侦听不同的地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">www.example.com;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个配置中，nginx首先根据<code>listen</code>指令验证请求的IP地址和端口。然后，它根据与IP地址和端口匹配的<code>server</code>块的<code>server_name</code>条目来验证请求的<code>Host</code>头字段。如果找不到匹配的<code>server_name</code>，则由默认服务器处理请求。</p><p>例如，在<code>192.168.1.1:80</code>端口上收到的对<code>www.example.com</code>的请求将由<code>192.168.1.1:80</code>端口的默认服务器处理，即由第一台服务器处理，因为没有为此端口定义<code>www.example.com</code>,<strong>即listen属性监听了具体的ip和端口后就监听指定的ip和端口请求,此时server_name配置失效.</strong></p><p>如前所述，**<code>default_server</code>**是侦听端口的属性，并且可以为不同的端口定义不同的默认服务器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80</span> <span class="hljs-string">default_server;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><span class="hljs-string">:80</span> <span class="hljs-string">default_server;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">www.example.com;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-nginx如何选择location来处理一个请求"><a href="#4-nginx如何选择location来处理一个请求" class="headerlink" title="4.nginx如何选择location来处理一个请求"></a>4.nginx如何选择location来处理一个请求</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">root</span>        <span class="hljs-string">/data/www;</span><br><br>    <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>        <span class="hljs-string">index</span>   <span class="hljs-string">index.html</span> <span class="hljs-string">index.php;</span><br>    &#125;<br><br>    <span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|png)$</span> &#123;<br>        <span class="hljs-string">expires</span> <span class="hljs-string">30d;</span><br>    &#125;<br><br>    <span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">\.php$</span> &#123;<br>        <span class="hljs-string">fastcgi_pass</span>  <span class="hljs-string">localhost:9000;</span><br>        <span class="hljs-string">fastcgi_param</span> <span class="hljs-string">SCRIPT_FILENAME</span><br>                      <span class="hljs-string">$document_root$fastcgi_script_name;</span><br>        <span class="hljs-string">include</span>       <span class="hljs-string">fastcgi_params;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nginx首先搜索由文字字符串给出的最具体的前缀位置，而不考虑列出的顺序。在上述配置中，唯一的前缀位置是“&#x2F;”，由于它与任何请求匹配，因此将作为最后手段使用。然后nginx按照配置文件中列出的顺序检查正则表达式给出的位置。第一个匹配到表达式即停止向下匹配，nginx将使用这个location。如果没有正则表达式与请求匹配，那么nginx将使用前面找到的最特定的前缀位置。</p><p>请注意，所有类型的位置都只测试请求行中没有参数的URI部分。这样做是因为查询字符串中的参数可以通过几种方式给出，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/index.php?user=john&amp;page=1<br>/index.php?page=1&amp;user=john<br></code></pre></td></tr></table></figure><p>此外，任何人都可以请求查询字符串中的任何内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/index.php?page=1&amp;something+else&amp;user=john<br></code></pre></td></tr></table></figure><p>现在，让我们看看在上面的配置中如何处理请求：</p><ul><li>请求<code>“/logo.gif”</code>首先由前缀位置<code>“/”</code>匹配，然后由正则表达式<code>“</code>\.（gif|jpg|png）$<code>”</code>匹配，因此由后一个位置处理。使用指令<code>“</code>root &#x2F;data&#x2F;www<code>”</code>，将请求映射到文件<code>/data/ww/logo.gif</code>，并将文件发送到客户端。</li><li>请求<code>“</code>&#x2F;index.php<code>”</code>也首先由前缀位置<code>“</code>&#x2F;<code>”</code>匹配，然后由正则表达式<code>“</code>\.（php）$<code>”</code>匹配。因此，它由后一个位置处理，并将请求传递给在<code>localhost:9000</code>上侦听的FastCGI服务器。fastcgi_param指令将fastcgi参数SCRIPT_FILENAME设置为<code>“/data/www/index.php”</code>，然后fastcgi服务器执行该文件。变量<code>$document_root</code>等于根指令的值，变量<code>$fastcgi_script_name</code>等于请求URI，即“&#x2F;index.php”。</li><li>请求<code>“</code>&#x2F;about.html<code>”</code>仅与前缀位置<code>“</code>&#x2F;<code>”</code>匹配，因此在该位置进行处理。使用指令<code>“</code>root &#x2F;data&#x2F;www<code>”</code>，将请求映射到文件<code>/data/ww/about.html</code>，并将文件发送到客户端。</li><li>处理请求<code>“/”</code>更为复杂。它只与前缀位置“&#x2F;”匹配，因此，它由该位置处理。然后，index指令根据其参数和<code>“</code>root &#x2F;data&#x2F;www<code>”</code>指令来测试索引文件的存在。如果文件<code>/data/www/index.html</code>不存在，而文件<code>/data/www/index.php</code>存在，那么指令会进行内部重定向到“<code>/index.php</code>”，nginx会再次搜索位置，就像请求是由客户端发送的一样。正如我们之前看到的，重定向的请求最终将由FastCGI服务器处理。</li></ul>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>nginx-server块</tag>
      
      <tag>nginx配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx安装方式</title>
    <link href="/2024/03/07/Nginx%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/03/07/Nginx%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS"><a href="#1-CentOS" class="headerlink" title="1.CentOS"></a>1.CentOS</h1><h2 id="1-1yum安装"><a href="#1-1yum安装" class="headerlink" title="1.1yum安装"></a>1.1yum安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 安装EPEL仓库</span><br>sudo yum install epel-release<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 更新repo</span><br>sudo yum update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 安装nginx</span><br>sudo yum install nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 验证安装</span><br>sudo nginx -V<br></code></pre></td></tr></table></figure><h2 id="1-2通过Nginx的官⽅仓库来安装"><a href="#1-2通过Nginx的官⽅仓库来安装" class="headerlink" title="1.2通过Nginx的官⽅仓库来安装"></a>1.2通过Nginx的官⽅仓库来安装</h2><blockquote><p>这样可以保证安装的是最新的版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. 安装前置依赖<br>sudo yum install yum-utils<br><br>2. 添加nginx仓库<br>sudo vim /etc/yum.repos.d/nginx.repo<br><br>3. 添加以下内容<br>[nginx-stable] [nginx-stable]<br>name=nginx stable repo<br>baseurl=http://nginx.org/packages/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br>或者<br>[nginx-mainline] [nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br>上⾯的 stable 和 mainline 就分别表示稳定版和主线版，可以根据⾃⼰的需要来选择。<br><br>4. 更新repo<br>sudo yum update<br><br>5. 安装nginx<br>sudo yum install nginx<br><br>6. 验证安装<br>除了使⽤ sudo nginx -V 之外，还可以使⽤下⾯的⽅式来验证：<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动Nginx</span><br>sudo nginx<br>curl -I 127.0.0.1<br>如果能够看到类似下⾯的输出，就表示安装成功了：<br>HTTP/1.1 200 OK<br>Server: nginx/1.25.1<br></code></pre></td></tr></table></figure><h1 id="2-Debian、Ubuntu"><a href="#2-Debian、Ubuntu" class="headerlink" title="2.Debian、Ubuntu"></a>2.Debian、Ubuntu</h1><h2 id="2-1apt安装"><a href="#2-1apt安装" class="headerlink" title="2.1apt安装"></a>2.1apt安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 更新仓库信息</span><br>sudo apt-get update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 安装nginx</span><br>sudo apt-get install nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 验证安装</span><br>sudo nginx -V<br></code></pre></td></tr></table></figure><h2 id="2-2通过Nginx的官⽅仓库来安装"><a href="#2-2通过Nginx的官⽅仓库来安装" class="headerlink" title="2.2通过Nginx的官⽅仓库来安装"></a>2.2通过Nginx的官⽅仓库来安装</h2><blockquote><p>这样可以保证安装的是最新的版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 安装前置依赖</span><br>sudo apt install curl gnupg2 ca-certificates lsb-release debian-archivekeyring<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 导⼊官⽅Nginx签名密钥</span><br>curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \<br> | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 验证下载的⽂件中包含了正确的密钥</span><br>gpg --dry-run --quiet --no-keyring --import --import-options import-show<br>/usr/share/keyrings/nginx-archive-keyring.gpg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 设置稳定版或者主线版的Nginx包</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">稳定版</span><br>echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \<br>http://nginx.org/packages/debian `lsb_release -cs` nginx&quot; \<br> | sudo tee /etc/apt/sources.list.d/nginx.list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">主线版</span><br>echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \<br>http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx&quot; \<br> | sudo tee /etc/apt/sources.list.d/nginx.list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5. 设置仓库优先级，优先使⽤Nginx官⽅仓库</span><br>echo -e &quot;Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPinPriority: 900\n&quot; \<br> | sudo tee /etc/apt/preferences.d/99nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6. 安装nginx</span><br>sudo apt update<br>sudo apt install nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">7. 验证安装</span><br>sudo nginx<br>curl -I 127.0.0.1<br></code></pre></td></tr></table></figure><h1 id="3-MAC安装"><a href="#3-MAC安装" class="headerlink" title="3.MAC安装"></a>3.MAC安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install nginx<br></code></pre></td></tr></table></figure><h1 id="4-从源码编译安装"><a href="#4-从源码编译安装" class="headerlink" title="4.从源码编译安装"></a>4.从源码编译安装</h1><blockquote><p>从源码编译安装的⽅式可以让我们⾃定义Nginx的安装⽬录、模块等，但是安装过程⽐较繁琐，需要安装⼀些依赖库</p></blockquote><h2 id="4-1安装PCRE库"><a href="#4-1安装PCRE库" class="headerlink" title="4.1安装PCRE库"></a>4.1安装PCRE库</h2><blockquote><p>PCRE是Perl Compatible Regular Expressions的缩写，是⼀个Perl库，包括perl兼容的正则表达式库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget github.com/PCRE2Project/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.gz<br>tar -zxf pcre2-10.42.tar.gz<br>cd pcre2-10.42<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-2-安装zlib库"><a href="#4-2-安装zlib库" class="headerlink" title="4.2 安装zlib库"></a>4.2 安装zlib库</h2><blockquote><p>zlib是⼀个数据压缩库，⽤于Nginx的gzip模块。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://zlib.net/zlib-1.2.13.tar.gz<br>tar -zxf zlib-1.2.13.tar.gz<br>cd zlib-1.2.13<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-3-安装OpenSSL库"><a href="#4-3-安装OpenSSL库" class="headerlink" title="4.3 安装OpenSSL库"></a>4.3 安装OpenSSL库</h2><blockquote><p>OpenSSL是⼀个强⼤的安全套接字层密码库，⽤于Nginx的SSL模块</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://www.openssl.org/source/openssl-1.1.1t.tar.gz<br>tar -zxf openssl-1.1.1t.tar.gz<br>cd openssl-1.1.1t<br>./Configure darwin64-x86_64-cc --prefix=/usr<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-4-下载Nginx源码"><a href="#4-4-下载Nginx源码" class="headerlink" title="4.4 下载Nginx源码"></a>4.4 下载Nginx源码</h2><h3 id="4-4-1下载主线版的Nginx源码："><a href="#4-4-1下载主线版的Nginx源码：" class="headerlink" title="4.4.1下载主线版的Nginx源码："></a>4.4.1下载主线版的Nginx源码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nginx.org/download/nginx-1.23.4.tar.gz<br>tar zxf nginx-1.23.4.tar.gz<br>cd nginx-1.23.4<br></code></pre></td></tr></table></figure><h3 id="4-4-2下载稳定版的Nginx源码："><a href="#4-4-2下载稳定版的Nginx源码：" class="headerlink" title="4.4.2下载稳定版的Nginx源码："></a>4.4.2下载稳定版的Nginx源码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nginx.org/download/nginx-1.24.0.tar.gz<br>tar zxf nginx-1.24.0.tar.gz<br>cd nginx-1.24.0<br></code></pre></td></tr></table></figure><h2 id="4-5-配置编译选项"><a href="#4-5-配置编译选项" class="headerlink" title="4.5 配置编译选项"></a>4.5 配置编译选项</h2><blockquote><p>编译选项可以通过 .&#x2F;configure –help 来查看。 下⾯是⼀个官⽹的例⼦：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure<br>--sbin-path=/usr/local/nginx/nginx<br>--conf-path=/usr/local/nginx/nginx.conf<br>--pid-path=/usr/local/nginx/nginx.pid<br>--with-pcre=../pcre2-10.42<br>--with-zlib=../zlib-1.2.13<br>--with-http_ssl_module<br>--with-stream<br>--with-mail=dynamic<br>--add-module=/usr/build/nginx-rtmp-module<br>--add-dynamic-module=/usr/build/3party_module<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>参数（Parameter）</strong></th><th><strong>说明（Description）</strong></th></tr></thead><tbody><tr><td>–prefix&#x3D;</td><td>指定安装⽬录</td></tr><tr><td>–sbin-path&#x3D;</td><td>指定Nginx可执⾏⽂件</td></tr><tr><td>–conf-path&#x3D;</td><td>指定配置⽂件位置</td></tr><tr><td>–pid-path&#x3D;</td><td>指定pid⽂件位置</td></tr><tr><td>–error-log-path&#x3D;</td><td>指定错误⽇志⽂件</td></tr><tr><td>–http-log-path&#x3D;</td><td>指定HTTP⽇志⽂件</td></tr><tr><td>–user&#x3D;</td><td>指定运⾏Nginx的⽤户</td></tr><tr><td>–group&#x3D;</td><td>指定运⾏Nginx的组</td></tr><tr><td>–with-pcre&#x3D;</td><td>指定PCRE库的位置</td></tr><tr><td>–with-pcre-jit</td><td>开启PCRE的JIT（Just-in-time compilation）⽀持</td></tr><tr><td>–with-zlib&#x3D;</td><td>指定zlib库的位置</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>nginx安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx常用命令</title>
    <link href="/2024/03/07/Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/03/07/Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx # 启动Nginx<br>nginx -c filename # 指定配置⽂件<br>nginx -V # 查看nginx安装目录 编译参数 配置文件和日志文件的位置等各种信息<br>nginx -t # 检查配置⽂件是否正确，也可⽤来定位配置⽂件的位置<br>nginx -s quit # 优雅停⽌Nginx<br>nginx -s stop # 快速停⽌Nginx<br>nginx -s reload # 重新加载配置⽂件<br>nginx -s reopen # 重新打开⽇志⽂件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>nginx常用命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置文件</title>
    <link href="/2024/03/07/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/03/07/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx的配置⽂件是 nginx.conf ，⼀般位于 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 。 可以使⽤ nginx -t 来查看配置⽂件的位置和检查配置⽂件是否正确。</p></blockquote><h1 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h1><blockquote><p>主要⽤来设置⼀些影响Nginx服务器整体运⾏的配置指令，主要包括配置运⾏Nginx服务器的⽤户（组）、允许⽣成的worker process数、进程PID存放路径、⽇志存放路径和类型以及配置⽂件引⼊等。</p></blockquote><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><blockquote><p>指定运⾏Nginx服务器的⽤户，只能在全局块配置</p><p>将user指令注释掉，或者配置成nobody的话所有⽤户都可以运⾏</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">user [user] [group]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">user nginx;</span><br>user nobody nobody;<br></code></pre></td></tr></table></figure><h2 id="worker-processes"><a href="#worker-processes" class="headerlink" title="worker_processes"></a>worker_processes</h2><blockquote><p>指定⽣成的worker进程的数量，也可使⽤⾃动模式，只能在全局块配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes  1; #auto或其他数字<br></code></pre></td></tr></table></figure><h2 id="error-log"><a href="#error-log" class="headerlink" title="error_log"></a>error_log</h2><blockquote><p>错误⽇志存放路径和类型</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  /var/log/nginx/error.log;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  /var/log/nginx/error.log  notice;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  /var/log/nginx/error.log  info;</span><br></code></pre></td></tr></table></figure><h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h2><blockquote><p>进程PID存放路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pid /var/run/nginx.pid;<br></code></pre></td></tr></table></figure><h1 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">events &#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定使⽤哪种⽹络IO模型，只能在events块中进⾏配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">use epoll</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">每个worker process允许的最⼤连接数</span><br>  worker_connections  1024;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h1><blockquote><p>http块是配置⽂件的主要部分，包括http全局块和server块。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>****<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><blockquote><p>nginx 可以使⽤include指令引⼊其他配置⽂件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">include       mime.types;<br></code></pre></td></tr></table></figure><h2 id="default-type"><a href="#default-type" class="headerlink" title="default_type"></a>default_type</h2><blockquote><p>默认类型，如果请求的URL没有包含⽂件类型，会使⽤默认类型</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">default_type  application/octet-stream;<br></code></pre></td></tr></table></figure><h2 id="log-format"><a href="#log-format" class="headerlink" title="log_format"></a>log_format</h2><blockquote><p>定义⽇志格式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">                 <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">                 <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br></code></pre></td></tr></table></figure><h2 id="access-log"><a href="#access-log" class="headerlink" title="access_log"></a>access_log</h2><blockquote><p>⽇志存放路径和类型</p><p>格式为：access_log <path> [format [buffer&#x3D;size] [gzip[&#x3D;level]] [flush&#x3D;time] [if&#x3D;condition]];</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">access_log /var/log/nginx/access.log main;<br></code></pre></td></tr></table></figure><h2 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h2><blockquote><p>开启⾼效⽂件传输模式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sendfile        on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp_nopush     on;</span><br></code></pre></td></tr></table></figure><h2 id="sendfile-max-chunk"><a href="#sendfile-max-chunk" class="headerlink" title="sendfile_max_chunk"></a>sendfile_max_chunk</h2><blockquote><p>设置sendfile最⼤传输⽚段⼤⼩，默认为0，表示不限制</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sendfile_max_chunk 1m;<br></code></pre></td></tr></table></figure><h2 id="keepalive-requests"><a href="#keepalive-requests" class="headerlink" title="keepalive_requests"></a>keepalive_requests</h2><blockquote><p>每个连接的请求次数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keepalive_requests 100;<br></code></pre></td></tr></table></figure><h2 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a>keepalive_timeout</h2><blockquote><p>连接超时时间</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keepalive_timeout  65;<br></code></pre></td></tr></table></figure><h2 id="gzip压缩相关"><a href="#gzip压缩相关" class="headerlink" title="gzip压缩相关"></a>gzip压缩相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"> # </span><span class="language-bash">开启gzip压缩</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">gzip  on;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启gzip压缩的最⼩⽂件⼤⼩</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip_min_length 1k;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip压缩级别，1-9，级别越⾼压缩率越⾼，但是消耗CPU资源也越多</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip_comp_level 2;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip压缩⽂件类型</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip_types text/plain application/javascript application/xjavascript text/css application/xml text/javascript application/x-httpdphp image/jpeg image/gif image/png;</span><br></code></pre></td></tr></table></figure><h2 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h2><blockquote><p>upstream指令⽤于定义⼀组服务器，⼀般⽤来配置反向代理和负载均衡</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream www.example.com &#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ip_hash指令⽤于设置负载均衡的⽅式，ip_hash表示使⽤客户端的IP进⾏<span class="hljs-built_in">hash</span>，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这样可以保证同⼀个客户端的请求每次都会分配到同⼀个服务器，解决了session共享的问题</span><br>ip_hash;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">weight ⽤于设置权重，权重越⾼被分配到的⼏率越⼤</span><br>server 192.168.50.11:80 weight=3;<br>server 192.168.50.12:80;<br>server 192.168.50.13:80;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><blockquote><p>server块是配置虚拟主机的，⼀个http块可以包含多个server块，每个server块就是⼀个虚拟主机。</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br># 监听IP和端⼝<br># listen的格式为：<br># listen [ip]:port [default_server] [ssl] [http2] [spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number];<br># listen指令⾮常灵活，可以指定多个IP和端⼝，也可以使⽤通配符<br># 下⾯是⼏个实际的例⼦：<br># listen 127.0.0.1:80; # 监听来⾃127.0.0.1的80端⼝的请求<br># listen 80; # 监听来⾃所有IP的80端⼝的请求<br># listen *:80; # 监听来⾃所有IP的80端⼝的请求，同上<br># listen 127.0.0.1; # 监听来⾃来⾃127.0.0.1的80端⼝，默认端⼝为80<br>        listen       80;<br># server_name ⽤来指定虚拟主机的域名，可以使⽤精确匹配、通配符匹配和正则匹配等⽅式<br># server_name example.org www.example.org; # 精确匹配<br># server_name *.example.org; # 通配符匹配<br># server_name ~^www\d+\.example\.net$; # 正则匹配<br>        server_name  localhost;<br><br>        #charset koi8-r;<br><br>        #access_log  logs/host.access.log  main;<br><br># location块⽤来配置请求的路由，⼀个server块可以包含多个location块，每个location块就是⼀个请求路由<br>        # location块的格式是：<br># location [=|~|~*|^~] /uri/ &#123; ... &#125;<br># = 表示精确匹配，只有完全匹配上才能⽣效<br># ~ 表示区分⼤⼩写的正则匹配<br># ~* 表示不区分⼤⼩写的正则匹配<br># ^~ 表示普通字符匹配，如果匹配成功，则不再匹配其他location<br># /uri/ 表示请求的URI，可以是字符串，也可以是正则表达式<br># &#123; ... &#125; 表示location块的配置内容<br>location / &#123;<br># root指令指定请求的根⽬录，可是绝对路径，也可是相对路径<br>            root   html;<br># index指令指定默认⽂件，如请求的是⽬录，则会在⽬录下查找默认⽂件<br>            index  index.html index.htm;<br>        &#125;<br># 下⾯是⼀些location的示例：<br> location = / &#123; # 精确匹配请求<br> root /usr/share/nginx/html;<br> index index.html index.htm;<br> &#125;<br> location ^~ /images/ &#123; # 匹配以/images/开头的请求<br> root /usr/share/nginx/html;<br> &#125;<br> location ~* \.(gif|jpg|jpeg)$ &#123; # 匹配以gif、jpg或者jpeg结尾的请求<br> root /usr/share/nginx/html;<br> &#125;<br> location !~ \.(gif|jpg|jpeg)$ &#123; # 不匹配以gif、jpg或者jpeg结尾的请求<br> root /usr/share/nginx/html;<br> &#125;<br> location !~* \.(gif|jpg|jpeg)$ &#123; # 不匹配以gif、jpg或者jpeg结尾的请求<br> root /usr/share/nginx/html;<br> &#125;<br><br># error_page ⽤于指定错误⻚⾯，可以指定多个，按照优先级从⾼到低依次查找<br>        #error_page  404              /404.html;<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br><br>        # proxy the PHP scripts to Apache listening on 127.0.0.1:80<br>        #<br>        #location ~ \.php$ &#123;<br>        #    proxy_pass   http://127.0.0.1;<br>        #&#125;<br><br>        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000<br>        #<br>        #location ~ \.php$ &#123;<br>        #    root           html;<br>        #    fastcgi_pass   127.0.0.1:9000;<br>        #    fastcgi_index  index.php;<br>        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>        #    include        fastcgi_params;<br>        #&#125;<br><br>        # deny access to .htaccess files, if Apache&#x27;s document root<br>        # concurs with nginx&#x27;s one<br>        #<br>        #location ~ /\.ht &#123;<br>        #    deny  all;<br>        #&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="其他的server块例子"><a href="#其他的server块例子" class="headerlink" title="其他的server块例子"></a>其他的server块例子</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="hljs-meta prompt_">   #</span><span class="language-bash"></span><br><span class="language-bash">   <span class="hljs-comment">#server &#123;</span></span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   listen       8000;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   listen       somename:8080;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   server_name  somename  <span class="hljs-built_in">alias</span>  another.alias;</span><br><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   location / &#123;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">       root   html;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">       index  index.html index.htm;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   &#125;</span><br><span class="hljs-meta prompt_">   #</span><span class="language-bash">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen 443 ssl;<br>server_name www.lifeab.asia;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">相对路径下的证书目录</span><br>ssl_certificate   cert/a.pem;<br>ssl_certificate_key  cert/a.key;<br>ssl_session_timeout 5m;<br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>ssl_prefer_server_ciphers on;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash">把https请求重定向</span><br>location / &#123;<br>#实际服务开放地址<br>        proxy_pass http://182.92.10.251:8888;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>nginx配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/07/hello-world/"/>
    <url>/2024/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>！这是你的第一篇文章。查看<a href="https://hexo.io/docs/">文档</a>以了解更多信息。如果你在使用Hexo时遇到任何问题，你可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案，也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server <span class="hljs-comment">#简写 hexo s</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="编辑静态文件"><a href="#编辑静态文件" class="headerlink" title="编辑静态文件"></a>编辑静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate <span class="hljs-comment">#编译:简写 hexo g</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">编译</a></p><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>编写高效优雅java代码</title>
    <link href="/2021/01/26/%E7%BC%96%E5%86%99%E4%BC%98%E9%9B%85%E9%AB%98%E6%95%88%E7%9A%84java%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/01/26/%E7%BC%96%E5%86%99%E4%BC%98%E9%9B%85%E9%AB%98%E6%95%88%E7%9A%84java%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h1 id="构造器参数太多怎么办"><a href="#构造器参数太多怎么办" class="headerlink" title="构造器参数太多怎么办"></a>构造器参数太多怎么办</h1><blockquote><p>Java类设计过程中，如果类的构造器或者静态工厂中具有多个参数，并且其中有大量的可选参数时，我们应该怎么办？</p></blockquote><h2 id="Telescoping-Constructor模式-重叠构造器"><a href="#Telescoping-Constructor模式-重叠构造器" class="headerlink" title="Telescoping Constructor模式(重叠构造器)"></a>Telescoping Constructor模式(重叠构造器)</h2><p>我们首先想到的方法肯定是传统的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是设计以及使用过程中我们发现以下几点问题：</p><ul><li>属性参数逐渐变多时属性参数逐渐变多时，由于要对之前的代码做兼容，所以不可以直接在现有构造器后面追加属性，只能不断新增构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>属性参数中有大量的可选参数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year, String city, String newState,</span><br><span class="hljs-params">                  <span class="hljs-type">boolean</span> newIsFemale, <span class="hljs-type">boolean</span> newIsEmployed, <span class="hljs-type">boolean</span> newIsHomeOwner)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.city = city;<br>        <span class="hljs-built_in">this</span>.state = newState;<br>        <span class="hljs-built_in">this</span>.isFemale = newIsFemale;<br>        <span class="hljs-built_in">this</span>.isEmployed = newIsEmployed;<br>        <span class="hljs-built_in">this</span>.isHomewOwner = newIsHomeOwner;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>显而易见，这样写的类构造器虽然无可厚非，但是当有许多参数的时候，客户端代码会很难编写，并且难以阅读。如果读者想知道那些值是什么意思，必须很仔细的数着这些参数来探个究竟。</li></ul><h2 id="JavaBeans模式"><a href="#JavaBeans模式" class="headerlink" title="JavaBeans模式"></a>JavaBeans模式</h2><p>在这种模式下，调用一个无参构造器来创建对象，然后调用setter方法来设置每个必要的参数，以及每个相关的可选参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFemale</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isFemale;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFemale</span><span class="hljs-params">(<span class="hljs-type">boolean</span> female)</span> &#123;<br>        isFemale = female;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmployed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isEmployed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployed</span><span class="hljs-params">(<span class="hljs-type">boolean</span> employed)</span> &#123;<br>        isEmployed = employed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHomewOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isHomewOwner;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomewOwner</span><span class="hljs-params">(<span class="hljs-type">boolean</span> homewOwner)</span> &#123;<br>        isHomewOwner = homewOwner;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种模式弥补重叠构造器模式的不足。说的明白一点，就是创建实例很容易，这样产生的代码读起来也很容易:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>person.setCity(<span class="hljs-string">&quot;重庆&quot;</span>);<br>person.setYear(<span class="hljs-number">12</span>);<br>person.setSex(<span class="hljs-string">&quot;男&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;itbird&quot;</span>);<br></code></pre></td></tr></table></figure><p>遗憾的是，JavaBeans模式自身有着很严重的缺点。因为构造过程被分到几个调用中，在构造过程中JavaBean可能处于非一致的状态。JavaBeans模式阻止了把类做成不可变的可能，这就需要程序员付出额外的努力来确保他的线程安全。</p><h2 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h2><p>5个或者5个以上的成员变量 参数不多，但是在未来，参数会增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilder</span> &#123;<br>        <span class="hljs-comment">// 必要参数</span><br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-comment">// 可选参数</span><br>        <span class="hljs-keyword">private</span> String sex;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>        <span class="hljs-keyword">private</span> String city;<br>        <span class="hljs-keyword">private</span> String state;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonBuilder</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>            <span class="hljs-built_in">this</span>.sex = sex;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>            <span class="hljs-built_in">this</span>.year = year;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>            <span class="hljs-built_in">this</span>.city = city;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>            <span class="hljs-built_in">this</span>.state = state;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setFemale</span><span class="hljs-params">(<span class="hljs-type">boolean</span> female)</span> &#123;<br>            isFemale = female;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setEmployed</span><span class="hljs-params">(<span class="hljs-type">boolean</span> employed)</span> &#123;<br>            isEmployed = employed;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setHomewOwner</span><span class="hljs-params">(<span class="hljs-type">boolean</span> homewOwner)</span> &#123;<br>            isHomewOwner = homewOwner;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            person.name = name;<br>            person.sex = sex;<br>            person.city = city;<br>            person.isEmployed = isEmployed;<br>            person.isFemale = isFemale;<br>            person.isHomewOwner = isHomewOwner;<br>            person.state = state;<br>            person.year = year;<br>            <span class="hljs-keyword">return</span> person;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用的实例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>.PersonBuilder(<span class="hljs-string">&quot;itbird&quot;</span>)<br>                   .setCity(<span class="hljs-string">&quot;重庆&quot;</span>).setYear(<span class="hljs-number">15</span>).build();<br></code></pre></td></tr></table></figure><p>显然，使用Builder模式解决了上诉的难题，达到了“以不变(Builder)应万变(参数)”的目的。</p><h1 id="不需要实例化的类应该构造器私有"><a href="#不需要实例化的类应该构造器私有" class="headerlink" title="不需要实例化的类应该构造器私有"></a>不需要实例化的类应该构造器私有</h1><p> 一些工具类提供的都是静态方法，这些类是不应该提供具体的实例的。可以参考JDK中的Arrays。</p><h1 id="不要创建不必要的对象"><a href="#不要创建不必要的对象" class="headerlink" title="不要创建不必要的对象"></a>不要创建不必要的对象</h1><ul><li>反例<blockquote><p>该语句每次被执行的时候都创建一个新的String实例，但这些创建对象的动作全部都是不必要的。传递给String构造器的参数（”stringette”）本身就是一个String实例，功能方面等同于构造器创建的对象。如果这种用法实在一个循环中，或者在一个被频繁调用的方法中，就会创建出成千上万不必要的String实例。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;stringette&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>正例<blockquote><p>这个版本只用了一个String实例，而不是每一次执行代码都创建一个新的实例。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stringette&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h1><p>终结方法（finalizer）通常是不可预测的，也是很危险的，一般情况下是不必要的。使用终结方法会导致行为不稳定，降低性能以及可移植性问题。</p><ul><li>反例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Foo</span> <span class="hljs-variable">foo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>(...);<br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//Do what must be done with foo</span><br>    ...<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    foo.terminate();        <span class="hljs-comment">//Explicit termination method</span><br>&#125;<br></code></pre></td></tr></table></figure>使用终结方法的好处，它们有两种合法用途：</li></ul><p>第一种用途是，当对象的所有者忘记调用前面建议的显示终止方法的时，终结方法可以充当“安全网（safety net）”。迟一点释放关键资源总比永远不释放要好。但是如果终结方法发现资源还未被终止，则应该在日志中记录一条警告，因为这是客户端的一个BUG，应当被修复。</p><p>第二种合理用途与对象的本地对等体（native peer）有关。本地对等体是一个本地对象（native object），普通对象通过本地方法（native method）委托给一个本地对象。因为本地对等体不是一个普通对象，所以垃圾回收器不会知道它，当它的Java对等体被回收的时候，它不会被回收。在本地对等体不拥有关键资源的前提下，终结方法正是执行这项任务最合适的工具。如果本地对等体拥有必须被及时终止的资源，那么该类就应该具有一个显示的终止方法，如前所述。终止方法应该完成所有必要的工作以便释放关键资源。终止方法可以是本地的，或者调用本地方法。</p><h1 id="使类和成员的可访问性最小化"><a href="#使类和成员的可访问性最小化" class="headerlink" title="使类和成员的可访问性最小化"></a>使类和成员的可访问性最小化</h1><p>编写程序和设计架构，最重要的目标之一就是模块之间的解耦。使类和成员的可访问性最小化无疑是有效的途径之一。</p><h2 id="为什么要使类和成员的可访问性最小化"><a href="#为什么要使类和成员的可访问性最小化" class="headerlink" title="为什么要使类和成员的可访问性最小化"></a>为什么要使类和成员的可访问性最小化</h2><p>可以有效的解除系统中各个模块的耦合度、实现每个模块的独立开发、使得系统更加的可维护，更加的健壮。</p><h2 id="如何最小化类和接口的可访问性？"><a href="#如何最小化类和接口的可访问性？" class="headerlink" title="如何最小化类和接口的可访问性？"></a>如何最小化类和接口的可访问性？</h2><p> 能将类和接口做成包级私有就一定要做成包级私有的。</p><p> 如果一个类或者接口，只被另外的一个类应用，那么最好将这个类或者接口做成其内部的私有类或者接口。</p><h2 id="如何最小化一个了类中的成员的可访问性？"><a href="#如何最小化一个了类中的成员的可访问性？" class="headerlink" title="如何最小化一个了类中的成员的可访问性？"></a>如何最小化一个了类中的成员的可访问性？</h2><h4 id="首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。"><a href="#首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。" class="headerlink" title="首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。"></a>首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。</h4><h4 id="对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。"><a href="#对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。" class="headerlink" title="对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。"></a>对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。</h4><h4 id="不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。"><a href="#不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。" class="headerlink" title="不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。"></a>不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。</h4><h4 id="实例域绝对不能是public类型的"><a href="#实例域绝对不能是public类型的" class="headerlink" title="实例域绝对不能是public类型的."></a>实例域绝对不能是public类型的.</h4><h2 id="使可变性最小化"><a href="#使可变性最小化" class="headerlink" title="使可变性最小化"></a>使可变性最小化</h2><blockquote><p>尽量使类不可变，不可变的类比可变的类更加易于设计、实现和使用，而且更不容易出错，更安全。</p></blockquote><h3 id="常用的手段"><a href="#常用的手段" class="headerlink" title="常用的手段"></a>常用的手段</h3><ul><li>不提供任何可以修改对象状态的方法；</li><li>使所有的域都是final的。</li><li>使所有的域都是私有的。</li><li>使用写时复制机制。带来的问题：会导致系统产生大量的对象，而且性能有一定的影响，需要在使用过程中小心权衡。</li></ul><h2 id="优先使用复合"><a href="#优先使用复合" class="headerlink" title="优先使用复合"></a>优先使用复合</h2><p>继承容易破坏封装性，而且会使子类的实现依赖于父类。<br>复合则是在类中增加一个私有域，引用类的一个实例，这样的话就避免了依赖类的具体实现。<br>只有在子类确实是父类的一个子类型时，才比较适合用继承。</p><h2 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h2><p>java是个单继承的，但是类允许实现多个接口。<br>所以当发生业务变化时，新增接口，并且需要进行业务变化的类现新接口即可。但是抽象类有可能导致不需要变化的类也不得不实现新增的业务方法。<br>在JDK里常用的一种设计方法是：定义一个接口，声明一个抽象的骨架类实现接口，骨架类类实现通用的方法，而实际的业务类可以同时实现接口又继承骨架类，也可以只实现接口。<br>如HashSet实现了implements Set接口 但是又extends 类AbstractSet，而AbstractSet本身也实现了Set接口。其他如Map，List都是这样的设计的。</p><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="可变参数要谨慎使用"><a href="#可变参数要谨慎使用" class="headerlink" title="可变参数要谨慎使用"></a>可变参数要谨慎使用</h2><p>可变参数是允许传0个参数的<br>如果是参数个数在1~多个之间的时候，要做单独的业务控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可能很多 0~很多</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... args)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> arg : args)<br>           sum += arg;<br>       <span class="hljs-keyword">return</span> sum;<br>   &#125;<br>   <br>   <span class="hljs-comment">//要求参数的个数，是1~多个</span><br>   <span class="hljs-comment">//</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">(<span class="hljs-type">int</span>... args)</span> &#123;<br>       <span class="hljs-keyword">if</span>(args.length==<span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-comment">//做点异常处理</span><br>       &#125;<br>       <span class="hljs-keyword">if</span>(args[<span class="hljs-number">0</span>]==<span class="hljs-number">100</span>) &#123;<br><br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;args.length;i++) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>           sum += args[i];<br>           <span class="hljs-keyword">return</span> sum; <br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> flag, <span class="hljs-type">int</span>... args)</span> &#123;<br>       <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">100</span>) &#123;<br><br>       &#125;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> arg : args)<br>           sum += arg;<br>       <span class="hljs-keyword">return</span> sum;<br>       <span class="hljs-keyword">return</span> Collections.EMPTY_LIST;<br>   &#125;<br>   <br></code></pre></td></tr></table></figure><h2 id="优先使用标准的异常"><a href="#优先使用标准的异常" class="headerlink" title="优先使用标准的异常"></a>优先使用标准的异常</h2><blockquote><p>要尽量追求代码的重用，同时减少类加载的数目，提高类装载的性能。</p></blockquote><p>NullPointerException 在参数值不能为null的情况下参数值为null 抛出空指针异常</p><p>IndexOutOfBoundsException 下标参数值越界 抛出索引越界异常</p><p>ConcurrentModificationException 在禁止并发修改的情况下，检测到对象的并发修改 抛出</p><p>UnsupportedOperationException 对象不支持用户请求的方法 抛出</p><hr><h1 id="让代码性能更高"><a href="#让代码性能更高" class="headerlink" title="让代码性能更高"></a>让代码性能更高</h1><h1 id="需要-Map-的主键和取值时，应该迭代-entrySet"><a href="#需要-Map-的主键和取值时，应该迭代-entrySet" class="headerlink" title="需要 Map 的主键和取值时，应该迭代 entrySet()"></a>需要 Map 的主键和取值时，应该迭代 entrySet()</h1><p>当循环中只需要 Map 的主键时，迭代 keySet() 是正确的。但是，当需要主键和取值时，迭代 entrySet() 才是更高效的做法，比先迭代 keySet() 后再去 get 取值性能更佳。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = ...;<br><span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = ...;<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="应该使用Collection-isEmpty-检测空"><a href="#应该使用Collection-isEmpty-检测空" class="headerlink" title="应该使用Collection.isEmpty()检测空"></a>应该使用Collection.isEmpty()检测空</h1><p>使用 Collection.size() 来检测空逻辑上没有问题，但是使用 Collection.isEmpty()使得代码更易读，并且可以获得更好的性能。任何 Collection.isEmpty() 实现的时间复杂度都是 O(1) ，但是某些 Collection.size() 实现的时间复杂度可能是 O(n) 。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (collection.size() == <span class="hljs-number">0</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (collection.isEmpty()) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要还需要检测 null ，可采用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CollectionUtils.isEmpty(collection)和CollectionUtils.isNotEmpty(collection)。<br></code></pre></td></tr></table></figure><h1 id="不要把集合对象传给自己"><a href="#不要把集合对象传给自己" class="headerlink" title="不要把集合对象传给自己"></a>不要把集合对象传给自己</h1><p>此外，由于某些方法要求参数在执行期间保持不变，因此将集合传递给自身可能会导致异常行为。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>list.add(<span class="hljs-string">&quot;World&quot;</span>);<br><span class="hljs-keyword">if</span> (list.containsAll(list)) &#123; <span class="hljs-comment">// 无意义,总是返回true</span><br>    ...<br>&#125;<br>list.removeAll(list); <span class="hljs-comment">// 性能差, 直接使用clear()</span><br></code></pre></td></tr></table></figure><h1 id="集合初始化尽量指定大小"><a href="#集合初始化尽量指定大小" class="headerlink" title="集合初始化尽量指定大小"></a>集合初始化尽量指定大小</h1><p>java 的集合类用起来十分方便，但是看源码可知，集合也是有大小限制的。每次扩容的时间复杂度很有可能是 O(n) ，所以尽量指定可预知的集合大小，能减少集合的扩容次数。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>    list.add(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(arr.length);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>    list.add(i);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串拼接使用-StringBuilder"><a href="#字符串拼接使用-StringBuilder" class="headerlink" title="字符串拼接使用 StringBuilder"></a>字符串拼接使用 StringBuilder</h1><p>一般的字符串拼接在编译期 java 会进行优化，但是在循环中字符串拼接， java 编译器无法做到优化，所以需要使用 StringBuilder 进行替换。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    s += i;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;c&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> a + b + c; <span class="hljs-comment">// 没问题，java编译器会进行优化</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    sb.append(i);  <span class="hljs-comment">// 循环中，java编译器无法进行优化，所以要手动使用StringBuilder</span><br>&#125;<br>```java<br># List 的随机访问<br>大家都知道数组和链表的区别：数组的随机访问效率更高。当调用方法获取到 List 后，如果想随机访问其中的数据，并不知道该数组内部实现是链表还是数组，怎么办呢？可以判断它是否实现 RandomAccess 接口。<br><br>正例<br>```java<br><span class="hljs-comment">// 调用别人的服务获取到list</span><br>List&lt;Integer&gt; list = otherService.getList();<br><span class="hljs-keyword">if</span> (list <span class="hljs-keyword">instanceof</span> RandomAccess) &#123;<br>    <span class="hljs-comment">// 内部数组实现，可以随机访问</span><br>    System.out.println(list.get(list.size() - <span class="hljs-number">1</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 内部可能是链表实现，随机访问效率低</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="频繁调用-Collection-contains-方法请使用-Set"><a href="#频繁调用-Collection-contains-方法请使用-Set" class="headerlink" title="频繁调用 Collection.contains 方法请使用 Set"></a>频繁调用 Collection.contains 方法请使用 Set</h1><p>在 java 集合类库中，List 的 contains 方法普遍时间复杂度是 O(n) ，如果在代码中需要频繁调用 contains 方法查找数据，可以先将 list 转换成 HashSet 实现，将 O(n) 的时间复杂度降为 O(1) 。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = otherService.getList();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= Integer.MAX_VALUE; i++) &#123;<br>    <span class="hljs-comment">// 时间复杂度O(n)</span><br>    list.contains(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = otherService.getList();<br>Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(list);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= Integer.MAX_VALUE; i++) &#123;<br>    <span class="hljs-comment">// 时间复杂度O(1)</span><br>    set.contains(i);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="让代码更优雅"><a href="#让代码更优雅" class="headerlink" title="让代码更优雅"></a>让代码更优雅</h1><h1 id="长整型常量后添加大写-L"><a href="#长整型常量后添加大写-L" class="headerlink" title="长整型常量后添加大写 L"></a>长整型常量后添加大写 L</h1><p>在使用长整型常量值时，后面需要添加 L ，必须是大写的 L ，不能是小写的 l ，小写 l 容易跟数字 1 混淆而造成误解。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1l</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">1L</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">1L</span>, <span class="hljs-number">5L</span>);<br></code></pre></td></tr></table></figure><h1 id="不要使用魔法值"><a href="#不要使用魔法值" class="headerlink" title="不要使用魔法值"></a>不要使用魔法值</h1><p>当你编写一段代码时，使用魔法值可能看起来很明确，但在调试时它们却不显得那么明确了。这就是为什么需要把魔法值定义为可读取常量的原因。但是，-1、0 和 1不被视为魔法值。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">100</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++)&#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">if</span> (count == MAX_COUNT) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="不要使用集合实现来赋值静态成员变量"><a href="#不要使用集合实现来赋值静态成员变量" class="headerlink" title="不要使用集合实现来赋值静态成员变量"></a>不要使用集合实现来赋值静态成员变量</h1><p>对于集合类型的静态成员变量，不要使用集合实现来赋值，应该使用静态代码块赋值。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;() &#123;<br>    &#123;<br>        put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>        put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;() &#123;<br>    &#123;<br>        add(<span class="hljs-string">&quot;a&quot;</span>);<br>        add(<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>    map.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>);<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>    list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="建议使用-try-with-resources-语句"><a href="#建议使用-try-with-resources-语句" class="headerlink" title="建议使用 try-with-resources 语句"></a>建议使用 try-with-resources 语句</h1><p>Java 7 中引入了 try-with-resources 语句，该语句能保证将相关资源关闭，优于原来的 try-catch-finally 语句，并且使程序代码更安全更简洁。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(String fileName)</span> &#123;<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        String line;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName));<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><blockquote><p>那什么是try-with-resource呢？简而言之，当一个外部资源的句柄对象（比如FileInputStream对象）实现了AutoCloseable接口，那么就可以将上面的板式代码简化为如下形式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(String fileName)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将外部资源的句柄对象的创建放在try关键字后面的括号中，当这个try-catch代码块执行完毕后，Java会确保外部资源的close方法被调用。代码是不是瞬间简洁许多！</p><h1 id="删除未使用的私有方法和字段"><a href="#删除未使用的私有方法和字段" class="headerlink" title="删除未使用的私有方法和字段"></a>删除未使用的私有方法和字段</h1><p>删除未使用的私有方法和字段，使代码更简洁更易维护。若有需要再使用，可以从历史提交中找回。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleDemo1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">unusedField</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unusedMethod</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除未使用的局部变量"><a href="#删除未使用的局部变量" class="headerlink" title="删除未使用的局部变量"></a>删除未使用的局部变量</h1><p>删除未使用的局部变量，使代码更简洁更易维护。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除未使用的方法参数"><a href="#删除未使用的方法参数" class="headerlink" title="删除未使用的方法参数"></a>删除未使用的方法参数</h1><p>未使用的方法参数具有误导性，删除未使用的方法参数，使代码更简洁更易维护。但是，由于重写方法是基于父类或接口的方法定义，即便有未使用的方法参数，也是不能删除的。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除表达式的多余括号"><a href="#删除表达式的多余括号" class="headerlink" title="删除表达式的多余括号"></a>删除表达式的多余括号</h1><p>对应表达式中的多余括号，有人认为有助于代码阅读，也有人认为完全没有必要。对于一个熟悉 Java 语法的人来说，表达式中的多余括号反而会让代码显得更繁琐。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> (x);<br><span class="hljs-keyword">return</span> (x + <span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (y * <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (n * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> n * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="工具类应该屏蔽构造函数"><a href="#工具类应该屏蔽构造函数" class="headerlink" title="工具类应该屏蔽构造函数"></a>工具类应该屏蔽构造函数</h1><p>工具类是一堆静态字段和函数的集合，不应该被实例化。但是，Java 为每个没有明确定义构造函数的类添加了一个隐式公有构造函数。所以，为了避免 java “小白”使用有误，应该显式定义私有构造函数来屏蔽这个隐式公有构造函数。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926D</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926D</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MathUtils</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除多余的异常捕获并抛出"><a href="#删除多余的异常捕获并抛出" class="headerlink" title="删除多余的异常捕获并抛出"></a>删除多余的异常捕获并抛出</h1><p>用 catch 语句捕获异常后，什么也不进行处理，就让异常重新抛出，这跟不捕获异常的效果一样，可以删除这块代码或添加别的处理。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>        String line;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            builder.append(line);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>        String line;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            builder.append(line);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="公有静态常量应该通过类访问"><a href="#公有静态常量应该通过类访问" class="headerlink" title="公有静态常量应该通过类访问"></a>公有静态常量应该通过类访问</h1><p>虽然通过类的实例访问公有静态常量是允许的，但是容易让人它误认为每个类的实例都有一个公有静态常量。所以，公有静态常量应该直接通过类访问。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONST_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name&quot;</span>;<br>    ...<br>&#125;<br><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">nameKey</span> <span class="hljs-operator">=</span> user.CONST_NAME;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONST_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name&quot;</span>;<br>    ...<br>&#125;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">nameKey</span> <span class="hljs-operator">=</span> User.CONST_NAME;<br></code></pre></td></tr></table></figure><h1 id="不要用NullPointerException判断空"><a href="#不要用NullPointerException判断空" class="headerlink" title="不要用NullPointerException判断空"></a>不要用NullPointerException判断空</h1><p>空指针异常应该用代码规避（比如检测不为空），而不是用捕获异常的方式处理。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getName();<br>    &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(user)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> user.getName();<br>&#125;<br></code></pre></td></tr></table></figure><p>使用String.valueOf(value)代替””+value<br>当要把其它对象或类型转化为字符串时，使用 String.valueOf(value) 比””+value 的效率更高。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + i;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.valueOf(i);<br></code></pre></td></tr></table></figure><h1 id="过时代码添加-Deprecated-注解"><a href="#过时代码添加-Deprecated-注解" class="headerlink" title="过时代码添加 @Deprecated 注解"></a>过时代码添加 @Deprecated 注解</h1><p>当一段代码过时，但为了兼容又无法直接删除，不希望以后有人再使用它时，可以添加 @Deprecated 注解进行标记。在文档注释中添加 @deprecated 来进行解释，并提供可替代方案</p><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@deprecated</span> 此方法效率较低，请使用&#123;<span class="hljs-doctag">@link</span> newSave()&#125;方法替换它</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="让代码远离-bug"><a href="#让代码远离-bug" class="headerlink" title="让代码远离 bug"></a>让代码远离 bug</h1><h1 id="禁止使用构造方法-BigDecimal-double"><a href="#禁止使用构造方法-BigDecimal-double" class="headerlink" title="禁止使用构造方法 BigDecimal(double)"></a>禁止使用构造方法 BigDecimal(double)</h1><p>BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.1D</span>); <span class="hljs-comment">// 0.100000000000000005551115...</span><br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.1D</span>);; <span class="hljs-comment">// 0.1</span><br></code></pre></td></tr></table></figure><h1 id="返回空数组和空集合而不是-null"><a href="#返回空数组和空集合而不是-null" class="headerlink" title="返回空数组和空集合而不是 null"></a>返回空数组和空集合而不是 null</h1><p>返回 null ，需要调用方强制检测 null ，否则就会抛出空指针异常。返回空数组或空集合，有效地避免了调用方因为未检测 null 而抛出空指针异常，还可以删除调用方检测 null 的语句使代码更简洁。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result[] getResults() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Result&gt; <span class="hljs-title function_">getResultList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Result&gt; <span class="hljs-title function_">getResultMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Result[] results = getResults();<br>    <span class="hljs-keyword">if</span> (results != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Result result : results) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    List&lt;Result&gt; resultList = getResultList();<br>    <span class="hljs-keyword">if</span> (resultList != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Result result : resultList) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    Map&lt;String, Result&gt; resultMap = getResultMap();<br>    <span class="hljs-keyword">if</span> (resultMap != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Result&gt; resultEntry : resultMap) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result[] getResults() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Result&gt; <span class="hljs-title function_">getResultList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Result&gt; <span class="hljs-title function_">getResultMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyMap();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Result[] results = getResults();<br>    <span class="hljs-keyword">for</span> (Result result : results) &#123;<br>        ...<br>    &#125;<br><br>    List&lt;Result&gt; resultList = getResultList();<br>    <span class="hljs-keyword">for</span> (Result result : resultList) &#123;<br>        ...<br>    &#125;<br><br>    Map&lt;String, Result&gt; resultMap = getResultMap();<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Result&gt; resultEntry : resultMap) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="优先使用常量或确定值来调用-equals-方法"><a href="#优先使用常量或确定值来调用-equals-方法" class="headerlink" title="优先使用常量或确定值来调用 equals 方法"></a>优先使用常量或确定值来调用 equals 方法</h1><p>对象的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals 方法。当然，使用 java.util.Objects.equals() 方法是最佳实践。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">(OrderStatus status)</span> &#123;<br>    <span class="hljs-keyword">return</span> status.equals(OrderStatus.FINISHED); <span class="hljs-comment">// 可能抛空指针异常</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">(OrderStatus status)</span> &#123;<br>    <span class="hljs-keyword">return</span> OrderStatus.FINISHED.equals(status);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">(OrderStatus status)</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.equals(status, OrderStatus.FINISHED);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举的属性字段必须是私有不可变"><a href="#枚举的属性字段必须是私有不可变" class="headerlink" title="枚举的属性字段必须是私有不可变"></a>枚举的属性字段必须是私有不可变</h1><p>枚举通常被当做常量使用，如果枚举中存在公共属性字段或设置字段方法，那么这些枚举常量的属性很容易被修改。理想情况下，枚举中的属性字段是私有的，并在私有构造函数中赋值，没有对应的 Setter 方法，最好加上 final 修饰符。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserStatus</span> &#123;<br>    DISABLED(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;禁用&quot;</span>),<br>    ENABLED(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;启用&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">UserStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> value, String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserStatus</span> &#123;<br>    DISABLED(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;禁用&quot;</span>),<br>    ENABLED(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;启用&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">UserStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> value, String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小心String-split-String-regex"><a href="#小心String-split-String-regex" class="headerlink" title="小心String.split(String regex)"></a>小心String.split(String regex)</h1><p>字符串 String 的 split 方法，传入的分隔字符串是正则表达式！部分关键字（比如.| 等）需要转义</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;a.ab.abc&quot;</span>.split(<span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">// 结果为[]</span><br><span class="hljs-string">&quot;a|ab|abc&quot;</span>.split(<span class="hljs-string">&quot;|&quot;</span>); <span class="hljs-comment">// 结果为[&quot;a&quot;, &quot;|&quot;, &quot;a&quot;, &quot;b&quot;, &quot;|&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;a.ab.abc&quot;</span>.split(<span class="hljs-string">&quot;\\.&quot;</span>); <span class="hljs-comment">// 结果为[&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;]</span><br><span class="hljs-string">&quot;a|ab|abc&quot;</span>.split(<span class="hljs-string">&quot;\\|&quot;</span>); <span class="hljs-comment">// 结果为[&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;]</span><br></code></pre></td></tr></table></figure><p><a href="https://baiyp.ren/%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88%E4%BC%98%E9%9B%85%E7%9A%84Java%E4%BB%A3%E7%A0%81.html">文章来源</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语句性能提升</title>
    <link href="/2021/01/02/SQL%E4%BC%98%E5%8C%96/"/>
    <url>/2021/01/02/SQL%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1.数据准备"></a>1.数据准备</h1><blockquote><p>1). 准备tb_sku表, 导入数据 - 数据1000w</p><p>2). 准备tb_seller表,导入数据 - 数据12条 </p></blockquote><h1 id="2-慢查询分析"><a href="#2-慢查询分析" class="headerlink" title="2.慢查询分析"></a>2.慢查询分析</h1><h2 id="2-1-show-profiles"><a href="#2-1-show-profiles" class="headerlink" title="2.1.show profiles"></a>2.1.show profiles</h2><blockquote><p><strong>show profiles 是mysql提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优测量,show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</strong></p></blockquote><p>通过 have_profiling 参数，能够看到当前MySQL<strong>是否支持profile</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@have_profiling</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@have_profiling</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> YES              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在<strong>Session级别开启profiling</strong>： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@profiling</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@profiling</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>           <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> profiling<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>开启profiling 开关；<br></code></pre></td></tr></table></figure><p><strong>通过profile，我们能够更清楚地了解SQL执行的过程。</strong><br>首先，我们可以执行一系列的操作:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases; <br>use db01; <br><span class="hljs-keyword">show</span> tables; <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_ksu <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span>; <br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_ksu;<br></code></pre></td></tr></table></figure><p>执行完上述命令之后，再执行<code>show profiles</code> 指令， 来查看SQL语句执行的耗时：<br>通过<code>show profile for query query_id</code> 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> profiles;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+---------------------------------+</span><br><span class="hljs-operator">|</span> Query_ID <span class="hljs-operator">|</span> Duration   <span class="hljs-operator">|</span> Query                           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+---------------------------------+</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00085725</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> databases                  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00020975</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> DATABASE()               <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00121950</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> tables                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00041000</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_bill <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">5</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">5</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00097875</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_bill     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+---------------------------------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> profile <span class="hljs-keyword">for</span> query <span class="hljs-number">4</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+</span><br><span class="hljs-operator">|</span> Status                         <span class="hljs-operator">|</span> Duration <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000094</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Executing hook <span class="hljs-keyword">on</span> transaction  <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000010</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> checking permissions           <span class="hljs-operator">|</span> <span class="hljs-number">0.000008</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Opening tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000042</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> init                           <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">System</span> lock                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000013</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> optimizing                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000012</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> statistics                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000052</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> preparing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> executing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000046</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">end</span>                            <span class="hljs-operator">|</span> <span class="hljs-number">0.000008</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> query <span class="hljs-keyword">end</span>                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000006</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> waiting <span class="hljs-keyword">for</span> handler <span class="hljs-keyword">commit</span>     <span class="hljs-operator">|</span> <span class="hljs-number">0.000011</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> closing tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000040</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> freeing items                  <span class="hljs-operator">|</span> <span class="hljs-number">0.000021</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cleaning up                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000013</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+</span><br><span class="hljs-number">17</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><blockquote><p>TIP ：</p><p>Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。 </p><p>由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。 </p><p>MySQL 的查询优化器可能会对查询进行优化，使得某些步骤（如 <code>Sending data</code>）在实际执行过程中被合并或省略，因此在 <code>SHOW PROFILES</code> 的结果中可能看不到这些步骤。</p></blockquote><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> profile cpu <span class="hljs-keyword">for</span> query <span class="hljs-number">7</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+----------+------------+</span><br><span class="hljs-operator">|</span> Status                         <span class="hljs-operator">|</span> Duration <span class="hljs-operator">|</span> CPU_user <span class="hljs-operator">|</span> CPU_system <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+----------+------------+</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000081</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000074</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Executing hook <span class="hljs-keyword">on</span> transaction  <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000010</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> checking permissions           <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Opening tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000032</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000032</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> init                           <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">System</span> lock                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000011</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000010</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> optimizing                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> statistics                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000016</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000016</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> preparing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> executing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000070</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000070</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">end</span>                            <span class="hljs-operator">|</span> <span class="hljs-number">0.000006</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000005</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> query <span class="hljs-keyword">end</span>                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000005</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000006</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> waiting <span class="hljs-keyword">for</span> handler <span class="hljs-keyword">commit</span>     <span class="hljs-operator">|</span> <span class="hljs-number">0.000011</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000025</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> closing tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000023</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> freeing items                  <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cleaning up                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000012</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000012</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+----------+------------+</span><br><span class="hljs-number">17</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h2 id="2-2-慢查询日志"><a href="#2-2-慢查询日志" class="headerlink" title="2.2 慢查询日志"></a>2.2 慢查询日志</h2><blockquote><p><strong>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于</strong><br><strong>min_examined_row_limit 的所有的SQL语句的日志。long_query_time 默认为 10 秒，最小</strong><br><strong>为 0， 精度可以到微秒。</strong></p></blockquote><h3 id="2-2-1-文件位置和格式"><a href="#2-2-1-文件位置和格式" class="headerlink" title="2.2.1 文件位置和格式"></a>2.2.1 文件位置和格式</h3><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 该参数用来控制慢查询日志是否开启， 可取值： <span class="hljs-number">1</span> 和 <span class="hljs-number">0</span> ， <span class="hljs-number">1</span> 代表开启， <span class="hljs-number">0</span> 代表关闭 <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@slow_query_log</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@slow_query_log</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span>                <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br># 开启慢查询日志<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> slow_query_log<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br># 该参数用来指定慢查询日志的文件名 <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@slow_query_log_file</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@slow_query_log_file</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span><span class="hljs-number">262222839</span>fb5<span class="hljs-operator">-</span>slow.log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br># 该选项用来配置查询的时间限制， 超过这个时间将认为是慢查询， 将进行日志记录， 默认<span class="hljs-number">10</span>s <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@long_query_time</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@long_query_time</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span>         <span class="hljs-number">10.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br># 设置慢查询时间限制<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> long_query_time<span class="hljs-operator">=</span><span class="hljs-number">11</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br></code></pre></td></tr></table></figure><h3 id="2-2-2-日志的读取"><a href="#2-2-2-日志的读取" class="headerlink" title="2.2.2 日志的读取"></a>2.2.2 日志的读取</h3><p>慢查询日志记录的格式也是纯文本，可以被直接读取。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000030074&#x27;</span>\G;  <span class="hljs-comment">-- \G表示换行显示数据</span><br><span class="hljs-comment">-- 该SQL语句 ， 执行时长为 24.28s ，超过10s ， 所以会记录在慢查询日志文件中。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%HuaWei手机Meta87384 Pro%&#x27;</span>\G;<br></code></pre></td></tr></table></figure><p>3） 查看慢查询日志文件</p><p>直接通过cat 指令查询该日志文件 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash-4.4# cat /var/lib/mysql/262222839fb5-slow.log<br>/usr/sbin/mysqld, Version: 8.2.0 (MySQL Community Server - GPL). started with:<br>Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock<br>Time                 Id Command    Argument<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/uov1YTpgXFAW7bx.png" alt="image-20210127233051622"></p><p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的<code>mysqldumpslow</code> 工具， 来对慢查询日志进行分类汇总。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/FPJBk3ZUbVK9Eli.png" alt="image-20210127233130483"></p><h1 id="3-explain执行计划"><a href="#3-explain执行计划" class="headerlink" title="3. explain执行计划"></a>3. explain执行计划</h1><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 <code>EXPLAIN</code>或者 DESC命令获取 <code>MySQL</code>如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000030074&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/mBeIr3fAGSPZLqt.png" alt="image-20210127233204260"></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>Select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td><strong>type</strong></td><td><strong>表示表的连接类型，性能由好到差的连接类型为( system —&gt; const—–&gt; eq_ref ——&gt; ref ——-&gt; ref_or_null—-&gt;index_merge —&gt; index_subquery —–&gt; range —–&gt;index ——&gt; all )</strong></td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td><strong>key</strong></td><td><strong>表示实际使用的索引</strong></td></tr><tr><td>Key_len</td><td>索引字段的长度</td></tr><tr><td><strong>rows</strong></td><td><strong>扫描行的数量</strong></td></tr><tr><td>Extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h2 id="3-1-id"><a href="#3-1-id" class="headerlink" title="3.1 id"></a>3.1 id</h2><ul><li>字段是 select查询的序列号是一组数字表示的是查询中执行select子句或者是操作表的顺序。</li><li>id 相同表示加载表的顺序是从上到下。</li><li>id 不同id值越大，优先级越高，越先被执行。</li><li>id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</li></ul><h2 id="3-2-select-type"><a href="#3-2-select-type" class="headerlink" title="3.2 select_type"></a>3.2 select_type</h2><p>表示 SELECT 的类型，常见的取值，如下表所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240328173303966.png" alt="image-20240328173303966"></p><h2 id="3-3-type"><a href="#3-3-type" class="headerlink" title="3.3 type"></a>3.3 type</h2><p>显示的是访问类型，是较为重要的一个指标，可取值为：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021012123.png" alt="image-20240402101255999"></p><p>一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref</p><h2 id="3-4-key"><a href="#3-4-key" class="headerlink" title="3.4  key"></a>3.4  key</h2><ul><li>possible_keys : 显示可能应用在这张表的索引， 一个或多个。</li><li>key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</li><li>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下长度越短越好 。</li></ul><h2 id="3-5-rows"><a href="#3-5-rows" class="headerlink" title="3.5 rows"></a>3.5 rows</h2><p>扫描行的数量。</p><h2 id="3-6-filtered"><a href="#3-6-filtered" class="headerlink" title="3.6 filtered"></a>3.6 filtered</h2><p>这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例。</p><h1 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h1><h2 id="4-1-概述及作用"><a href="#4-1-概述及作用" class="headerlink" title="4.1 概述及作用"></a>4.1 概述及作用</h2><p>MySQL官方对索引的定义为：<strong>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。</strong>在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p><strong>优势：</strong></p><ol><li>类似于书籍的目录索引，<strong>提高数据检索的效率，降低数据库的IO成本</strong>。</li><li><strong>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</strong>。</li></ol><p><strong>劣势：</strong></p><ol><li>实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以<strong>索引列也是要占用空间的</strong>。</li><li>虽然索引大大提高了查询效率，同时却也<strong>降低更新表的速度</strong>，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li></ol><h2 id="4-2-索引结构"><a href="#4-2-索引结构" class="headerlink" title="4.2 索引结构"></a>4.2 索引结构</h2><p>MySQL数据库中默认的存储引擎InnoDB的索引结构为B+树，而根据叶子节点的内存存储不同，<strong>索引类型分为主键索引和非主键索引</strong>。</p><p>主键索引的叶子节点存储的是整行数据，在InnoDB中主键索引页被称为聚簇索引。其结构如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021017134.png" alt="image-20210127233731435"></p><p>而非主键索引的叶子节点内容存储的是主键的值，在InnoDB中，非主键索引也被称为二级索引或辅助索引。其结构如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021020938.png" alt="image-20210102114005619"></p><h2 id="4-3-验证索引"><a href="#4-3-验证索引" class="headerlink" title="4.3 验证索引"></a>4.3 验证索引</h2><p>在tb_sku表中一共存在1000w的记录 ;</p><p>A. 根据主键ID查询速度很快</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021022295.png" alt="image-20210102114138923"></p><p>B. 根据name查询速度变慢</p><p>C.对name字段建立索引再次查询,速度很快.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_sku_name <span class="hljs-keyword">on</span> tb_sku(name);<br></code></pre></td></tr></table></figure><h2 id="4-4-索引使用规则"><a href="#4-4-索引使用规则" class="headerlink" title="4.4 索引使用规则"></a>4.4 索引使用规则</h2><p>没有建立索引之前, 执行计划如下</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021022555.png" alt="image-20210102114309709.png"></p><p>建立索引 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_seller_name_status_address <span class="hljs-keyword">on</span> tb_seller(name, status, address);<br></code></pre></td></tr></table></figure><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h3><p>对索引中所有列都指定具体值。</p><p>该情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;小米科技&#x27;</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;北京市&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2021/01/27/5wTQco1LvV7FEan.png" alt="image-20210102114412770"></h4><h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><p>如果索引了多列，要遵守最左前缀法则。<strong>指的是查询从索引的最左前列开始，并且不跳过索引中的列</strong>(并非要求索引第一字段必须在第一位,出现即可.)。</p><ul><li>匹配最左前缀法则，走索引：</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021024524.png" alt="image-20210102114537793"></p><ul><li>违法最左前缀法则 ， 索引失效:</li></ul><p><img src="https://i.loli.net/2021/01/27/HpVSzP5ctUOxX4C.png" alt="image-20210102114555809"></p><ul><li>如果符合最左前缀法则，但是出现跳跃某一列，只有最左列索引生效：</li></ul><p><img src="https://i.loli.net/2021/01/27/RcKYmrQLfxqtUDT.png" alt="image-20210102114620872"></p><h3 id="范围查询右边的列，不能使用索引"><a href="#范围查询右边的列，不能使用索引" class="headerlink" title="范围查询右边的列，不能使用索引"></a>范围查询右边的列，不能使用索引</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021026514.png" alt="image-20210102114702779"></p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><h3 id="在索引列上进行运算操作索引将失效"><a href="#在索引列上进行运算操作索引将失效" class="headerlink" title="在索引列上进行运算操作索引将失效"></a>在索引列上进行运算操作索引将失效</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021027956.png" alt="image-20210102114742534"></p><h3 id="字符串不加单引号造成索引失效"><a href="#字符串不加单引号造成索引失效" class="headerlink" title="字符串不加单引号造成索引失效"></a>字符串不加单引号造成索引失效</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021027308.png" alt="image-20210102114759976"></p><p>由于，在查询时，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><h3 id="使用or使索引失效"><a href="#使用or使索引失效" class="headerlink" title="使用or使索引失效"></a>使用or使索引失效</h3><p><strong>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</strong></p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;黑马程序员&#x27;</span> <span class="hljs-keyword">or</span> createtime <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021028901.png" alt="image-20210102114914453"></p><h3 id="以-开头的Like模糊查询索引失效"><a href="#以-开头的Like模糊查询索引失效" class="headerlink" title="以%开头的Like模糊查询索引失效"></a>以%开头的Like模糊查询索引失效</h3><p><strong>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</strong></p><p><img src="https://i.loli.net/2021/01/27/5eQYGLuVTdZ3bKJ.png" alt="image-20210102114937160"></p><ul><li><p>解决方案 ：</p><p>通过覆盖索引来解决</p></li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021028374.png" alt="image-20210102115000614"></p><h3 id="如果MySQL评估使用索引比全表更慢则不使用索引。"><a href="#如果MySQL评估使用索引比全表更慢则不使用索引。" class="headerlink" title="如果MySQL评估使用索引比全表更慢则不使用索引。"></a>如果MySQL评估使用索引比全表更慢则不使用索引。</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029654.png" alt="image-20210102115253554"></p><h3 id="is-NULL-is-NOT-NULL-有时索引失效。"><a href="#is-NULL-is-NOT-NULL-有时索引失效。" class="headerlink" title="is NULL, is NOT NULL 有时索引失效。"></a>is NULL, is NOT NULL 有时索引失效。</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029056.png" alt="image-20210102115311582"></p><h3 id="in-not-in-有时索引失效"><a href="#in-not-in-有时索引失效" class="headerlink" title="in , not in 有时索引失效"></a>in , not in 有时索引失效</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029669.png" alt="image-20210102115328409"></p><h3 id="尽量使用覆盖索引避免select"><a href="#尽量使用覆盖索引避免select" class="headerlink" title="尽量使用覆盖索引避免select *"></a>尽量使用覆盖索引避免select *</h3><p>尽量使用<strong>覆盖索引</strong>（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029274.png" alt="image-20210102115353112"></p><p>如果查询列，超出索引列，也会降低性能。</p><blockquote><p>TIP :</p><p>using index ：使用覆盖索引的时候就会出现 </p><p>using where：在查找使用索引的情况下，需要回表去查询所需的数据 </p><p>using index condition：查找使用了索引，但是需要回表查询数据 </p><p>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据 </p></blockquote><h2 id="4-5-索引设计原则"><a href="#4-5-索引设计原则" class="headerlink" title="4.5 索引设计原则"></a>4.5 索引设计原则</h2><ul><li><p>对查询频次较高，且数据量比较大的表建立索引。</p></li><li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I&#x2F;O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I&#x2F;O效率。</p></li><li><p>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p></li></ul><h1 id="5-常见的SQL优化"><a href="#5-常见的SQL优化" class="headerlink" title="5. 常见的SQL优化"></a>5. 常见的SQL优化</h1><h2 id="5-1-环境准备"><a href="#5-1-环境准备" class="headerlink" title="5.1 环境准备"></a>5.1 环境准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `emp` ( <br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT, <br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, `age` <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `salary` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;2300&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;Jerry&#x27;</span>,<span class="hljs-string">&#x27;30&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;Luci&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;2800&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;Jay&#x27;</span>,<span class="hljs-string">&#x27;36&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;Tom2&#x27;</span>,<span class="hljs-string">&#x27;21&#x27;</span>,<span class="hljs-string">&#x27;2200&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;Jerry2&#x27;</span>,<span class="hljs-string">&#x27;31&#x27;</span>,<span class="hljs-string">&#x27;3300&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;Luci2&#x27;</span>,<span class="hljs-string">&#x27;26&#x27;</span>,<span class="hljs-string">&#x27;2700&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;Jay2&#x27;</span>,<span class="hljs-string">&#x27;33&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;Tom3&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-string">&#x27;2400&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-string">&#x27;Jerry3&#x27;</span>,<span class="hljs-string">&#x27;32&#x27;</span>,<span class="hljs-string">&#x27;3100&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;Luci3&#x27;</span>,<span class="hljs-string">&#x27;26&#x27;</span>,<span class="hljs-string">&#x27;2900&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-2-order-by优化"><a href="#5-2-order-by优化" class="headerlink" title="5.2 order by优化"></a>5.2 order by优化</h2><h3 id="5-2-1-两种排序方式"><a href="#5-2-1-两种排序方式" class="headerlink" title="5.2.1 两种排序方式"></a>5.2.1 两种排序方式</h3><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021030509.png" alt="image-20210102115948644"></p><p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021030574.png" alt="image-20210102120019132"></p><p>多字段排序</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021030818.png" alt="image-20210102120101808"></p><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。</p><p>where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h3 id="5-2-2-Filesort-的优化"><a href="#5-2-2-Filesort-的优化" class="headerlink" title="5.2.2 Filesort 的优化"></a>5.2.2 Filesort 的优化</h3><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 现在采用的是一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size 和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021031148.png" alt="image-20210102120229796"></p><h2 id="5-3-group-by优化"><a href="#5-3-group-by优化" class="headerlink" title="5.3 group by优化"></a>5.3 group by优化</h2><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> age,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> age;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021032297.png" alt="image-20210102120357530"></p><p>优化后:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> age,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021032507.png" alt="image-20210102120425871"></p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order by null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_emp_age_salary <span class="hljs-keyword">on</span> emp(age,salary);<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021032752.png" alt="image-20210102120521652"></p><h2 id="5-4-limit优化"><a href="#5-4-limit优化" class="headerlink" title="5.4 limit优化"></a>5.4 limit优化</h2><p>limit分页操作, 越往后, 性能越低 :</p><p>优化方案: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku t , (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id limit <span class="hljs-number">9000000</span>,<span class="hljs-number">1</span>) a <span class="hljs-keyword">where</span> t.id <span class="hljs-operator">=</span> a.id;<br></code></pre></td></tr></table></figure><h2 id="5-5-count优化"><a href="#5-5-count优化" class="headerlink" title="5.5 count优化"></a>5.5 count优化</h2><p>在很多的业务系统中，都需要考虑进行分页操作，但是当我们执行分页操作时，都需要进行一次count操作，求取总记录数，如果数据库表的数据量大，在InnoDB引擎中，执行count操作的性能是比较低的，需要遍历全表数据，对计数进行累加。</p><p>优化方案：</p><p>①. 在大数据量的查询中，只查询数据， 而不展示总记录数 ； </p><p>②. 通过缓存redis维护一个表的计数，来记录数据库表的总记录数，在执行插入&#x2F;删除时，需要动态更新；</p><p>③. 在数据库表中定义一个大数据量的计数表，在执行插入&#x2F;删除时，需要动态更新。</p><p>弊端:无法满足各种带where条件的count查询.</p><h2 id="5-6-大批量插入优化"><a href="#5-6-大批量插入优化" class="headerlink" title="5.6 大批量插入优化"></a>5.6 大批量插入优化</h2><p>使用load命令!</p><p>环境准备:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_user` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT, <br>  `username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `birthday` <span class="hljs-type">DATE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `sex` <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`), <br>  <span class="hljs-keyword">UNIQUE</span> KEY `unique_user_username` (`username`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 ;<br></code></pre></td></tr></table></figure><p>Load使用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;可自定义别的符号.</span><br>load data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;/root/sql1.log&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> `tb_user` fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span> lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="5-6-1-对于-InnoDB-类型的表，有以下几种方式可以提高导入的效率："><a href="#5-6-1-对于-InnoDB-类型的表，有以下几种方式可以提高导入的效率：" class="headerlink" title="5.6.1 对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率："></a>5.6.1 对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</h3><h4 id="1）-主键顺序插入"><a href="#1）-主键顺序插入" class="headerlink" title="1） 主键顺序插入"></a>1） 主键顺序插入</h4><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021033432.png" alt="image-20210102121542033"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021033016.png" alt="image-20210102121518728"></p><h4 id="2-关闭唯一性校验"><a href="#2-关闭唯一性校验" class="headerlink" title="2) 关闭唯一性校验"></a>2) 关闭唯一性校验</h4><p>在导入数据前执行 SET UNIQUE_CHECKS&#x3D;0，关闭唯一性校验，在导入结束后执行 SET UNIQUE_CHECKS&#x3D;1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021034009.png" alt="image-20210102121608494"></p><h4 id="3-手动提交事务"><a href="#3-手动提交事务" class="headerlink" title="3) 手动提交事务"></a>3) 手动提交事务</h4><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT&#x3D;0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT&#x3D;1，打开自动提交，也可以提高导入的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021034051.png" alt="image-20210102121630297"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建静态博客</title>
    <link href="/2020/12/04/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/12/04/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Hexo搭建步骤"><a href="#1-Hexo搭建步骤" class="headerlink" title="1.Hexo搭建步骤"></a>1.Hexo搭建步骤</h1><h2 id="1-1安装Git"><a href="#1-1安装Git" class="headerlink" title="1.1安装Git"></a>1.1安装Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu</span><br>sudo apt-get install git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos</span><br>sudo yum install git -y<br></code></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code> 来查看版本 </p><h2 id="1-2安装nodejs"><a href="#1-2安装nodejs" class="headerlink" title="1.2安装nodejs"></a>1.2安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu</span><br>sudo apt-get install nodejs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos</span><br>sudo apt-get install npm<br></code></pre></td></tr></table></figure><p>安装完后，打开命令行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h2 id="1-3安装hexo"><a href="#1-3安装hexo" class="headerlink" title="1.3安装hexo"></a>1.3安装hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完毕<code>hexo -v</code>查看版本 </p><p>至此就全部安装完了。</p><h2 id="1-4初始化一下hexo"><a href="#1-4初始化一下hexo" class="headerlink" title="1.4初始化一下hexo"></a>1.4初始化一下hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init myblog<br></code></pre></td></tr></table></figure><p>这个myblog就是你的博客的文件夹名称，可以自己取什么名字都行，然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd myblog //进入这个myblog文件夹<br>npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有： </p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><h2 id="1-5编译启动"><a href="#1-5编译启动" class="headerlink" title="1.5编译启动"></a>1.5编译启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g # 编译,生成public文件夹<br>hexo server # 启动服务 简写hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问localhost:4000</p><p>使用ctrl+c可以把服务关掉。 </p><h1 id="2-部署到github"><a href="#2-部署到github" class="headerlink" title="2.部署到github"></a>2.部署到github</h1><h2 id="2-1GitHub创建个人仓库"><a href="#2-1GitHub创建个人仓库" class="headerlink" title="2.1GitHub创建个人仓库"></a>2.1GitHub创建个人仓库</h2><p><strong>创建一个和你用户名相同的仓库，后面加.github.io</strong>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io.</p><h2 id="2-2生成SSH添加到GitHub"><a href="#2-2生成SSH添加到GitHub" class="headerlink" title="2.2生成SSH添加到GitHub"></a>2.2生成SSH添加到GitHub</h2><p>回到你的git bash中， </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>然后创建SSH,一路回车 </p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>在gitbash中，查看是否成功 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com #输入yes进行绑定<br></code></pre></td></tr></table></figure><h2 id="2-3将hexo部署到GitHub"><a href="#2-3将hexo部署到GitHub" class="headerlink" title="2.3将hexo部署到GitHub"></a>2.3将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/yourname/yourname.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><blockquote><p> <strong>在项目目录下执行,否则<code>hexo d</code>时会报错<code>deplyer not found</code></strong></p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean # 清理生成的文章<br>hexo generate # 生成文章 `hexo g`缩写<br>hexo deploy # 发布文章 `hexo d`缩写<br></code></pre></td></tr></table></figure><p>注意deploy时可能要你输入username和password</p><h2 id="QAQ-执行hexo-d时可能报错"><a href="#QAQ-执行hexo-d时可能报错" class="headerlink" title="QAQ:执行hexo d时可能报错:"></a>QAQ:执行hexo d时可能报错:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">emote: Support for password authentication was removed on August 13, 2021.<br>remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.<br>fatal: &#x27;https://github.com/blydd/blydd.github.io.git/&#x27; 鉴权失败<br></code></pre></td></tr></table></figure><p>此时把配置文件中git仓库地址配置为ssh类型的即可.例如原地址<code>https://github.com/blydd/blydd.github.io.git</code>,修改为<code>git@github.com:blydd/blydd.github.io.git</code></p><p>部署成功过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/Documents/myblog<br>❯ hexo deploy<br>INFO  Validating config<br>ERROR Deployer not found: git<br></code></pre></td></tr></table></figure><p>在博客项目目录下执行命令<code>npm install hexo-deployer-git --save</code></p><h1 id="3-设置个人域名"><a href="#3-设置个人域名" class="headerlink" title="3.设置个人域名"></a>3.设置个人域名</h1><p> 现在你的个人网站的地址是 <code>yourname.github.io</code></p><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5">阿里云</a>上买一个域名</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain01.jpg" alt="img"></p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br><strong>注意，解析线路选择默认</strong>，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！ </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain02.jpg" alt="img"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>baiyp.ren</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain03.jpg" alt="img"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain04.jpg" alt="img"></p><p>最后，在gitbash中，输入 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new newpapername  # 新建文章<br></code></pre></td></tr></table></figure><p>然后在source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h1 id="4-hexo-的使用"><a href="#4-hexo-的使用" class="headerlink" title="4.hexo 的使用"></a>4.hexo 的使用</h1><h2 id="4-1hexo基本配置"><a href="#4-1hexo基本配置" class="headerlink" title="4.1hexo基本配置"></a>4.1hexo基本配置</h2><p>在文件根目录下的<code>_config.yml</code>，就是<strong>整个hexo框架的配置文件</strong>了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方的配置</a>描述。 </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America&#x2F;New_York, Japan, 和 UTC 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。 </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>网址</td></tr><tr><td>root</td><td>网站根目录</td></tr><tr><td>permalink</td><td>文章的 永久链接 格式</td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2019/09/05</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。 </p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td><td>2013&#x2F;07&#x2F;14&#x2F;hello-world</td></tr><tr><td>:year-:month-:day-:title.html</td><td>2013-07-14-hello-world.html</td></tr><tr><td>:category&#x2F;:title</td><td>foo&#x2F;bar&#x2F;hello-world</td></tr></tbody></table><p>再往下翻，中间这些都默认就好了。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><p>theme就是选择什么主题，也就是在theme这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网(<a href="https://hexo.io/themes/)%E4%B8%8A%E4%B8%8B%E8%BD%BD%EF%BC%8C%E6%8A%8A%E4%B8%BB%E9%A2%98%E7%9A%84%E6%96%87%E4%BB%B6%E6%94%BE%E5%9C%A8theme%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%EF%BC%8C%E5%86%8D%E4%BF%AE%E6%94%B9%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://hexo.io/themes/)上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。</a></p><h2 id="4-2Front-matter"><a href="#4-2Front-matter" class="headerlink" title="4.2Front-matter"></a>4.2Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019</span><span class="hljs-string">/9/14</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="4-2-1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。"><a href="#4-2-1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。" class="headerlink" title="4.2.1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。"></a>4.2.1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>建立日期</td></tr><tr><td>updated</td><td>更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td></tr><tr><td>permalink</td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">categories:<br>- Diary<br>tags:<br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><h3 id="4-2-2layout（布局）"><a href="#4-2-2layout（布局）" class="headerlink" title="4.2.2layout（布局）"></a>4.2.2layout（布局）</h3><p>当你每一次使用代码 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> paper<br></code></pre></td></tr></table></figure><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><strong>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</strong></p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source&#x2F;_drafts</td></tr></tbody></table><p>而new这个命令其实是： </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>只不过这个layout默认是post罢了。 </p><h3 id="4-2-3page"><a href="#4-2-3page" class="headerlink" title="4.2.3page"></a>4.2.3page</h3><p>如果你想另起一页，那么可以使用 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> board<br></code></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h3 id="4-2-4draft"><a href="#4-2-4draft" class="headerlink" title="4.2.4draft"></a>4.2.4draft</h3><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> <span class="hljs-keyword">new</span><span class="hljs-type">page</span><br></code></pre></td></tr></table></figure><p>这样会在source&#x2F;_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在本地端口中开启服务预览。</span><br>hexo server --draft <br></code></pre></td></tr></table></figure><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo publish draft newpage<br></code></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h2 id="4-3更换主题"><a href="#4-3更换主题" class="headerlink" title="4.3更换主题"></a>4.3更换主题</h2><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/">点这里</a></p><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如<a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是<a href="https://github.com/ppoffice/hexo-theme-hueman">hueman</a>这个主题，好像是从WordPress移植过来的，展示效果如下： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/hexo04.jpg" alt="img"></p><p>直接在github链接上下载下来，然后放到theme文件夹下就行了，然后再在刚才说的配置文件中把theme换成那个主题文件夹的名字，它就会自动在theme文件夹中搜索你配置的主题。</p><p>而后进入hueman这个文件夹，可以看到里面也有一个配置文件_config.yml，貌似它默认是_config.yml.example，把它复制一份，重命名为_config.yml就可以了。这个配置文件是修改你整个主题的配置文件。</p><h3 id="4-3-1menu（菜单栏）"><a href="#4-3-1menu（菜单栏）" class="headerlink" title="4.3.1menu（菜单栏）"></a>4.3.1menu（菜单栏）</h3><p>也就是上面菜单栏上的这些东西。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/menu01.jpg" alt="img"></p><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，以及index.md，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><p>如果你想要自己再自定义一个菜单栏的选项，那么就</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> yourdiy<br></code></pre></td></tr></table></figure><p>然后在主题配置文件的menu菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: &#39;中文意思&#39;</code>就可以显示中文了。 </p><h3 id="4-3-2customize-定制"><a href="#4-3-2customize-定制" class="headerlink" title="4.3.2customize(定制)"></a>4.3.2customize(定制)</h3><p>在这里可以修改你的<strong>个人logo</strong>，默认是那个hueman，在source&#x2F;css&#x2F;images文件夹中放入自己要的logo，再改一下url的链接名字就可以了。</p><p>favicon是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p>social_links ，可以显示你的社交链接，而且是有logo的。</p><h2 id="4-4添加RSS"><a href="#4-4添加RSS" class="headerlink" title="4.4添加RSS"></a>4.4添加RSS</h2><h6 id="什么是RSS？"><a href="#什么是RSS？" class="headerlink" title="什么是RSS？"></a>什么是RSS？</h6><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。 </p><h3 id="4-4-1安装RSS插件"><a href="#4-4-1安装RSS插件" class="headerlink" title="4.4.1安装RSS插件"></a>4.4.1安装RSS插件</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-generator-feed<br></code></pre></td></tr></table></figure><h3 id="4-4-2在你整个项目的-config-yml中找到Extensions"><a href="#4-4-2在你整个项目的-config-yml中找到Extensions" class="headerlink" title="4.4.2在你整个项目的_config.yml中找到Extensions"></a>4.4.2在你整个项目的<code>_config.yml</code>中找到Extensions</h3><p><strong>添加：</strong> </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Extensions</span><br><span class="hljs-meta">## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span></span><br><span class="hljs-meta">#RSS订阅</span><br><span class="hljs-symbol">plugin:</span><br>- hexo-generator-feed<br><span class="hljs-meta">#Feed Atom</span><br><span class="hljs-symbol">feed:</span><br><span class="hljs-symbol">  type:</span> atom<br><span class="hljs-symbol">  path:</span> atom.xml<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>这个时候你的RSS链接就是 <code>域名/atom.xml</code>了。</p><p>所以，在主题配置文件中的这个<code>social links</code>，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">rss:</span> /atom.xml<br></code></pre></td></tr></table></figure><h3 id="4-4-3如何关注RSS？"><a href="#4-4-3如何关注RSS？" class="headerlink" title="4.4.3如何关注RSS？"></a>4.4.3<strong>如何关注RSS？</strong></h3><p>首先，你需要一个RSS阅读器，在这里我推荐inoreader，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到inoreader上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索阮一峰，应该就能出来了。</p><p>我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。</p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h2 id="4-5widgets-侧边栏"><a href="#4-5widgets-侧边栏" class="headerlink" title="4.5widgets(侧边栏)"></a>4.5widgets(侧边栏)</h2><p>侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把communication写在上面，在zh-CN.yml中的sidebar，添加communication: ‘中文’。</p><p>然后在hueman&#x2F;layout&#x2F;widget中添加一个communicaiton.ejs，填入模板：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (site.posts.length) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-wrap widget-list&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-title&quot;</span>&gt;</span>&lt;%=</span><span class="language-ruby"> __(<span class="hljs-string">&#x27;sidebar.communiation&#x27;</span>) </span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--这里添加你要写的内容--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-6search-搜索框"><a href="#4-6search-搜索框" class="headerlink" title="4.6search(搜索框)"></a>4.6search(搜索框)</h2><p>默认搜索框是不能够用的， </p><blockquote><p>you need to install <code>hexo-generator-json-content</code> before using Insight Search </p></blockquote><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h2 id="4-7comment-评论系统"><a href="#4-7comment-评论系统" class="headerlink" title="4.7comment(评论系统)"></a>4.7comment(评论系统)</h2><p>这里的多数都是国外的，基本用不了。这个<code>valine</code>好像不错，还能统计文章阅读量，可以自己试一试，<a href="https://valine.js.org/quickstart.html#npm">链接</a>。 </p><h2 id="4-8总结："><a href="#4-8总结：" class="headerlink" title="4.8总结："></a>4.8总结：</h2><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义</li><li>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中comment是评论系统，common是常规的布局，最常修改的在这里面，比如修改页面head和footer的内容。</li><li>scripts：js脚本，暂时没什么用</li><li>source：里面放了一些css的样式，以及图片</li></ul><h1 id="5-git分支进行多终端工作"><a href="#5-git分支进行多终端工作" class="headerlink" title="5.git分支进行多终端工作"></a>5.git分支进行多终端工作</h1><p> 问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p> 在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h2 id="5-1机制"><a href="#5-1机制" class="headerlink" title="5.1机制"></a>5.1机制</h2><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。 </p><p>可以看到并没有source等源文件在内</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source01.jpg" alt="img"></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source02.jpg" alt="img"></p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。 </p><h2 id="5-2上传分支"><a href="#5-2上传分支" class="headerlink" title="5.2上传分支"></a>5.2上传分支</h2><p>首先，先在github上新建一个hexo分支，如图：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source03.jpg" alt="img"></p><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source04.jpg" alt="img"></p><p>然后在本地的任意目录下，打开git bash， </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:youremail/youremail.github.io.git<br></code></pre></td></tr></table></figure><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的youremail.github.io中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。 </p><p>而后 </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit –m <span class="hljs-string">&quot;add branch&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> <br></code></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source05.jpg" alt="img"></p><p>这样就上传完了。 </p><h2 id="5-3更换电脑操作"><a href="#5-3更换电脑操作" class="headerlink" title="5.3更换电脑操作"></a>5.3更换电脑操作</h2><p>一样的，跟之前的环境搭建一样， </p><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install git<br></code></pre></td></tr></table></figure><h5 id="设置git全局邮箱和用户名"><a href="#设置git全局邮箱和用户名" class="headerlink" title="设置git全局邮箱和用户名"></a>设置git全局邮箱和用户名</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourgithubname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;yourgithubemail&quot;</span><br></code></pre></td></tr></table></figure><h5 id="设置ssh-key"><a href="#设置ssh-key" class="headerlink" title="设置ssh key"></a>设置ssh key</h5><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs leaf">ssh-keygen -t rsa -C &quot;youremail&quot;<br><span class="hljs-punctuation">#</span>生成后填到github和coding上（有coding平台的话）<br><span class="hljs-punctuation">#</span>验证是否成功<br>ssh -T git@github.com<br>ssh -T git@git.coding.net <span class="hljs-punctuation">#</span><span class="hljs-params">(有<span class="hljs-variable">coding</span>平台的话)</span><br></code></pre></td></tr></table></figure><h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install nodejs<br>sudo apt-<span class="hljs-built_in">get</span> install npm<br></code></pre></td></tr></table></figure><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>但是已经不需要初始化了，直接在任意文件夹下，</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@………………<br></code></pre></td></tr></table></figure><p>然后进入克隆到的文件夹 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cd xxx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br>npm install<br>npm install hexo-deployer-git <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpage<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol><li>不要忘了，每次写完最好都把源文件上传一下</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit –m <span class="hljs-string">&quot;xxxx&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> <br></code></pre></td></tr></table></figure><ol><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><h1 id="6-coding-page上部署实现国内外分流"><a href="#6-coding-page上部署实现国内外分流" class="headerlink" title="6.coding page上部署实现国内外分流"></a>6.coding page上部署实现国内外分流</h1><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><h2 id="6-1申请coding账户，新建项目"><a href="#6-1申请coding账户，新建项目" class="headerlink" title="6.1申请coding账户，新建项目"></a>6.1<strong>申请coding账户，新建项目</strong></h2><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。 </p><h2 id="6-2添加ssh-key"><a href="#6-2添加ssh-key" class="headerlink" title="6.2添加ssh key"></a>6.2<strong>添加ssh key</strong></h2><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@git</span>.coding.net<br></code></pre></td></tr></table></figure><h2 id="6-3修改-config-yml"><a href="#6-3修改-config-yml" class="headerlink" title="6.3修改_config.yml"></a>6.3<strong>修改_config.yml</strong></h2><p>hexo官方文档是这样的： </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  message:</span> [message]<br><span class="hljs-symbol">  repo:</span><br><span class="hljs-symbol">    github:</span> <span class="hljs-params">&lt;repository url&gt;</span>,[branch]<br><span class="hljs-symbol">    coding:</span> <span class="hljs-params">&lt;repository url&gt;</span>,[branch] <br></code></pre></td></tr></table></figure><p>那么，我们只需要： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deploy:<br>  type: git<br>  repo: <br>    coding: git@git<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.net</span>:yourgithubemail/yourgithubemail<span class="hljs-selector-class">.git</span>,master<br>    github: git@github<span class="hljs-selector-class">.com</span>:ZJUFangzh/yourgithubemail<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span>,master<br></code></pre></td></tr></table></figure><h2 id="6-4部署"><a href="#6-4部署" class="headerlink" title="6.4部署"></a>6.4部署</h2><p>保存一下，直接 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这样就可以在coding的项目上看到你部署的文件了。 </p><h2 id="6-5开启coding-pages服务，绑定域名"><a href="#6-5开启coding-pages服务，绑定域名" class="headerlink" title="6.5开启coding pages服务，绑定域名"></a>6.5开启coding pages服务，绑定域名</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding01.jpg" alt="img"></p><h4 id="阿里云添加解析"><a href="#阿里云添加解析" class="headerlink" title="阿里云添加解析"></a><strong>阿里云添加解析</strong></h4><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding02.jpg" alt="img"></p><p>个时候就可以把之前github的解析改成境外，把coding的解析设为默认了 </p><h2 id="6-6去除coding-page的跳转广告"><a href="#6-6去除coding-page的跳转广告" class="headerlink" title="6.6去除coding page的跳转广告"></a>6.6<strong>去除coding page的跳转广告</strong></h2><p>oding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到<code>pages服务</code>这里。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding03.jpg" alt="img"></p><p>只要你在页面上添加一行文字，写<code>Hosted by Coding Pages</code>，然后点下面的小勾勾，两个工作日内它就会审核通过了。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hosted by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pages.coding.me&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Coding Pages<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我的选择是把这一行代码放在主题文件夹<code>/layout/common/footer.ejs</code>里面，也就是本来在页面中看到的页脚部分。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding04.jpg" alt="img"></p><p>当然，为了统一，我又在后面加上了and <strong>Github</strong>哈哈，可以不加。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hosted by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pages.coding.me&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Coding Pages<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> and <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Github<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是最终加上去的代码。</p><h1 id="7优化"><a href="#7优化" class="headerlink" title="7优化"></a>7优化</h1><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><p>本文参考了: <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar.com</a>这里面说的很详细了。</p><h2 id="7-1SEO优化"><a href="#7-1SEO优化" class="headerlink" title="7.1SEO优化"></a>7.1SEO优化</h2><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。 </p><blockquote><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 </p></blockquote><h5 id="百度seo"><a href="#百度seo" class="headerlink" title="百度seo"></a>百度seo</h5><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code></p><p>来查看一下。 </p><h6 id="登录百度站长平台添加网站"><a href="#登录百度站长平台添加网站" class="headerlink" title="登录百度站长平台添加网站"></a><strong>登录百度站长平台添加网站</strong></h6><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index">百度站长平台</a>，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><h6 id="提交链接"><a href="#提交链接" class="headerlink" title="提交链接"></a><strong>提交链接</strong></h6><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><p>npm install hexo-generator-sitemap –save<br>npm install hexo-generator-baidu-sitemap –save</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">COPYnpm <span class="hljs-keyword">install </span>hexo-generator-sitemap --save     <br>npm <span class="hljs-keyword">install </span>hexo-generator-<span class="hljs-keyword">baidu-sitemap </span>--save<br></code></pre></td></tr></table></figure><p>这时候你需要在你的根目录下_config.xml中看看url有没有改成你自己的：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">COPY# URL<br>## If your site is put <span class="hljs-keyword">in</span> a subdirectory, set url <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;http://yoursite.com/child&#x27;</span> and root <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;/child/&#x27;</span><br>url: http:<span class="hljs-comment">//www.baiyp.ren</span><br>root: /<br></code></pre></td></tr></table></figure><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/seo01.jpg" alt="img"></p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件&#x2F;layout&#x2F;common&#x2F;head.ejs的适当位置，然后验证一下就可以了。</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/seo02.jpg" alt="img"></p><p><strong>ps:</strong> 百度收录比较慢，慢慢等个十天半个月再去<code>site:&lt;域名&gt;</code>看看有没有被收录。 </p><h2 id="7-2google的SEO"><a href="#7-2google的SEO" class="headerlink" title="7.2google的SEO"></a>7.2google的SEO</h2><p>流程一样，google更简单，而且收录更快，进入google站点地图，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 yourname.github.io，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h1 id="8评论系统"><a href="#8评论系统" class="headerlink" title="8评论系统"></a>8评论系统</h1><p>评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar</a>这个博主用的来比力评论系统，感觉也还不错。 </p><p><a href="https://livere.com/">来比力官网</a>，注册好后，点击管理页面，在<code>代码管理</code>中找到安装代码： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/pinglun01.jpg" alt="img"></p><p>获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。 </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comment/livebe&#x27;)</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>然后可以自己设置一些东西： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/pinglun02.jpg" alt="img"></p><p>还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。 </p><h1 id="9添加百度统计"><a href="#9添加百度统计" class="headerlink" title="9添加百度统计"></a>9添加百度统计</h1><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。 </p><p><a href="https://tongji.baidu.com/">百度统计</a>，注册一下，这里的账号好像和百度账号不是一起的。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/bdtj01.jpg" alt="img"></p><p>照样把代码复制到<code>head.ejs</code>文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。 </p><h4 id="文章阅读量统计leanCloud"><a href="#文章阅读量统计leanCloud" class="headerlink" title="文章阅读量统计leanCloud"></a>文章阅读量统计leanCloud</h4><p><a href="https://leancloud.cn/">leanCloud</a>，进去后注册一下，进入后创建一个应用： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/leanCloud01.jpg" alt="img"></p><p>在<code>存储</code>中创建Class，命名为Counter, </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/leanCloud02.jpg" alt="img"></p><p>然后在设置页面看到你的<code>应用Key</code>，在主题的配置文件中： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">你的id</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">你的key</span><br></code></pre></td></tr></table></figure><p>在<code>article.ejs</code>中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了， </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">阅读数量:&lt;span <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;&lt;%= url_for(post.path) %&gt;&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;leancloud_visitors&quot;</span> <span class="hljs-attribute">data-flag-title</span>=<span class="hljs-string">&quot;&lt;%- post.title %&gt;&quot;</span>&gt;&lt;/span&gt;次<br></code></pre></td></tr></table></figure><p>然后在<code>footer.ejs</code>的最后，添加： </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;script src=<span class="hljs-string">&quot;//cdn1.lncld.net/static/js/2.5.0/av-min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> APP_ID = <span class="hljs-string">&#x27;你的app id&#x27;</span>;<br>    <span class="hljs-keyword">var</span> APP_KEY = <span class="hljs-string">&#x27;你的app key&#x27;</span>;<br>    AV.init(&#123;<br>        <span class="hljs-attr">appId</span>: APP_ID,<br>        <span class="hljs-attr">appKey</span>: APP_KEY<br>    &#125;);<br>    <span class="hljs-comment">// 显示次数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showTime</span>(<span class="hljs-params">Counter</span>) &#123;<br>        <span class="hljs-keyword">var</span> query = <span class="hljs-keyword">new</span> AV.Query(<span class="hljs-string">&quot;Counter&quot;</span>);<br>        <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).attr(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-built_in">trim</span>();<br>            <span class="hljs-comment">// where field</span><br>            query.equalTo(<span class="hljs-string">&quot;words&quot;</span>, url);<br>            <span class="hljs-comment">// count</span><br>            query.<span class="hljs-built_in">count</span>().then(<span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>                <span class="hljs-comment">// There are number instances of MyClass where words equals url.</span><br>                $(document.getElementById(url)).<span class="hljs-built_in">text</span>(<span class="hljs-built_in">number</span>?  <span class="hljs-built_in">number</span> : <span class="hljs-string">&#x27;--&#x27;</span>);<br>            &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>                <span class="hljs-comment">// error is an instance of AVError.</span><br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 追加pv</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addCount</span>(<span class="hljs-params">Counter</span>) &#123;<br>        <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span> ? $(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).attr(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-built_in">trim</span>() : <span class="hljs-string">&#x27;icafebolger.com&#x27;</span>;<br>        <span class="hljs-keyword">var</span> Counter = AV.Object.extend(<span class="hljs-string">&quot;Counter&quot;</span>);<br>        <span class="hljs-keyword">var</span> query = <span class="hljs-keyword">new</span> Counter;<br>        query.save(&#123;<br>            <span class="hljs-attr">words</span>: url<br>        &#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params">object</span>) &#123;<br>        &#125;)<br>    &#125;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> Counter = AV.Object.extend(<span class="hljs-string">&quot;Counter&quot;</span>);<br>        addCount(Counter);<br>        showTime(Counter);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>重新部署后就可以了。</p><h1 id="10引入不蒜子访问量和访问人次统计"><a href="#10引入不蒜子访问量和访问人次统计" class="headerlink" title="10引入不蒜子访问量和访问人次统计"></a>10引入不蒜子访问量和访问人次统计</h1><p>不蒜子的添加非常非常方便，<a href="http://busuanzi.ibruce.info/">不蒜子</a></p><p>在<code>footer.ejs</code>中的合适位置，看你要显示在哪个地方，添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这一段是不蒜子的访问量统计代码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>本站总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次 <span class="hljs-symbol">&amp;nbsp;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span>访客数<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人次<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就可以了。 </p><h1 id="11总结"><a href="#11总结" class="headerlink" title="11总结"></a>11总结</h1><p>到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于hueman主题，其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。 </p><blockquote><p>博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</p><p>本文永久链接是：<a href="http://www.baiyp.ren/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html">http://www.baiyp.ren/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</a></p></blockquote><h1 id="12-Q-A"><a href="#12-Q-A" class="headerlink" title="12 Q&amp;A"></a>12 Q&amp;A</h1><h2 id="12-1-点击目录总跳转文章顶端"><a href="#12-1-点击目录总跳转文章顶端" class="headerlink" title="12.1 点击目录总跳转文章顶端"></a>12.1 点击目录总跳转文章顶端</h2><blockquote><p>在使用<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">fluid主题</a>时,文章目录点击总是跳转文章顶端</p></blockquote><p>经排查,是之前安装了<code>hexo-toc</code>插件(目录插件),和<code>fluid</code>主题的目录功能冲突导致,卸载插件即可:<code>npm uninstall hexo-toc</code></p>]]></content>
    
    
    <categories>
      
      <category>折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用springboot发送邮件</title>
    <link href="/2020/12/04/%E4%BD%BF%E7%94%A8Spring%20Boot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2020/12/04/%E4%BD%BF%E7%94%A8Spring%20Boot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在项目的维护过程中，我们通常会在应用中加入短信或者邮件预警功能，比如当应用出现异常宕机时应该及时地将预警信息发送给运维或者开发人员，本文将介绍如何在Spring Boot中发送邮件。在Spring Boot中发送邮件使用的是Spring提供的org.springframework.mail.javamail.JavaMailSender，其提供了许多简单易用的方法，可发送简单的邮件、HTML格式的邮件、带附件的邮件，并且可以创建邮件模板。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>在Spring Boot中发送邮件，需要用到spring-boot-starter-mail，引入spring-boot-starter-mail：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h1><p>在application.yml中进行简单的配置（以163邮件为例）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.163.com</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">你的账号</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">你的密码</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">mail:</span><br>        <span class="hljs-attr">smtp:</span><br>          <span class="hljs-attr">auth:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">starttls:</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>spring.mail.username，spring.mail.password填写自己的邮箱账号**密码(smtp服务的授权码)**即可。</p><h1 id="发送简单的邮件"><a href="#发送简单的邮件" class="headerlink" title="发送简单的邮件"></a>发送简单的邮件</h1><p>编写EmailController，注入JavaMailSender:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;sendSimpleEmail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendSimpleEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>            message.setFrom(from);<br>            message.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            message.setSubject(<span class="hljs-string">&quot;一封简单的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            message.setText(<span class="hljs-string">&quot;使用Spring Boot发送简单邮件。&quot;</span>); <span class="hljs-comment">// 内容</span><br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问<a href="http://localhost/email/sendSimpleEmail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendSimpleEmail，提示发送成功：</a></p><h1 id="发送HTML格式的邮件"><a href="#发送HTML格式的邮件" class="headerlink" title="发送HTML格式的邮件"></a>发送HTML格式的邮件</h1><p>改造EmailController，SimpleMailMessage替换为MimeMessage：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;sendHtmlEmail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendHtmlEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;一封HTML格式的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            <span class="hljs-comment">// 带HTML格式的内容</span><br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&lt;p style=&#x27;color:#6db33f&#x27;&gt;使用Spring Boot发送HTML格式邮件。&lt;/p&gt;&quot;</span>);<br>            helper.setText(sb.toString(), <span class="hljs-literal">true</span>);<br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>helper.setText(sb.toString(), true);中的true表示发送HTML格式邮件。启动项目，访问<a href="http://localhost/email/sendHtmlEmail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%96%87%E6%9C%AC%E5%B7%B2%E7%BB%8F%E5%8A%A0%E4%B8%8A%E4%BA%86%E9%A2%9C%E8%89%B2#6db33f%EF%BC%9A">http://localhost/email/sendHtmlEmail，提示发送成功，可看到文本已经加上了颜色#6db33f：</a></p><h1 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h1><p>发送带附件的邮件和普通邮件相比，其实就只是多了个传入附件的过程。不过使用的仍是MimeMessage：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springboot.demo.controller;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;sendAttachmentsMail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendAttachmentsMail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;一封带附件的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            helper.setText(<span class="hljs-string">&quot;详情参见附件内容！&quot;</span>); <span class="hljs-comment">// 内容</span><br>            <span class="hljs-comment">// 传入附件</span><br>            <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/static/file/项目文档.docx&quot;</span>));<br>            helper.addAttachment(<span class="hljs-string">&quot;项目文档.docx&quot;</span>, file);<br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问<a href="http://localhost/email/sendAttachmentsMail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendAttachmentsMail，提示发送成功：</a></p><h1 id="发送带静态资源的邮件"><a href="#发送带静态资源的邮件" class="headerlink" title="发送带静态资源的邮件"></a>发送带静态资源的邮件</h1><p>发送带静态资源的邮件其实就是在发送HTML邮件的基础上嵌入静态资源（比如图片），嵌入静态资源的过程和传入附件类似，唯一的区别在于需要标识资源的cid：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springboot.demo.controller;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;sendInlineMail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendInlineMail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;一封带静态资源的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            helper.setText(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;博客图：&lt;img src=&#x27;cid:img&#x27;/&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 内容</span><br>            <span class="hljs-comment">// 传入附件</span><br>            <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/static/img/sunshine.png&quot;</span>));<br>            helper.addInline(<span class="hljs-string">&quot;img&quot;</span>, file); <br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>helper.addInline(“img”, file);中的img和图片标签里cid后的名称相对应。启动项目访问<a href="http://localhost/email/sendInlineMail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendInlineMail，提示发送成功：</a></p><h1 id="使用模板发送邮件"><a href="#使用模板发送邮件" class="headerlink" title="使用模板发送邮件"></a>使用模板发送邮件</h1><p>在发送验证码等情况下可以创建一个邮件的模板，唯一的变量为验证码。这个例子中使用的模板解析引擎为Thymeleaf，所以首先引入Thymeleaf依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在template目录下创建一个emailTemplate.html模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    您好，您的验证码为&#123;code&#125;，请在两分钟内使用完成操作。<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发送模板邮件，本质上还是发送HTML邮件，只不过多了绑定变量的过程，详细如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springboot.demo.controller;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.thymeleaf.TemplateEngine;<br><span class="hljs-keyword">import</span> org.thymeleaf.context.Context;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TemplateEngine templateEngine;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;sendTemplateEmail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendTemplateEmail</span><span class="hljs-params">(String code)</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;邮件摸板测试&quot;</span>); <span class="hljs-comment">// 标题</span><br>            <span class="hljs-comment">// 处理邮件模板</span><br>            <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>            context.setVariable(<span class="hljs-string">&quot;code&quot;</span>, code);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> templateEngine.process(<span class="hljs-string">&quot;emailTemplate&quot;</span>, context);<br>            helper.setText(template, <span class="hljs-literal">true</span>);<br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中code对应模板里的${code}变量。启动项目，访问<a href="http://localhost/email/sendTemplateEmail?code=EOS9%EF%BC%8C%E9%A1%B5%E9%9D%A2%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendTemplateEmail?code=EOS9，页面提示发送成功：</a></p><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/22.Spring-Boot-Email">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/22.Spring-Boot-Email</a></p></blockquote><blockquote><p>本文作者： MrBird<br>本文链接： <a href="http://mrbird.cc/Spring-Boot-Email.html">http://mrbird.cc/Spring-Boot-Email.html</a><br>版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
      <tag>邮件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池Executors</title>
    <link href="/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0Executors/"/>
    <url>/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0Executors/</url>
    
    <content type="html"><![CDATA[<p>线程池的创建分为两种方式：ThreadPoolExecutor 和 Executors</p><h1 id="Executors可以创建6种线程池"><a href="#Executors可以创建6种线程池" class="headerlink" title="Executors可以创建6种线程池:"></a>Executors可以创建6种线程池:</h1><ol><li>FixedThreadPool(n)：创建一个数量固定的线程池，超出的任务会在队列中等待空闲的线程，可用于控制程序的最大并发数。</li><li>CachedThreadPool()：短时间内处理大量工作的线程池，会根据任务数量产生对应的线程，并试图缓存线程以便重复使用，如果限制 60 秒没被使用，则会被移除缓存。</li><li>SingleThreadExecutor()：创建一个单线程线程池。</li><li>ScheduledThreadPool(n)：创建一个数量固定的线程池，支持执行定时性或周期性任务。</li><li>SingleThreadScheduledExecutor()：此线程池就是单线程的 newScheduledThreadPool。</li><li>WorkStealingPool(n)：Java 8 新增创建线程池的方法，创建时如果不设置任何参数，则以当前机器处理器个数作为线程个数，此线程池会并行处理任务，不能保证执行顺序。</li></ol><h2 id="FixedThreadPool-OOM"><a href="#FixedThreadPool-OOM" class="headerlink" title="FixedThreadPool (OOM)"></a>FixedThreadPool (OOM)</h2><p>创建固定个数的线程池，具体示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">fixedThreadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    fixedThreadPool.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentTime - &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">//以上程序执行结果如下：</span><br><br>   <span class="hljs-comment">// CurrentTime - 2019-06-27 20:58:58</span><br><br>    <span class="hljs-comment">//CurrentTime - 2019-06-27 20:58:58</span><br><br>   <span class="hljs-comment">// CurrentTime - 2019-06-27 20:58:59</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，newFixedThreadPool(2) 确实是创建了两个线程，在执行了一轮（2 次）之后，停了一秒，有了空闲线程，才执行第三次。</p></blockquote><h2 id="CachedThreadPool-OOM"><a href="#CachedThreadPool-OOM" class="headerlink" title="CachedThreadPool (OOM)"></a>CachedThreadPool (OOM)</h2><p>根据实际需要自动创建带缓存功能的线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">cachedThreadPool</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    cachedThreadPool.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentTime - &quot;</span> +<br>                           LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br>以上程序执行结果如下：<br><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，newCachedThreadPool 在短时间内会创建多个线程来处理对应的任务，并试图把它们进行缓存以便重复使用。</p></blockquote><h2 id="SingleThreadExecutor-OOM"><a href="#SingleThreadExecutor-OOM" class="headerlink" title="SingleThreadExecutor  (OOM)"></a>SingleThreadExecutor  (OOM)</h2><p>创建单个线程的线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">singleThreadExecutor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    singleThreadExecutor.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentTime - &quot;</span> +<br>                           LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-comment">//以上程序执行结果如下：</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span>:<span class="hljs-number">35</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span>:<span class="hljs-number">36</span><br></code></pre></td></tr></table></figure><h2 id="ScheduledThreadPool-OOM"><a href="#ScheduledThreadPool-OOM" class="headerlink" title="ScheduledThreadPool (OOM)"></a>ScheduledThreadPool (OOM)</h2><p>创建一个可以执行周期性任务的线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">scheduledThreadPool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br>scheduledThreadPool.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;ThreadPool：&quot;</span> + LocalDateTime.now());<br>&#125;, <span class="hljs-number">1L</span>, TimeUnit.SECONDS);<br>System.out.println(<span class="hljs-string">&quot;CurrentTime：&quot;</span> + LocalDateTime.now());<br><br><span class="hljs-comment">//以上程序执行结果如下：</span><br>CurrentTime：<span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-27T21:<span class="hljs-number">54</span>:<span class="hljs-number">21.881</span><br>ThreadPool：<span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-27T21:<span class="hljs-number">54</span>:<span class="hljs-number">22.845</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，我们设置的 1 秒后执行的任务生效了。</p></blockquote><h2 id="SingleThreadScheduledExecutor"><a href="#SingleThreadScheduledExecutor" class="headerlink" title="SingleThreadScheduledExecutor"></a>SingleThreadScheduledExecutor</h2><p>创建一个可以执行周期性任务的单线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">singleThreadScheduledExecutor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadScheduledExecutor();<br>singleThreadScheduledExecutor.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;ThreadPool：&quot;</span> + LocalDateTime.now());<br>&#125;, <span class="hljs-number">1L</span>, TimeUnit.SECONDS);<br>System.out.println(<span class="hljs-string">&quot;CurrentTime：&quot;</span> + LocalDateTime.now());<br></code></pre></td></tr></table></figure><h2 id="WorkStealingPool"><a href="#WorkStealingPool" class="headerlink" title="WorkStealingPool"></a>WorkStealingPool</h2><p><strong>Java 8 新增的创建线程池的方式，可根据当前电脑 CPU 处理器数量生成相应个数的线程池，使用代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">workStealingPool</span> <span class="hljs-operator">=</span>  Executors.newWorkStealingPool();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">finalNumber</span> <span class="hljs-operator">=</span> i;<br>    workStealingPool.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;I：&quot;</span> + finalNumber);<br>    &#125;);<br>&#125;<br>Thread.sleep(<span class="hljs-number">5000</span>);<br><br><span class="hljs-comment">//以上程序执行结果如下：</span><br>        I：<span class="hljs-number">0</span><br>        I：<span class="hljs-number">3</span><br>        I：<span class="hljs-number">2</span><br>        I：<span class="hljs-number">1</span><br>        I：<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，newWorkStealingPool 是并行处理任务的，并不能保证执行顺序。</p></blockquote><h1 id="ThreadPoolExecutor-VS-Executors"><a href="#ThreadPoolExecutor-VS-Executors" class="headerlink" title="ThreadPoolExecutor VS Executors"></a>ThreadPoolExecutor VS Executors</h1><ul><li>ThreadPoolExecutor 创建线程池的方式相对传统，而 Executors 提供了更多的线程池类型（6 种），但很不幸的消息是在实际开发中并不推荐使用 Executors 的方式来创建线程池。</li></ul><blockquote><p>《阿里巴巴 Java 开发手册》中对于线程池的创建也是这样规定的，内容如下：</p></blockquote><blockquote><p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的读者更加明确线程池的运行规则，规避资源耗尽的风险。</p></blockquote><h2 id="Executors-创建线程池对象的弊端"><a href="#Executors-创建线程池对象的弊端" class="headerlink" title="Executors 创建线程池对象的弊端:"></a>Executors 创建线程池对象的弊端:</h2><p>FixedThreadPool 和 SingleThreadPool</p><blockquote><p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM(OutOfMemoryError 的缩写，指内存溢出的意思)。</p></blockquote><p>CachedThreadPool 和 ScheduledThreadPool</p><blockquote><p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p></blockquote><p>举个栗子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">maxFixedThreadPool</span> <span class="hljs-operator">=</span>  Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;<br>    maxFixedThreadPool.execute(()-&gt;&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后设置 JVM（Java 虚拟机）的启动参数： -Xmx10m -Xms10m （设置 JVM 最大运行内存等于 10M）运行程序，会抛出 OOM 异常，信息如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.OutOfMemoryError: GC overhead limit exceeded<br><br> at java.util.concurrent.LinkedBlockingQueue.offer(LinkedBlockingQueue.java:<span class="hljs-number">416</span>)<br><br> at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="hljs-number">1371</span>)<br><br> at xxx.main(xxx.java:<span class="hljs-number">127</span>)<br></code></pre></td></tr></table></figure><p>为什么 Executors 会存在 OOM 的缺陷？</p><p>通过以上代码，找到了 FixedThreadPool 的源码，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                      <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到创建 FixedThreadPool 使用了 LinkedBlockingQueue 作为任务队列，继续查看 LinkedBlockingQueue 的源码就会发现问题的根源，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedBlockingQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(Integer.MAX_VALUE);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>当使用 LinkedBlockingQueue 并没有给它指定长度的时候，默认长度为 Integer.MAX_VALUE，这样就会导致程序会给线程池队列添加超多个任务，因为任务量太大就有造成 OOM 的风险。</strong></p><hr><h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><h2 id="Executors-能创建单线程的线程池吗？怎么创建？"><a href="#Executors-能创建单线程的线程池吗？怎么创建？" class="headerlink" title="Executors 能创建单线程的线程池吗？怎么创建？"></a>Executors 能创建单线程的线程池吗？怎么创建？</h2><p>答：Executors 可以创建单线程线程池，创建分为两种方式：</p><ol><li>Executors.newSingleThreadExecutor()：创建一个单线程线程池。</li><li>Executors.newSingleThreadScheduledExecutor()：创建一个可以执行周期性任务的单线程池。</li></ol><h2 id="Executors-中哪个线程适合执行短时间内大量任务？"><a href="#Executors-中哪个线程适合执行短时间内大量任务？" class="headerlink" title="Executors 中哪个线程适合执行短时间内大量任务？"></a>Executors 中哪个线程适合执行短时间内大量任务？</h2><p>答：newCachedThreadPool() 适合处理大量短时间工作任务。它会试图缓存线程并重用，如果没有缓存任务就会新创建任务，如果线程的限制时间超过六十秒，则会被移除线程池，因此它比较适合短时间内处理大量任务。</p><h2 id="可以执行周期性任务的线程池都有哪些？"><a href="#可以执行周期性任务的线程池都有哪些？" class="headerlink" title="可以执行周期性任务的线程池都有哪些？"></a>可以执行周期性任务的线程池都有哪些？</h2><p>答：可执行周期性任务的线程池有两个，分别是：newScheduledThreadPool() 和 newSingleThreadScheduledExecutor()，其中 newSingleThreadScheduledExecutor() 是 newScheduledThreadPool() 的单线程版本。</p><h2 id="JDK-8-新增了什么线程池？有什么特点？"><a href="#JDK-8-新增了什么线程池？有什么特点？" class="headerlink" title="JDK 8 新增了什么线程池？有什么特点？"></a>JDK 8 新增了什么线程池？有什么特点？</h2><p>答：JDK 8 新增的线程池是 newWorkStealingPool(n)，如果不指定并发数（也就是不指定 n），newWorkStealingPool() 会根据当前 CPU 处理器数量生成相应个数的线程池。<strong>它的特点是并行处理任务的，不能保证任务的执行顺序。</strong></p><h2 id="newFixedThreadPool-和-ThreadPoolExecutor-有什么关系？"><a href="#newFixedThreadPool-和-ThreadPoolExecutor-有什么关系？" class="headerlink" title="newFixedThreadPool 和 ThreadPoolExecutor 有什么关系？"></a>newFixedThreadPool 和 ThreadPoolExecutor 有什么关系？</h2><p>答：newFixedThreadPool 是 ThreadPoolExecutor 包装，newFixedThreadPool 底层也是通过 ThreadPoolExecutor 实现的。</p><h2 id="单线程的线程池存在的意义是什么？"><a href="#单线程的线程池存在的意义是什么？" class="headerlink" title="单线程的线程池存在的意义是什么？"></a>单线程的线程池存在的意义是什么？</h2><p>答：单线程线程池提供了队列功能，如果有多个任务会排队执行，<strong>可以保证任务执行的顺序性</strong>。单线程线程池也可以重复利用已有线程，减低系统创建和销毁线程的性能开销。</p><h2 id="线程池为什么建议使用-ThreadPoolExecutor-创建，而非-Executors？"><a href="#线程池为什么建议使用-ThreadPoolExecutor-创建，而非-Executors？" class="headerlink" title="线程池为什么建议使用 ThreadPoolExecutor 创建，而非 Executors？"></a>线程池为什么建议使用 ThreadPoolExecutor 创建，而非 Executors？</h2><p>答：使用 ThreadPoolExecutor 能让开发者更加明确线程池的运行规则，避免资源耗尽的风险。</p><p>Executors 返回线程池的缺点如下：</p><p>FixedThreadPool 和 SingleThreadPool 允许请求队列长度为 Integer.MAX_VALUE，可能会堆积大量请求，可能会导致内存溢出；</p><p>CachedThreadPool 和 ScheduledThreadPool 允许创建线程数量为 Integer.MAX_VALUE，创建大量线程，可能会导致内存溢出。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程池</tag>
      
      <tag>executors</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2020/12/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/12/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>正则表达式用于文本内容的查找和替换。</p><p><a href="https://regexr.com/">正则表达式在线工具</a></p><h1 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符 ."></a>匹配单个字符 <code>.</code></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>.</code> 可以用来匹配任何的<strong>单个字符</strong>，但是在绝大多数实现里面，<strong>不能匹配换行符</strong>；</p><p><code>.</code> 是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 <code>.</code> ，那么要用 <code>\</code> 进行转义，即在 <code>.</code> 前面加上 <code>\</code> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h2><p>正则表达式一般是区分大小写的，但也有些实现不区分。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//正则表达式</span><br>C.C2018<br><span class="hljs-comment">//匹配结果</span><br>My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> CyC2018<br></code></pre></td></tr></table></figure><h1 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符 [ ]"></a>匹配一组字符 <code>[ ]</code></h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><code>[ ]</code>定义一个字符集合；</p><p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在<code>[ ]</code>中使用。</p><p><code>-</code> <strong>只有在 <code>[ ]</code>之间才是元字符，在 [ ] 之外就是一个普通字符；</strong></p><p><code>^</code> <strong>在 <code>[ ]</code>中是取非操作</strong>。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p><strong>匹配以 abc 为开头且最后一个字母不为数字的字符串：</strong></p><ul><li><p>**正则表达式 <code>abc[^0-9]</code> **</p></li><li><p><strong>匹配结果</strong></p><ol><li><p><strong>abcd</strong></p></li><li><p>abc1</p></li><li><p>abc2</p></li></ol></li></ul><h1 id="使用元字符"><a href="#使用元字符" class="headerlink" title="使用元字符"></a>使用元字符</h1><h2 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h2><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>[\b]</td><td>回退（删除）一个字符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr></tbody></table><p><strong><code>\r\n</code>是 Windows 中的文本行结束标签，在 Unix&#x2F;Linux 则是<code>\n</code></strong></p><p><strong><code>\r\n\r\n</code> 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</strong></p><h2 id="匹配特定的字符"><a href="#匹配特定的字符" class="headerlink" title="匹配特定的字符"></a>匹配特定的字符</h2><h3 id="数字元字符-d"><a href="#数字元字符-d" class="headerlink" title="数字元字符 \d"></a>数字元字符 <code>\d</code></h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><strong>\d</strong></td><td>数字字符，等价于 <code>[0-9]</code></td></tr><tr><td><strong><code>\D</code></strong></td><td>非数字字符，等价于 <code>[^0-9]</code></td></tr></tbody></table><h3 id="字母数字元字符-w"><a href="#字母数字元字符-w" class="headerlink" title="字母数字元字符 \w"></a>字母数字元字符 <code>\w</code></h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\w</code></td><td>大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]</td></tr><tr><td><code>\W</code></td><td>对 \w 取非</td></tr></tbody></table><h3 id="空白字符元字符-s"><a href="#空白字符元字符-s" class="headerlink" title="空白字符元字符 \s"></a>空白字符元字符 <code>\s</code></h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\s</code></td><td>任何一个空白字符，等价于 <code>[\f\n\r\t\v]</code></td></tr><tr><td><code>\S</code></td><td>对 <code>\s</code> 取非</td></tr></tbody></table><p><code>\x</code> 匹配十六进制字符，<code>\0</code> 匹配八进制，例如 <code>\xA</code> 对应值为 <code>10</code> 的 ASCII 字符 ，即 <code>\n</code>。</p><h1 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h1><h2 id=""><a href="#" class="headerlink" title="+ * ?"></a><code>+</code> <code>*</code> <code>?</code></h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li><strong><code>+</code></strong> 匹配 1 个或者多个字符</li><li><code>*</code> 匹配 0 个或者多个字符</li><li><strong><code>?</code></strong> 匹配 0 个或者 1 个字符</li></ul><h3 id="示例-匹配邮箱地址"><a href="#示例-匹配邮箱地址" class="headerlink" title="示例:匹配邮箱地址"></a>示例:匹配邮箱地址</h3><p><strong>正则表达式 <code>[\w.]+@\w+\.\w+</code></strong></p><p><code>[\w.]</code> 匹配的是<strong>字母数字或者 <code>.</code></strong> ，在其后面加上 <code>+</code> ，表示<strong>匹配多次</strong>。在字符集合 <code>[ ]</code> 里，<code>.</code> 不是元字符；</p><p><strong>匹配结果</strong>   <code>abc.def@qq.com</code></p><p>​</p><h2 id="n-m"><a href="#n-m" class="headerlink" title="n m"></a><code>n m</code></h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>{n}</strong> 匹配 n 个字符</li><li><strong>{m,n}</strong> 匹配 m~n 个字符</li><li><strong>{m,}</strong> 至少匹配 m 个字符</li></ul><p><code>*</code> 和 <code>+</code> 都是贪婪型元字符，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m,n}? 。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例:"></a>示例:</h3><p><strong>正则表达式</strong>   <code>a.+c</code></p><p><strong>匹配结果</strong>  abcabcabc</p><p>由于 <code>+</code> 是贪婪型的，因此 <code>.+</code> 会匹配更可能多的内容，所以会把整个 <code>abcabcabc</code> 文本都匹配，而不是只匹配前面的 <code>abc</code> 文本。用懒惰型可以实现匹配前面的:<code>a.+?c</code>  匹配出 <code>abc</code>。</p><h1 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h1><h2 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h2><p><strong><code>\b</code></strong> 可以匹配一个单词的边界，边界是指位于 <code>\w</code> 和 <code>\W</code> 之间的位置；**<code>\B</code>** 匹配一个不是单词边界的位置。</p><p><code>\b</code> 只匹配位置，不匹配字符，因此 <code>\babc\b</code> 匹配出来的结果为 <code>3</code> 个字符。</p><h2 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界 ^  $"></a>字符串边界 <code>^  $</code></h2><p><strong><code>^</code></strong> 匹配整个字符串的开头，**<code>$</code>** 匹配结尾。</p><p><strong><code>^</code> 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</strong></p><p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p><h3 id="示例-匹配代码中以-开始的注释行"><a href="#示例-匹配代码中以-开始的注释行" class="headerlink" title="示例:匹配代码中以 // 开始的注释行"></a>示例:匹配代码中以 <code>//</code> 开始的注释行</h3><p><strong>正则表达式</strong> <code>^\s*\/\/.*$</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240314180056035.png" alt="image-20240314180056035"></p><p><strong>匹配结果</strong></p><ol><li>public void fun() {</li><li><strong>&#x2F;&#x2F; 注释 1</strong></li><li>int a &#x3D; 1;</li><li>int b &#x3D; 2;</li><li><strong>&#x2F;&#x2F; 注释 2</strong></li><li>int c &#x3D; a + b;</li><li>}</li></ol><h1 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式 ( )"></a>使用子表达式 <code>( )</code></h1><p>使用 <strong><code>( )</code></strong> 定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 <code>*</code> 等元字符。</p><p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p><h2 id="示例-ab-2"><a href="#示例-ab-2" class="headerlink" title="示例: (ab){2,}"></a>示例: <code>(ab)&#123;2,&#125;</code></h2><p><strong>说明</strong>:最少2个<code>ab</code>  </p><p><strong>匹配结果</strong> <code>ababab</code></p><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例: |"></a>示例: <code>|</code></h2><p><strong><code>|</code></strong> 是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p><p><strong>正则表达式</strong> <code>(19|20)\d&#123;2&#125;</code></p><p><strong>说明</strong>:<code>19</code>或<code>20</code>后面跟<code>2</code>个数字</p><p><strong>匹配结果</strong></p><ol><li><strong>1900</strong></li><li><strong>2010</strong></li><li>1020</li></ol><h2 id="示例-匹配-IP-地址。"><a href="#示例-匹配-IP-地址。" class="headerlink" title="**示例:**匹配 IP 地址。"></a>**示例:**匹配 IP 地址。</h2><p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p><ul><li>一位数字</li><li>不以 0 开头的两位数字</li><li>1 开头的三位数</li><li>2 开头，第 2 位是 0-4 的三位数</li><li>25 开头，第 3 位是 0-5 的三位数</li></ul><p><strong>正则表达式</strong></p><p>​<code>((25[0-5]|(2[0-4]\d)|(1\d&#123;2&#125;)|([1-9]\d)|(\d))\.)&#123;3&#125;(25[0-5]|(2[0-4]\d)|(1\d&#123;2&#125;)|([1-9]\d)|(\d))</code></p><p><strong>说明</strong></p><p><code>&#123;3&#125;</code>之前匹配<code>xxx.xxx.xxx.</code></p><p><code>&#123;3&#125;</code>之后匹配最后一部分<code>xxx</code></p><p><strong>匹配结果</strong></p><ol><li><strong>192.168.0.1</strong></li><li>00.00.00.00</li><li>555.555.555.555</li></ol><h1 id="回溯引用-n"><a href="#回溯引用-n" class="headerlink" title="回溯引用 \n"></a>回溯引用 <code>\n</code></h1><p>回溯引用使用 <strong><code>\n</code></strong> 来引用某个子表达式，其中 <code>n</code> 代表的是<strong>子表达式的序号</strong>，从 <code>1</code> 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 <code>abc</code>，那么回溯引用部分也需要匹配 <code>abc</code> 。</p><h2 id="示例-匹配-HTML-中合法的标题元素。"><a href="#示例-匹配-HTML-中合法的标题元素。" class="headerlink" title="示例:匹配 HTML 中合法的标题元素。"></a>示例:匹配 HTML 中合法的标题元素。</h2><p><strong>正则表达式</strong> <code>&lt;(h[1-6])&gt;\w*?&lt;\/\1&gt;</code></p><p><code>\1</code> 将回溯引用子表达式 <code>(h[1-6])</code> 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p><p><strong>匹配结果</strong>(加粗表示匹配到)</p><ol><li><strong><code>&lt;h1&gt;x&lt;/h1&gt;</code></strong></li><li><strong><code>&lt;h2&gt;x&lt;/h2&gt;</code></strong></li><li><code>&lt;h1&gt;x&lt;/h3&gt;</code></li></ol><h2 id="示例-替换-修改电话号码格式"><a href="#示例-替换-修改电话号码格式" class="headerlink" title="示例:替换-修改电话号码格式"></a>示例:替换-修改电话号码格式</h2><p><strong>需要用到两个正则表达式。</strong></p><p>把<code>313-555-1234</code>  替换格式为 <code>(313) 555-1234</code></p><p><strong>查找正则表达式</strong>  <code>(\d&#123;3&#125;)(-)(\d&#123;3&#125;)(-)(\d&#123;4&#125;)</code></p><p>**替换正则表达式 **  <code>($1) $3-$5</code></p><p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p><p><strong>结果</strong>  <code>(313) 555-1234</code></p><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\l</td><td>把下个字符转换为小写</td></tr><tr><td>\u</td><td>把下个字符转换为大写</td></tr><tr><td>\L</td><td>把\L 和\E 之间的字符全部转换为小写</td></tr><tr><td>\U</td><td>把\U 和\E 之间的字符全部转换为大写</td></tr><tr><td>\E</td><td>结束\L 或者\U</td></tr></tbody></table><p>示例:把文本的第二个和第三个字符转换为大写。</p><p><strong>文本</strong>  <code>abcd</code></p><p>**查找 ** <code>(\w)(\w&#123;2&#125;)(\w)</code></p><p>**替换 ** <code>$1\U$2\E$3</code></p><p><strong>结果</strong>  <code>aBCd</code></p><h1 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h1><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。</p><p>向前查找使用 <strong><code>?=</code></strong> 定义，它规定了尾部匹配的内容，这个匹配的内容在 <code>?=</code> 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 <code>?&lt;=</code> 定义（注: JavaScript 不支持向后匹配，Java 对其支持也不完善）。</p><h2 id="示例-查找出邮件地址-字符前面的部分。"><a href="#示例-查找出邮件地址-字符前面的部分。" class="headerlink" title="示例:查找出邮件地址 @ 字符前面的部分。"></a>示例:查找出邮件地址 @ 字符前面的部分。</h2><p>**正则表达式 ** <code>\w+(?=@)</code></p><p><strong>结果</strong></p><p><strong>abc</strong> @qq.com</p><p>对向前和向后查找取非，只要把 &#x3D; 替换成 ! 即可，比如 (?&#x3D;) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p><h1 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h1><h2 id="回溯引用条件"><a href="#回溯引用条件" class="headerlink" title="回溯引用条件"></a>回溯引用条件</h2><p>条件为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p><p><strong>正则表达式</strong>  <code>(\()?abc(?(1)\))</code></p><p>子表达式 <code>(\()</code> 匹配一个左括号，其后的 <code>?</code> 表示匹配 <code>0</code> 个或者 <code>1</code> 个。 <code>?(1)</code> 为条件，当子表达式 <code>1</code> 匹配时条件成立，需要执行 <code>)</code> 匹配，也就是匹配右括号。</p><p><strong>结果</strong></p><ol><li><strong>(abc)</strong></li><li><strong>abc</strong></li><li>(abc</li></ol><h2 id="前后查找条件"><a href="#前后查找条件" class="headerlink" title="前后查找条件"></a>前后查找条件</h2><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p><p>**正则表达式 ** <code>\d&#123;5&#125;(?(?=-)-\d&#123;4&#125;)</code></p><p><code>?(?=-)</code> 为前向查找条件，只有在以 <code>-</code> 为前向查找的结尾能匹配 <code>\d&#123;5&#125;</code> ，才继续匹配 <code>-\d&#123;4&#125;</code> 。</p><p><strong>结果</strong></p><ol><li><strong>11111</strong></li><li>22222-</li><li><strong>33333-4444</strong></li></ol><p><a href="https://www.cyc2018.xyz/%E5%85%B6%E5%AE%83/%E7%BC%96%E7%A0%81%E5%AE%9E%E8%B7%B5/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0">文章来源</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池ThreadPollExecutor</title>
    <link href="/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ThreadPoolExecutor/"/>
    <url>/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ThreadPoolExecutor/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要使用线程池？"><a href="#为什么要使用线程池？" class="headerlink" title="为什么要使用线程池？"></a>为什么要使用线程池？</h1><ul><li>可重复使用已有线程，避免对象创建、消亡和过度切换的性能开销。</li><li>避免创建大量同类线程所导致的资源过度竞争和内存溢出的问题。</li><li>支持更多功能，比如延迟任务线程池（newScheduledThreadPool）和缓存线程池（newCachedThreadPool）等。</li></ul><h1 id="ThreadPoolExecutor-的使用"><a href="#ThreadPoolExecutor-的使用" class="headerlink" title="ThreadPoolExecutor 的使用"></a>ThreadPoolExecutor 的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>(<span class="hljs-number">100</span>));<br>threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 执行线程池</span><br>        System.out.println(<span class="hljs-string">&quot;Hello, Java.&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上程序执行结果如下：</p><blockquote><p>Hello, Java.</p></blockquote><h1 id="ThreadPoolExecutor-参数说明"><a href="#ThreadPoolExecutor-参数说明" class="headerlink" title="ThreadPoolExecutor 参数说明"></a>ThreadPoolExecutor 参数说明</h1><p>ThreadPoolExecutor 构造方法有以下四个，如下图所示：</p><p><img src="https://i.loli.net/2021/03/03/kwm7yRKcWuqlhXD.png" alt="20200818_13415697"></p><p>其中最后一个构造方法有 7 个构造参数，包含了前三个方法的构造参数，这 7 个参数名称如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其代表的含义如下：</p><h2 id="①-corePoolSize"><a href="#①-corePoolSize" class="headerlink" title="① corePoolSize"></a>① corePoolSize</h2><p>线程池中的<strong>核心线程数，默认情况下核心线程一直存活在线程池中</strong>，如果将 ThreadPoolExecutor 的 allowCoreThreadTimeOut 属性设为 true，如果线程池一直闲置并超过了 keepAliveTime 所指定的时间，核心线程就会被终止。</p><h2 id="②-maximumPoolSize"><a href="#②-maximumPoolSize" class="headerlink" title="② maximumPoolSize"></a>② maximumPoolSize</h2><p>最大线程数，当线程不够时能够创建的最大线程数。</p><h2 id="③-keepAliveTime"><a href="#③-keepAliveTime" class="headerlink" title="③ keepAliveTime"></a>③ keepAliveTime</h2><p><strong>线程池的闲置超时时间</strong>，默认情况下对非核心线程生效，如果闲置时间超过这个时间，非核心线程就会被回收。如果 ThreadPoolExecutor 的 allowCoreThreadTimeOut 设为 true 的时候，核心线程如果超过闲置时长也会被回收。</p><h2 id="④-unit"><a href="#④-unit" class="headerlink" title="④ unit"></a>④ unit</h2><p>配合 keepAliveTime 使用，用来标识 keepAliveTime 的时间单位。</p><h2 id="⑤-workQueue"><a href="#⑤-workQueue" class="headerlink" title="⑤ workQueue"></a>⑤ workQueue</h2><p>线程池中的<strong>任务队列</strong>，使用 execute() 或 submit() 方法提交的任务都会存储在此队列中。</p><h2 id="⑥-threadFactory"><a href="#⑥-threadFactory" class="headerlink" title="⑥ threadFactory"></a>⑥ threadFactory</h2><p>为线程池提供创建新线程的线程工厂。</p><h2 id="⑦-rejectedExecutionHandler"><a href="#⑦-rejectedExecutionHandler" class="headerlink" title="⑦ rejectedExecutionHandler"></a>⑦ rejectedExecutionHandler</h2><p>线程池任务队列超过最大值之后的拒绝策略，RejectedExecutionHandler 是一个接口，里面只有一个 rejectedExecution 方法，可在此方法内添加任务超出最大值的事件处理。ThreadPoolExecutor 也提供了 4 种默认的拒绝策略：</p><ul><li>new ThreadPoolExecutor.DiscardPolicy()：丢弃掉该任务，不进行处理</li><li>new ThreadPoolExecutor.DiscardOldestPolicy()：丢弃队列里最近的一个任务，并执行当前任务</li><li>new ThreadPoolExecutor.AbortPolicy()：直接抛出 RejectedExecutionException 异常</li><li>new ThreadPoolExecutor.CallerRunsPolicy()：既不抛弃任务也不抛出异常，直接使用主线程来执行此任务</li></ul><h1 id="含所有参数的代码示例"><a href="#含所有参数的代码示例" class="headerlink" title="含所有参数的代码示例"></a>含所有参数的代码示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">2</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThreadFactory</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        threadPool.allowCoreThreadTimeOut(<span class="hljs-literal">true</span>);<span class="hljs-comment">//核心线程如果超过闲置时长也会被回收</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    System.out.println(Thread.currentThread().getName());<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">2000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyThread&quot;</span> + count.addAndGet(<span class="hljs-number">1</span>);<br>        t.setName(threadName);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="执行方法-execute-VS-submit"><a href="#执行方法-execute-VS-submit" class="headerlink" title="执行方法 execute() VS submit()"></a>执行方法 execute() VS submit()</h1><p>execute() 和 submit() 都是用来执行线程池的，区别在于 submit() 方法可以接收线程池执行的返回值。</p><p>下面分别来看两个方法的具体使用和区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程池</span><br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>(<span class="hljs-number">100</span>));<br><span class="hljs-comment">// execute 使用</span><br>threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, Java.&quot;</span>);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// submit 使用</span><br>Future&lt;String&gt; future = threadPoolExecutor.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, 老王.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Success&quot;</span>;<br>    &#125;<br>&#125;);<br>System.out.println(future.get());<br></code></pre></td></tr></table></figure><p>以上程序执行结果如下：</p><blockquote><p>Hello, Java.</p><p>Hello, 老王.</p><p>Success</p></blockquote><h1 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h1><p>线程池关闭，可以使用 shutdown() 或 shutdownNow() 方法，它们的区别是：</p><ul><li><strong>shutdown()：不会立即终止线程池，而是要等所有任务队列中的任务都执行完后才会终止。执行完 shutdown 方法之后，线程池就不会再接受新任务了。</strong></li><li>shutdownNow()：执行该方法，线程池的状态立刻变成 STOP 状态，并试图停止所有正在执行的线程，不再处理还在池队列中等待的任务，执行此方法会返回未执行的任务。</li></ul><p>下面用代码来模拟 shutdown() 之后，给线程池添加任务，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">threadPoolExecutor.execute(() -&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;I&#x27;m &quot;</span> + i);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;);<br>threadPoolExecutor.shutdown();<br>threadPoolExecutor.execute(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;I&#x27;m Java.&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上程序执行结果如下：</p><blockquote><p>I’m 0</p><p>Exception in thread “main” java.util.concurrent.RejectedExecutionException: Task com.interview.chapter5.Section2<code>$$Lambda$2</code>&#x2F;1828972342@568db2f2 rejected from java.util.concurrent.ThreadPoolExecutor@378bf509[Shutting down, pool size &#x3D; 1, active threads &#x3D; 1, queued tasks &#x3D; 0, completed tasks &#x3D; 0]</p><p>I’m 1</p></blockquote><p>可以看出，shutdown() 之后就不会再接受新的任务了，不过之前的任务会被执行完成。</p><h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><h2 id="ThreadPoolExecutor-有哪些常用的方法？"><a href="#ThreadPoolExecutor-有哪些常用的方法？" class="headerlink" title="ThreadPoolExecutor 有哪些常用的方法？"></a>ThreadPoolExecutor 有哪些常用的方法？</h2><p>答：常用方法如下所示：</p><ul><li>submit()&#x2F;execute()：执行线程池</li><li>shutdown()&#x2F;shutdownNow()：终止线程池</li><li>isShutdown()：判断线程是否终止</li><li>getActiveCount()：正在运行的线程数</li><li>getCorePoolSize()：获取核心线程数</li><li>getMaximumPoolSize()：获取最大线程数</li><li>getQueue()：获取线程池中的任务队列</li><li>allowCoreThreadTimeOut(boolean)：设置空闲时是否回收核心线程</li></ul><h2 id="以下程序执行的结果是什么？"><a href="#以下程序执行的结果是什么？" class="headerlink" title="以下程序执行的结果是什么？"></a>以下程序执行的结果是什么？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>());<br>threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;I：&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;);<br>threadPoolExecutor.shutdownNow();<br>System.out.println(<span class="hljs-string">&quot;Java&quot;</span>);<br></code></pre></td></tr></table></figure><p>答：程序执行的结果是：</p><blockquote><p>I：0</p><p>Java</p><p>java.lang.InterruptedException: sleep interrupted（报错信息）</p><p>I：1</p></blockquote><p>题目解析：因为程序中使用了 <code>shutdownNow()</code> 会导致程序执行一次之后报错，抛出 <code>sleep interrupted</code> 异常，又因为本身有 try&#x2F;catch，所以程序会继续执行打印 <code>I：1</code> 。</p><h2 id="submit-和-execute-区别？"><a href="#submit-和-execute-区别？" class="headerlink" title="submit() 和 execute() 区别？"></a>submit() 和 execute() 区别？</h2><p>答：submit() 和 execute() 都是用来执行线程池的，只不过使用 execute() 执行线程池不能有返回方法，而使用 submit() 可以使用 Future 接收线程池执行的返回值。</p><p>submit() 方法源码（JDK 8）如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; <span class="hljs-keyword">task</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">task</span> == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    RunnableFuture&lt;T&gt; ftask = newTaskFor(<span class="hljs-keyword">task</span>);<br>    execute(ftask);<br>    <span class="hljs-keyword">return</span> ftask;<br>&#125;<br></code></pre></td></tr></table></figure><p>execute() 源码（JDK 8）如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">Runnable command</span>) &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">//..... 其他</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ThreadPoolExecutor-都需要哪些参数？"><a href="#ThreadPoolExecutor-都需要哪些参数？" class="headerlink" title="ThreadPoolExecutor 都需要哪些参数？"></a>ThreadPoolExecutor 都需要哪些参数？</h2><p>答：ThreadPoolExecutor 最多包含以下七个参数：</p><ul><li>corePoolSize：线程池中的核心线程数</li><li>maximumPoolSize：线程池中最大线程数</li><li>keepAliveTime：闲置超时时间</li><li>unit：keepAliveTime 超时时间的单位（时&#x2F;分&#x2F;秒等）</li><li>workQueue：线程池中的任务队列</li><li>threadFactory：为线程池提供创建新线程的线程工厂</li><li>rejectedExecutionHandler：线程池任务队列超过最大值之后的拒绝策略</li></ul><h2 id="shutdownNow-和-shutdown-区别"><a href="#shutdownNow-和-shutdown-区别" class="headerlink" title="shutdownNow() 和 shutdown() 区别"></a>shutdownNow() 和 shutdown() 区别</h2><p>答：shutdownNow() 和 shutdown() 都是用来终止线程池的，它们的区别是，使用 shutdown() 程序不会报错，也不会立即终止线程，它会等待线程池中的缓存任务执行完之后再退出，执行了 shutdown() 之后就不能给线程池添加新任务了；<strong>shutdownNow() 会试图立马停止任务，如果线程池中还有缓存任务正在执行，则会抛出 java.lang.InterruptedException: sleep interrupted 异常。</strong></p><h2 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h2><p>答：当线程池中有任务需要执行时，线程池会判断如果线程数量没有超过核心数量就会新建线程池进行任务执行，</p><p>​如果线程池中的线程数量已经超过核心线程数，这时候任务就会被放入任务队列中排队等待执行；</p><p>​如果任务队列超过最大队列数，并且线程池没有达到最大线程数，就会新建线程来执行任务；</p><p>​如果超过了最大线程数，就会执行拒绝执行策略。</p><h2 id="以下线程名称被打印了几次？"><a href="#以下线程名称被打印了几次？" class="headerlink" title="以下线程名称被打印了几次？"></a>以下线程名称被打印了几次？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">2</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardPolicy());<br>threadPool.allowCoreThreadTimeOut(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 打印线程名称</span><br>            System.out.println(Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>答：线程名被打印了 3 次。<br>题目解析：线程池第 1 次执行任务时，会新创建任务并执行；第 2 次执行任务时，因为没有空闲线程所以会把任务放入队列；第 3 次同样把任务放入队列，因为队列最多可以放两条数据，所以第 4 次之后的执行都会被舍弃（没有定义拒绝策略），于是就打印了 3 次线程名称。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程池</tag>
      
      <tag>threadPollExecutor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取httpServerletRequest工具类</title>
    <link href="/2020/12/04/%E8%8E%B7%E5%8F%96HttpServletRequest/"/>
    <url>/2020/12/04/%E8%8E%B7%E5%8F%96HttpServletRequest/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmile.studysb.utils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取HttpServletRequest</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpContextUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpServletRequest <span class="hljs-title function_">getHttpServletRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>httpServerletRequest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis自定义插入主键</title>
    <link href="/2020/12/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%BB%E9%94%AEID/"/>
    <url>/2020/12/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%BB%E9%94%AEID/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Order这个属性设为after,before这个执行顺序都是相对于下面的insert into这个sql的;<br>Order设为before:那么就先执行selectkey这个标签的sgl,再将这条sql生成的uuid set到User里面去,然后再执行insert into将这个已经带uuid为id的这个User insert到数据库中.</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自增主键之UUID--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.test.mybatis.po.User&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--只要不是自增主键,那么order都设置为before--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">selectkey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">resultrype</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span>&gt;</span><br>  SELECT UUID()<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">selectkey</span>&gt;</span><br>  INSERT INTO USER (ID,USERNAME,BIRTHDAY,SEX,ADDRESS)<br>  VALUES (#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>java</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取ip地址工具类</title>
    <link href="/2020/12/04/%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2020/12/04/%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmile.studysb.utils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IPUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取IP地址</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址</span><br><span class="hljs-comment">     * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIpAddr</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;x-forwarded-for&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;Proxy-Client-IP&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;WL-Proxy-Client-IP&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getRemoteAddr();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip) ? <span class="hljs-string">&quot;127.0.0.1&quot;</span> : ip;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
