<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python</title>
      <link href="/2024/08/08/python/"/>
      <url>/2024/08/08/python/</url>
      
        <content type="html"><![CDATA[<h1 id="0-了解python"><a href="#0-了解python" class="headerlink" title="0.了解python"></a>0.了解python</h1><p>Python是一种相当高级的语言。</p><p>比如，完成同一个任务，C语言要写1000行代码，Java只需要写100行，而Python可能只要20行。</p><p>代码少的代价是运行速度慢，C程序运行1秒钟，Java程序可能需要2秒，而Python程序可能就需要10秒。</p><p>用Python可以做什么？可以做日常任务，比如自动备份你的MP3；可以做网站，很多著名的网站包括YouTube就是Python写的；可以做网络游戏的后台，很多在线游戏的后台都是Python开发的。总之就是能干很多很多事啦。</p><p>Python当然也有不能干的事情，比如写操作系统，这个只能用C语言写；写手机应用，只能用Swift&#x2F;Objective-C（针对iPhone）和Java（针对Android）；写3D游戏，最好用C或C++。</p><p>Python为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。</p><p>除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p><p>那Python适合开发哪些类型的应用呢？</p><ul><li>首选是网络应用，包括网站、后台服务等等；</li><li>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</li><li>另外就是把其他语言开发的程序再包装起来，方便使用。</li></ul><p>Python的缺点</p><ul><li>*<em>运行速度慢</em>***。和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。</li><li><strong>代码不能加密</strong>。如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的</li></ul><p><strong>因为Python是跨平台的，它可以运行在Windows、Mac和各种Linux&#x2F;Unix系统上。在Windows上写Python程序，放到Linux上也是能够运行的。</strong></p><h1 id="1-安装python"><a href="#1-安装python" class="headerlink" title="1.安装python"></a>1.安装python</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul><li>​<strong><a href="https://www.python.org/downloads/windows/">下载安装包</a></strong> </li><li>​特别要注意勾上<code>Add Python 3.x to PATH</code>，然后点“Install Now”即可完成安装。</li></ul><p></p><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><ul><li>方法一：从Python官网下载Python 3 macOS版的<a href="https://www.python.org/downloads/macos/">安装程序</a>，下载后双击运行并安装；</li><li>方法二：如果安装了<a href="https://brew.sh/">Homebrew</a>，直接通过命令<code>brew install python3</code>安装即可。</li></ul><p>安装成功后，打开命令提示符窗口，敲入<code>python</code> 或 <code>python3</code>,进入交互模式即安装成功.</p><p>在Python交互模式下输入<code>exit()</code>并回车，就退出了Python交互模式</p><h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以<code>.py</code>为扩展名的文本文件。要运行代码，就需要Python解释器去执行<code>.py</code>文件。</p><p>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p><h2 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h2><p>当我们从<a href="https://www.python.org/">Python官方网站</a>下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行<code>python</code>就是启动CPython解释器。</p><p><strong>CPython是使用最广的Python解释器。</strong></p><h1 id="直接运行py文件"><a href="#直接运行py文件" class="headerlink" title="直接运行py文件"></a>直接运行py文件</h1><p>能不能像.exe文件那样直接运行<code>.py</code>文件呢？在Windows上是不行的，但是，在Mac和Linux上是可以的，方法是在<code>.py</code>文件的第一行加上一个特殊的注释：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后，通过命令给<code>hello.py</code>以执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> a+x hello.py</span><br></code></pre></td></tr></table></figure><p>就可以直接运行<code>hello.py</code>了，比如在Mac下运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./hello.py</span><br>hello, world<br></code></pre></td></tr></table></figure><h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：<br><code>print()会依次打印每个字符串，遇到逗号“,”会输出一个空格</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The quick brown fox&#x27;</span>, <span class="hljs-string">&#x27;jumps over&#x27;</span>, <span class="hljs-string">&#x27;the lazy dog&#x27;</span>)<br>The quick brown fox jumps over the lazy dog<br></code></pre></td></tr></table></figure><p><code>print()</code>也可以打印整数，或者计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">300</span>)<br><span class="hljs-number">300</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> + <span class="hljs-number">200</span>)<br><span class="hljs-number">300</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;100 + 200 =&#x27;</span>, <span class="hljs-number">100</span> + <span class="hljs-number">200</span>)<br><span class="hljs-number">100</span> + <span class="hljs-number">200</span> = <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = <span class="hljs-built_in">input</span>()<br>Michaels<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#hello.py</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please enter your name: &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello,&#x27;</span>, name)<br><br>C:\Workspace&gt; python hello.py<br>please enter your name: Michael<br>hello, Michael<br></code></pre></td></tr></table></figure><h1 id="注释和代码规范"><a href="#注释和代码规范" class="headerlink" title="注释和代码规范"></a>注释和代码规范</h1><p>以<code>#</code>开头的语句是注释</p><p>Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，<strong>坚持使用4个空格的缩进</strong>；(在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。)</p><p>每一行都是一个语句，当语句以冒号<code>:</code>结尾时，缩进的语句视为代码块。</p><p>Python程序是<em><strong>大小写敏感</strong></em>的</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Python可以处理任意大小的整数，当然包括负整数.</p><p><strong>Python的整数没有大小限制</strong></p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和0-9，a-f表示.</p><p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p><p><strong>整数的除法是精确的</strong>。</p><p>​在Python中，有两种除法，</p><ul><li>​一种除法是<code>/</code>,此除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> / <span class="hljs-number">3</span><br><span class="hljs-number">3.3333333333333335</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">9</span> / <span class="hljs-number">3</span><br><span class="hljs-number">3.0</span><br></code></pre></td></tr></table></figure><ul><li><p>一种除法是<code>//</code>，称为地板除，两个整数的除法仍然是整数,因为只取结果的整数部分</p><p>Python还提供一个余数运算，可以得到两个整数相除的余数：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> // <span class="hljs-number">3</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> % <span class="hljs-number">3</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10^9和12.3x10^8是完全相等的。</p><p>浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10^9就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，<strong>整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</strong></p><p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。</p></li><li><p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p></li><li><p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>可以用转义字符<code>\</code>来标识,比如:  <code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code></p></li><li><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示<strong>换行</strong>，<code>\t</code>表示<strong>制表符</strong>，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></p></li><li><p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义,例如:<code>print(r&#39;\\\t\\&#39;)</code></p></li><li><p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;line1</span><br><span class="hljs-string"><span class="hljs-meta">... </span>line2</span><br><span class="hljs-string"><span class="hljs-meta">... </span>line3&#x27;&#x27;&#x27;</span>)<br>line1<br>line2<br>line3<br></code></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>一个布尔值只有<code>True</code>、<code>False</code>两种值（请注意大小写）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> &gt; <span class="hljs-number">5</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算:</p><ul><li><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code></li><li><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code></li><li><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code></li></ul><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h2 id="有序集合list"><a href="#有序集合list" class="headerlink" title="有序集合list"></a>有序集合list</h2><p><code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code></p><p>索引是从<code>0</code>开始</p><p><strong>获得list元素的个数</strong>: <code>len(classmates)</code></p><p>索引超出范围时，会报<code>IndexError</code>错误，要确保索引不要越界，最后一个元素的索引是<code>len(classmates) - 1</code></p><p>还可以用<code>-1</code>做索引，直接获取最后一个元素：<code>classmates[-1]</code></p><p>以此类推，可以获取倒数第2个、倒数第3个：classmates[-2]</p><p><strong>追加元素到末尾</strong>：<code>classmates.append(&#39;Adam&#39;)</code></p><p><strong>把元素插入到指定位置</strong>:  <code>classmates.insert(1, &#39;Jack&#39;)</code></p><p><strong>删除末尾元素</strong>:   <code>classmates.pop()</code></p><p><strong>删除指定位置元素</strong>:   <code>classmates.pop(1)</code></p><p><strong>把某个元素替换成别的元素</strong>：<code>classmates[1] = &#39;Sarah&#39;</code></p><p>list里面的元素的数据类型也可以不同:  <code>L = [&#39;Apple&#39;, 123, True]</code></p><p>list元素也可以是另一个list :  <code>s = [&#39;python&#39;, &#39;java&#39;, [&#39;asp&#39;, &#39;php&#39;], &#39;scheme&#39;]</code></p><h2 id="有序集合tuple"><a href="#有序集合tuple" class="headerlink" title="有序集合tuple"></a>有序集合tuple</h2><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是<strong>tuple一旦初始化就不能修改</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">classmates = (<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>)<br></code></pre></td></tr></table></figure><p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用<code>classmates[0]</code>，<code>classmates[-1]</code>，但不能赋值成另外的元素。</p><p><strong>当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来</strong></p><p><strong>定义一个空的tuple</strong>，可以写成<code>()</code>:  <code>t = ()</code></p><p><strong>定义一个只有1个元素的tuple</strong>:  <code>t = (1,)</code></p><p><strong>“可变的”tuple：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;X&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Y&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, [<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>])<br></code></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头</p><p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量</p><p>这种变量本身类型不固定的语言称之为<em><strong>动态语言</strong></em>，与之对应的是<em><strong>静态语言</strong></em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如<strong>Java是静态语言</strong>.</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>使用内建的<code>isinstance</code>函数可以判断一个变量是不是字符串： <code>isinstance(x, str)</code></p><h1 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h1><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111&#x3D;十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4个字节可以表示的最大整数是<code>4294967295</code>。</p><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p><p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p><p>因此，Unicode字符集应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><p>Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p><p>现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p><ul><li>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li><li>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</li><li>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li></ul><p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><p>所以，本着节约的精神，又<strong>出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</strong></p><table><thead><tr><th>字符</th><th>ASCII</th><th>Unicode</th><th>UTF-8</th></tr></thead><tbody><tr><td>A</td><td>01000001</td><td>00000000 01000001</td><td>01000001</td></tr><tr><td>中</td><td></td><td>01001110 00101101</td><td>11100100 10111000 10101101</td></tr></tbody></table><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><p><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</strong></p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p><p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p><h2 id="Python的字符串"><a href="#Python的字符串" class="headerlink" title="Python的字符串"></a>Python的字符串</h2><p><strong>在最新的Python 3版本中，字符串是以Unicode编码的</strong>，也就是说，Python的字符串支持多语言，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;包含中文的str&#x27;</span>)<br>包含中文的<span class="hljs-built_in">str</span><br></code></pre></td></tr></table></figure><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; ord(<span class="hljs-string">&#x27;A&#x27;</span>)<br>65<br>&gt;&gt;&gt; ord(<span class="hljs-string">&#x27;中&#x27;</span>)<br>20013<br>&gt;&gt;&gt; chr(66)<br><span class="hljs-string">&#x27;B&#x27;</span><br>&gt;&gt;&gt; chr(25991)<br><span class="hljs-string">&#x27;文&#x27;</span><br></code></pre></td></tr></table></figure><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; <span class="hljs-string">&#x27;\u4e2d\u6587&#x27;</span><br><span class="hljs-string">&#x27;中文&#x27;</span><br></code></pre></td></tr></table></figure><p>两种写法完全是等价的。</p><p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">b&#x27;ABC&#x27;</span><br></code></pre></td></tr></table></figure><p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p><p>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; <span class="hljs-string">&#x27;ABC&#x27;</span>.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>b<span class="hljs-string">&#x27;ABC&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;中文&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>b<span class="hljs-string">&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;中文&#x27;</span>.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="hljs-keyword">in</span> &lt;module&gt;<br>UnicodeEncodeError: <span class="hljs-string">&#x27;ascii&#x27;</span> codec can<span class="hljs-string">&#x27;t encode characters in position 0-1: ordinal not in range(128)</span><br></code></pre></td></tr></table></figure><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p><p>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\x##</code>显示。</p><p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; b<span class="hljs-string">&#x27;ABC&#x27;</span>.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br><span class="hljs-string">&#x27;ABC&#x27;</span><br>&gt;&gt;&gt; b<span class="hljs-string">&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-string">&#x27;中文&#x27;</span><br></code></pre></td></tr></table></figure><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; b<span class="hljs-string">&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>Traceback (most recent call last):<br>  ...<br>UnicodeDecodeError: <span class="hljs-string">&#x27;utf-8&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0xff in position 3: invalid start byte</span><br></code></pre></td></tr></table></figure><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; b<span class="hljs-string">&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br><span class="hljs-string">&#x27;中&#x27;</span><br></code></pre></td></tr></table></figure><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; len(<span class="hljs-string">&#x27;ABC&#x27;</span>)<br>3<br>&gt;&gt;&gt; len(<span class="hljs-string">&#x27;中文&#x27;</span>)<br>2<br></code></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; len(b<span class="hljs-string">&#x27;ABC&#x27;</span>)<br>3<br>&gt;&gt;&gt; len(b<span class="hljs-string">&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)<br>6<br>&gt;&gt;&gt; len(<span class="hljs-string">&#x27;中文&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>6<br></code></pre></td></tr></table></figure><p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p><p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p><p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br></code></pre></td></tr></table></figure><p>第一行注释是为了告诉Linux&#x2F;OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p><p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><p>申明了UTF-8编码并不意味着你的<code>.py</code>文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8编码。</p><p>如果<code>.py</code>文件本身使用UTF-8编码，并且也申明了<code># -*- coding: utf-8 -*-</code>，打开命令提示符测试就可以正常显示中文：</p><h1 id="高级特性-切片"><a href="#高级特性-切片" class="headerlink" title="高级特性-切片"></a>高级特性-切片</h1><p>取一个list或tuple的部分元素  <code>L = [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]</code></p><ul><li><strong>取前3个元素</strong>:</li></ul><p>​<code>L[0:3]</code> <code>:表示，从索引</code>0<code>开始取，直到索引</code>3<code>为止，但不包括索引</code>3<code>。即索引</code>0<code>，</code>1<code>，</code>2&#96;，正好是3个元素。</p><p>​<code>L[:3]</code>  :如果第一个索引是<code>0</code>，还可以省略.</p><ul><li><p><strong>从索引1开始，取出2个元素出来：</strong></p><p><code>L[1:3]</code></p></li><li><p><strong>类似的，既然Python支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持倒数切片，试试：</strong></p><blockquote><p>倒数第一个元素的索引是<code>-1</code></p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[-2:]<br>[<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>]<br>&gt;&gt;&gt; L[-2:-1]<br>[<span class="hljs-string">&#x27;Bob&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>切片操作十分有用。我们先创建一个0-99的数列：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L = list(range(100))<br>&gt;&gt;&gt; L<br>[0, 1, 2, 3, ..., 99]<br></code></pre></td></tr></table></figure><p>可以通过切片轻松取出某一段数列。比如前10个数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[:10]<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br></code></pre></td></tr></table></figure><p>后10个数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[-10:]<br>[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]<br></code></pre></td></tr></table></figure><p>前11-20个数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[10:20]<br>[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]<br></code></pre></td></tr></table></figure><p>前10个数，每两个取一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[:10:2]<br>[0, 2, 4, 6, 8]<br></code></pre></td></tr></table></figure><p>所有数，每5个取一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[::5]<br>[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]<br></code></pre></td></tr></table></figure><p>甚至什么都不写，只写<code>[:]</code>就可以原样复制一个list：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L[:]<br>[0, 1, 2, 3, ..., 99]<br></code></pre></td></tr></table></figure><p>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; (0, 1, 2, 3, 4, 5)[:3]<br>(0, 1, 2)<br></code></pre></td></tr></table></figure><p>字符串<code>&#39;xxx&#39;</code>也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; <span class="hljs-string">&#x27;ABCDEFG&#x27;</span>[:3]<br><span class="hljs-string">&#x27;ABC&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;ABCDEFG&#x27;</span>[::2]<br><span class="hljs-string">&#x27;ACEG&#x27;</span><br></code></pre></td></tr></table></figure><p>在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p><h1 id="高级特性-迭代"><a href="#高级特性-迭代" class="headerlink" title="高级特性-迭代"></a>高级特性-迭代</h1><h2 id="迭代list或tuple"><a href="#迭代list或tuple" class="headerlink" title="迭代list或tuple"></a>迭代<code>list</code>或<code>tuple</code></h2><p>如果给定一个<code>list</code>或<code>tuple</code>，我们可以通过<code>for</code>循环来遍历这个<code>list</code>或<code>tuple</code>，这种遍历我们称为迭代（Iteration）。</p><p>在Python中，迭代是通过<code>for ... in</code>来完成的</p><p><strong>Python的<code>for</code>循环不仅可以用在<code>list</code>或<code>tuple</code>上，还可以作用在其他可迭代对象上。</strong></p><h2 id="迭代dict"><a href="#迭代dict" class="headerlink" title="迭代dict"></a>迭代dict</h2><p><code>list</code>这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如<code>dict</code>就可以迭代：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: 1, <span class="hljs-string">&#x27;b&#x27;</span>: 2, <span class="hljs-string">&#x27;c&#x27;</span>: 3&#125;<br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> d:<br>...     <span class="hljs-built_in">print</span>(key)<br>...<br>a<br>c<br>b<br></code></pre></td></tr></table></figure><p><strong>默认情况下，<code>dict</code>迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</strong></p><h2 id="迭代字符串"><a href="#迭代字符串" class="headerlink" title="迭代字符串"></a>迭代字符串</h2><p>由于字符串也是可迭代对象，因此，也可以作用于<code>for</code>循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABC&#x27;</span>:<br>...     <span class="hljs-built_in">print</span>(ch)<br>...<br>A<br>B<br>C<br></code></pre></td></tr></table></figure><h2 id="判断一个对象是可迭代对象"><a href="#判断一个对象是可迭代对象" class="headerlink" title="判断一个对象是可迭代对象"></a>判断一个对象是可迭代对象</h2><p><strong>方法是通过<code>collections.abc</code>模块的<code>Iterable</code>类型判断：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; from collections.abc import Iterable<br>&gt;&gt;&gt; isinstance(<span class="hljs-string">&#x27;abc&#x27;</span>, Iterable) <span class="hljs-comment"># str是否可迭代</span><br>True<br>&gt;&gt;&gt; isinstance([1,2,3], Iterable) <span class="hljs-comment"># list是否可迭代</span><br>True<br>&gt;&gt;&gt; isinstance(123, Iterable) <span class="hljs-comment"># 整数是否可迭代</span><br>False<br></code></pre></td></tr></table></figure><h2 id="list实现类似Java的下标循环"><a href="#list实现类似Java的下标循环" class="headerlink" title="list实现类似Java的下标循环"></a><code>list</code>实现类似Java的下标循环</h2><p>Python内置的<code>enumerate</code>函数可以把一个<code>list</code>变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; <span class="hljs-keyword">for</span> i, value <span class="hljs-keyword">in</span> enumerate([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]):<br>...     <span class="hljs-built_in">print</span>(i, value)<br>...<br>0 A<br>1 B<br>2 C<br></code></pre></td></tr></table></figure><h1 id="高级特性-列表生成式"><a href="#高级特性-列表生成式" class="headerlink" title="高级特性-列表生成式"></a>高级特性-列表生成式</h1><blockquote><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p></blockquote><p>举个例子，要生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; list(range(1, 11))<br>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br></code></pre></td></tr></table></figure><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？方法一是循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L = []<br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11):<br>...    L.append(x * x)<br>...<br>&gt;&gt;&gt; L<br>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<br></code></pre></td></tr></table></figure><p><strong>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11)]<br>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<br></code></pre></td></tr></table></figure><p><strong>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11) <span class="hljs-keyword">if</span> x % 2 == 0]<br>[4, 16, 36, 64, 100]<br></code></pre></td></tr></table></figure><p><strong>还可以使用两层循环，可以生成全排列：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [m + n <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABC&#x27;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;XYZ&#x27;</span>]<br>[<span class="hljs-string">&#x27;AX&#x27;</span>, <span class="hljs-string">&#x27;AY&#x27;</span>, <span class="hljs-string">&#x27;AZ&#x27;</span>, <span class="hljs-string">&#x27;BX&#x27;</span>, <span class="hljs-string">&#x27;BY&#x27;</span>, <span class="hljs-string">&#x27;BZ&#x27;</span>, <span class="hljs-string">&#x27;CX&#x27;</span>, <span class="hljs-string">&#x27;CY&#x27;</span>, <span class="hljs-string">&#x27;CZ&#x27;</span>]<br></code></pre></td></tr></table></figure><p>三层和三层以上的循环就很少用到了。</p><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; import os <span class="hljs-comment"># 导入os模块，模块的概念后面讲到</span><br>&gt;&gt;&gt; [d <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&#x27;.&#x27;</span>)] <span class="hljs-comment"># os.listdir可以列出文件和目录</span><br>[<span class="hljs-string">&#x27;.emacs.d&#x27;</span>, <span class="hljs-string">&#x27;.ssh&#x27;</span>, <span class="hljs-string">&#x27;.Trash&#x27;</span>, <span class="hljs-string">&#x27;Adlm&#x27;</span>, <span class="hljs-string">&#x27;Applications&#x27;</span>, <span class="hljs-string">&#x27;Desktop&#x27;</span>, <span class="hljs-string">&#x27;Documents&#x27;</span>, <span class="hljs-string">&#x27;Downloads&#x27;</span>, <span class="hljs-string">&#x27;Library&#x27;</span>, <span class="hljs-string">&#x27;Movies&#x27;</span>, <span class="hljs-string">&#x27;Music&#x27;</span>, <span class="hljs-string">&#x27;Pictures&#x27;</span>, <span class="hljs-string">&#x27;Public&#x27;</span>, <span class="hljs-string">&#x27;VirtualBox VMs&#x27;</span>, <span class="hljs-string">&#x27;Workspace&#x27;</span>, <span class="hljs-string">&#x27;XCode&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>for</code>循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>items()</code>可以同时迭代key和value：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; d = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-string">&#x27;C&#x27;</span> &#125;<br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():<br>...     <span class="hljs-built_in">print</span>(k, <span class="hljs-string">&#x27;=&#x27;</span>, v)<br>...<br>y = B<br>x = A<br>z = C<br></code></pre></td></tr></table></figure><p><strong>因此，列表生成式也可以使用两个变量来生成list：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; d = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-string">&#x27;C&#x27;</span> &#125;<br>&gt;&gt;&gt; [k + <span class="hljs-string">&#x27;=&#x27;</span> + v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items()]<br>[<span class="hljs-string">&#x27;y=B&#x27;</span>, <span class="hljs-string">&#x27;x=A&#x27;</span>, <span class="hljs-string">&#x27;z=C&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>最后把一个list中所有的字符串变成小写：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L = [<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;World&#x27;</span>, <span class="hljs-string">&#x27;IBM&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>]<br>&gt;&gt;&gt; [s.lower() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> L]<br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;ibm&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="if-…-else"><a href="#if-…-else" class="headerlink" title="if … else"></a>if … else</h2><p>使用列表生成式的时候，有些童鞋经常搞不清楚<code>if...else</code>的用法。</p><p>例如，以下代码正常输出偶数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11) <span class="hljs-keyword">if</span> x % 2 == 0]<br>[2, 4, 6, 8, 10]<br></code></pre></td></tr></table></figure><p>但是，我们不能在最后的<code>if</code>加上<code>else</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11) <span class="hljs-keyword">if</span> x % 2 == 0 <span class="hljs-keyword">else</span> 0]<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1<br>    [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11) <span class="hljs-keyword">if</span> x % 2 == 0 <span class="hljs-keyword">else</span> 0]<br>                                              ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure><p>这是因为跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code>，否则如何筛选？</p><p>另一些童鞋发现把<code>if</code>写在<code>for</code>前面必须加<code>else</code>，否则报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [x <span class="hljs-keyword">if</span> x % 2 == 0 <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11)]<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1<br>    [x <span class="hljs-keyword">if</span> x % 2 == 0 <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11)]<br>                       ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure><p>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; [x <span class="hljs-keyword">if</span> x % 2 == 0 <span class="hljs-keyword">else</span> -x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(1, 11)]<br>[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]<br></code></pre></td></tr></table></figure><p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p><p><strong>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</strong></p><h1 id="高级特性-生成器"><a href="#高级特性-生成器" class="headerlink" title="高级特性-生成器"></a>高级特性-生成器</h1><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。<strong>在Python中，这种一边循环一边计算的机制，称为生成器：generator。</strong></p><p>要创建一个generator，有很多种方法。<strong>第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; L = [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(10)]<br>&gt;&gt;&gt; L<br>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>&gt;&gt;&gt; g = (x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(10))<br>&gt;&gt;&gt; g<br>&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;<br></code></pre></td></tr></table></figure><p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个generator。</p><p>我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？</p><p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得generator的下一个返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; next(g)<br>0<br>&gt;&gt;&gt; next(g)<br>1<br>&gt;&gt;&gt; next(g)<br>4<br>&gt;&gt;&gt; next(g)<br>9<br>&gt;&gt;&gt; next(g)<br>16<br>&gt;&gt;&gt; next(g)<br>25<br>&gt;&gt;&gt; next(g)<br>36<br>&gt;&gt;&gt; next(g)<br>49<br>&gt;&gt;&gt; next(g)<br>64<br>&gt;&gt;&gt; next(g)<br>81<br>&gt;&gt;&gt; next(g)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="hljs-keyword">in</span> &lt;module&gt;<br>StopIteration<br></code></pre></td></tr></table></figure><p>我们讲过，generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</p><p>当然，上面这种不断调用<code>next(g)</code>实在是太变态了，正确的方法是使用<code>for</code>循环，因为generator也是可迭代对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; g = (x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(10))<br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> g:<br>...     <span class="hljs-built_in">print</span>(n)<br>... <br>0<br>1<br>4<br>9<br>16<br>25<br>36<br>49<br>64<br>81<br></code></pre></td></tr></table></figure><p>所以，我们创建了一个generator后，基本上永远不会调用<code>next()</code>，而是通过<code>for</code>循环来迭代它，并且不需要关心<code>StopIteration</code>的错误。</p><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的<code>for</code>循环无法实现的时候，还可以用函数来实现。</p><p>比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p><p>1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出斐波那契数列的前N个数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params"><span class="hljs-built_in">max</span></span>):<br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-built_in">max</span>:<br>        <span class="hljs-built_in">print</span>(b)<br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p><p>也就是说，上面的函数和generator仅一步之遥。要把<code>fib</code>函数变成generator函数，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params"><span class="hljs-built_in">max</span></span>):<br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-built_in">max</span>:<br>        <span class="hljs-keyword">yield</span> b<br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>这就是定义generator的另一种方法。<strong>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator函数，调用一个generator函数将返回一个generator：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; f = fib(6)<br>&gt;&gt;&gt; f<br>&lt;generator object fib at 0x104feaaa0&gt;<br></code></pre></td></tr></table></figure><p>这里，最难理解的就是generator函数和普通函数的执行流程不一样。普通函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p><p>举个简单的例子，定义一个generator函数，依次返回数字1，3，5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">odd</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;step 1&#x27;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;step 2&#x27;</span>)<br>    <span class="hljs-keyword">yield</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;step 3&#x27;</span>)<br>    <span class="hljs-keyword">yield</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>调用该generator函数时，首先要生成一个generator对象，然后用<code>next()</code>函数不断获得下一个返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; o = odd()<br>&gt;&gt;&gt; next(o)<br>step 1<br>1<br>&gt;&gt;&gt; next(o)<br>step 2<br>3<br>&gt;&gt;&gt; next(o)<br>step 3<br>5<br>&gt;&gt;&gt; next(o)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="hljs-keyword">in</span> &lt;module&gt;<br>StopIteration<br></code></pre></td></tr></table></figure><p>可以看到，<code>odd</code>不是普通函数，而是generator函数，<strong>在执行过程中，遇到<code>yield</code>就中断，下次又继续执行</strong>。执行3次<code>yield</code>后，已经没有<code>yield</code>可以执行了，所以，第4次调用<code>next(o)</code>就报错。</p><p><strong>请务必注意：调用generator函数会创建一个generator对象，多次调用generator函数会创建多个相互独立的generator。</strong></p><p>有的童鞋会发现这样调用<code>next()</code>每次都返回1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; next(odd())<br>step 1<br>1<br>&gt;&gt;&gt; next(odd())<br>step 1<br>1<br>&gt;&gt;&gt; next(odd())<br>step 1<br>1<br></code></pre></td></tr></table></figure><p>原因在于<code>odd()</code>会创建一个新的generator对象，上述代码实际上创建了3个完全独立的generator，对3个generator分别调用<code>next()</code>当然每个都会返回第一个值。</p><p><strong>正确的写法是创建一个generator对象，然后不断对这一个generator对象调用<code>next()</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; g = odd()<br>&gt;&gt;&gt; next(g)<br>step 1<br>1<br>&gt;&gt;&gt; next(g)<br>step 2<br>3<br>&gt;&gt;&gt; next(g)<br>step 3<br>5<br></code></pre></td></tr></table></figure><p>回到<code>fib</code>的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p><p>同样的，把函数改成generator函数后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> fib(6):<br>...     <span class="hljs-built_in">print</span>(n)<br>...<br>1<br>1<br>2<br>3<br>5<br>8<br></code></pre></td></tr></table></figure><p>但是用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; g = fib(6)<br>&gt;&gt;&gt; <span class="hljs-keyword">while</span> True:<br>...     try:<br>...         x = next(g)<br>...         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g:&#x27;</span>, x)<br>...     except StopIteration as e:<br>...         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Generator return value:&#x27;</span>, e.value)<br>...         <span class="hljs-built_in">break</span><br>...<br>g: 1<br>g: 1<br>g: 2<br>g: 3<br>g: 5<br>g: 8<br>Generator <span class="hljs-built_in">return</span> value: <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>关于如何捕获错误，后面的错误处理还会详细讲解。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2024/07/17/docker/"/>
      <url>/2024/07/17/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><ol><li><p><strong>备份原有 Docker 镜像源文件</strong>（如果有的话，以防万一需要恢复）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1sudo cp /etc/yum.repos.d/docker-ce.repo&#123;,.bak&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>下载阿里云提供的 Docker CE 镜像源配置文件</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><p>或者，如果wget命令不可用，可以使用curl命令代替：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p><strong>清理并更新 YUM 缓存</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum clean all<br>sudo yum makecache<br></code></pre></td></tr></table></figure></li><li><p><strong>安装或更新 Docker CE</strong>：</p><p>如果尚未安装 Docker CE，可以使用以下命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install docker-ce<br></code></pre></td></tr></table></figure><p>如果已经安装了 Docker CE 并希望更新到最新版本，可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum update docker-ce<br></code></pre></td></tr></table></figure></li><li><p><strong>启动并设置 Docker 服务开机自启</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start docker<br>sudo systemctl enable docker<br></code></pre></td></tr></table></figure></li></ol><p>完成以上步骤后，你就成功地将 Docker 的镜像源设置为了阿里云镜像源，这将有助于加快 Docker 镜像的下载速度。记得验证 Docker 是否正常工作，可以通过运行 <code>docker info</code> 或者 <code>docker run hello-world</code> 来测试。</p><h1 id="配置国内镜像加速"><a href="#配置国内镜像加速" class="headerlink" title="配置国内镜像加速"></a>配置国内镜像加速</h1><p>创建或编辑 <code>/etc/docker/daemon.json</code> 文件（如果文件不存在则创建）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;https://mpuom15x.mirror.aliyuncs.com&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重启 Docker 服务使配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="安装常用"><a href="#安装常用" class="headerlink" title="安装常用"></a>安装常用</h1><h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run -d --name my-nacos -p 8848:8848 nacos/nacos-server<br></code></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><blockquote><p>首次启动时自动创建数据库、用户及设置用户密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name my-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=test -e MYSQL_USER=bgt -e MYSQL_PASSWORD=123456 -d mysql:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --explicit_defaults_for_timestamp=true<br></code></pre></td></tr></table></figure><p><strong>允许远程连接</strong>:</p><ol><li><p><strong>进入容器</strong>:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-keyword">my</span>-mysql /bin/bash<br></code></pre></td></tr></table></figure></li><li><p><strong>进入MySQL客户端</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure></li><li><p><strong>更新MySQL配置以允许远程访问</strong>: 在MySQL客户端中执行以下命令，以允许所有IP地址远程连接（注意，这样做可能有安全风险，生产环境中应谨慎设置）:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">USE mysql;<br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br><span class="hljs-keyword">EXIT</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>重启MySQL容器</strong>: 先退出容器，然后重启容器以应用更改。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br>docker restart my-mysql<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>surprise</title>
      <link href="/2024/07/11/DLT/"/>
      <url>/2024/07/11/DLT/</url>
      
        <content type="html"><![CDATA[<h1 id="prizeInfo"><a href="#prizeInfo" class="headerlink" title="prizeInfo"></a>prizeInfo</h1><p>第2024078期2024.07.08<br>05071014150407<br>一等奖：6注8221379元</p><p>第2024077期2024.07.06<br>01032526290612<br>一等奖：3注10000000元</p><p>第2024076期2024.07.03<br>01062227350712<br>一等奖：5注10000000元</p><p>第2024075期2024.07.01<br>08172628320110<br>一等奖：2注10000000元</p><p>第2024074期2024.06.29<br>02101121270911<br>一等奖：5注10000000元</p><p>第2024073期2024.06.26<br>07091221230509<br>一等奖：5注10000000元</p><p>第2024072期2024.06.24<br>04172123320106<br>一等奖：0注0元</p><p>第2024071期2024.06.22<br>06101534350210<br>一等奖：1注10000000元</p><p>第2024070期2024.06.19<br>04202132340209<br>一等奖：5注10000000元</p><p>第2024069期2024.06.17<br>07091620240307<br>一等奖：4注10000000元</p><p>第2024068期2024.06.15<br>15203132330510<br>一等奖：8注8633190元</p><p>第2024067期2024.06.12<br>03111420220609<br>一等奖：6注8434472元</p><p>第2024066期2024.06.10<br>13192024250607<br>一等奖：5注10000000元</p><p>第2024065期2024.06.06<br>05101826270306<br>一等奖：11注8094947元</p><p>第2024064期2024.06.05<br>05122132330809<br>一等奖：6注10000000元</p><p>第2024063期2024.06.03<br>07121633340103<br>一等奖：10注7845807元</p><p>第2024062期2024.06.01<br>05141516330305<br>一等奖：4注10000000元</p><p>第2024061期2024.05.29<br>01121931330508<br>一等奖：2注10000000元</p><p>第2024060期2024.05.27<br>03212528300112<br>一等奖：2注10000000元</p><p>第2024059期2024.05.25<br>17182025310312<br>一等奖：2注10000000元</p><p>第2024058期2024.05.22<br>06101320320102<br>一等奖：0注0元</p><p>第2024057期2024.05.20<br>09253033340309<br>一等奖：13注8286191元</p><p>第2024056期2024.05.18<br>16171827350612<br>一等奖：6注9728340元</p><p>第2024055期2024.05.15<br>07172230340507<br>一等奖：3注10000000元</p><p>第2024054期2024.05.13<br>05060911220103<br>一等奖：5注10000000元</p><p>第2024053期2024.05.11<br>01071920350309<br>一等奖：14注7105231元</p><p>第2024052期2024.05.08<br>02031322340408<br>一等奖：3注10000000元</p><p>第2024051期2024.05.06<br>05212223290102<br>一等奖：2注10000000元</p><p>第2024050期2024.05.04<br>03041418260709<br>一等奖：5注7763994元</p><p>第2024049期2024.05.01<br>04060910220108<br>一等奖：4注7782365元</p><p>第2024048期2024.04.29<br>12182126280809<br>一等奖：6注6699387元</p><p>第2024047期2024.04.27<br>11192126351011<br>一等奖：1注10000000元</p><p>第2024046期2024.04.24<br>06121729300711<br>一等奖：21注6357343元</p><p>第2024045期2024.04.22<br>09101431320308<br>一等奖：11注7959250元</p><p>第2024044期2024.04.20<br>03131517220610<br>一等奖：7注10000000元</p><p>第2024043期2024.04.17<br>03040814270507<br>一等奖：5注10000000元</p><p>第2024042期2024.04.15<br>01081523350512<br>一等奖：3注10000000元</p><p>第2024041期2024.04.13<br>06081416280305<br>一等奖：10注9149915元</p><p>第2024040期2024.04.10<br>05121629300306<br>一等奖：7注9689751元</p><p>第2024039期2024.04.08<br>03101120220610<br>一等奖：5注10000000元</p><p>第2024038期2024.04.06<br>15222425290105<br>一等奖：7注10000000元</p><p>第2024037期2024.04.03<br>17192029350711<br>一等奖：5注10000000元</p><p>第2024036期2024.04.01<br>02051132340610<br>一等奖：5注10000000元</p><p>第2024035期2024.03.30<br>05131729330512<br>一等奖：5注10000000元</p><p>第2024034期2024.03.27<br>23262729330508<br>一等奖：5注10000000元</p><p>第2024033期2024.03.25<br>04081011150709<br>一等奖：3注10000000元</p><p>第2024032期2024.03.23<br>05152633350109<br>一等奖：4注10000000元</p><p>第2024031期2024.03.20<br>09121530340506<br>一等奖：2注10000000元</p><p>第2024030期2024.03.18<br>08091119300612<br>一等奖：5注10000000元</p><p>第2024029期2024.03.16<br>04192428340405<br>一等奖：3注8132033元</p><p>第2024028期2024.03.13<br>13182026280408<br>一等奖：7注6557970元</p><p>第2024027期2024.03.11<br>08091622230709<br>一等奖：11注6990402元</p><p>第2024026期2024.03.09<br>01182126330212<br>一等奖：2注10000000元</p><p>第2024025期2024.03.06<br>01020818270408<br>一等奖：1注10000000元</p><p>第2024024期2024.03.04<br>03051217260112<br>一等奖：3注8798252元</p><p>第2024023期2024.03.02<br>08101214220509<br>一等奖：6注7312943元</p><p>第2024022期2024.02.28<br>07091131320408<br>一等奖：5注7000760元</p><p>第2024021期2024.02.26<br>01121620280709<br>一等奖：21注5982202元</p><p>第2024020期2024.02.24<br>02040819260206<br>一等奖：4注10000000元</p><p>第2024019期2024.02.21<br>19202629300304<br>一等奖：6注8217484元</p><p>第2024018期2024.02.19<br>04121925270109<br>一等奖：6注10000000元</p><p>第2024017期2024.02.07<br>03072527350104<br>一等奖：0注0元</p><p>第2024016期2024.02.05<br>15182527290611<br>一等奖：4注10000000元</p><p>第2024015期2024.02.03<br>08111424310506<br>一等奖：15注6784841元</p><p>第2024014期2024.01.31<br>04051621310911<br>一等奖：3注10000000元</p><p>第2024013期2024.01.29<br>05222528300312<br>一等奖：10注7927899元</p><p>第2024012期2024.01.27<br>21222526340109<br>一等奖：0注0元</p><p>第2024011期2024.01.24<br>01032732340107<br>一等奖：4注10000000元</p><p>第2024010期2024.01.22<br>02081015270208<br>一等奖：8注7815815元</p><p>第2024009期2024.01.20<br>15181924260509<br>一等奖：2注10000000元</p><p>第2024008期2024.01.17<br>04061120300305<br>一等奖：6注9547905元</p><p>第2024007期2024.01.15<br>04052834350411<br>一等奖：12注7361176元</p><p>第2024006期2024.01.13<br>08131617330210<br>一等奖：6注10000000元</p><p>第2024005期2024.01.10<br>03050709120508<br>一等奖：15注6259584元</p><p>第2024004期2024.01.08<br>02061819270809<br>一等奖：10注6632781元</p><p>第2024003期2024.01.06<br>07091223290102<br>一等奖：9注7766564元</p><p>第2024002期2024.01.03<br>01060827320304<br>一等奖：7注8971726元</p><p>第2024001期2024.01.01<br>03091726350207<br>一等奖：7注8913873元</p><p>第2023150期2023.12.30<br>05061718331112<br>一等奖：4注10000000元</p><p>第2023149期2023.12.27<br>01161721290106<br>一等奖：6注9555249元</p><p>第2023148期2023.12.25<br>11122021270212<br>一等奖：6注10000000元</p><p>第2023147期2023.12.23<br>06071933340308<br>一等奖：5注10000000元</p><p>第2023146期2023.12.20<br>14181926310207<br>一等奖：5注10000000元</p><p>第2023145期2023.12.18<br>06101232330607<br>一等奖：3注10000000元</p><p>第2023144期2023.12.16<br>05141825350110<br>一等奖：5注10000000元</p><p>第2023143期2023.12.13<br>09202329330210<br>一等奖：1注10000000元</p><p>第2023142期2023.12.11<br>04131517321012<br>一等奖：5注10000000元</p><p>第2023141期2023.12.09<br>04222530310405<br>一等奖：5注10000000元</p><p>第2023140期2023.12.06<br>01020919300102<br>一等奖：6注10000000元</p><p>第2023139期2023.12.04<br>15162531340509<br>一等奖：5注10000000元</p><p>第2023138期2023.12.02<br>07122028310910<br>一等奖：2注10000000元</p><p>第2023137期2023.11.29<br>04192130310612<br>一等奖：5注10000000元</p><p>第2023136期2023.11.27<br>13232730340609<br>一等奖：4注10000000元</p><p>第2023135期2023.11.25<br>05182228290912<br>一等奖：15注6929543元</p><p>第2023134期2023.11.22<br>10152227330112<br>一等奖：5注10000000元</p><p>第2023133期2023.11.20<br>10182528330511<br>一等奖：6注8695944元</p><p>第2023132期2023.11.18<br>03041215230206<br>一等奖：4注10000000元</p><p>第2023131期2023.11.15<br>03072122240607<br>一等奖：2注10000000元</p><p>第2023130期2023.11.13<br>13202729300107<br>一等奖：3注10000000元</p><p>第2023129期2023.11.11<br>09232527330612<br>一等奖：2注10000000元</p><p>第2023128期2023.11.08<br>01050712130206<br>一等奖：4注10000000元</p><p>第2023127期2023.11.06<br>04070818190206<br>一等奖：3注10000000元</p><p>第2023126期2023.11.02<br>07121726340206<br>一等奖：13注8662429元</p><p>第2023125期2023.11.01<br>07252629320208<br>一等奖：1注10000000元</p><p>第2023124期2023.10.30<br>06182327320610<br>一等奖：2注10000000元</p><p>第2023123期2023.10.28<br>02141628300207<br>一等奖：4注10000000元</p><p>第2023122期2023.10.25<br>01070925291012<br>一等奖：3注10000000元</p><p>第2023121期2023.10.23<br>05111523330109<br>一等奖：12注8513200元</p><p>第2023120期2023.10.21<br>02081631340110<br>一等奖：2注10000000元</p><p>第2023119期2023.10.18<br>04081014210410<br>一等奖：4注10000000元</p><p>第2023118期2023.10.16<br>06071325330508<br>一等奖：8注7792198元</p><p>第2023117期2023.10.14<br>05071518200304<br>一等奖：5注10000000元</p><p>第2023116期2023.10.11<br>01030918290409<br>一等奖：7注8003202元</p><p>第2023115期2023.10.09<br>07102331340210<br>一等奖：9注7616663元</p><p>第2023114期2023.10.07<br>02252730350110<br>一等奖：3注10000000元</p><p>第2023113期2023.09.30<br>06083032330310<br>一等奖：6注9413555元</p><p>第2023112期2023.09.27<br>01111722270209<br>一等奖：4注10000000元</p><p>第2023111期2023.09.25<br>03121528350212<br>一等奖：3注9178567元</p><p>第2023110期2023.09.23<br>04091113170708<br>一等奖：3注10000000元</p><p>第2023109期2023.09.20<br>01122122310209<br>一等奖：2注9999751元</p><p>第2023108期2023.09.18<br>05061730320208<br>一等奖：5注7050476元</p><p>第2023107期2023.09.16<br>01121516180310<br>一等奖：1注10000000元</p><p>第2023106期2023.09.13<br>16242628310106<br>一等奖：0注0元</p><p>第2023105期2023.09.11<br>07081920250211<br>一等奖：26注5322339元</p><p>第2023104期2023.09.09<br>06151632330810<br>一等奖：22注6310674元</p><p>第2023103期2023.09.06<br>08111931320811<br>一等奖：6注8485103元</p><p>第2023102期2023.09.04<br>02040716330711<br>一等奖：2注10000000元</p><p>第2023101期2023.09.02<br>06141617280710<br>一等奖：4注10000000元</p><p>第2023100期2023.08.30<br>04061319350911<br>一等奖：1注10000000元</p><p>第2023099期2023.08.28<br>09111322230706<br>一等奖：0注10000000元</p><p>第2023098期2023.08.26<br>02071530340509<br>一等奖：0注10000000元</p><p>第2023097期2023.08.23<br>06071820220309<br>一等奖：6注10000000元</p><p>第2023096期2023.08.21<br>06071421310310<br>一等奖：1注10000000元</p><p>第2023095期2023.08.19<br>08192832340307<br>一等奖：1注10000000元</p><p>第2023094期2023.08.16<br>12192228320812<br>一等奖：1注10000000元</p><p>第2023093期2023.08.14<br>11141719210105<br>一等奖：4注7978094元</p><p>第2023092期2023.08.12<br>03162126320312<br>一等奖：3注10000000元</p><p>第2023091期2023.08.09<br>06161828290711<br>一等奖：0注0元</p><p>第2023090期2023.08.07<br>08111219351112<br>一等奖：28注5993406元</p><p>第2023089期2023.08.05<br>03122026350212<br>一等奖：4注10000000元</p><p>第2023088期2023.08.02<br>08141622240912<br>一等奖：7注9324634元</p><p>第2023087期2023.07.31<br>03041619240405<br>一等奖：2注10000000元</p><p>第2023086期2023.07.29<br>03111520350711<br>一等奖：6注10000000元</p><p>第2023085期2023.07.26<br>11122631350507<br>一等奖：0注0元</p><p>第2023084期2023.07.24<br>03050824320708<br>一等奖：3注8187716元</p><p>第2023083期2023.07.22<br>13152125320910<br>一等奖：8注8765209元</p><p>第2023082期2023.07.19<br>02080915200309<br>一等奖：5注9527865元</p><p>第2023081期2023.07.17<br>05062328350710<br>一等奖：13注7201205元</p><p>第2023080期2023.07.15<br>01020916300111<br>一等奖：2注10000000元</p><p>第2023079期2023.07.12<br>06082629340508<br>一等奖：5注10000000元</p><p>第2023078期2023.07.10<br>02030626270708<br>一等奖：8注8140301元</p><p>第2023077期2023.07.08<br>05161826350306<br>一等奖：13注7106555元</p><p>第2023076期2023.07.05<br>08091126340207<br>一等奖：3注10000000元</p><p>第2023075期2023.07.03<br>07172023320511<br>一等奖：9注7321734元</p><p>第2023074期2023.07.01<br>03132229340209<br>一等奖：4注10000000元</p><p>第2023073期2023.06.28<br>15252830350810<br>一等奖：4注10000000元</p><p>第2023072期2023.06.26<br>05060911140204<br>一等奖：3注10000000元</p><p>第2023071期2023.06.24<br>02111232341012<br>一等奖：4注10000000元</p><p>第2023070期2023.06.21<br>10262932330311<br>一等奖：7注10000000元</p><p>第2023069期2023.06.19<br>08202125320507<br>一等奖：2注10000000元</p><p>第2023068期2023.06.17<br>21222427310708<br>一等奖：7注10000000元</p><p>第2023067期2023.06.14<br>02283033350210<br>一等奖：2注10000000元</p><p>第2023066期2023.06.12<br>06111330320103<br>一等奖：3注10000000元</p><p>第2023065期2023.06.10<br>08141621250312<br>一等奖：1注10000000元</p><p>第2023064期2023.06.07<br>02060931320307<br>一等奖：8注6313601元</p><p>第2023063期2023.06.05<br>04182931340609<br>一等奖：6注6757853元</p><p>第2023062期2023.06.03<br>06082224300108<br>一等奖：6注7027511元</p><p>第2023061期2023.05.31<br>07112130320507<br>一等奖：1注10000000元</p><p>第2023060期2023.05.29<br>02071924300912<br>一等奖：20注5803660元</p><p>第2023059期2023.05.27<br>09132325280407<br>一等奖：9注7257198元</p><p>第2023058期2023.05.24<br>19222932350508<br>一等奖：8注9329207元</p><p>第2023057期2023.05.22<br>01050619240511<br>一等奖：8注10000000元</p><p>第2023056期2023.05.20<br>13222433340102<br>一等奖：3注10000000元</p><p>第2023055期2023.05.17<br>06081213150106<br>一等奖：5注10000000元</p><p>第2023054期2023.05.15<br>19253031340709<br>一等奖：6注10000000元</p><p>第2023053期2023.05.13<br>01031114200211<br>一等奖：3注10000000元</p><p>第2023052期2023.05.10<br>02081130330508<br>一等奖：5注10000000元</p><p>第2023051期2023.05.08<br>03111929330312<br>一等奖：21注6007213元</p><p>第2023050期2023.05.06<br>08091425290406<br>一等奖：5注10000000元</p><p>第2023046期2023.04.26<br>13212528320210<br>一等奖：0注0元</p><p>第2023045期2023.04.24<br>07101328310405<br>一等奖：6注10000000元</p><p>第2023044期2023.04.22<br>02060708150710<br>一等奖：5注10000000元</p><p>第2023043期2023.04.19<br>02041720270108<br>一等奖：4注10000000元</p><p>第2023042期2023.04.17<br>02162123270108<br>一等奖：4注8825763元</p><p>第2023041期2023.04.15<br>05081326350509<br>一等奖：10注9113936元</p><p>第2023040期2023.04.12<br>04051822300512<br>一等奖：10注8838815元</p><p>第2023039期2023.04.10<br>02242630340607<br>一等奖：2注10000000元</p><p>第2023038期2023.04.08<br>04101827321012<br>一等奖：2注10000000元</p><p>第2023037期2023.04.05<br>06081620240708<br>一等奖：5注7815329元</p><p>第2023036期2023.04.03<br>01132226310210<br>一等奖：10注5516938元</p><p>第2023035期2023.04.01<br>07142325290211<br>一等奖：6注9979848元</p><p>第2023034期2023.03.29<br>07091015240412<br>一等奖：5注7780731元</p><p>第2023033期2023.03.27<br>04061011250709<br>一等奖：4注7900471元</p><p>第2023032期2023.03.25<br>05061828300207<br>一等奖：17注6288243元</p><p>第2023031期2023.03.22<br>05070816250311<br>一等奖：6注9483426元</p><p>第2023030期2023.03.20<br>06111220350512<br>一等奖：5注10000000元</p><p>第2023029期2023.03.19<br>07252734350911<br>一等奖：0注0元</p><p>第2023028期2023.03.15<br>01032930340412<br>一等奖：0注0元</p><p>第2023027期2023.03.13<br>09101215230306<br>一等奖：5注6766822元</p><p>第2023026期2023.03.11<br>02132427300106<br>一等奖：1注10000000元</p><p>第2023026期2023.03.11<br>02132427300106<br>一等奖：0注0元</p><p>第2023025期2023.03.08<br>03092730311112<br>一等奖：6注6917554元</p><p>第2023024期2023.03.06<br>11152427300110<br>一等奖：5注7924611元</p><p>第2023023期2023.03.04<br>09212325330310<br>一等奖：13注6369271元</p><p>第2023022期2023.03.01<br>07111526280810<br>一等奖：5注7161286元</p><p>第2023021期2023.02.27<br>02091823270305<br>一等奖：5注6737925元</p><p>第2023020期2023.02.25<br>05062325280609<br>一等奖：13注5492927元</p><p>第2023019期2023.02.22<br>05080911150608<br>一等奖：10注5948278元</p><p>第2023018期2023.02.20<br>04081726300311<br>一等奖：3注8442888元</p><p>第2023017期2023.03.18<br>02050922271011<br>一等奖：30注5817626元</p><p>第2023016期2023.02.15<br>02041231320711<br>一等奖：11注6710087元</p><p>第2023015期2023.02.13<br>08162425340812<br>一等奖：6注8742063元</p><p>第2023014期2023.02.11<br>03081822240109<br>一等奖：5注10000000元</p><p>第2023013期2023.02.08<br>01020923250206<br>一等奖：5注10000000元</p><p>第2023012期2023.02.06<br>07161718280203<br>一等奖：17注6215753元</p><p>第2023011期2023.02.04<br>02070817250103<br>一等奖：4注10000000元</p><p>第2023010期2023.02.01<br>05061323260106<br>一等奖：7注8119275元</p><p>第2023009期2023.01.30<br>01051115330110<br>一等奖：3注10000000元</p><p>第2023008期2023.01.18<br>04091722250105<br>一等奖：11注6668897元</p><p>第2023007期2023.01.16<br>02032430320106<br>一等奖：2注10000000元</p><p>第2023006期2023.01.14<br>02041227350607<br>一等奖：2注10000000元</p><p>第2023005期2023.01.11<br>01031020290611<br>一等奖：5注10000000元</p><p>第2023004期2023.01.09<br>04131520220408<br>一等奖：3注10000000元</p><p>第2023003期2023.01.07<br>05061421220209<br>一等奖：6注10000000元</p><p>第2023002期2023.01.04<br>11142126270207<br>一等奖：3注10000000元</p><p>第2023001期2023.01.02<br>18192427341112<br>一等奖：0注0元</p><p>第2022150期2022.12.31<br>06072629300312<br>一等奖：4注10000000元</p><p>第2022149期2022.12.28<br>15192226280207<br>一等奖：7注8559676元</p><p>第2022148期2022.12.26<br>04050626270712<br>一等奖：6注8092788元</p><p>第2022147期2022.12.24<br>04122228300911<br>一等奖：2注10000000元</p><p>第2022146期2022.12.21<br>01212328350709<br>一等奖：1注10000000元</p><p>第2022145期2022.12.19<br>10202930350609<br>一等奖：5注8228015元</p><p>第2022144期2022.12.17<br>03040815210407<br>一等奖：5注9732901元</p><p>第2022143期2022.12.14<br>10131427330708<br>一等奖：3注10000000元</p><p>第2022142期2022.12.12<br>07121429350111<br>一等奖：2注10000000元</p><p>第2022141期2022.12.10<br>05061424250204<br>一等奖：0注0元</p><p>第2022140期2022.12.07<br>05152526290412<br>一等奖：7注8414552元</p><p>第2022139期2022.12.05<br>01131422350205<br>一等奖：2注10000000元</p><p>第2022138期2022.12.03<br>05131627330712<br>一等奖：14注7323910元</p><p>第2022137期2022.11.30<br>05060815200708<br>一等奖：8注6803296元</p><p>第2022136期2022.11.28<br>01111517330311<br>一等奖：4注10000000元</p><p>第2022135期2022.11.26<br>09102731320103<br>一等奖：5注10000000元</p><p>第2022134期2022.11.23<br>03162327320306<br>一等奖：10注7180775元</p><p>第2022133期2022.11.21<br>01021430310609<br>一等奖：2注10000000元</p><p>第2022132期2022.11.19<br>02273034350912<br>一等奖：1注10000000元</p><p>第2022131期2022.11.16<br>02060810170506<br>一等奖：13注7230419元</p><p>第2022130期2022.11.14<br>05071518230510<br>一等奖：1注10000000元</p><p>第2022129期2022.11.12<br>10172334350104<br>一等奖：1注10000000元</p><p>第2022128期2022.11.09<br>10192123350410<br>一等奖：0注0元</p><p>第2022127期2022.11.07<br>02030809200410<br>一等奖：1注10000000元</p><p>第2022126期2022.11.05<br>04050822350103<br>一等奖：4注10000000元</p><p>第2022125期2022.11.02<br>03071416190111<br>一等奖：3注10000000元</p><p>第2022124期2022.10.31<br>02041125300612<br>一等奖：4注10000000元</p><p>第2022123期2022.10.28<br>02202829300710<br>一等奖：6注8863199元</p><p>第2022122期2022.10.26<br>04151719250612<br>一等奖：3注10000000元</p><p>第2022121期2022.10.24<br>04151620210405<br>一等奖：4注8403281元</p><p>第2022120期2022.10.22<br>11222630330305<br>一等奖：20注6147599元</p><p>第2022119期2022.10.19<br>01091625290409<br>一等奖：9注6378248元</p><p>第2022118期2022.10.17<br>02051517260208<br>一等奖：2注10000000元</p><p>第2022117期2022.10.15<br>09121521320207<br>一等奖：2注10000000元</p><p>第2022117期2022.10.15<br>09121521320207<br>一等奖：0注0元</p><p>第2022116期2022.10.12<br>01072022310712<br>一等奖：2注10000000元</p><p>第2022115期2022.10.10<br>17192023270308<br>一等奖：1注10000000元</p><p>第2022114期2022.10.08<br>11212427280510<br>一等奖：3注10000000元</p><p>第2022113期2022.10.05<br>13152231330512<br>一等奖：3注10000000元</p><p>第2022112期2022.09.28<br>04111820260612<br>一等奖：6注7374292元</p><p>第2022111期2022.09.26<br>06121619310610<br>一等奖：3注10000000元</p><p>第2022110期2022.09.24<br>02131618230306<br>一等奖：5注7700255元</p><p>第2022109期2022.09.21<br>05092429350512<br>一等奖：13注5529833元</p><p>第2022108期2022.09.18<br>04071326280711<br>一等奖：2注9817382元</p><p>第2022107期2022.09.17<br>07091928290810<br>一等奖：11注7084969元</p><p>第2022106期2022.09.14<br>16172128320407<br>一等奖：4注8148482元</p><p>第2022105期2022.09.12<br>01080921220104<br>一等奖：6注9548733元</p><p>第2022104期2022.09.10<br>03051319250205<br>一等奖：5注10000000元</p><p>第2022103期2022.09.07<br>08121621320112<br>一等奖：2注10000000元</p><p>第2022102期2022.09.05<br>01051420300204<br>一等奖：5注7098382元</p><p>第2022101期2022.09.03<br>02040607080306<br>一等奖：5注7881688元</p><p>第2022100期2022.08.31<br>10192023310307<br>一等奖：12注6928361元</p><p>第2022099期2022.08.29<br>07182527330405<br>一等奖：2注10000000元</p><p>第2022098期2022.08.27<br>01030611130311<br>一等奖：7注10000000元</p><p>第2022097期2022.08.24<br>05132228290511<br>一等奖：5注10000000元</p><p>第2022096期2022.08.22<br>16192427330106<br>一等奖：1注10000000元</p><p>第2022095期2022.08.20<br>05082225350207<br>一等奖：4注7575561元</p><p>第2022094期2022.08.17<br>03040712190205<br>一等奖：11注6755759元</p><p>第2022093期2022.08.15<br>07111421290710<br>一等奖：15注6181280元</p><p>第2022092期2022.08.13<br>01041223290512<br>一等奖：3注10000000元</p><p>第2022091期2022.08.10<br>02112022340412<br>一等奖：8注9889786元</p><p>第2022090期2022.08.08<br>01202425310912<br>一等奖：3注10000000元</p><p>第2022089期2022.08.06<br>01202131330311<br>一等奖：0注0元</p><p>第2022088期2022.08.03<br>01081020350611<br>一等奖：6注8871797元</p><p>第2022087期2022.08.01<br>04061024280612<br>一等奖：2注10000000元</p><p>第2022086期2022.07.30<br>04102128310811<br>一等奖：4注7547381元</p><p>第2022085期2022.07.27<br>11163133350608<br>一等奖：1注10000000元</p><p>第2022084期2021.07.26<br>03111925270412<br>一等奖：3注10000000元</p><p>第2022083期2022.07.23<br>02091726320406<br>一等奖：5注7308055元</p><p>第2022082期2022.07.20<br>04262730330209<br>一等奖：3注9128455元</p><p>第2022081期2022.07.18<br>05101931320910<br>一等奖：35注5870791元</p><p>第2022080期2022.07.16<br>10173031340306<br>一等奖：2注10000000元</p><p>第2022079期2022.07.13<br>07101926320812<br>一等奖：9注7686108元</p><p>第2022078期2022.07.11<br>02031820270102<br>一等奖：2注10000000元</p><p>第2022077期2022.07.09<br>05101116190110<br>一等奖：7注8488725元</p><p>第2022076期2022.07.06<br>05173034350209<br>一等奖：4注10000000元</p><p>第2022075期2022.07.04<br>04121317180709<br>一等奖：2注10000000元</p><p>第2022074期2022.07.02<br>02062125280206<br>一等奖：5注7510081元</p><p>第2022073期2022.06.29<br>11182125320204<br>一等奖：2注10000000元</p><p>第2022072期2022.06.27<br>01121315300307<br>一等奖：2注9788546元</p><p>第2022071期2022.06.25<br>09151925290809<br>一等奖：65注5305543元</p><p>第2022070期2022.06.22<br>01071723350711<br>一等奖：5注10000000元</p><p>第2022069期2022.06.20<br>02032328350209<br>一等奖：2注10000000元</p><p>第2022068期2022.06.18<br>03061015230308<br>一等奖：4注10000000元</p><p>第2022067期2022.06.15<br>04141532331011<br>一等奖：9注8005408元</p><p>第2022066期2022.06.13<br>02242526340312<br>一等奖：2注10000000元</p><p>第2022065期2022.06.11<br>05101322280104<br>一等奖：2注10000000元</p><p>第2022064期2022.06.08<br>02192225350507<br>一等奖：1注10000000元</p><p>第2022063期2022.06.06<br>02032226310610<br>一等奖：2注10000000元</p><p>第2022062期2022.06.04<br>05091112310711<br>一等奖：4注10000000元</p><p>第2022061期2022.06.01<br>06091922300106<br>一等奖：5注8933032元</p><p>第2022060期2022.05.30<br>02061011200309<br>一等奖：2注10000000元</p><p>第2022059期2022.05.28<br>04151832340409<br>一等奖：5注10000000元</p><p>第2022058期2022.05.25<br>03042426350708<br>一等奖：8注8838497元</p><p>第2022057期2022.05.23<br>06121821350710<br>一等奖：6注10000000元</p><p>第2022056期2022.05.21<br>02111517310709<br>一等奖：0注0元</p><p>第2022055期2022.05.18<br>01021215230406<br>一等奖：6注10000000元</p><p>第2022054期2022.05.16<br>05162123340710<br>一等奖：19注6015218元</p><p>第2022053期2022.05.14<br>09171920250109<br>一等奖：18注6331450元</p><p>第2022052期2022.05.11<br>01131829350409<br>一等奖：7注9183568元</p><p>第2022051期2022.05.09<br>01161719330506<br>一等奖：8注8087457元</p><p>第2022050期2022.05.07<br>02102124300810<br>一等奖：4注10000000元</p><p>第2022049期2022.05.04<br>06102028350110<br>一等奖：5注10000000元</p><p>第2022048期2022.05.02<br>16222829320809<br>一等奖：1注10000000元</p><p>第2022047期2022.04.30<br>07101112330311<br>一等奖：4注10000000元</p><p>第2022046期2022.04.27<br>06071222270305<br>一等奖：7注8932034元</p><p>第2022045期2022.04.25<br>02030712200105<br>一等奖：1注10000000元</p><p>第2022044期2022.04.23<br>01021617200307<br>一等奖：4注10000000元</p><p>第2022043期2022.04.20<br>02161724300912<br>一等奖：14注7059578元</p><p>第2022042期2022.04.18<br>08101129320206<br>一等奖：5注10000000元</p><p>第2022041期2022.04.14<br>05152526330611<br>一等奖：5注10000000元</p><p>第2022040期2022.04.13<br>10192529330812<br>一等奖：10注7441714元</p><p>第2022039期2022.04.11<br>01081122310511<br>一等奖：3注10000000元</p><p>第2022038期2022.04.09<br>07091112260912<br>一等奖：17注6234524元</p><p>第2022037期2022.04.06<br>01091720280610<br>一等奖：1注10000000元</p><p>第2022036期2022.04.04<br>18192126340607<br>一等奖：2注10000000元</p><p>第2022035期2022.04.02<br>09111323310508<br>一等奖：3注10000000元</p><p>第2022034期2022.03.30<br>02102427280607<br>一等奖：6注10000000元</p><p>第2022033期2022.03.28<br>08151619330304<br>一等奖：5注9798152元</p><p>第2022032期2022.03.26<br>05091831320105<br>一等奖：0注0元</p><p>第2022031期2022.03.23<br>07141620280408<br>一等奖：3注10000000元</p><p>第2022030期2022.03.21<br>12141521300109<br>一等奖：3注10000000元</p><p>第2022029期2022.03.19<br>07081014171012<br>一等奖：3注10000000元</p><p>第2022028期2022.03.16<br>04091617350107<br>一等奖：5注10000000元</p><p>第2022027期2022.03.14<br>03061131320512<br>一等奖：7注9789035元</p><p>第2022026期2022.03.12<br>11142223270810<br>一等奖：4注10000000元</p><p>第2022025期2022.03.09<br>04072224290107<br>一等奖：2注10000000元</p><p>第2022024期2022.03.07<br>01021130350112<br>一等奖：1注10000000元</p><p>第2022023期2022.03.05<br>04051820251112<br>一等奖：9注8399145元</p><p>第2022022期2022.03.02<br>01051417280607<br>一等奖：4注10000000元</p><p>第2022021期2022.02.28<br>11151618350609<br>一等奖：4注10000000元</p><p>第2022020期2022.02.26<br>16173031350809<br>一等奖：3注10000000元</p><p>第2022019期2022.02.23<br>01040717210102<br>一等奖：8注9950822元</p><p>第2022018期2022.02.21<br>16212931340609<br>一等奖：8注7631726元</p><p>第2022017期2022.02.19<br>10141823250711<br>一等奖：5注10000000元</p><p>第2022016期2022.02.16<br>01071726320109<br>一等奖：2注10000000元</p><p>第2022015期2022.02.14<br>01020812300512<br>一等奖：14注6507822元</p><p>第2022014期2022.02.12<br>01041018320109<br>一等奖：3注10000000元</p><p>第2022013期2022.02.09<br>04091625320506<br>一等奖：11注7485048元</p><p>第2022012期2022.01.26<br>03051033340710<br>一等奖：6注10000000元</p><p>第2022011期2022.01.24<br>03051724320512<br>一等奖：5注10000000元</p><p>第2022010期2022.01.22<br>04192531350211<br>一等奖：2注10000000元</p><p>第2022009期2022.01.19<br>13141831330710<br>一等奖：6注9417131元</p><p>第2022008期2022.01.17<br>01021318340607<br>一等奖：1注10000000元</p><p>第2022007期2022.01.15<br>05222325350311<br>一等奖：3注10000000元</p><p>第2022006期2022.01.12<br>01050717200512<br>一等奖：2注10000000元</p><p>第2022005期2022.01.10<br>02131719340509<br>一等奖：16注6275185元</p><p>第2022004期2022.01.08<br>07202730330304<br>一等奖：2注10000000元</p><p>第2022003期2022.01.05<br>02182425340812<br>一等奖：5注10000000元</p><p>第2022002期2022.01.03<br>04060709240412<br>一等奖：5注9208823元</p><p>第2022001期2022.01.01<br>08111922290311<br>一等奖：11注7127420元</p><p>第2021150期2021.12.29<br>04101123260710<br>一等奖：5注10000000元</p><p>第2021149期2021.12.27<br>20262830351011<br>一等奖：1注10000000元</p><p>第2021148期2021.12.25<br>01041216290408<br>一等奖：6注10000000元</p><p>第2021147期2021.12.22<br>01020812260107<br>一等奖：4注10000000元</p><p>第2021146期2021.12.20<br>03050818200911<br>一等奖：7注9538231元</p><p>第2021145期2021.12.18<br>03082529300106<br>一等奖：5注10000000元</p><p>第2021144期2021.12.15<br>03202530340209<br>一等奖：2注10000000元</p><p>第2021143期2021.12.13<br>09171929340411<br>一等奖：11注7088508元</p><p>第2021142期2021.12.11<br>11131719250209<br>一等奖：6注10000000元</p><p>第2021141期2021.12.08<br>02081629340512<br>一等奖：3注10000000元</p><p>第2021140期2021.12.06<br>05242633350912<br>一等奖：2注10000000元</p><p>第2021139期2021.12.04<br>05131823340809<br>一等奖：29注5837260元</p><p>第2021138期2021.12.01<br>09111215310511<br>一等奖：4注10000000元</p><p>第2021137期2021.11.29<br>02071314190405<br>一等奖：7注8951971元</p><p>第2021136期2021.11.27<br>08121927330205<br>一等奖：2注10000000元</p><p>第2021135期2021.11.24<br>04071729310506<br>一等奖：4注10000000元</p><p>第2021134期2021.11.22<br>02061419280106<br>一等奖：4注10000000元</p><p>第2021133期2021.11.20<br>08091726280608<br>一等奖：13注6695515元</p><p>第2021132期2021.11.17<br>04212829330311<br>一等奖：10注7538023元</p><p>第2021131期2021.11.14<br>06081634350506<br>一等奖：2注10000000元</p><p>第2021130期2021.11.13<br>02031427280510<br>一等奖：14注7136788元</p><p>第2021129期2021.11.10<br>02161718340410<br>一等奖：0注0元</p><p>第2021128期2021.11.08<br>14171823270508<br>一等奖：9注7655899元</p><p>第2021127期2021.11.06<br>01021517260211<br>一等奖：3注10000000元</p><p>第2021126期2021.11.03<br>01111234350912<br>一等奖：2注10000000元</p><p>第2021125期2021.11.01<br>17192127310409<br>一等奖：1注10000000元</p><p>第2021124期2021.10.30<br>10172225350709<br>一等奖：3注10000000元</p><p>第2021123期2021.10.27<br>08232627330809<br>一等奖：3注10000000元</p><p>第2021122期2021.10.25<br>14152627290405<br>一等奖：2注10000000元</p><p>第2021121期2021.10.23<br>02151929300209<br>一等奖：3注10000000元</p><p>第2021120期2021.10.20<br>05102125310511<br>一等奖：10注8314748元</p><p>第2021119期2021.10.18<br>01020916300910<br>一等奖：4注10000000元</p><p>第2021118期2021.10.15<br>14171828340203<br>一等奖：4注10000000元</p><p>第2021117期2021.10.13<br>11182122330506<br>一等奖：8注8355835元</p><p>第2021116期2021.10.11<br>04252829350311<br>一等奖：2注10000000元</p><p>第2021115期2021.10.09<br>08131920290610<br>一等奖：2注10000000元</p><p>第2021114期2021.10.06<br>08091329300111<br>一等奖：1注10000000元</p><p>第2021113期2021.09.29<br>17182527280408<br>一等奖：6注9008492元</p><p>第2021112期2021.09.27<br>18212223351112<br>一等奖：1注10000000元</p><p>第2021111期2021.09.25<br>07081519280809<br>一等奖：12注7142456元</p><p>第2021110期2021.09.22<br>11142931321112<br>一等奖：6注9131551元</p><p>第2021109期2021.09.20<br>03040727310609<br>一等奖：4注10000000元</p><p>第2021108期2021.09.18<br>05192226350206<br>一等奖：8注8614284元</p><p>第2021107期2021.09.15<br>03051320250711<br>一等奖：9注7946101元</p><p>第2021106期2021.09.13<br>02131432340212<br>一等奖：0注0元</p><p>第2021105期2021.09.11<br>07101117180409<br>一等奖：4注10000000元</p><p>第2021104期2021.09.08<br>23252630330311<br>一等奖：2注10000000元</p><p>第2021103期2021.09.06<br>04102330310511<br>一等奖：1注10000000元</p><p>第2021102期2021.09.04<br>02081116230207<br>一等奖：13注7523067元</p><p>第2021101期2021.09.01<br>13181927320611<br>一等奖：6注9675934元</p><p>第2021100期2021.08.30<br>07112326280207<br>一等奖：3注10000000元</p><p>第2021100期2021.08.30<br>07112326280207<br>一等奖：0注0元</p><p>第2021099期2021.08.28<br>15192728300304<br>一等奖：1注10000000元</p><p>第2021098期2021.08.25<br>02072127330709<br>一等奖：2注10000000元</p><p>第2021097期2021.08.23<br>11263031330310<br>一等奖：1注10000000元</p><p>第2021096期2021.08.21<br>07081020210105<br>一等奖：10注8465507元</p><p>第2021095期2021.08.18<br>10151920301112<br>一等奖：2注10000000元</p><p>第2021094期2021.08.16<br>05062427330512<br>一等奖：6注9900472元</p><p>第2021093期2021.08.14<br>20252728310811<br>一等奖：2注10000000元</p><p>第2021092期2021.08.11<br>12142728340307<br>一等奖：2注10000000元</p><p>第2021091期2021.08.09<br>01041021290305<br>一等奖：5注10000000元</p><p>第2021090期2021.08.07<br>06071926320612<br>一等奖：2注10000000元</p><p>第2021089期2021.08.04<br>01172428351012<br>一等奖：3注10000000元</p><p>第2021088期2021.08.02<br>02143134350107<br>一等奖：2注9148546元</p><p>第2021087期2021.07.31<br>10141525280310<br>一等奖：6注9400653元</p><p>第2021086期2021.07.28<br>02030716170610<br>一等奖：1注10000000元</p><p>第2021085期2021.07.26<br>01121526351011<br>一等奖：6注7421868元</p><p>第2021084期2021.07.24<br>02101430330609<br>一等奖：6注6943989元</p><p>第2021083期2021.07.21<br>07091126350108<br>一等奖：6注7329020元</p><p>第2021082期2021.07.19<br>01142229330310<br>一等奖：11注7463880元</p><p>第2021081期2021.07.17<br>05132429350708<br>一等奖：2注10000000元</p><p>第2021080期2021.07.14<br>15162029300610<br>一等奖：8注8006507元</p><p>第2021079期2021.07.12<br>06141926330811<br>一等奖：6注9906345元</p><p>第2021078期2021.07.10<br>02081719250105<br>一等奖：3注9605842元</p><p>第2021077期2021.07.07<br>02060921250608<br>一等奖：4注7575647元</p><p>第2021076期2021.07.05<br>06132225260204<br>一等奖：2注9596268元</p><p>第2021075期2021.07.03<br>06141517200105<br>一等奖：2注10000000元</p><p>第2021074期2021.06.30<br>11141820250307<br>一等奖：1注10000000元</p><p>第2021073期2021.06.28<br>08121420240610<br>一等奖：2注10000000元</p><p>第2021072期2021.06.26<br>02031522260311<br>一等奖：3注9518742元</p><p>第2021071期2021.06.23<br>08111629350104<br>一等奖：9注6287890元</p><p>第2021070期2021.06.21<br>03202122240612<br>一等奖：1注10000000元</p><p>第2021069期2021.06.19<br>01032432330406<br>一等奖：4注8622290元</p><p>第2021068期2021.06.16<br>02202126300210<br>一等奖：13注6004435元</p><p>第2021067期2021.06.14<br>01042223340809<br>一等奖：1注10000000元</p><p>第2021066期2021.06.12<br>24262934350911<br>一等奖：12注5981636元</p><p>第2021065期2021.06.09<br>23253031350708<br>一等奖：6注6498494元</p><p>第2021064期2021.06.07<br>01171932340610<br>一等奖：2注10000000元</p><p>第2021063期2021.06.05<br>05091429300911<br>一等奖：9注6029136元</p><p>第2021062期2021.06.02<br>04062332340507<br>一等奖：5注8059793元</p><p>第2021061期2021.05.31<br>15192026320407<br>一等奖：7注6484687元</p><p>第2021060期2021.05.29<br>09132531330307<br>一等奖：8注5714074元</p><p>第2021059期2021.05.26<br>04162728350209<br>一等奖：12注5810333元</p><p>第2021058期2021.05.24<br>13151723340111<br>一等奖：2注10000000元</p><p>第2021057期2021.05.22<br>05071920280507<br>一等奖：39注5176735元</p><p>第2021056期2021.05.19<br>03111621260910<br>一等奖：9注8577701元</p><p>第2021055期2021.05.17<br>03061011241011<br>一等奖：5注10000000元</p><p>第2021054期2021.05.15<br>03061720250309<br>一等奖：5注10000000元</p><p>第2021053期2021.05.12<br>03061517350711<br>一等奖：5注7659176元</p><p>第2021052期2021.05.10<br>02111314300912<br>一等奖：6注8348700元</p><p>第2021051期2021.05.08<br>01041416190304<br>一等奖：9注6297261元</p><p>第2021050期2021.05.05<br>09223233350510<br>一等奖：7注9324231元</p><p>第2021049期2021.05.03<br>01102223250212<br>一等奖：2注10000000元</p><p>第2021048期2021.05.01<br>04071721271012<br>一等奖：11注7492512元</p><p>第2021047期2021.04.28<br>01060925330408<br>一等奖：2注10000000元</p><p>第2021046期2021.04.26<br>06081214180608<br>一等奖：12注5909252元</p><p>第2021045期2021.04.24<br>01040611190709<br>一等奖：3注9103239元</p><p>第2021044期2021.04.21<br>06183133351011<br>一等奖：11注6089993元</p><p>第2021043期2021.04.19<br>07121719340110<br>一等奖：14注6968132元</p><p>第2021042期2021.04.17<br>09152023290405<br>一等奖：4注10000000元</p><p>第2021041期2021.04.14<br>02050911320409<br>一等奖：9注7739792元</p><p>第2021040期2021.04.12<br>02030916190307<br>一等奖：8注8547328元</p><p>第2021039期2021.04.10<br>04121421350211<br>一等奖：7注10000000元</p><p>第2021038期2021.04.07<br>09112029320107<br>一等奖：17注6113204元</p><p>第2021037期2021.04.05<br>10212729330412<br>一等奖：8注8094047元</p><p>第2021036期2021.04.03<br>08172528330711<br>一等奖：6注9886405元</p><p>第2021035期2021.03.31<br>05111630320304<br>一等奖：6注10000000元</p><p>第2021034期2021.03.29<br>08101425340708<br>一等奖：0注0元</p><p>第2021033期2021.03.25<br>01030530320105<br>一等奖：5注10000000元</p><p>第2021032期2021.03.24<br>01111434350710<br>一等奖：3注10000000元</p><p>第2021031期2021.03.22<br>01041920340305<br>一等奖：27注5391526元</p><p>第2021030期2021.03.20<br>18232526320207<br>一等奖：6注9376324元</p><p>第2021029期2021.03.17<br>02061032330407<br>一等奖：3注10000000元</p><p>第2021028期2021.03.15<br>02030517290410<br>一等奖：5注10000000元</p><p>第2021027期2021.03.13<br>09212226300412<br>一等奖：10注7998232元</p><p>第2021026期2021.03.10<br>07112024270111<br>一等奖：2注10000000元</p><p>第2021025期2021.03.08<br>17182330311012<br>一等奖：1注10000000元</p><p>第2021024期2021.03.06<br>11142124310210<br>一等奖：3注10000000元</p><p>第2021023期2021.03.03<br>07091316320209<br>一等奖：2注10000000元</p><p>第2021022期2021.03.01<br>02122230330204<br>一等奖：2注10000000元</p><p>第2021021期2021.02.27<br>16182933350912<br>一等奖：3注10000000元</p><p>第2021020期2021.02.24<br>07212230330406<br>一等奖：4注10000000元</p><p>第2021019期2021.02.22<br>01121328290304<br>一等奖：1注10000000元</p><p>第2021018期2021.02.20<br>02202326340510<br>一等奖：6注10000000元</p><p>第2021017期2021.02.08<br>17212629320207<br>一等奖：5注10000000元</p><p>第2021016期2021.02.06<br>08091019340102<br>一等奖：6注10000000元</p><p>第2021015期2021.02.03<br>04081719250107<br>一等奖：10注6963705元</p><p>第2021014期2021.02.01<br>07132027290409<br>一等奖：3注10000000元</p><p>第2021013期2021.01.30<br>21272830340811<br>一等奖：4注10000000元</p><p>第2021012期2021.01.27<br>06122023330109<br>一等奖：1注10000000元</p><p>第2021011期2021.01.25<br>06091114210103<br>一等奖：2注10000000元</p><p>第2021010期2021.01.23<br>01051622340811<br>一等奖：4注10000000元</p><p>第2021009期2021.01.20<br>01032029320512<br>一等奖：1注10000000元</p><p>第2021008期2021.01.18<br>05192027330308<br>一等奖：10注8342623元</p><p>第2021007期2021.01.16<br>05233034350810<br>一等奖：3注10000000元</p><p>第2021006期2021.01.13<br>04222528350405<br>一等奖：1注10000000元</p><p>第2021005期2021.01.11<br>03071012350305<br>一等奖：1注10000000元</p><p>第2021004期2021.01.09<br>05101723280208<br>一等奖：14注6781783元</p><p>第2021003期2021.01.06<br>07212831350410<br>一等奖：6注10000000元</p><p>第2021002期2021.01.04<br>02162631340911<br>一等奖：3注10000000元</p><p>第2021001期2021.01.02<br>02061219330809<br>一等奖：2注10000000元</p><h1 id="prizeNumbers"><a href="#prizeNumbers" class="headerlink" title="prizeNumbers"></a>prizeNumbers</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">02061219330809</span><br><span class="hljs-number">02162631340911</span><br><span class="hljs-number">07212831350410</span><br><span class="hljs-number">05101723280208</span><br><span class="hljs-number">03071012350305</span><br><span class="hljs-number">04222528350405</span><br><span class="hljs-number">05233034350810</span><br><span class="hljs-number">05192027330308</span><br><span class="hljs-number">01032029320512</span><br><span class="hljs-number">01051622340811</span><br><span class="hljs-number">06091114210103</span><br><span class="hljs-number">06122023330109</span><br><span class="hljs-number">21272830340811</span><br><span class="hljs-number">07132027290409</span><br><span class="hljs-number">04081719250107</span><br><span class="hljs-number">08091019340102</span><br><span class="hljs-number">17212629320207</span><br><span class="hljs-number">02202326340510</span><br><span class="hljs-number">01121328290304</span><br><span class="hljs-number">07212230330406</span><br><span class="hljs-number">16182933350912</span><br><span class="hljs-number">02122230330204</span><br><span class="hljs-number">07091316320209</span><br><span class="hljs-number">11142124310210</span><br><span class="hljs-number">17182330311012</span><br><span class="hljs-number">07112024270111</span><br><span class="hljs-number">09212226300412</span><br><span class="hljs-number">02030517290410</span><br><span class="hljs-number">02061032330407</span><br><span class="hljs-number">18232526320207</span><br><span class="hljs-number">01041920340305</span><br><span class="hljs-number">01111434350710</span><br><span class="hljs-number">01030530320105</span><br><span class="hljs-number">08101425340708</span><br><span class="hljs-number">05111630320304</span><br><span class="hljs-number">08172528330711</span><br><span class="hljs-number">10212729330412</span><br><span class="hljs-number">09112029320107</span><br><span class="hljs-number">04121421350211</span><br><span class="hljs-number">02030916190307</span><br><span class="hljs-number">02050911320409</span><br><span class="hljs-number">09152023290405</span><br><span class="hljs-number">07121719340110</span><br><span class="hljs-number">06183133351011</span><br><span class="hljs-number">01040611190709</span><br><span class="hljs-number">06081214180608</span><br><span class="hljs-number">01060925330408</span><br><span class="hljs-number">04071721271012</span><br><span class="hljs-number">01102223250212</span><br><span class="hljs-number">09223233350510</span><br><span class="hljs-number">01041416190304</span><br><span class="hljs-number">02111314300912</span><br><span class="hljs-number">03061517350711</span><br><span class="hljs-number">03061720250309</span><br><span class="hljs-number">03061011241011</span><br><span class="hljs-number">03111621260910</span><br><span class="hljs-number">05071920280507</span><br><span class="hljs-number">13151723340111</span><br><span class="hljs-number">04162728350209</span><br><span class="hljs-number">09132531330307</span><br><span class="hljs-number">15192026320407</span><br><span class="hljs-number">04062332340507</span><br><span class="hljs-number">05091429300911</span><br><span class="hljs-number">01171932340610</span><br><span class="hljs-number">23253031350708</span><br><span class="hljs-number">24262934350911</span><br><span class="hljs-number">01042223340809</span><br><span class="hljs-number">02202126300210</span><br><span class="hljs-number">01032432330406</span><br><span class="hljs-number">03202122240612</span><br><span class="hljs-number">08111629350104</span><br><span class="hljs-number">02031522260311</span><br><span class="hljs-number">08121420240610</span><br><span class="hljs-number">11141820250307</span><br><span class="hljs-number">06141517200105</span><br><span class="hljs-number">06132225260204</span><br><span class="hljs-number">02060921250608</span><br><span class="hljs-number">02081719250105</span><br><span class="hljs-number">06141926330811</span><br><span class="hljs-number">15162029300610</span><br><span class="hljs-number">05132429350708</span><br><span class="hljs-number">01142229330310</span><br><span class="hljs-number">07091126350108</span><br><span class="hljs-number">02101430330609</span><br><span class="hljs-number">01121526351011</span><br><span class="hljs-number">02030716170610</span><br><span class="hljs-number">10141525280310</span><br><span class="hljs-number">02143134350107</span><br><span class="hljs-number">01172428351012</span><br><span class="hljs-number">06071926320612</span><br><span class="hljs-number">01041021290305</span><br><span class="hljs-number">12142728340307</span><br><span class="hljs-number">20252728310811</span><br><span class="hljs-number">05062427330512</span><br><span class="hljs-number">10151920301112</span><br><span class="hljs-number">07081020210105</span><br><span class="hljs-number">11263031330310</span><br><span class="hljs-number">02072127330709</span><br><span class="hljs-number">15192728300304</span><br><span class="hljs-number">07112326280207</span><br><span class="hljs-number">07112326280207</span><br><span class="hljs-number">13181927320611</span><br><span class="hljs-number">02081116230207</span><br><span class="hljs-number">04102330310511</span><br><span class="hljs-number">23252630330311</span><br><span class="hljs-number">07101117180409</span><br><span class="hljs-number">02131432340212</span><br><span class="hljs-number">03051320250711</span><br><span class="hljs-number">05192226350206</span><br><span class="hljs-number">03040727310609</span><br><span class="hljs-number">11142931321112</span><br><span class="hljs-number">07081519280809</span><br><span class="hljs-number">18212223351112</span><br><span class="hljs-number">17182527280408</span><br><span class="hljs-number">08091329300111</span><br><span class="hljs-number">08131920290610</span><br><span class="hljs-number">04252829350311</span><br><span class="hljs-number">11182122330506</span><br><span class="hljs-number">14171828340203</span><br><span class="hljs-number">01020916300910</span><br><span class="hljs-number">05102125310511</span><br><span class="hljs-number">02151929300209</span><br><span class="hljs-number">14152627290405</span><br><span class="hljs-number">08232627330809</span><br><span class="hljs-number">10172225350709</span><br><span class="hljs-number">17192127310409</span><br><span class="hljs-number">01111234350912</span><br><span class="hljs-number">01021517260211</span><br><span class="hljs-number">14171823270508</span><br><span class="hljs-number">02161718340410</span><br><span class="hljs-number">02031427280510</span><br><span class="hljs-number">06081634350506</span><br><span class="hljs-number">04212829330311</span><br><span class="hljs-number">08091726280608</span><br><span class="hljs-number">02061419280106</span><br><span class="hljs-number">04071729310506</span><br><span class="hljs-number">08121927330205</span><br><span class="hljs-number">02071314190405</span><br><span class="hljs-number">09111215310511</span><br><span class="hljs-number">05131823340809</span><br><span class="hljs-number">05242633350912</span><br><span class="hljs-number">02081629340512</span><br><span class="hljs-number">11131719250209</span><br><span class="hljs-number">09171929340411</span><br><span class="hljs-number">03202530340209</span><br><span class="hljs-number">03082529300106</span><br><span class="hljs-number">03050818200911</span><br><span class="hljs-number">01020812260107</span><br><span class="hljs-number">01041216290408</span><br><span class="hljs-number">20262830351011</span><br><span class="hljs-number">04101123260710</span><br><span class="hljs-number">08111922290311</span><br><span class="hljs-number">04060709240412</span><br><span class="hljs-number">02182425340812</span><br><span class="hljs-number">07202730330304</span><br><span class="hljs-number">02131719340509</span><br><span class="hljs-number">01050717200512</span><br><span class="hljs-number">05222325350311</span><br><span class="hljs-number">01021318340607</span><br><span class="hljs-number">13141831330710</span><br><span class="hljs-number">04192531350211</span><br><span class="hljs-number">03051724320512</span><br><span class="hljs-number">03051033340710</span><br><span class="hljs-number">04091625320506</span><br><span class="hljs-number">01041018320109</span><br><span class="hljs-number">01020812300512</span><br><span class="hljs-number">01071726320109</span><br><span class="hljs-number">10141823250711</span><br><span class="hljs-number">16212931340609</span><br><span class="hljs-number">01040717210102</span><br><span class="hljs-number">16173031350809</span><br><span class="hljs-number">11151618350609</span><br><span class="hljs-number">01051417280607</span><br><span class="hljs-number">04051820251112</span><br><span class="hljs-number">01021130350112</span><br><span class="hljs-number">04072224290107</span><br><span class="hljs-number">11142223270810</span><br><span class="hljs-number">03061131320512</span><br><span class="hljs-number">04091617350107</span><br><span class="hljs-number">07081014171012</span><br><span class="hljs-number">12141521300109</span><br><span class="hljs-number">07141620280408</span><br><span class="hljs-number">05091831320105</span><br><span class="hljs-number">08151619330304</span><br><span class="hljs-number">02102427280607</span><br><span class="hljs-number">09111323310508</span><br><span class="hljs-number">18192126340607</span><br><span class="hljs-number">01091720280610</span><br><span class="hljs-number">07091112260912</span><br><span class="hljs-number">01081122310511</span><br><span class="hljs-number">10192529330812</span><br><span class="hljs-number">05152526330611</span><br><span class="hljs-number">08101129320206</span><br><span class="hljs-number">02161724300912</span><br><span class="hljs-number">01021617200307</span><br><span class="hljs-number">02030712200105</span><br><span class="hljs-number">06071222270305</span><br><span class="hljs-number">07101112330311</span><br><span class="hljs-number">16222829320809</span><br><span class="hljs-number">06102028350110</span><br><span class="hljs-number">02102124300810</span><br><span class="hljs-number">01161719330506</span><br><span class="hljs-number">01131829350409</span><br><span class="hljs-number">09171920250109</span><br><span class="hljs-number">05162123340710</span><br><span class="hljs-number">01021215230406</span><br><span class="hljs-number">02111517310709</span><br><span class="hljs-number">06121821350710</span><br><span class="hljs-number">03042426350708</span><br><span class="hljs-number">04151832340409</span><br><span class="hljs-number">02061011200309</span><br><span class="hljs-number">06091922300106</span><br><span class="hljs-number">05091112310711</span><br><span class="hljs-number">02032226310610</span><br><span class="hljs-number">02192225350507</span><br><span class="hljs-number">05101322280104</span><br><span class="hljs-number">02242526340312</span><br><span class="hljs-number">04141532331011</span><br><span class="hljs-number">03061015230308</span><br><span class="hljs-number">02032328350209</span><br><span class="hljs-number">01071723350711</span><br><span class="hljs-number">09151925290809</span><br><span class="hljs-number">01121315300307</span><br><span class="hljs-number">11182125320204</span><br><span class="hljs-number">02062125280206</span><br><span class="hljs-number">04121317180709</span><br><span class="hljs-number">05173034350209</span><br><span class="hljs-number">05101116190110</span><br><span class="hljs-number">02031820270102</span><br><span class="hljs-number">07101926320812</span><br><span class="hljs-number">10173031340306</span><br><span class="hljs-number">05101931320910</span><br><span class="hljs-number">04262730330209</span><br><span class="hljs-number">02091726320406</span><br><span class="hljs-number">03111925270412</span><br><span class="hljs-number">11163133350608</span><br><span class="hljs-number">04102128310811</span><br><span class="hljs-number">04061024280612</span><br><span class="hljs-number">01081020350611</span><br><span class="hljs-number">01202131330311</span><br><span class="hljs-number">01202425310912</span><br><span class="hljs-number">02112022340412</span><br><span class="hljs-number">01041223290512</span><br><span class="hljs-number">07111421290710</span><br><span class="hljs-number">03040712190205</span><br><span class="hljs-number">05082225350207</span><br><span class="hljs-number">16192427330106</span><br><span class="hljs-number">05132228290511</span><br><span class="hljs-number">01030611130311</span><br><span class="hljs-number">07182527330405</span><br><span class="hljs-number">10192023310307</span><br><span class="hljs-number">02040607080306</span><br><span class="hljs-number">01051420300204</span><br><span class="hljs-number">08121621320112</span><br><span class="hljs-number">03051319250205</span><br><span class="hljs-number">01080921220104</span><br><span class="hljs-number">16172128320407</span><br><span class="hljs-number">07091928290810</span><br><span class="hljs-number">04071326280711</span><br><span class="hljs-number">05092429350512</span><br><span class="hljs-number">02131618230306</span><br><span class="hljs-number">06121619310610</span><br><span class="hljs-number">04111820260612</span><br><span class="hljs-number">13152231330512</span><br><span class="hljs-number">11212427280510</span><br><span class="hljs-number">17192023270308</span><br><span class="hljs-number">01072022310712</span><br><span class="hljs-number">09121521320207</span><br><span class="hljs-number">09121521320207</span><br><span class="hljs-number">02051517260208</span><br><span class="hljs-number">01091625290409</span><br><span class="hljs-number">11222630330305</span><br><span class="hljs-number">04151620210405</span><br><span class="hljs-number">04151719250612</span><br><span class="hljs-number">02202829300710</span><br><span class="hljs-number">02041125300612</span><br><span class="hljs-number">03071416190111</span><br><span class="hljs-number">04050822350103</span><br><span class="hljs-number">02030809200410</span><br><span class="hljs-number">10192123350410</span><br><span class="hljs-number">10172334350104</span><br><span class="hljs-number">05071518230510</span><br><span class="hljs-number">02060810170506</span><br><span class="hljs-number">02273034350912</span><br><span class="hljs-number">01021430310609</span><br><span class="hljs-number">03162327320306</span><br><span class="hljs-number">09102731320103</span><br><span class="hljs-number">01111517330311</span><br><span class="hljs-number">05060815200708</span><br><span class="hljs-number">05131627330712</span><br><span class="hljs-number">01131422350205</span><br><span class="hljs-number">05152526290412</span><br><span class="hljs-number">05061424250204</span><br><span class="hljs-number">07121429350111</span><br><span class="hljs-number">10131427330708</span><br><span class="hljs-number">03040815210407</span><br><span class="hljs-number">10202930350609</span><br><span class="hljs-number">01212328350709</span><br><span class="hljs-number">04122228300911</span><br><span class="hljs-number">04050626270712</span><br><span class="hljs-number">15192226280207</span><br><span class="hljs-number">06072629300312</span><br><span class="hljs-number">18192427341112</span><br><span class="hljs-number">11142126270207</span><br><span class="hljs-number">05061421220209</span><br><span class="hljs-number">04131520220408</span><br><span class="hljs-number">01031020290611</span><br><span class="hljs-number">02041227350607</span><br><span class="hljs-number">02032430320106</span><br><span class="hljs-number">04091722250105</span><br><span class="hljs-number">01051115330110</span><br><span class="hljs-number">05061323260106</span><br><span class="hljs-number">02070817250103</span><br><span class="hljs-number">07161718280203</span><br><span class="hljs-number">01020923250206</span><br><span class="hljs-number">03081822240109</span><br><span class="hljs-number">08162425340812</span><br><span class="hljs-number">02041231320711</span><br><span class="hljs-number">02050922271011</span><br><span class="hljs-number">04081726300311</span><br><span class="hljs-number">05080911150608</span><br><span class="hljs-number">05062325280609</span><br><span class="hljs-number">02091823270305</span><br><span class="hljs-number">07111526280810</span><br><span class="hljs-number">09212325330310</span><br><span class="hljs-number">11152427300110</span><br><span class="hljs-number">03092730311112</span><br><span class="hljs-number">02132427300106</span><br><span class="hljs-number">02132427300106</span><br><span class="hljs-number">09101215230306</span><br><span class="hljs-number">01032930340412</span><br><span class="hljs-number">07252734350911</span><br><span class="hljs-number">06111220350512</span><br><span class="hljs-number">05070816250311</span><br><span class="hljs-number">05061828300207</span><br><span class="hljs-number">04061011250709</span><br><span class="hljs-number">07091015240412</span><br><span class="hljs-number">07142325290211</span><br><span class="hljs-number">01132226310210</span><br><span class="hljs-number">06081620240708</span><br><span class="hljs-number">04101827321012</span><br><span class="hljs-number">02242630340607</span><br><span class="hljs-number">04051822300512</span><br><span class="hljs-number">05081326350509</span><br><span class="hljs-number">02162123270108</span><br><span class="hljs-number">02041720270108</span><br><span class="hljs-number">02060708150710</span><br><span class="hljs-number">07101328310405</span><br><span class="hljs-number">13212528320210</span><br><span class="hljs-number">08091425290406</span><br><span class="hljs-number">03111929330312</span><br><span class="hljs-number">02081130330508</span><br><span class="hljs-number">01031114200211</span><br><span class="hljs-number">19253031340709</span><br><span class="hljs-number">06081213150106</span><br><span class="hljs-number">13222433340102</span><br><span class="hljs-number">01050619240511</span><br><span class="hljs-number">19222932350508</span><br><span class="hljs-number">09132325280407</span><br><span class="hljs-number">02071924300912</span><br><span class="hljs-number">07112130320507</span><br><span class="hljs-number">06082224300108</span><br><span class="hljs-number">04182931340609</span><br><span class="hljs-number">02060931320307</span><br><span class="hljs-number">08141621250312</span><br><span class="hljs-number">06111330320103</span><br><span class="hljs-number">02283033350210</span><br><span class="hljs-number">21222427310708</span><br><span class="hljs-number">08202125320507</span><br><span class="hljs-number">10262932330311</span><br><span class="hljs-number">02111232341012</span><br><span class="hljs-number">05060911140204</span><br><span class="hljs-number">15252830350810</span><br><span class="hljs-number">03132229340209</span><br><span class="hljs-number">07172023320511</span><br><span class="hljs-number">08091126340207</span><br><span class="hljs-number">05161826350306</span><br><span class="hljs-number">02030626270708</span><br><span class="hljs-number">06082629340508</span><br><span class="hljs-number">01020916300111</span><br><span class="hljs-number">05062328350710</span><br><span class="hljs-number">02080915200309</span><br><span class="hljs-number">13152125320910</span><br><span class="hljs-number">03050824320708</span><br><span class="hljs-number">11122631350507</span><br><span class="hljs-number">03111520350711</span><br><span class="hljs-number">03041619240405</span><br><span class="hljs-number">08141622240912</span><br><span class="hljs-number">03122026350212</span><br><span class="hljs-number">08111219351112</span><br><span class="hljs-number">06161828290711</span><br><span class="hljs-number">03162126320312</span><br><span class="hljs-number">11141719210105</span><br><span class="hljs-number">12192228320812</span><br><span class="hljs-number">08192832340307</span><br><span class="hljs-number">06071421310310</span><br><span class="hljs-number">06071820220309</span><br><span class="hljs-number">02071530340509</span><br><span class="hljs-number">09111322230706</span><br><span class="hljs-number">04061319350911</span><br><span class="hljs-number">06141617280710</span><br><span class="hljs-number">02040716330711</span><br><span class="hljs-number">08111931320811</span><br><span class="hljs-number">06151632330810</span><br><span class="hljs-number">07081920250211</span><br><span class="hljs-number">16242628310106</span><br><span class="hljs-number">01121516180310</span><br><span class="hljs-number">05061730320208</span><br><span class="hljs-number">01122122310209</span><br><span class="hljs-number">04091113170708</span><br><span class="hljs-number">03121528350212</span><br><span class="hljs-number">01111722270209</span><br><span class="hljs-number">06083032330310</span><br><span class="hljs-number">02252730350110</span><br><span class="hljs-number">07102331340210</span><br><span class="hljs-number">01030918290409</span><br><span class="hljs-number">05071518200304</span><br><span class="hljs-number">06071325330508</span><br><span class="hljs-number">04081014210410</span><br><span class="hljs-number">02081631340110</span><br><span class="hljs-number">05111523330109</span><br><span class="hljs-number">01070925291012</span><br><span class="hljs-number">02141628300207</span><br><span class="hljs-number">06182327320610</span><br><span class="hljs-number">07252629320208</span><br><span class="hljs-number">07121726340206</span><br><span class="hljs-number">04070818190206</span><br><span class="hljs-number">01050712130206</span><br><span class="hljs-number">09232527330612</span><br><span class="hljs-number">13202729300107</span><br><span class="hljs-number">03072122240607</span><br><span class="hljs-number">03041215230206</span><br><span class="hljs-number">10182528330511</span><br><span class="hljs-number">10152227330112</span><br><span class="hljs-number">05182228290912</span><br><span class="hljs-number">13232730340609</span><br><span class="hljs-number">04192130310612</span><br><span class="hljs-number">07122028310910</span><br><span class="hljs-number">15162531340509</span><br><span class="hljs-number">01020919300102</span><br><span class="hljs-number">04222530310405</span><br><span class="hljs-number">04131517321012</span><br><span class="hljs-number">09202329330210</span><br><span class="hljs-number">05141825350110</span><br><span class="hljs-number">06101232330607</span><br><span class="hljs-number">14181926310207</span><br><span class="hljs-number">06071933340308</span><br><span class="hljs-number">11122021270212</span><br><span class="hljs-number">01161721290106</span><br><span class="hljs-number">05061718331112</span><br><span class="hljs-number">03091726350207</span><br><span class="hljs-number">01060827320304</span><br><span class="hljs-number">07091223290102</span><br><span class="hljs-number">02061819270809</span><br><span class="hljs-number">03050709120508</span><br><span class="hljs-number">08131617330210</span><br><span class="hljs-number">04052834350411</span><br><span class="hljs-number">04061120300305</span><br><span class="hljs-number">15181924260509</span><br><span class="hljs-number">02081015270208</span><br><span class="hljs-number">01032732340107</span><br><span class="hljs-number">21222526340109</span><br><span class="hljs-number">05222528300312</span><br><span class="hljs-number">04051621310911</span><br><span class="hljs-number">08111424310506</span><br><span class="hljs-number">15182527290611</span><br><span class="hljs-number">03072527350104</span><br><span class="hljs-number">04121925270109</span><br><span class="hljs-number">19202629300304</span><br><span class="hljs-number">02040819260206</span><br><span class="hljs-number">01121620280709</span><br><span class="hljs-number">07091131320408</span><br><span class="hljs-number">08101214220509</span><br><span class="hljs-number">03051217260112</span><br><span class="hljs-number">01020818270408</span><br><span class="hljs-number">01182126330212</span><br><span class="hljs-number">08091622230709</span><br><span class="hljs-number">13182026280408</span><br><span class="hljs-number">04192428340405</span><br><span class="hljs-number">08091119300612</span><br><span class="hljs-number">09121530340506</span><br><span class="hljs-number">05152633350109</span><br><span class="hljs-number">04081011150709</span><br><span class="hljs-number">23262729330508</span><br><span class="hljs-number">05131729330512</span><br><span class="hljs-number">02051132340610</span><br><span class="hljs-number">17192029350711</span><br><span class="hljs-number">15222425290105</span><br><span class="hljs-number">03101120220610</span><br><span class="hljs-number">05121629300306</span><br><span class="hljs-number">06081416280305</span><br><span class="hljs-number">01081523350512</span><br><span class="hljs-number">03040814270507</span><br><span class="hljs-number">03131517220610</span><br><span class="hljs-number">09101431320308</span><br><span class="hljs-number">06121729300711</span><br><span class="hljs-number">11192126351011</span><br><span class="hljs-number">12182126280809</span><br><span class="hljs-number">04060910220108</span><br><span class="hljs-number">03041418260709</span><br><span class="hljs-number">05212223290102</span><br><span class="hljs-number">02031322340408</span><br><span class="hljs-number">01071920350309</span><br><span class="hljs-number">05060911220103</span><br><span class="hljs-number">07172230340507</span><br><span class="hljs-number">16171827350612</span><br><span class="hljs-number">09253033340309</span><br><span class="hljs-number">06101320320102</span><br><span class="hljs-number">17182025310312</span><br><span class="hljs-number">03212528300112</span><br><span class="hljs-number">01121931330508</span><br><span class="hljs-number">05141516330305</span><br><span class="hljs-number">07121633340103</span><br><span class="hljs-number">05122132330809</span><br><span class="hljs-number">05101826270306</span><br><span class="hljs-number">13192024250607</span><br><span class="hljs-number">03111420220609</span><br><span class="hljs-number">15203132330510</span><br><span class="hljs-number">07091620240307</span><br><span class="hljs-number">04202132340209</span><br><span class="hljs-number">06101534350210</span><br><span class="hljs-number">04172123320106</span><br><span class="hljs-number">07091221230509</span><br><span class="hljs-number">02101121270911</span><br><span class="hljs-number">08172628320110</span><br><span class="hljs-number">01062227350712</span><br><span class="hljs-number">01032526290612</span><br><span class="hljs-number">05071014150407</span><br><br></code></pre></td></tr></table></figure><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/Users/boguotong/Downloads/cai.txt&quot;</span>;<br>     List&lt;String&gt; firstPrizeNumbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-comment">//把一等奖号码放入集合</span><br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath))) &#123;<br>         String line;<br>         <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            firstPrizeNumbers.add(line.trim()); <span class="hljs-comment">// 去除行首尾空白后加入集合</span><br>         &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>     &#125;<br>     <span class="hljs-comment">//按时间正序</span><br>     firstPrizeNumbers = CollUtil.reverse(firstPrizeNumbers);<br>     <span class="hljs-comment">// 定义2个集合,分别存储前区和后区号码</span><br>     List&lt;String&gt; before  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     List&lt;String&gt; after  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-keyword">for</span> (String prizeNum : firstPrizeNumbers) &#123;<br>         handleNum(prizeNum,before,after);<br>     &#125;<br>     <span class="hljs-comment">//定义前区号码map,统计出现次数</span><br>     Map&lt;String, Integer&gt; beforemap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>     <span class="hljs-keyword">for</span> (String str : before) &#123;<br>         beforemap.put(str, beforemap.getOrDefault(str, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>     &#125;<br>     <span class="hljs-comment">//打印前区号码出现次数</span><br>     <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : beforemap.entrySet()) &#123;<br>         System.out.println(entry.getKey() + <span class="hljs-string">&quot; : &quot;</span> + entry.getValue());<br>     &#125;<br>     System.err.println(<span class="hljs-string">&quot;---------------------------------------------&quot;</span>);<br>     <span class="hljs-comment">//定义后区号码map,统计出现次数</span><br>     Map&lt;String, Integer&gt; aftermap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>     <span class="hljs-keyword">for</span> (String str : after) &#123;<br>         aftermap.put(str, aftermap.getOrDefault(str, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>     &#125;<br>     <span class="hljs-comment">//打印后区号码出现次数</span><br>     <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : aftermap.entrySet()) &#123;<br>         System.out.println(entry.getKey() + <span class="hljs-string">&quot; : &quot;</span> + entry.getValue());<br>     &#125;<br><br><br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 处理每期的中奖号码,分别放入前区和后区集合</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> prizeNum</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> listBe</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> listAf</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNum</span><span class="hljs-params">(String prizeNum,List&lt;String&gt; listBe,List&lt;String&gt; listAf)</span>&#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">be</span> <span class="hljs-operator">=</span> prizeNum.substring(<span class="hljs-number">0</span>, prizeNum.length() - <span class="hljs-number">4</span>);<br>     <span class="hljs-type">String</span> <span class="hljs-variable">af</span> <span class="hljs-operator">=</span> prizeNum.substring( prizeNum.length() - <span class="hljs-number">4</span>);<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; be.length(); i += <span class="hljs-number">2</span>) &#123;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> be.substring(i, Math.min(i + <span class="hljs-number">2</span>, be.length()));<br>         listBe.add(substring);<br>     &#125;<br><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; af.length(); i += <span class="hljs-number">2</span>) &#123;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> af.substring(i, Math.min(i + <span class="hljs-number">2</span>, af.length()));<br>         listAf.add(substring);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大乐透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot同时可以处理多少请求？</title>
      <link href="/2024/05/30/SpringBoot%E5%90%8C%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%A4%84%E7%90%86%E5%A4%9A%E5%B0%91%E8%AF%B7%E6%B1%82/"/>
      <url>/2024/05/30/SpringBoot%E5%90%8C%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%A4%84%E7%90%86%E5%A4%9A%E5%B0%91%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>准确的来说，Spring Boot 同时可以处理多少个请求，并不取决于 Spring Boot 框架本身，而是取决于其内置的 Web 容器（因为 Web 容器的行为，决定了 Spring Boot 的行为，所以咱们姑且认为两个问题的回答是一样的）。</p><h1 id="1-Web三大容器"><a href="#1-Web三大容器" class="headerlink" title="1.Web三大容器"></a><strong>1.Web三大容器</strong></h1><p>Web 容器目前也是三分天下，市面上最常见的三种 Web 容器分别是：Tomcat、Undertow 和 Jetty，其中 <strong>Tomcat 为 Spring Boot 框架默认的 Web 容器</strong>。</p><p>它们三者的区别如下：</p><ul><li>Tomcat 是 Apache 软件基金会下的开源项目，是最广泛使用的 Servlet 容器之一，完全实现了 Java Servlet 和 JavaServer Pages（JSP）规范。它不仅是一个 Servlet 容器，也是一个轻量级的应用服务器，尽管相比其他轻量级服务器，Tomcat 被认为是稍微重一些的。Tomcat 支持众多的企业级特性，如 SSL、连接池等，适合运行大型的、复杂的企业级应用。它的稳定性和成熟度经过了多年的企业级应用验证，因此在很多企业中作为首选的 Web 容器。</li><li>Undertow 是 Red Hat（红帽公司）开发的一个灵活的、高性能的 Web 服务器和反向代理服务器，它是 WildFly 应用服务器的默认 Web 容器。Undertow 设计上注重低内存占用和高并发处理能力，尤其擅长处理大量的短连接场景，比如 RESTful API 服务。Undertow 支持 Servlet 3.1、WebSocket以及非阻塞 IO(NIO)，并且是支持 HTTP&#x2F;2 协议的现代服务器之一。它的设计理念在于提供一个模块化、可嵌入式的解决方案，易于集成到现有的系统中，同时也适合微服务架构。</li><li>Jetty 是一个开源的、轻量级的 Web 服务器和 Servlet 容器，由 Eclipse 基金会维护。它以其可嵌入式、高度可配置性著称，常用于需要快速启动和轻量级部署的场景，比如开发阶段、测试环境或轻量级应用。Jetty 也支持 Servlet 规范和 WebSocket，且同样基于 NIO，使得它在处理大量并发连接时表现出色。Jetty 设计上强调灵活性和可扩展性，易于通过 API 定制以满足特定需求，因此在云环境、持续集成、DevOps 等领域很受欢迎。</li></ul><blockquote><p>总的来说，Tomcat 因其成熟稳定和企业级特性适用于大型应用；Undertow 以高性能和低内存占用见长，特别适合处理高并发短连接场景；而 Jetty 则以轻量、灵活、易于嵌入为特点，适合快速开发和轻量级部署。</p></blockquote><h1 id="2-最大连接数和最大等待数"><a href="#2-最大连接数和最大等待数" class="headerlink" title="2.最大连接数和最大等待数"></a><strong>2.最大连接数和最大等待数</strong></h1><p>以 Spring Boot 框架默认的 Web 容器 Tomcat 为例，它能够同时处理多少个请求，其实是在 Spring Boot 框架中的 <code>spring-configuration-metadata.json</code> 文件中配置着，如下图所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405301807136.webp" alt="图片"></p><p>打开此文件，搜索“<strong>server.tomcat.max-connections</strong>”（Tomcat 最大连接数）会得到以下结果：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405301807238.webp" alt="图片"></p><p>也就是说，<strong>默认情况下 Tomcat 允许的最大连接数是 8192（&#x3D;8*1024)个。</strong></p><p>那么，此时有人可能会认为，<strong>默认情况下 Spring Boot 同时能处理的请求数应该是 8192，如果你也是这样认为，那你就错了</strong>。为什么呢？</p><p>因为，虽然 Tomcat 可以允许最大的连接数是 8192，但是 Tomcat 还有一个最大等待数，也就是说，如果达到了 8192 之后，还有一个等待队列可以存放请求的连接，所以，<strong>Spring Boot 可以同时处理多少个连接，等于 Tomcat 的最大连接数加 Tomcat 的最大等待数</strong>。</p><p>我们继续在 spring-configuration-metadata.json 文件中，搜索“<strong>server.tomcat.accept-count”</strong>（Tomcat 最大等待数），搜索结果如下图所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405301807353.webp" alt="图片"></p><p>也就是说，默认情况下，Tomcat 最大等待数为 100 个。</p><h1 id="3-同时处理请求数"><a href="#3-同时处理请求数" class="headerlink" title="3.同时处理请求数"></a><strong>3.同时处理请求数</strong></h1><p>所以得出结论：<strong>默认情况下 Spring Boot 能够同时处理的请求数&#x3D;最大连接数（8192）+最大等待数（100），结果为 8292 个。</strong></p><p>当然，这两个值是可以在 Spring Boot 配置文件中修改的，如下配置所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">2000</span> <span class="hljs-comment"># 最大连接数</span><br>    <span class="hljs-attr">accept-count:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大等待数</span><br></code></pre></td></tr></table></figure><h1 id="4-扩展知识：设置Web容器"><a href="#4-扩展知识：设置Web容器" class="headerlink" title="4.扩展知识：设置Web容器"></a><strong>4.扩展知识：设置Web容器</strong></h1><p>Spring Boot 框架如何设置 Web 容器为 Jetty 或 Undertow 呢？接下来，我们来看一下。</p><h2 id="4-1-设置容器为Jetty"><a href="#4-1-设置容器为Jetty" class="headerlink" title="4.1 设置容器为Jetty"></a><strong>4.1 设置容器为Jetty</strong></h2><p><strong>要设置 Spring Boot 框架的 Web 容器为 Jetty，只需要修改 pom.xml 文件即可</strong>，如下配置所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring Boot Starter Web 但排除Tomcat --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 排除Tomcat --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加Jetty起步依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也就是说，只需要将默认的 tomcat 排除掉，添加 jetty 的依赖即可。</p><h2 id="4-2-设置容器为Undertow"><a href="#4-2-设置容器为Undertow" class="headerlink" title="4.2 设置容器为Undertow"></a><strong>4.2 设置容器为Undertow</strong></h2><p>要设置 Spring Boot 框架的 Web 容器为 Undertow 的思路和上面 Jetty 的实现思路相同，只需要修改 pom.xml 文件即可，如下配置所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring Boot Starter Web 但排除Tomcat --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加Undertow起步依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&mid=2247507166&idx=1&sn=900ab248dcecbd1314f6683c00826eb8&chksm=fa6f20e84016d3fe241ff6bb229c6a654666cd77c1e57422738b4e5174e4073dce778e64a4dd&scene=132&exptype=timeline_recommend_article_extendread_extendread_interest&show_related_article=1&subscene=132&scene=132#wechat_redirect">文章来源</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> tomcat </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot实现数据脱敏和入库加密</title>
      <link href="/2024/05/28/springboot%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F%E5%92%8C%E5%85%A5%E5%BA%93%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/05/28/springboot%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F%E5%92%8C%E5%85%A5%E5%BA%93%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-脱敏"><a href="#1-脱敏" class="headerlink" title="1.脱敏"></a>1.脱敏</h1><p><a href="https://blog.csdn.net/qq_62262918/article/details/136997946"><strong>文章来源</strong></a></p><h2 id="0-实现思路"><a href="#0-实现思路" class="headerlink" title="0.实现思路"></a>0.<strong>实现思路</strong></h2><ol><li>自定义一个脱敏注解用于标记需要脱敏的字段，并且在注解中指定脱敏策略属性。</li><li>自定义脱敏策略枚举类，用于维护手机号、邮箱、身份证等信息的脱敏处理方式。</li><li>自定义脱敏 JSON 序列化器，在该序列化器中找到带有该注解的字段，根据注解中指定的脱敏策略，在序列化过程中将数据进行脱敏处理并输出到 JSON 中。</li></ol><h2 id="1-1-自定义脱敏注解"><a href="#1-1-自定义脱敏注解" class="headerlink" title="1.1 自定义脱敏注解"></a>1.1 自定义脱敏注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JacksonAnnotationsInside;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;<br><span class="hljs-keyword">import</span> com.mijiu.commom.custom.serializable.DesensitizationJsonSerializable;<br><span class="hljs-keyword">import</span> com.mijiu.commom.enumerate.DesensitizationStrategyEnum;<br> <br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gun</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@JacksonAnnotationsInside</span><br><span class="hljs-meta">@JsonSerialize(using = DesensitizationJsonSerializable.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Desensitization &#123;<br>    DesensitizationStrategyEnum <span class="hljs-title function_">desensitizationStrategy</span><span class="hljs-params">()</span>;<span class="hljs-comment">//这是自定义的脱敏策略枚举类型，用于指定脱敏策略，获取对应脱敏处理方法</span><br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-编写脱敏策略枚举类"><a href="#1-2-编写脱敏策略枚举类" class="headerlink" title="1.2 编写脱敏策略枚举类"></a>1.2 编写脱敏策略枚举类</h2><blockquote><p><strong>脱敏的本质其实就是个字符串的替换，我们在脱敏策略枚举类中通过定义函数接口，维护多种类型脱敏策略对应的字符串替换方法。这样做可以保证可维护性可扩展性。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br> <br><span class="hljs-keyword">import</span> java.util.function.Function;<br> <br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 脱敏策略枚举类，维护对不同类型信息的脱敏处理方式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gun</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">DesensitizationStrategyEnum</span> &#123;<br> <br>    <span class="hljs-comment">// 手机号脱敏策略，保留前三位和后四位</span><br>    PHONE(s -&gt; s.replaceAll(<span class="hljs-string">&quot;(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)&quot;</span>, <span class="hljs-string">&quot;$1****$2&quot;</span>)),<br> <br>    <span class="hljs-comment">// 邮箱脱敏策略，保留邮箱用户名第一个字符和@符号前后部分</span><br>    EMAIL(s -&gt; s.replaceAll(<span class="hljs-string">&quot;(\\w)[^@]*(@\\w+\\.\\w+)&quot;</span>, <span class="hljs-string">&quot;$1****$2&quot;</span>)),<br>  <br>   <span class="hljs-comment">// ****(邮箱) 脱敏策略，保留最后一个括号前面的内容和最后一个括号中邮箱用户名第一个字符和@符号后部分</span><br>    NAME_EMAIL(s -&gt; &#123;<br>        <span class="hljs-comment">// 找到最后一个左括号和右括号的位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastLeftBracketIndex</span> <span class="hljs-operator">=</span> s.lastIndexOf(<span class="hljs-string">&#x27;(&#x27;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastRightBracketIndex</span> <span class="hljs-operator">=</span> s.lastIndexOf(<span class="hljs-string">&#x27;)&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (lastLeftBracketIndex == -<span class="hljs-number">1</span> || lastRightBracketIndex == -<span class="hljs-number">1</span> || lastLeftBracketIndex &gt; lastRightBracketIndex) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>        <span class="hljs-comment">// 提取括号内的内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> s.substring(lastLeftBracketIndex + <span class="hljs-number">1</span>, lastRightBracketIndex);<br>        <span class="hljs-comment">// 使用正则表达式匹配并脱敏邮箱</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">emailPattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(\\w)[^@]*(@\\w+\\.\\w+)&quot;</span>);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> emailPattern.matcher(email);<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            matcher.appendReplacement(sb, matcher.group(<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;****&quot;</span> + matcher.group(<span class="hljs-number">2</span>));<br>        &#125;<br>        matcher.appendTail(sb);<br>        <span class="hljs-comment">// 用脱敏后的字符串替换原始字符串中的括号内容</span><br>        <span class="hljs-keyword">return</span> s.substring(<span class="hljs-number">0</span>, lastLeftBracketIndex + <span class="hljs-number">1</span>) + sb.toString() + s.substring(lastRightBracketIndex);<br>    &#125;),<br> <br>    <span class="hljs-comment">// 身份证号脱敏策略，保留前四位和后四位</span><br>    ID_CARD(s -&gt; s.replaceAll(<span class="hljs-string">&quot;(\\d&#123;4&#125;)\\d&#123;10&#125;(\\w&#123;4&#125;)&quot;</span>, <span class="hljs-string">&quot;$1*****$2&quot;</span>)),<br> <br>    <span class="hljs-comment">// 地址脱敏策略，保留省市信息，其余部分脱敏为**</span><br>    ADDRESS(s -&gt; s.replaceAll(<span class="hljs-string">&quot;([\\u4e00-\\u9fa5]&#123;2&#125;)[\\u4e00-\\u9fa5]+&quot;</span>, <span class="hljs-string">&quot;$1**&quot;</span>)),<br> <br>    <span class="hljs-comment">// 银行卡号脱敏策略，保留前四位和后三位</span><br>    BANK_CARD(s -&gt; s.replaceAll(<span class="hljs-string">&quot;(\\d&#123;4&#125;)\\d&#123;8,12&#125;(\\d&#123;3&#125;)&quot;</span>, <span class="hljs-string">&quot;$1************$2&quot;</span>)),<br> <br>    <span class="hljs-comment">// 姓名脱敏策略，保留姓氏第一个字符，其余部分脱敏为**</span><br>    NAME(s -&gt; s.charAt(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot;**&quot;</span>),<br> <br>    <span class="hljs-comment">// 密码脱敏策略，统一显示为******</span><br>    PASSWORD(s -&gt; <span class="hljs-string">&quot;******&quot;</span>);<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Function&lt;String, String&gt; desensitization;<br> <br>    DesensitizationStrategyEnum(Function&lt;String, String&gt; desensitization) &#123;<br>        <span class="hljs-built_in">this</span>.desensitization = desensitization;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-编写JSON序列化实现"><a href="#1-3-编写JSON序列化实现" class="headerlink" title="1.3 编写JSON序列化实现"></a>1.3 编写JSON序列化实现</h2><blockquote><ul><li>平时接口返回的数据结构直接都是交给默认的序列化器把对象转成json的。</li><li>实现脱敏的本质就是在这前面添加了一段逻辑，找到带有脱敏注解的属性然后拿到注解指定的脱敏策略实例化这个脱敏策略枚举类，应用对应的脱敏方法处理需要脱敏字段，得到脱敏后的值交给json生成器得到最终脱敏后的json</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.*;<br> <br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ser.ContextualSerializer;<br><span class="hljs-keyword">import</span> com.test.annotation.Desensitization;<br><span class="hljs-keyword">import</span> com.test.enm.DesensitizationStrategyEnum;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Objects;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义的脱敏JSON序列化器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gun</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DesensitizationJsonSerializable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonSerializer</span>&lt;String&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContextualSerializer</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> DesensitizationStrategyEnum desensitizationStrategy; <span class="hljs-comment">// 脱敏策略</span><br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(String s, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 将字符串按照设定的脱敏策略进行脱敏处理后序列化到 JSON 中</span><br>        jsonGenerator.writeString(desensitizationStrategy.getDesensitization().apply(s));<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider serializerProvider, BeanProperty beanProperty) <span class="hljs-keyword">throws</span> JsonMappingException &#123;<br>        <span class="hljs-comment">// 获取属性上的 Desensitization 注解</span><br>        <span class="hljs-type">Desensitization</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> beanProperty.getAnnotation(Desensitization.class);<br> <br>        <span class="hljs-comment">// 判断注解不为空且属性类型为 String</span><br>        <span class="hljs-keyword">if</span> (Objects.nonNull(annotation) &amp;&amp; Objects.equals(String.class, beanProperty.getType().getRawClass())) &#123;<br>            <span class="hljs-built_in">this</span>.desensitizationStrategy = annotation.strategy(); <span class="hljs-comment">// 设置脱敏策略</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br> <br>        <span class="hljs-comment">// 返回默认的序列化器</span><br>        <span class="hljs-keyword">return</span> serializerProvider.findValueSerializer(beanProperty.getType(), beanProperty);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-4-返回类中加脱敏注解"><a href="#1-4-返回类中加脱敏注解" class="headerlink" title="1.4 返回类中加脱敏注解"></a>1.4 返回类中加脱敏注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gun</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonalInfo</span> &#123;<br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.PHONE)</span><br>    <span class="hljs-keyword">private</span> String phone; <span class="hljs-comment">// 手机号</span><br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.EMAIL)</span><br>    <span class="hljs-keyword">private</span> String email; <span class="hljs-comment">// 邮箱</span><br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.ID_CARD)</span><br>    <span class="hljs-keyword">private</span> String idCard; <span class="hljs-comment">// 身份证号</span><br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.ADDRESS)</span><br>    <span class="hljs-keyword">private</span> String address; <span class="hljs-comment">// 地址</span><br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.BANK_CARD)</span><br>    <span class="hljs-keyword">private</span> String bankCard; <span class="hljs-comment">// 银行卡号</span><br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.NAME)</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 姓名</span><br> <br>    <span class="hljs-meta">@Desensitization(desensitizationStrategy = DesensitizationStrategyEnum.PASSWORD)</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码</span><br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-入库加密"><a href="#2-入库加密" class="headerlink" title="2.入库加密"></a>2.入库加密</h1><blockquote><p>在<code>MyBatis-Plus</code>中实现数据入库加密，主要是利用<code>MyBatis</code>的<code>TypeHandler</code>接口来处理字段的加密解密逻辑。</p></blockquote><h2 id="2-1-创建自定义TypeHandler"><a href="#2-1-创建自定义TypeHandler" class="headerlink" title="2.1 创建自定义TypeHandler"></a>2.1 <strong>创建自定义TypeHandler</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.test.common.service.KmsService;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.TypeHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据类型转换处理器</span><br><span class="hljs-comment"> * 在需要转换(加密/解密)的字段注解`<span class="hljs-doctag">@TableField</span>`中添加属性 `typeHandler = EncryptDecryptTypeHandler.class`</span><br><span class="hljs-comment"> * 同时类上注解`<span class="hljs-doctag">@TableName</span>`添加属性`autoResultMap = true`,不然解密时不生效.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncryptDecryptTypeHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeHandler</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> KmsService kmsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 在这里对parameter进行加密，并设置到PreparedStatement中</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptedValue</span> <span class="hljs-operator">=</span> doEncrypt(parameter);<br>        ps.setString(i, encryptedValue);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 从ResultSet中获取加密的值，并解密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptedValue</span> <span class="hljs-operator">=</span> rs.getString(columnName);<br>        <span class="hljs-keyword">return</span> doDecrypt(encryptedValue);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 同上，但使用索引访问列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptedValue</span> <span class="hljs-operator">=</span> rs.getString(columnIndex);<br>        <span class="hljs-keyword">return</span> doDecrypt(encryptedValue);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 处理CallableStatement的情况</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptedValue</span> <span class="hljs-operator">=</span> cs.getString(columnIndex);<br>        <span class="hljs-keyword">return</span> doDecrypt(encryptedValue);<br>    &#125;<br><br>    <span class="hljs-comment">/* 加密逻辑 */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">doEncrypt</span><span class="hljs-params">(String original)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encStr</span> <span class="hljs-operator">=</span> enc(original);<span class="hljs-comment">//自定义加密逻辑</span><br>        <span class="hljs-keyword">return</span> encStr;<br>    &#125;<br><br>    <span class="hljs-comment">/* 解密逻辑 */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">doDecrypt</span><span class="hljs-params">(String encrypted)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">decStr</span> <span class="hljs-operator">=</span> dec(encrypted);<span class="hljs-comment">//自定义解密逻辑</span><br>        <span class="hljs-keyword">return</span> decStr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-配置TypeHandler"><a href="#2-2-配置TypeHandler" class="headerlink" title="2.2 配置TypeHandler"></a>2.2 <strong>配置TypeHandler</strong></h2><ul><li><strong>在需要加密的实体类中<code>@TableName</code>属性添加<code>autoResultMap = true</code>,否则出库查询解密时不生效.</strong></li><li><strong>在具体字段的<code>@TableField</code>中加属性<code>typeHandler = EncryptDecryptTypeHandler.class</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> com.test.annotation.Desensitization;<br><span class="hljs-keyword">import</span> com.test.converter.EncryptDecryptTypeHandler;<br><span class="hljs-keyword">import</span> com.test.enm.DesensitizationStrategyEnum;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gun</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@TableName</span> t_table_test</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;t_table_test&quot;,autoResultMap = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BpmTodo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;名字&quot;)</span><br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Schema(description = &quot;邮箱&quot;)</span><br>  <span class="hljs-comment">//入库加密</span><br>    <span class="hljs-meta">@TableField(value = &quot;email&quot;,typeHandler = EncryptDecryptTypeHandler.class)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="2-3-Q-A"><a href="#2-3-Q-A" class="headerlink" title="2.3 Q&amp;A"></a>2.3 Q&amp;A</h2><p>如果<strong>手写的查询sql</strong>则需要指定 <code>resultMap</code>，并在对应列指定 <code>TypeHandler</code> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;manager-map&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.entity.User&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;com.test.converter.EncryptDecryptTypeHandler&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;manager-map&quot;</span>&gt;</span><br>select * from user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>如果<strong>手写的增改sql</strong>则需要对应列指定 <code>TypeHandler</code> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">insert into user<br>  (name, email)<br>values<br><span class="hljs-comment">&lt;!-- 入库加密 --&gt;</span><br>  (#&#123;name&#125;, #&#123;email,typeHandler=com.test.converter.EncryptDecryptTypeHandler&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">update user set<br>    update_time = now()<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 入库加密 --&gt;</span><br>       ,email = #&#123;managerEmail,typeHandler=com.test.converter.EncryptDecryptTypeHandler&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>where id=#&#123;id&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脱敏 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截器</title>
      <link href="/2024/05/21/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2024/05/21/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.intercepter;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><span class="hljs-keyword">import</span> com.test.sysbasic.service.UserService;<br><span class="hljs-keyword">import</span> com.test.commons.exceptions.DMITGlobalException;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpMethod;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginHandleInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;<br>        <span class="hljs-comment">// 获取语言,默认英语，并设置线程数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lang</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;lang&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(lang)) &#123;<br>            ThreadLocalData.setLanguage(<span class="hljs-string">&quot;en&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ThreadLocalData.setLanguage(lang);<br>        &#125;<br>        <span class="hljs-comment">//放行登陆接口</span><br>        System.err.println(<span class="hljs-string">&quot;request.getRequestURI():&quot;</span>+request.getRequestURI());<br>        <span class="hljs-keyword">if</span> (StrUtil.containsAny(request.getRequestURI(),<span class="hljs-string">&quot;/login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (HttpMethod.OPTIONS.toString().equals(request.getMethod())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-comment">//根据token获取缓存用户信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:login:token:&quot;</span> + loginToken;<br>        <span class="hljs-type">LoginManager</span> <span class="hljs-variable">userVo</span> <span class="hljs-operator">=</span> userService.getLoginUserFromCache(key);<br>        <span class="hljs-keyword">if</span> (userVo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//无用户信息,说明登录超时</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DMITGlobalException</span>(<span class="hljs-string">&quot;LOGIN_TIMEOUT&quot;</span>, ThreadLocalData.getLanguage(), <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        ThreadLocalData.setLoginManager(userVo);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;afterCompletion=&gt;&#123;&#125;&quot;</span>, request.getRequestURI());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.common;<br><br><span class="hljs-keyword">import</span> com.test.rbac.manager.entity.LoginManager;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.test.common.constants.GlobalConstant.BASIC_2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 本地线程数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalData</span> &#123;<br>    ThreadLocalData() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Map&lt;String, Object&gt;&gt; LOCAL_DATA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; data = LOCAL_DATA.get();<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(BASIC_2);<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Map&lt;String, Object&gt; data)</span> &#123;<br>        LOCAL_DATA.set(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置语言</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lan</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLanguage</span><span class="hljs-params">(String lan)</span> &#123;<br>        Map&lt;String, Object&gt; data = getData();<br>        data.put(<span class="hljs-string">&quot;lan&quot;</span>, lan);<br>        setData(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取语言</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getLanguage</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; data = getData();<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;en&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (String) data.get(<span class="hljs-string">&quot;lan&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置登陆用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loginManager</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginManager</span><span class="hljs-params">(LoginManager loginManager)</span> &#123;<br>        Map&lt;String, Object&gt; data = getData();<br>        data.put(<span class="hljs-string">&quot;loginManager&quot;</span>, loginManager);<br>        setData(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取登陆用户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LoginManager <span class="hljs-title function_">getLoginManager</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; data = getData();<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (LoginManager) data.get(<span class="hljs-string">&quot;loginManager&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>        LOCAL_DATA.remove();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.framework.config;<br><br><span class="hljs-keyword">import</span> com.test.framework.intercepter.LoginHandleInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> LoginHandleInterceptor loginHandleInterceptor;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(loginHandleInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<br>                        <span class="hljs-string">&quot;/base/ping&quot;</span>,<br>                        <span class="hljs-string">&quot;/swagger-ui.html/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/webjars/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/swagger-ui/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/v3/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/v2/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/login/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/doc.html&quot;</span>,<br>                        <span class="hljs-string">&quot;/iam/info&quot;</span>,<br>                        <span class="hljs-string">&quot;/iam/token&quot;</span>,<br>                        <span class="hljs-string">&quot;/tenant/list&quot;</span>,<br>                        <span class="hljs-string">&quot;/authSdk/**&quot;</span><br>                );<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addArgumentResolvers</span><span class="hljs-params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;<br><span class="hljs-comment">//        resolvers.add(loginUserResolver);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/2024/05/10/c++/"/>
      <url>/2024/05/10/c++/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a href="https://www.jetbrains.com/clion/download">CLine下载地址</a></p><h1 id="Clion解决中文乱码"><a href="#Clion解决中文乱码" class="headerlink" title="Clion解决中文乱码"></a>Clion解决中文乱码</h1><ol><li>按住键盘：<code>ctrl + shift + alt + /</code>，选择<code>Registry</code></li><li>取消勾选：<code>run.processes.with.pty</code></li></ol><h1 id="代码基础结构"><a href="#代码基础结构" class="headerlink" title="代码基础结构"></a>代码基础结构</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><h2 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//输出单份内容</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-number">10</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//或者  输出单份内容</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br><br><span class="hljs-comment">//输出多份内容</span><br>cout &lt;&lt; <span class="hljs-string">&quot;I am&quot;</span> &lt;&lt; <span class="hljs-number">10</span> &lt;&lt; <span class="hljs-string">&quot;years old and you are 12.&quot;</span> &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p><strong>%d以10进制显示数字</strong></p><p><strong>8进制</strong>，以0开头，有效数字：0、1、2、3、4、5、6、7</p><p><strong>16进制</strong>，以<code>0x</code>开头，有效数字：<code>0~9</code>数字和<code>a、b、c、d、e、f</code>.其中字母部分，大小写均可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;整数：%d\n&quot;</span>, <span class="hljs-number">123</span>);<span class="hljs-comment">//整型使用 %d</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">011</span>);  <span class="hljs-comment">//8进制 结果9</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">0xf</span>);  <span class="hljs-comment">//16进制 结果15</span><br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;实数：%f\n&quot;</span>, <span class="hljs-number">3.1415</span>);<span class="hljs-comment">//实型（小数）使用 %f</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;字符：%c\n&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//字符使用 %c</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;字符串：%s\n&quot;</span>, <span class="hljs-string">&quot;itheima&quot;</span>);<span class="hljs-comment">//字符串使用 %s</span><br></code></pre></td></tr></table></figure><h1 id="cin数据输入"><a href="#cin数据输入" class="headerlink" title="cin数据输入"></a>cin数据输入</h1><p>语法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">数据类型 变量;  <span class="hljs-comment">// 声明变量</span><br>cin &gt;&gt; 变量;  <span class="hljs-comment">// 输入的数据赋值给变量</span><br><br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;please input a number:&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<span class="hljs-comment">//若输入字符串,num值实为0.</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;the number input is:&quot;</span> &lt;&lt; num &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释：以 <code>//</code> 开头，建议相隔一个空格</li><li>多行注释：以 <code>/*</code>开头，<code>*/</code>结尾，中间全部内容作为注释在<code>/* */</code>内部可以换行</li></ul><h1 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h1><p>在C++代码中，会涉及到许多命名的场景，比如<strong>变量</strong>的命名，以及后续学习的<strong>类</strong>、<strong>函数</strong>等命名。这些命名，我们统一称之为：<strong>标识符</strong>，即表示某类实体的符号（名称）。</p><ul><li>不可用关键字</li><li>内容限定:即仅可使用字母、数字、下划线的组合，且数字不可开头</li><li>大小写敏感 如int num 不等同于 int NUM</li></ul><h1 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h1><p>符号常量：使用标识符去定义的常量，称之为符号常量。</p><p>简单来说，符号常量就是：<strong>给常量起一个名字，就是符号常量。</strong></p><h2 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h2><p>#define 标识符（名称） 常量</p><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAT_BMI 28    <span class="hljs-comment">// 肥胖BMI</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> J2C_RATE 4.19 <span class="hljs-comment">// 焦耳转卡路里比率</span></span><br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>定义在代码头部，同时：先定义，后使用</li><li>符号常量名是标识符，符合字母、数字、下划线组合的要求且数字不可开头</li><li>字母建议全部大写</li></ul><h2 id="符号常量的取消定义"><a href="#符号常量的取消定义" class="headerlink" title="符号常量的取消定义"></a>符号常量的取消定义</h2><p><strong>语法</strong>:<code>#undef 符号常量名</code></p><p>常量是不可修改的，符号常量也是，一旦定义完成就无法修改其值。</p><p>如果想要更改符号常量的值，需要将其注销（取消定义）后重新定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> NUM <span class="hljs-comment">// 取消NUM的定义</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 100 <span class="hljs-comment">// 重新定义符号常量NUM</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, NUM);<span class="hljs-comment">//100</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><blockquote><p>就是指书写到代码内的量，称之为字面量（或字面常量）。不同类型的数据有不同类型的书写方法。</p></blockquote><p>常见数据类型的字面量写法:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405131357006.png" alt="image-20240513135751888"></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符是一种符号，用于告诉编译器执行特定的数学或逻辑操作。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111509039.png" alt="image-20240511150910903"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111509684.png" alt="image-20240511150932597"></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><h3 id="用于数字类型"><a href="#用于数字类型" class="headerlink" title="用于数字类型"></a>用于数字类型</h3><p>比较运算符：是一种双目运算符，用于对两个数据进行比较（大、小、相等），得到bool型结果。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111510627.png" alt="image-20240511151028506"></p><p>可以用于比较：整型、实型、字符型，即数字的大小</p><h3 id="用于字符串类型"><a href="#用于字符串类型" class="headerlink" title="用于字符串类型"></a>用于字符串类型</h3><p>在C++中，支持2种风格的字符串，它们各自的比较方式是不同的。</p><h4 id="C语言风格字符串"><a href="#C语言风格字符串" class="headerlink" title="C语言风格字符串"></a><strong>C语言风格字符串</strong></h4><ul><li><code>char s[] = “hello”</code> 以及 <code>char *s = “hello”</code> 以及 <code>“hello”</code>都属于C语言风格字符串</li><li><strong>如果使用运算符比较，是对比内存地址，而非比较内容</strong></li><li>所以需要使用C语言函数strcmp进行比较</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstring&quot;</span></span><br><span class="hljs-comment">//结果分为-1（s1&lt;s2）、0（s1=s2）、1（s1&gt;s2）三种</span><br><span class="hljs-type">int</span> result = <span class="hljs-built_in">strcmp</span>(s1, s2);<br><br></code></pre></td></tr></table></figure><h4 id="C-风格字符串（string类型）"><a href="#C-风格字符串（string类型）" class="headerlink" title="C++风格字符串（string类型）"></a><strong>C++风格字符串</strong>（string类型）</h4><p>进行对比的两个字符串至少有1个是string类型，即可使用运算符比较。</p><p>C++对string类型参与的运算符进行了重载，确保可以进行内容对比</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="普通运算符"><a href="#普通运算符" class="headerlink" title="普通运算符"></a>普通运算符</h3><p>逻辑运算符：是一种单&#x2F;双目运算符，用于对单个或多个表达式进行逻辑判断。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111516737.png" alt="image-20240511151612634"></p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>产出bool结果的表达式 ? 值1 : 值2;</p><h2 id="位运算符等"><a href="#位运算符等" class="headerlink" title="位运算符等"></a>位运算符等</h2><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h2><blockquote><p>在C++中，数字是有无符号和有符号之分的。</p><ul><li>无符号：仅仅允许正数存在（默认都是有符号）</li><li>有符号：可以允许负数存在</li></ul></blockquote><h3 id="如何定义无符号整型"><a href="#如何定义无符号整型" class="headerlink" title="如何定义无符号整型"></a><strong>如何定义无符号整型</strong></h3><ul><li>需要主动使用<code>unsigned</code>，如<code>unsigned int num = 1;</code></li><li><code>u_short</code>、<code>u_int</code>、<code>u_long</code>，是无符号<code>short</code>、<code>int</code>、<code>long</code>的<strong>快捷写法</strong></li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405101542646.png" alt="image-20240510154229476"></p><p><code>[]</code> 表示可选，可写可不写。如：signed int 和 int 相同</p><h3 id="常量的类型确定："><a href="#常量的类型确定：" class="headerlink" title="常量的类型确定："></a>常量的类型确定：</h3><ul><li><p>遵循最小原则</p><blockquote><p>整数默认为int，如范围不足，会自动扩容，顺序为：int -&gt; uint -&gt; long -&gt; ulong -&gt; long long -&gt; u long long</p><p>浮点数默认为double，范围不足会自动扩容到long double</p></blockquote></li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405101546677.png" alt="image-20240510154616604"></p><ul><li>根据后缀确定</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405101547325.png" alt="image-20240510154744245"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">10L</span>;        <span class="hljs-comment">// 指定为long类型s</span><br><span class="hljs-number">123UL</span>;    <span class="hljs-comment">// 指定为unsigned long类型</span><br><br></code></pre></td></tr></table></figure><h2 id="实型-小数"><a href="#实型-小数" class="headerlink" title="实型(小数)"></a>实型(小数)</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405101550798.png" alt="image-20240510155005737"></p><p><strong>注意：实型数据没有<code>signed</code>和<code>unsigned</code>   默认全部有符号</strong></p><p><code>double</code>和<code>long double</code>的有效位数仅做参考，<code>ANSIC</code>标准仅要求它们最少实现8字节具体有效范围取决于所用编译器对标准的实现</p><p><strong>有效位:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> num = <span class="hljs-number">123456789.87654321</span>;<br>    cout.<span class="hljs-built_in">width</span>(<span class="hljs-number">20</span>);  <span class="hljs-comment">// 设置显示宽度</span><br>    cout &lt;&lt; fixed;   <span class="hljs-comment">// 设置小数显示</span><br><br>    cout &lt;&lt; num &lt;&lt; endl;<span class="hljs-comment">//    123456789.876543     只显示出了16位,后面的丢失精度.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>char类型用来表示字符，同时支持有符号和无符号.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405101558306.png" alt="image-20240510155841243"></p><ol><li>char类型本质上是数字,即在内存中存储的是实际上是数字，通过ASCII表进行的映射。</li><li>char可以存储的范围是超出ASCII的，但是基于ASCII映射，可以认为，char应用内容就是ASCII表</li></ol><p>通过ASCII表作为对照，字符 -&gt; 数字存入，数字 -&gt; 字符使用:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405101559894.png" alt="ASCII码"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> a = <span class="hljs-number">97</span>;<br>    <span class="hljs-type">int</span> b = a + <span class="hljs-number">1</span>;<span class="hljs-comment">//char实际是数字,可参与运算.</span><br><br>    cout &lt;&lt; a &lt;&lt; endl;<span class="hljs-comment">//打印映射的ASCII码  a</span><br>    cout &lt;&lt; b &lt;&lt; endl;<span class="hljs-comment">//98</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在C++中有两种风格的字符串使用形式：</p><ul><li>C语言风格字符串（了解）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> a[] = <span class="hljs-string">&quot;aaa&quot;</span>;<span class="hljs-comment">// 字符数组模式，不可更改变量值</span><br>a = <span class="hljs-string">&quot;222&quot;</span>;<span class="hljs-comment">//报错</span><br><br><span class="hljs-type">char</span> *b = <span class="hljs-string">&quot;bbb&quot;</span>;<span class="hljs-comment">// 指针形式 可更改变量值</span><br><br></code></pre></td></tr></table></figure><ul><li>C++风格字符串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">string c = <span class="hljs-string">&quot;c++&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔类型的字面量仅仅有两个：</p><ul><li>true  表示真 （本质上是数字1）</li><li>false 表示假 （本质上是数字0）</li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举：本质上是一个被命名的整型常数的集合</p><p>在C\C++语言中它是一种基本数据类型。</p><p>其主要作用是提高代码的可读性、可维护性和键入性。</p><p>因为枚举可以将一些数字或字符串符号化，以此增强程序的可读性和可维护性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;    <br>  SPRING,    <br>  SUMMER,    <br>  AUTUMN,    <br>  WINTER<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>枚举类型每一个元素，都有整数标号，默认从0开始递增。</p><p>即上述代码SPRING本质是数字0，SUMBER是2，以此类推。</p><p>起始标号可以自行设置，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;    <br>  SPRING = <span class="hljs-number">3</span>,    <span class="hljs-comment">//从3开始递增，即：SPRING为3、SUMMER为4、AUTUMN为5、WINTER为6</span><br>  SUMMER,    <br>  AUTUMN,    <br>  WINTER<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>是由一批<strong>相同类型</strong>的元素（element）的集合所组成的数据结构，分配一块<strong>连续的内存</strong>来存储。下标索引从0开始.</p></blockquote><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>&lt;数据类型&gt; &lt;数组名&gt;[&lt;数组长度&gt;];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//声明</span><br><span class="hljs-type">int</span> v[<span class="hljs-number">5</span>];<span class="hljs-comment">// 定义了一个有5个整型元素的数组</span><br><span class="hljs-type">char</span> v[<span class="hljs-number">5</span>];<span class="hljs-comment">// 定义了一个有5个char元素的数组</span><br><span class="hljs-type">double</span> v[<span class="hljs-number">5</span>];<span class="hljs-comment">// 定义了一个有5个double元素的数组</span><br>string v[<span class="hljs-number">5</span>];<span class="hljs-comment">// 定义了一个有5个字符串元素的数组</span><br><span class="hljs-type">bool</span> v[<span class="hljs-number">5</span>];<span class="hljs-comment">// 定义了一个有5个布尔型元素的数组</span><br><br><span class="hljs-comment">//声明时直接初始化赋值</span><br><span class="hljs-type">int</span> v[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br><span class="hljs-comment">//单个赋值</span><br>v[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>v[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br></code></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>任意类型均可构建数组</p><ul><li>基本数据类型：<code>int</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>string</code>、<code>bool</code>等</li><li>复合数据类型：<code>结构体</code>、<code>联合体</code>等</li><li>指针类型：<code>int*</code>、<code>char*</code>、<code>float</code>*等</li><li>枚举类型：<code>enum</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 基本数据类型</span><br><span class="hljs-type">float</span> v1[] = &#123;<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>&#125;;<br><span class="hljs-type">double</span> v2[] = &#123;<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>&#125;;<br><span class="hljs-type">char</span> v3[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>string v4[] = &#123;<span class="hljs-string">&quot;林志铃&quot;</span>, <span class="hljs-string">&quot;蔡依临&quot;</span>, <span class="hljs-string">&quot;刘亦飞&quot;</span>&#125;;<br><span class="hljs-type">bool</span> v5[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>&#125;;<br><br><span class="hljs-comment">// 枚举类型</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123; RED, GREEN, BLUE &#125;;<br>Color colors[] = &#123;RED, GREEN, BLUE, GREEN, BLUE&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>固定大小（无边界检查）</p><ol><li><p>C++数组，一旦定义完成，其大小（长度）即固定。</p></li><li><p>C++不会做数组边界检查，即下标索引超出数组范围，编译过程中不会报错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//如下代码，编译能够通过，但运行时可能会有未知问题。    </span><br><span class="hljs-type">int</span> v[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>v[<span class="hljs-number">10</span>] = <span class="hljs-number">1</span>;<br>cout &lt;&lt; v[<span class="hljs-number">100</span>] &lt;&lt; endl;<span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>内存连续且有序</p><p>数组内存空间是连续分配的，并且每个元素分配大小取决于存放类型</p><ul><li><p>char 1字节</p></li><li><p>int 4字节</p></li><li><p>double 8字节等</p></li></ul><p>通过 <code>sizeof(数组)/sizeof(数组某元素)</code> 可以得到数组元素个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> v[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(v)/<span class="hljs-built_in">sizeof</span>(v[<span class="hljs-number">0</span>]) &lt;&lt; endl;<span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure></li><li><p>元素值可以修改</p></li><li><p>数组变量不记录数据</p><p><code>int v[] = &#123;1, 2, 3, 4, 5&#125;;</code> </p><p><strong>数组变量v本身</strong>：并非记录了数组内全部元素（即：不存数据）,而是<strong>记录了v[0]元素的内存地址</strong>.</p><p><strong>数组元素访问规律如下：</strong></p><ul><li><p>通过数组变量（如v）记录下标0元素内存位置，即可找到v[0]</p></li><li><p>通过v[0]地址 + 单个元素空间大小（如int数组，4字节），即可找到v[1]</p></li><li><p>通过v[1]地址 + 4字节，即可找到v[2]</p></li><li><p>…</p></li><li><p>…</p></li><li><p>以此类推</p></li></ul></li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;random&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-comment">//while遍历</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>])) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; endl;<br>        i++;<br>    &#125;<br>    <span class="hljs-comment">//for遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]); i++) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><p>C语言风格的字符串定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-string">&quot;hello&quot;</span>;            <span class="hljs-comment">// 方式1</span><br><span class="hljs-type">char</span> s[] = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 方式2</span><br><span class="hljs-type">char</span> * s = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 方式3</span><br><br></code></pre></td></tr></table></figure><p><strong>方式1（字面常量）和方式2</strong>定义的字符串本质都是：字符数组。</p><p>即：<code>&quot;hello&quot;;</code> 或 <code>char s[] = &quot;hello&quot;;</code> 均可以表现为：<code>char s[] = &#123;&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;\0&#39;&#125;;</code></p><p>其存储机制为:</p><ul><li>​将每一个字符，作为1个元素，存入字符数组中</li><li>​在字符数组中，额外在最后添加一个元素\0（空字符），作为结束标记</li></ul><p>由于字符串是字符数组，所以如下代码是成立的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> s[] = <span class="hljs-string">&quot;hello&quot;</span>;<br>cout &lt;&lt; s[<span class="hljs-number">0</span>] &lt;&lt; endl;   <span class="hljs-comment">// h</span><br>cout &lt;&lt; s[<span class="hljs-number">1</span>] &lt;&lt; endl;   <span class="hljs-comment">// e</span><br>cout &lt;&lt; s[<span class="hljs-number">2</span>] &lt;&lt; endl;   <span class="hljs-comment">// l</span><br>cout &lt;&lt; s[<span class="hljs-number">3</span>] &lt;&lt; endl;   <span class="hljs-comment">// l</span><br>cout &lt;&lt; s[<span class="hljs-number">4</span>] &lt;&lt; endl;   <span class="hljs-comment">// o</span><br>cout &lt;&lt; s[<span class="hljs-number">5</span>] &lt;&lt; endl;   <span class="hljs-comment">// 空输出，即转义字符\0</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(s) &lt;&lt; endl;  <span class="hljs-comment">// 长度为6</span><br></code></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111736702.png" alt="image-20240511173613531"></p><p>遍历:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111736658.png" alt="image-20240511173651551"></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在C++中，指针是至关重要的组成部分。它是C++语言最强大的功能之一，也是最棘手的功能之一。</p><p>指针具有强大的能力，其<strong>本质是协助程序员完成内存的直接操纵</strong>。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111737402.png" alt="image-20240511173758283"></p><p><strong>指针：特定类型数据在内存中的存储地址，即内存地址.</strong></p><p>指针只是一个逻辑概念，其实际应用是：指针变量。</p><p>指针变量的定义语法：</p><ul><li><p>先声明，后赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">变量类型 * 指针变量名;       <span class="hljs-comment">// 声明</span><br>指针变量名 = 内存地址值;     <span class="hljs-comment">// 赋值</span><br><span class="hljs-comment">//示例</span><br><span class="hljs-type">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> * p;<span class="hljs-comment">// 声明  指针变量本身占用8字节（64位系统）</span><br>p = &amp;num;<span class="hljs-comment">// 赋值</span><br><br>cout &lt;&lt; p;  <span class="hljs-comment">// 输出num变量地址</span><br>cout &lt;&lt; *p; <span class="hljs-comment">// 输出10</span><br><br><br><br></code></pre></td></tr></table></figure></li><li><p>声明和赋值同步：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">变量类型 * 指针变量名 = 内存地址值;<br><span class="hljs-type">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> * p = &amp;num;<br><br></code></pre></td></tr></table></figure></li><li><p>变量类型（如上int）表示，指针（内存地址）指向的内存区域，存放的是整型数据            </p></li><li><p><strong><code>*</code>符号有两种含义：</strong></p></li><li><p>**声明时：<code>*p</code>，表示变量p，是指针变量（存的是内存地址）***</p></li><li><p><strong>使用时：<code>*p</code>，表示取指针p执行内存区域的数据</strong>           </p></li><li><p><strong><code>&amp;</code>符号表示取变量内存地址，是一个取内存地址的单目操作符</strong></p></li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405111748802.png" alt="image-20240511174843719"></p><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p><strong>野指针：被声明但未初始化（赋值）的指针。</strong>这个指针会指向随机的内存空间，可能导致未知问题。</p><p><strong>声明即分配（内存）原则</strong>：分配的内存不一定是”干净”的,需要初始化（赋值）进行覆盖</p><p>普通变量是对数值进行操作，不会有安全问题，所以没有“野变量”一说。</p><p>指针对内存直接操作，所以一旦声明但未赋值，就是“野指针”，一旦使用，后果不可预料。</p><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> * p;    <span class="hljs-comment">// 声明指针（分配了8字节空间）, p是野指针因为未被赋值</span><br>*p = <span class="hljs-number">10</span>;    <span class="hljs-comment">// 将10赋予指针p所指向的空间</span><br><span class="hljs-comment">//*p = 10; 是向未知的、随机的4字节内存区域，修改存储值为10  后果不可预料</span><br><br><br></code></pre></td></tr></table></figure><h3 id="避免野指针"><a href="#避免野指针" class="headerlink" title="避免野指针"></a>避免野指针</h3><p>为避免野指针，应养成良好的编程习惯，及时初始化，或将指针置为空指针更为安全。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> * p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> * p = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">//NULL是C++内置的宏，表示”空、什么都没有”的含义，其本质是0</span><br><span class="hljs-comment">//nullptr是C++11标准引入的关键字，表示指针为空</span><br><br><span class="hljs-comment">//上述代码，二选一均可，表示指针指向的地方为”空”，即哪里也不是。</span><br><span class="hljs-comment">//指针不指向任何地方，那么也就没有了安全问题。</span><br><br><br></code></pre></td></tr></table></figure><p><strong>空指针也不是什么光荣的事情，只在需要指针，但需要延迟赋值的场景下作为过渡使用。</strong></p><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><p>尽管指针变量内记录的是内存地址，但仍可以进行基础的数学计算。</p><p>指针运算是对指针的基础型操作，非常适合操纵数组并配合做动态内存分配。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p = &amp;num;<br>cout &lt;&lt; p &lt;&lt; endl;    <span class="hljs-comment">// 结果：0x20d1ff6e4   对指针+1，地址+4（字节）</span><br>p++;<br>cout &lt;&lt; p &lt;&lt; endl;    <span class="hljs-comment">// 结果：0x20d1ff6e8对指针+1，地址+4（字节）</span><br><br></code></pre></td></tr></table></figure><p>指针进行加减运算的结果，和指针指向内存区域的数据类型有关，以加法为例：</p><ul><li>char 类型指针 +1， 地址+1 （字节）</li><li>int 类型指针+1， 地址+4（字节）</li><li>double 类型指针+1， 地址+8 （字节）</li><li>…</li><li>指针+n或-n，即内存地址 <code>+n * 类型大小</code> 或 <code>–n * 类型大小</code></li></ul><p><strong>数组对象本身记录的是内存地址（第一个元素地址）</strong>可以通过指针运算，完成使用指针存取数组元素:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> v[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> *p = v;<br>*p = <span class="hljs-number">11</span>;                <span class="hljs-comment">// 赋值数组第一个元素</span><br>*(p+<span class="hljs-number">1</span>) = <span class="hljs-number">22</span>;            <span class="hljs-comment">// 赋值数组第二个元素</span><br>*(p+<span class="hljs-number">2</span>) = <span class="hljs-number">33</span>;            <span class="hljs-comment">// 赋值数组第三个元素</span><br>cout &lt;&lt; *p &lt;&lt; endl;     <span class="hljs-comment">// 取数组第一个元素</span><br>cout &lt;&lt; *(p+<span class="hljs-number">1</span>) &lt;&lt; endl; <span class="hljs-comment">// 取数组第二个元素</span><br>cout &lt;&lt; *(p+<span class="hljs-number">2</span>) &lt;&lt; endl; <span class="hljs-comment">// 取数组第三个元素</span><br><br></code></pre></td></tr></table></figure><h3 id="指针运算细节"><a href="#指针运算细节" class="headerlink" title="指针运算细节"></a>指针运算细节</h3><ol><li><p>求两指针的中间指针（中间地址）:</p><ul><li>错误:<code>mid = (low + high) / 2;</code></li><li>正确:<code>mid = low + (high – low) / 2;</code></li></ul></li><li><p>对于指针p，p++ 和 p+1的区别</p><ul><li><code>p++</code>:指针p发生变化，地址+1</li><li><code>p+1</code>:得到指针p地址+1结果，p本身不变</li></ul></li></ol><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><blockquote><p>动态内存分配：即由程序员手动的进行内存空间的分配、内存空间的释放等内存管理操作。</p></blockquote><p>C++代码中，变量、数组等对象的创建，是由C++自动分配内存的，称之为（自动）静态内存分配。</p><p>（自动）静态内存管理，是不会进行内存空间的自动清理的（无垃圾回收机制）,我们需要手动的管理内存，即手动分配，用完清理:</p><ul><li>new运算符  <ul><li>new运算符用于申请并分配内存空间并提供指向该空间的指针（内存地址） </li><li>基本语法：<ul><li>new type 申请普通变量空间   <code>int *p = new int;</code></li><li>new type[n] 申请数组空间</li></ul></li></ul></li><li>delete运算符<ul><li>delete运算符用于释放内存:仅可用于new运算符申请的内存区域</li><li>基本语法：<ul><li>delete 指针 删除普通变量空间</li><li>delete[] 指针 删除数组空间</li></ul></li></ul></li></ul><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//普通变量空间</span><br><span class="hljs-type">int</span> *p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>*p = <span class="hljs-number">10</span>;<br>cout &lt;&lt; *p &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-comment">//数组空间</span><br><span class="hljs-type">int</span> *p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 指针也可用下标，等同于*(p+0)</span><br>*p = <span class="hljs-number">1</span>;<br>p[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;   <span class="hljs-comment">// 指针也可用下标，等同于*(p+1)</span><br>*(p+<span class="hljs-number">1</span>) = <span class="hljs-number">2</span>;<br>cout &lt;&lt; p[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; *(p+<span class="hljs-number">1</span>) &lt;&lt; endl;<br><span class="hljs-keyword">delete</span>[] p;<br><br><br><br></code></pre></td></tr></table></figure><h2 id="数组元素的移除"><a href="#数组元素的移除" class="headerlink" title="数组元素的移除"></a>数组元素的移除</h2><p>C++内置并未提供对数组元素进行增加（插入）、移除的功能，需要手动实现（vector容器提供，后续学习）。</p><p><strong>移除数组元素，本质上是复制需要的元素到新数组。</strong></p><p>移除元素的核心思路如下：</p><ol><li>通过new操作符，申请新数组的内存空间，并复制数据到新数组</li><li>通过delete删除旧数组的空间占用</li><li>将旧数组指针，指向新数组地址</li></ol><h2 id="数组元素的插入"><a href="#数组元素的插入" class="headerlink" title="数组元素的插入"></a>数组元素的插入</h2><p>同元素的移除一样，新元素的插入同样需要我们手动实现。</p><p>核心思路 ：</p><ul><li>创建新数组，将老数组元素和新插入元素一起复制到新数组中</li><li>要注意，新元素在指定位置插入（老数组元素要配合做下标增加）</li></ul><h2 id="指针悬挂"><a href="#指针悬挂" class="headerlink" title="指针悬挂"></a>指针悬挂</h2><blockquote><p>指针指向区域已经被回收(delete)，这种问题称之为：指针悬挂</p></blockquote><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405131042149.png" alt="image-20240513104259015"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <br>  <span class="hljs-type">int</span> * p1 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;    <br>  <span class="hljs-type">int</span> * p2 = p1;  <span class="hljs-comment">// 将p1赋值给p2    </span><br>  *p1 = <span class="hljs-number">10</span>;    <br>  <span class="hljs-keyword">delete</span> p1;    <br>  <span class="hljs-comment">//p2指针不能正常使用，因为其指向区域已经被回收</span><br>  cout &lt;&lt; <span class="hljs-string">&quot;p2指针记录的是：&quot;</span> &lt;&lt; *p2 &lt;&lt; endl;    <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以，总结出两点经验：</p><ul><li>不要轻易进行指针之间相互赋值</li><li>delete回收空间前，确保此空间100%不再被使用</li></ul><h2 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h2><blockquote><p>const是C++关键字，被译为常量，const指针即表示：常量指针。</p></blockquote><h3 id="指向const的指针"><a href="#指向const的指针" class="headerlink" title="指向const的指针"></a>指向const的指针</h3><blockquote><p>表示指向区域的数据，是不变的，但可以更换指向。</p></blockquote><ul><li><p>语法(将const写在*之前)</p><ul><li><code>const 数据类型 * 指针;</code></li><li><code>数据类型 const * 指针;</code></li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405131111826.png" alt="image-20240513111122695"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num1 = <span class="hljs-number">10</span>, num2 = <span class="hljs-number">100</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p = &amp;num1;<br>*p = <span class="hljs-number">20</span>;  <span class="hljs-comment">//错误   指向区域的值，不可修改</span><br>p = &amp;num2;<span class="hljs-comment">//正确   可以修改指向</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="const指针-1"><a href="#const指针-1" class="headerlink" title="const指针"></a>const指针</h3><blockquote><p>表示指针本身不可更改，但指向的数据可以更改。</p></blockquote><p>语法（将const写在*之后）：</p><ul><li><code>数据类型 * const 指针 = 地址;</code>         &#x2F;&#x2F; 必须初始化地址，因为指针不可修改了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num1 = <span class="hljs-number">10</span>, num2 = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p = &amp;num1;<br>p = &amp;num2; <span class="hljs-comment">//错误 指针指向不可更改</span><br>*p = <span class="hljs-number">20</span>;   <span class="hljs-comment">//正确 指向区域内的值可以更改</span><br><br></code></pre></td></tr></table></figure><h3 id="指向const的const指针"><a href="#指向const的const指针" class="headerlink" title="指向const的const指针"></a>指向const的const指针</h3><blockquote><p>指针和指向区域的值，都不可更改。</p></blockquote><p>语法（*的前后，都写const）：</p><ul><li><code>const 类型 * const 指针 = 地址;</code>         &#x2F;&#x2F; 必须初始化地址，因为指针不可修改了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num1 = <span class="hljs-number">10</span>, num2 = <span class="hljs-number">100</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p = &amp;num1;<br>p = &amp;num2;<span class="hljs-comment">//错误  指针指向不可更改</span><br>*p = <span class="hljs-number">20</span>;  <span class="hljs-comment">//错误  指向区域内的值不可更改</span><br><br></code></pre></td></tr></table></figure><p>使用场景：</p><ul><li>需要常量的同时也需要动态内存分配的场景</li><li>因为只有使用指针，方可动态分配内存</li></ul><h2 id="指针和数组综合案例"><a href="#指针和数组综合案例" class="headerlink" title="指针和数组综合案例"></a>指针和数组综合案例</h2><p>有如下数组：<code>int * pArr = new int[10] &#123;3, 5, 1, 11, 99, 66, 22, 2, 8, 6&#125;;</code></p><p>需求：对数组内元素进行升序（从小到大）排序，得到：<code>&#123;1, 2, 3, 5, 6, 8, 11, 22, 66, 99&#125;</code></p><h1 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h1><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (条件判断)&#123;    <br>  如果判断结果为<span class="hljs-literal">true</span>，会执行的代码;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件判断<span class="hljs-number">2</span>)&#123;<br>    条件<span class="hljs-number">2</span>为<span class="hljs-literal">true</span>，会执行的代码;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件判断N)&#123;<br>    条件N为<span class="hljs-literal">true</span>，会执行的代码;<br>&#125;<span class="hljs-keyword">else</span>&#123; <br>  上述判断全部为<span class="hljs-literal">false</span>，会执行的代码;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>expression为常量表达式，应当给予一个常量值类型</p><p>应当为<strong>整型（int、short、char）和枚举类型</strong></p><p>break语句可以中断switch语句，否则向下执行其它case段（包括default段）直到执行完或遇到break为止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">switch</span>(expression)&#123;   <br>  <span class="hljs-keyword">case</span> expression_1:        <br>    code;        <br>    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 可选的        </span><br>  <span class="hljs-keyword">case</span> expression_2:        <br>    code;        <br>    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 可选的 </span><br>       …<br>       …       <br> <span class="hljs-keyword">case</span> expression_N:        <br>    code;        <br>    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 可选的        </span><br>  <span class="hljs-keyword">default</span>: <span class="hljs-comment">// 可选的    </span><br>    <span class="hljs-comment">// 当没有任何 case 表达式的值与 expression 的值匹配时，执行此语句&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (条件表达式) &#123;    <br>  <span class="hljs-comment">// 循环体，当条件表达式为真时执行         </span><br>  code;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><blockquote><p>do while循环是while循环的一个变换形式。和while循环在功能上有一点不同：</p><ul><li>while循环，如果条件判断不成立，可以做到一次都不执行循环体的代码</li><li>do while循环，如果条件判断不成立，<strong>最少会执行一次</strong>循环体的代码</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">do</span> <br>&#123;     <br>  <span class="hljs-comment">// 循环体，至少执行一次         </span><br>  code;    <br>  ...    <br>&#125; <span class="hljs-keyword">while</span> (条件表达式);<br><br></code></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;    <br>  cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>continue的作用是：中断所在循环的当次执行，直接进入下一次</p></li><li><p>break的作用是：直接结束所在的循环</p><p>注意事项：</p><ul><li>continue和break，在for和while循环中作用一致</li><li>在嵌套循环中，只能作用在所在的循环上，无法对上层循环起作用</li></ul></li></ol><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p>continue和break，作用是控制程序执行<strong>有条件跳转</strong>。</p><p>C++提供了goto语句，可以提供<strong>无条件跳转</strong>的功能。</p><p><strong>注意</strong>:goto用的好是神器，用不好是大坑。所以能不用就不用吧。</p><h1 id="结构体-类"><a href="#结构体-类" class="headerlink" title="结构体(类)"></a>结构体(类)</h1><blockquote><p>结构体（struct），是一种用户自定义复合数据类型，可以包含不同类型的不同成员。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 声明结构体</span><br><span class="hljs-keyword">struct</span> 结构体类型&#123;    <br>成员<span class="hljs-number">1</span>类型 成员<span class="hljs-number">1</span>名称;    <br>...    <br>  成员N类型 成员N名称;<br>&#125;;<br><br><span class="hljs-comment">//示例</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span>&#123;    <br><span class="hljs-type">int</span> age;<br>  string name;<br>&#125;;<br><span class="hljs-comment">//定义和赋值</span><br>Student stu = &#123;<span class="hljs-number">12</span>,<span class="hljs-string">&quot;john&quot;</span>&#125;;<br><span class="hljs-comment">//访问成员</span><br>stu.name;<br></code></pre></td></tr></table></figure><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><blockquote><p>作为一种数据类型，结构体也是支持使用指针的。</p></blockquote><ul><li><p>引入已存在结构体地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span>&#123;    <br>  string name;    <br>  string major_code = <span class="hljs-string">&quot;003032&quot;</span>;       <span class="hljs-comment">// 默认专业代码    </span><br>  <span class="hljs-type">int</span> dormitory_num = <span class="hljs-number">1</span>;              <span class="hljs-comment">// 默认分配1号楼宿舍</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> stu = &#123;<span class="hljs-string">&quot;周杰轮&quot;</span>, <span class="hljs-string">&quot;003001&quot;</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> *p = &amp;stu;<br><br></code></pre></td></tr></table></figure></li><li><p>通过new操作符申请指针空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> *p = <span class="hljs-keyword">new</span> Student &#123;<span class="hljs-string">&quot;周杰轮&quot;</span>, <span class="hljs-string">&quot;003001&quot;</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>使用指针变量访问结构体成员需要更换操作符号为：-&gt;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout &lt;&lt; p-&gt;name &lt;&lt; endl;            <span class="hljs-comment">// 访问成员name</span><br>cout &lt;&lt; p-&gt;major_code &lt;&lt; endl;      <span class="hljs-comment">// 访问成员major_code</span><br>cout &lt;&lt; p-&gt;dormitory_num &lt;&lt; endl;   <span class="hljs-comment">// 访问成员dormitory_num</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="结构体指针数组"><a href="#结构体指针数组" class="headerlink" title="结构体指针数组"></a>结构体指针数组</h2><blockquote><p>结构体同样可以使用指针数组，<strong>主要用于动态内存分配，方便管理大量结构体占用的内存。</strong></p></blockquote><ul><li><p>引入已存在结构体数组地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> arr[] = &#123;&#123;<span class="hljs-string">&quot;周杰轮&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;林军杰&quot;</span>&#125;, &#123;刘德滑<span class="hljs-string">&quot;, &quot;</span><span class="hljs-number">003001</span><span class="hljs-string">&quot;, 3&#125;&#125;;</span><br><span class="hljs-string">  // 指向已存在数组地址</span><br><span class="hljs-string">  struct Student *p = arr;</span><br><span class="hljs-string">// 数组的每一个元素是结构体对象（非指针）使用.访问成员</span><br><span class="hljs-string">cout &lt;&lt; p[0].name &lt;&lt; endl;</span><br><span class="hljs-string">cout &lt;&lt; p[1].name &lt;&lt; endl;</span><br><span class="hljs-string">cout &lt;&lt; p[2].name &lt;&lt; endl;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li><li><p>通过new操作符申请指针数组空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> *p = <span class="hljs-keyword">new</span> Student[<span class="hljs-number">3</span>] &#123;        <br>  &#123;<span class="hljs-string">&quot;周杰轮&quot;</span>&#125;,        <br>  &#123;<span class="hljs-string">&quot;林军杰&quot;</span>&#125;,        <br>  &#123;<span class="hljs-string">&quot;刘德滑&quot;</span>, <span class="hljs-string">&quot;003001&quot;</span>, <span class="hljs-number">3</span>&#125;<br>&#125;;<br>cout &lt;&lt; p[<span class="hljs-number">0</span>].name &lt;&lt; endl;<br>cout &lt;&lt; p[<span class="hljs-number">1</span>].name &lt;&lt; endl;<br>cout &lt;&lt; p[<span class="hljs-number">2</span>].name &lt;&lt; endl;<br><span class="hljs-keyword">delete</span>[] p;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数（Function）：是一个提前封装好的、可重复使用的、完成特定功能的独立代码单元。</p><p>函数不可定义在main内部</p></blockquote><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405131455191.png" alt="image-20240513145543070"></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>函数的形参还有引用传参这一种形式。</p><p>引用：是变量的一个别名，它是某个已存在变量的另一个名字。</p></blockquote><ul><li>引用创建后，不可更改（更改指向到其它内存区域）</li><li>因不可更改，所以引用必须初始化</li><li>因必须初始化，所以引用不可为空（不可修改）</li></ul><p>语法，主要使用&amp;表明引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">数据类型&amp; 引用名 = 被引用变量;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; b = a;<br><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">11.11</span>;<br><span class="hljs-type">double</span>&amp; d2 = d1;<br><span class="hljs-comment">//对b的各种操作等同于操作a</span><br><span class="hljs-comment">//对d2的各种操作等同于操作d1</span><br><br><br></code></pre></td></tr></table></figure><h2 id="函数的三种传参模式对比"><a href="#函数的三种传参模式对比" class="headerlink" title="函数的三种传参模式对比"></a>函数的三种传参模式对比</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405131507912.png" alt="image-20240513150756806"></p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><h2 id="获取随机数"><a href="#获取随机数" class="headerlink" title="获取随机数"></a>获取随机数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;random&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取范围内随机整数</span><br><span class="hljs-comment"> * @param min </span><br><span class="hljs-comment"> * @param max </span><br><span class="hljs-comment"> * @return </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_random_num</span><span class="hljs-params">(<span class="hljs-type">int</span> min, <span class="hljs-type">int</span> max)</span></span>&#123;<br>     <span class="hljs-comment">// 创建一个随机数生成器</span><br>     random_device rd;<br>     <span class="hljs-function">mt19937 <span class="hljs-title">gen</span><span class="hljs-params">(rd())</span></span>;<br>     <span class="hljs-comment">// 定义一个均匀分布的整数范围</span><br>     uniform_int_distribution&lt;&gt; <span class="hljs-built_in">dis</span>(min, max);<br>     <span class="hljs-comment">// 生成一个随机数并输出</span><br>     <span class="hljs-type">int</span> random_number = <span class="hljs-built_in">dis</span>(gen);<br>     <span class="hljs-keyword">return</span> random_number;<br>     &#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num =<span class="hljs-built_in">get_random_num</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;the random number is:&quot;</span> &lt;&lt; num &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量化交易</title>
      <link href="/2024/04/26/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
      <url>/2024/04/26/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<h1 id="初识量化交易"><a href="#初识量化交易" class="headerlink" title="初识量化交易"></a><strong>初识量化交易</strong></h1><h2 id="量化交易比传统交易强多少？"><a href="#量化交易比传统交易强多少？" class="headerlink" title="量化交易比传统交易强多少？"></a>量化交易比传统交易强多少？</h2><ul><li>它能让你的交易效率提高百倍，量化交易之于传统交易方法，如同大型收割机之于锄头镰刀，机枪大炮之于刀剑棍棒。</li><li>在金融最为发达的美国，量化交易已大行其道，占据了70%以上的股市成交量。可以说量化交易是未来的趋势。</li></ul><h2 id="量化交易是做什么？"><a href="#量化交易是做什么？" class="headerlink" title="量化交易是做什么？"></a>量化交易是做什么？</h2><ul><li>量化交易是指借助现代统计学和数学的方法，利用计算机技术来进行交易的证券投资方式。</li></ul><h2 id="聚宽API文档"><a href="#聚宽API文档" class="headerlink" title="聚宽API文档"></a><a href="https://www.joinquant.com/help/api/help#name:api">聚宽API文档</a></h2><h3 id="常用的下单函数"><a href="#常用的下单函数" class="headerlink" title="常用的下单函数"></a>常用的下单函数</h3><ul><li><p>order(security,amount)</p><p>含义是买卖一定数量的（单位：股）股票</p><p>security是股票代码，amount是数量，amount为负数时代表卖出,正数表示买入.</p></li><li><p>order_target(security,amount)</p><p>含义是通过买卖，将股票仓位调整至一定数量（单位：股）。security是股票代码，amount是数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调整平安银行的持股数量至1000股</span><br> <span class="hljs-comment"># 即，如果目前平安银行的持股数量低于1000股就买入，高于就是卖出，不高不低就不动。</span><br> order_target(<span class="hljs-string">&quot;000001.XSHE&quot;</span>,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure></li><li><p>order_value(security,value)</p><p>含义是买卖一定价值量（单位：元）股票.</p><p>value为负数时就是代表卖出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 买入10000元的平安银行</span><br><span class="hljs-comment"># 如果当前股票市价是10元，则代表买入1000股</span><br><span class="hljs-comment"># 如果除不开系统会自动调整成相近的合理数量。卖出时也会。</span><br>order_value(<span class="hljs-string">&quot;000001.XSHE&quot;</span>,<span class="hljs-number">10000</span>)<br></code></pre></td></tr></table></figure></li><li><p>order_target_value(security,value)</p><p>通过买卖，将股票仓位调整至一定价值量（单位：元）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调整平安银行的持股价值量至10000元</span><br> <span class="hljs-comment"># 即，如果目前平安银行的持股价值量（按股票市价算）低于10000元就买入，高于就是卖出，不高不低就不动。</span><br> order_target_value(<span class="hljs-string">&quot;000001.XSHE&quot;</span>,<span class="hljs-number">10000</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取指数成分股"><a href="#获取指数成分股" class="headerlink" title="获取指数成分股"></a>获取指数成分股</h3><blockquote><h3 id="获取指数成分股需要用到的API为get-index-stocks"><a href="#获取指数成分股需要用到的API为get-index-stocks" class="headerlink" title="获取指数成分股需要用到的API为get_index_stocks"></a>获取指数成分股需要用到的API为<a href="https://www.joinquant.com/help/api/help?name=api_old#get_index_stocks-%E8%8E%B7%E5%8F%96%E6%8C%87%E6%95%B0%E6%88%90%E4%BB%BD%E8%82%A1">get_index_stocks</a></h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取20180301时，上证50指数（000016.XSHG）成分股</span><br>  t=get_index_stocks(<span class="hljs-string">&quot;000016.XSHG&quot;</span>,<span class="hljs-string">&quot;2018-03-01&quot;</span>)<br>  <span class="hljs-built_in">print</span>(t[<span class="hljs-number">0</span>])<br>  <span class="hljs-built_in">print</span>(t)<br><br>  <span class="hljs-comment"># 打印日志如下。股票代码在list中被打印出来前面会带有的u代表是对字符串进行unicode编码（略复杂，不懂没关系），只是显示效果，单独打印t[0]时就没有u。</span><br><br>  <span class="hljs-comment"># 600000.XSHG</span><br>  <span class="hljs-comment"># [u&#x27;600000.XSHG&#x27;, u&#x27;600016.XSHG&#x27;, u&#x27;600019.XSHG&#x27;, u&#x27;600028.XSHG&#x27;, u&#x27;600029.XSHG&#x27;, u&#x27;600030.XSHG&#x27;, u&#x27;600036.XSHG&#x27;, u&#x27;600048.XSHG&#x27;, u&#x27;600050.XSHG&#x27;, u&#x27;600104.XSHG&#x27;, u&#x27;600111.XSHG&#x27;, u&#x27;600309.XSHG&#x27;, u&#x27;600340.XSHG&#x27;, u&#x27;600518.XSHG&#x27;, u&#x27;600519.XSHG&#x27;, u&#x27;600547.XSHG&#x27;, u&#x27;600606.XSHG&#x27;, u&#x27;600837.XSHG&#x27;, u&#x27;600887.XSHG&#x27;, u&#x27;600919.XSHG&#x27;, u&#x27;600958.XSHG&#x27;, u&#x27;600999.XSHG&#x27;, u&#x27;601006.XSHG&#x27;, u&#x27;601088.XSHG&#x27;, u&#x27;601166.XSHG&#x27;, u&#x27;601169.XSHG&#x27;, u&#x27;601186.XSHG&#x27;, u&#x27;601211.XSHG&#x27;, u&#x27;601229.XSHG&#x27;, u&#x27;601288.XSHG&#x27;, u&#x27;601318.XSHG&#x27;, u&#x27;601328.XSHG&#x27;, u&#x27;601336.XSHG&#x27;, u&#x27;601390.XSHG&#x27;, u&#x27;601398.XSHG&#x27;, u&#x27;601601.XSHG&#x27;, u&#x27;601628.XSHG&#x27;, u&#x27;601668.XSHG&#x27;, u&#x27;601669.XSHG&#x27;, u&#x27;601688.XSHG&#x27;, u&#x27;601766.XSHG&#x27;, u&#x27;601800.XSHG&#x27;, u&#x27;601818.XSHG&#x27;, u&#x27;601857.XSHG&#x27;, u&#x27;601878.XSHG&#x27;, u&#x27;601881.XSHG&#x27;, u&#x27;601985.XSHG&#x27;, u&#x27;601988.XSHG&#x27;, u&#x27;601989.XSHG&#x27;, u&#x27;603993.XSHG&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="获取股票行情数据"><a href="#获取股票行情数据" class="headerlink" title="获取股票行情数据"></a>获取股票行情数据</h3><blockquote><p>此处的股票行情数据指<a href="https://joinquant.com/help/api/help?name=api_old#SecurityUnitData">SecurityUnitData</a>里面的所有基本属性，以下列举类常用字段，详情请看文档。</p></blockquote><ul><li>open: 时间段开始时价格</li><li>close: 时间段结束时价格</li><li>low: 最低价</li><li>high: 最高价</li><li>volume: 成交的股票数量</li><li>money: 成交的金额</li><li>factor: 前复权因子</li><li>avg: 这段时间的平均价</li><li>pre_close: 前一个单位时间结束时的价格</li><li>paused: 这只股票是否停牌，是则为1，否则为0</li></ul><h4 id="history-获取历史数据"><a href="#history-获取历史数据" class="headerlink" title="history 获取历史数据"></a><a href="https://www.joinquant.com/api#history">history 获取历史数据</a></h4><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404272058187.png" alt="Img"></p><ul><li><p><strong>可以同时获得多个股票的数据，但只能获得相同的一个数据字段。</strong>如获得 平安银行，建设银行，农业银行这3只股票，前3天的交易额。</p></li><li><p>默认不跳过不交易日期，由skip_paused参数控制。</p></li><li><p>df参数控制返回结果的数据类型，默认是True代表dataframe类型，稍后我们会讲到，当df为False时就为之前讲过的dict类型。</p></li><li><p>fq参数控制复权方式，往往可以不管它直接用默认的前复权即可。复权的含义不难，解释略麻烦，建议自行搜索学习下。</p></li><li><p>接下来介绍的API还会有skip_paused、df、fq参数，就不再提了。这三个参数新手可以以后慢慢了解，现在不管也没关系，如果不想用dataframe，会把df参数调成False(或0)就行。</p></li><li><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子 df=True，返回dataframe类型</span><br> w=history(count=<span class="hljs-number">3</span>, field=<span class="hljs-string">&#x27;money&#x27;</span>, security_list=[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;000002.XSHE&#x27;</span>])<br> <span class="hljs-built_in">print</span>(w)<br>  <br> <span class="hljs-comment"># 结果如下：</span><br> <span class="hljs-comment">#              000001.XSHE   000002.XSHE</span><br> <span class="hljs-comment"># 2016-08-29  5.322954e+08  1.796321e+09</span><br> <span class="hljs-comment"># 2016-08-30  5.618541e+08  2.072873e+09</span><br> <span class="hljs-comment"># 2016-08-31  4.638758e+08  5.748581e+09</span><br>  <br> <span class="hljs-comment"># 例子 df=False，返回dict类型</span><br> w=history(count=<span class="hljs-number">3</span>, field=<span class="hljs-string">&#x27;money&#x27;</span>, security_list=[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;000002.XSHE&#x27;</span>],df=<span class="hljs-literal">False</span>)<br> <span class="hljs-built_in">print</span>(w)<br>  <br> <span class="hljs-comment"># 结果如下：</span><br> <span class="hljs-comment"># &#123;&#x27;000001.XSHE&#x27;: array([  5.32295362e+08,   5.61854066e+08,   4.63875763e+08]), &#x27;000002.XSHE&#x27;: array([  1.79632055e+09,   2.07287325e+09,   5.74858107e+09])&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="attribute-history-获取历史数据"><a href="#attribute-history-获取历史数据" class="headerlink" title="attribute_history 获取历史数据"></a><a href="https://www.joinquant.com/api#attributehistory">attribute_history</a> 获取历史数据</h4><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404272100437.png" alt="Img"></p><ul><li><p><strong>只能获取单独一个股票的数据，但可以同时获得多个字段的数据。</strong>如获得 平安银行这一只股票，前3天的交易额，交易量，最高价，最低价等。</p></li><li><p>默认跳过不交易日期，由skip_paused参数控制。</p></li><li><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子</span><br>  w=attribute_history(security=<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,count=<span class="hljs-number">3</span>, fields=[<span class="hljs-string">&#x27;money&#x27;</span>,<span class="hljs-string">&#x27;high&#x27;</span>])<br>  <span class="hljs-built_in">print</span>(w)<br><br>  <span class="hljs-comment"># 结果如下：</span><br>  <span class="hljs-comment">#                    money  high</span><br>  <span class="hljs-comment"># 2016-08-29  5.322954e+08  9.31</span><br>  <span class="hljs-comment"># 2016-08-30  5.618541e+08  9.33</span><br>  <span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Pandas-DataFrame"><a href="#Pandas-DataFrame" class="headerlink" title="Pandas.DataFrame"></a>Pandas.DataFrame</h4><blockquote><p>上述2个函数返回的财务数据是<code>DataFrame</code>类型，这是一种二维表结构的功能强大的数据类型，常用于数据处理与分析。我们以刚刚的例子介绍下dataframe最常用的获取数据的方法。</p><p>pandas是一个模块或者叫库，可以让我们直接利用其中包含的已经设计好的函数或数据类型，加快我们的工作效率。</p><p>pandas主要功能是数据处理与分析，其中dataframe就是属于pandas的，是原生的python语言没有的。随着深入的学习，你会遇到其他的功能模块，一般来说要使用一个模块是要用一行代码加载导入的，但<strong>pandas聚宽系统已经自动加载了，不必额外写代码导入了</strong>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个dataframe类型的例子</span><br>  w=attribute_history(security=<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,count=<span class="hljs-number">3</span>, fields=[<span class="hljs-string">&#x27;money&#x27;</span>,<span class="hljs-string">&#x27;high&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>])<br>  <span class="hljs-built_in">print</span>(w)<br><br>  <span class="hljs-comment"># 结果如下：</span><br>  <span class="hljs-comment">#                    money  high  open</span><br>  <span class="hljs-comment"># 2016-08-30  5.618541e+08  9.33  9.29</span><br>  <span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36  9.32</span><br>  <span class="hljs-comment"># 2016-09-01  4.548486e+08  9.38  9.35</span><br></code></pre></td></tr></table></figure><p>dataframe是一个二维表，包括index（行标签、索引）、columns（列标签）、values（值）三个部分。取用方法如下，注意三个部分的数据类型不是固定的，因此功能很灵活但也更难使用。</p><h5 id="取用方法"><a href="#取用方法" class="headerlink" title="取用方法"></a>取用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取index</span><br>  <span class="hljs-built_in">print</span>(w.index)<br>  <span class="hljs-comment"># 结果如下，是datatimeindex类型，很特殊，不常用，建议新手回避。</span><br>  <span class="hljs-comment"># DatetimeIndex([&#x27;2016-08-30&#x27;, &#x27;2016-08-31&#x27;, &#x27;2016-09-01&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None, tz=None)</span><br><br>  <span class="hljs-comment"># 获取columns</span><br>  <span class="hljs-built_in">print</span>(w.columns)<br>  <span class="hljs-comment"># 结果如下，是index类型</span><br>  <span class="hljs-comment"># Index([u&#x27;money&#x27;, u&#x27;high&#x27;, u&#x27;open&#x27;], dtype=&#x27;object&#x27;)</span><br><br>  <span class="hljs-comment"># 可以用list()将其转成list</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(w.columns))<br>  <span class="hljs-comment"># 结果如下</span><br>  <span class="hljs-comment"># [&#x27;money&#x27;, &#x27;high&#x27;, &#x27;open&#x27;]</span><br><br>  <span class="hljs-comment"># 获取values</span><br>  <span class="hljs-built_in">print</span>(w.values)<br>  <span class="hljs-comment"># 结果如下，是一个嵌套的list</span><br>  <span class="hljs-comment"># [[  5.61854066e+08   9.33000000e+00   9.29000000e+00]</span><br>  <span class="hljs-comment"># [  4.63875763e+08   9.36000000e+00   9.32000000e+00]</span><br>  <span class="hljs-comment"># [  4.54848634e+08   9.38000000e+00   9.35000000e+00]]</span><br></code></pre></td></tr></table></figure><h5 id="选择dataframe某几列"><a href="#选择dataframe某几列" class="headerlink" title="选择dataframe某几列"></a><strong>选择dataframe某几列</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按标签获取某几列.loc[:,[列标签名,...]]</span><br>  <span class="hljs-built_in">print</span>(w.loc[:,[<span class="hljs-string">&#x27;open&#x27;</span>,<span class="hljs-string">&#x27;high&#x27;</span>]])<br>  <span class="hljs-comment"># 结果如下</span><br>  <span class="hljs-comment">#             open  high</span><br>  <span class="hljs-comment"># 2016-08-29  9.28  9.31</span><br>  <span class="hljs-comment"># 2016-08-30  9.29  9.33</span><br>  <span class="hljs-comment"># 2016-08-31  9.32  9.36</span><br><br>  <span class="hljs-comment"># 按位置获取某几列.iloc[:,[位置,...]]，位置的含义是第几个，从0开始。下文同。</span><br>  <span class="hljs-built_in">print</span>(w.iloc[:,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]])<br>  <span class="hljs-comment"># 结果如下</span><br>  <span class="hljs-comment">#                    money  open</span><br>  <span class="hljs-comment"># 2016-08-29  5.322954e+08  9.28</span><br>  <span class="hljs-comment"># 2016-08-30  5.618541e+08  9.29</span><br>  <span class="hljs-comment"># 2016-08-31  4.638758e+08  9.32</span><br><br>  <span class="hljs-comment"># : 即冒号，可以代表全部，iloc或loc都可以。</span><br>  <span class="hljs-built_in">print</span>(w.iloc[:,:])<br>  <span class="hljs-comment"># 结果如下</span><br>  <span class="hljs-comment">#                    money  high  open</span><br>  <span class="hljs-comment"># 2016-08-29  5.322954e+08  9.31  9.28</span><br>  <span class="hljs-comment"># 2016-08-30  5.618541e+08  9.33  9.29</span><br>  <span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36  9.32</span><br><br>  <span class="hljs-comment"># 选择后的数据依然是dataframe类型，用.values可以获取数据。对后文的行情况也成立。</span><br>  <span class="hljs-built_in">print</span>(w.iloc[:,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]].values)<br>  <span class="hljs-comment"># 结果如下,是个list</span><br>  <span class="hljs-comment"># [[  5.61854066e+08   9.29000000e+00]</span><br>  <span class="hljs-comment"># [  4.63875763e+08   9.32000000e+00]</span><br>  <span class="hljs-comment"># [  4.54848634e+08   9.35000000e+00]]</span><br></code></pre></td></tr></table></figure><h5 id="选择dataframe某几行"><a href="#选择dataframe某几行" class="headerlink" title="选择dataframe某几行"></a>选择dataframe某几行</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按标签获取某几行.loc[[行标签名,...],:]</span><br> <span class="hljs-built_in">print</span>(w.loc[[<span class="hljs-string">&#x27;2016-08-29&#x27;</span>,<span class="hljs-string">&#x27;2016-08-31&#x27;</span>],:])<br> <span class="hljs-comment"># 此处这样写会报错，原因是当前的行标签类型是DatetimeIndex，不是字符串，所以使用标签名时要注意数据类型。而时间类型的数据处理往往非常麻烦，因此行或列标签名是日期情况下建议新手回避，改使用位置获取。</span><br><br> <span class="hljs-comment"># 按位置获取某几行.iloc[[位置,...],:]</span><br> <span class="hljs-built_in">print</span>(w.iloc[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],:])<br> <span class="hljs-comment"># 结果如下</span><br> <span class="hljs-comment">#                    money  high  open</span><br> <span class="hljs-comment"># 2016-08-29  5.322954e+08  9.31  9.28</span><br> <span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36  9.32</span><br><br> <span class="hljs-comment"># : 即冒号，行情况下依然可以代表全部</span><br> <span class="hljs-built_in">print</span>(w.loc[:,:])<br> <span class="hljs-comment"># 结果如下</span><br> <span class="hljs-comment">#                    money  high  open</span><br> <span class="hljs-comment"># 2016-08-29  5.322954e+08  9.31  9.28</span><br> <span class="hljs-comment"># 2016-08-30  5.618541e+08  9.33  9.29</span><br> <span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36  9.32</span><br></code></pre></td></tr></table></figure><h5 id="dataframe-行列转置"><a href="#dataframe-行列转置" class="headerlink" title="dataframe 行列转置"></a><strong>dataframe 行列转置</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 行列转置的意思就是按对角线行列反转，方法是.T</span><br> <span class="hljs-built_in">print</span>(w.T)<br> <span class="hljs-comment"># 结果如下</span><br> <span class="hljs-comment">#          2016-08-29    2016-08-30    2016-08-31</span><br> <span class="hljs-comment"># money  5.322954e+08  5.618541e+08  4.638758e+08</span><br> <span class="hljs-comment"># high   9.310000e+00  9.330000e+00  9.360000e+00</span><br> <span class="hljs-comment"># open   9.280000e+00  9.290000e+00  9.320000e+00</span><br></code></pre></td></tr></table></figure><h3 id="获取股票财务数据"><a href="#获取股票财务数据" class="headerlink" title="获取股票财务数据"></a>获取股票财务数据</h3><blockquote><p>财务报表简称财报，是用来向股东汇报企业经营情况的，上市公司必须按季度公布财报，一年有四季所以财报依发布次序一季报、半年报（也称中报）、三季报、年报，而具体的发布日期在一定期限内即可并非固定，<strong>年报要求年度结束四个月内披露，半年报是上半年结束后两个月内，一季报与三季报是季度结束后一个月内。</strong></p><p>特别的是像总市值、市盈率这种跟股价挂钩的市值数据是每天更新的。</p><p><strong>股票财务数据这里是指发股票的公司发布的财务报表中的数据。可以在聚宽数据-<a href="https://www.joinquant.com/data/dict/fundamentals">股票财务数据</a>查看数据详情。</strong></p></blockquote><ul><li>获取股票财务数据需要用到的API为<a href="https://www.joinquant.com/help/api/help?name=api_old#get_fundamentals-%E6%9F%A5%E8%AF%A2%E8%B4%A2%E5%8A%A1%E6%95%B0%E6%8D%AE">get_fundamentals</a>。这个语句的用法较为复杂，下文对文档进行补充说明，文档还是要看的。</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404272131521.png" alt="Img"></p><ul><li><p><strong>未来函数是什么？</strong></p><ul><li>我们做回测去验证策略时，其实是用历史数据去模拟当时的市场从而得知策略在历史上表现如何，但是<strong>如果策略利用了历史当时无法得到的信息，往往就会造成回测结果极大失真，这时我们会说这个策略有未来函数。</strong></li></ul></li><li><p>date与statDate的问题</p><ul><li>传入date时，查询指定日期date 所能看到的最近的数据。 回测时不填则默认值会为回测日期的前一天。date参数的要求为格式类似’2015-01-15’的字符串，datetime类型的时间数据也是可以的，不过略复杂不展开。</li><li>传入statDate时, 查询 statDate 指定的季度（例如’2015q1’、 ‘2013q4’的字符串）或者年份（如’2015’、’2013’的字符串）的财务数据。这种用法需要注意的地方比较多，请注意文档中提到的问题。</li><li>date和statDate参数只能同时传入其中一个。当 date 和 statDate 都不传入时，相当于使用 date 参数，date 的默认值会为回测日期的前一天。因此，为方便在回测中使用，date 和 statDate 都不传入。</li></ul></li><li><p>单季度与报告期。</p><ul><li>之前讲过，财务数据按季度发布，一般财经网站上提供的财务数据是默认按报告期提供的，即每季度统计的周期跨度分别为第一季度、前两个季度、前三个季度、前四个季度（全年）。</li><li>而聚宽考虑到量化分析，提供的财务数据全是单季度的，即每季度统计的周期跨度分别为第一季度、第二季度、第三季度、第四季度。</li><li>因此，当你发现聚宽财务数据比财经网站的财务数据差的很多时，很可能是单季度与报告期的差别造成的。</li></ul></li><li><p>query_object参数以及快速上手模板</p><ul><li><p>query_object参数是要求传入一个Query对象用于描述所需的数据，这个东西展开讲相当于一门小的编程语言，麻烦而不必要，这里提供一个快速上手的模板用来产生query_object参数，多数情况下往里套就可以了，例子如下，建议对比文档里的例子看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 快速上手模板</span><br><span class="hljs-comment"># query(表.字段).filter(筛选条件).order_by(排序方法).limit(数量上限)</span><br><span class="hljs-comment">#比较长的话可以分行写</span><br></code></pre></td></tr></table></figure></li><li><p>表和字段可以在财务数据文档查看，如下。<strong>表和字段可以写多个用逗号隔开，只写表名不写字段代表选择该表的所有字段</strong>。注意看含义与单位。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404272132897.png" alt="Img"></p><ul><li><p>筛选条件跟讲if判断时用的条件是一样的，多个条件用逗号隔开代表与（and）的关系。特别的是要用复杂的与或非的逻辑关系时，在此处and、or、not是不能用的，要对应的改用&amp;（与）、|（或）、~（非）。</p></li><li><p>排序的写法比较简单，就是要作为排序标准的字段后面加.desc()即由大到小，或.asc()即由小到大。</p></li><li><p>数量上限可以自己设置，代表最多返回的数据条数。不过系统强制限制每次最多返回10000条，就算你自己在此处限制比10000多也没用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子</span><br><span class="hljs-comment"># 获取 市值表.股票代码，资产负债表.未分配利润</span><br>q=query(valuation.code,balance.retained_profit<br><span class="hljs-comment"># 筛选 市值大于100 并且 市盈率小于10</span><br>).<span class="hljs-built_in">filter</span>(valuation.market_cap&gt;<span class="hljs-number">100</span>,valuation.pe_ratio &lt; <span class="hljs-number">10</span><br><span class="hljs-comment"># 排序 按市值从大到小排</span><br>).order_by(valuation.market_cap.desc()<br><span class="hljs-comment"># 数量 上限10条数据</span><br>).limit(<span class="hljs-number">10</span>)<br>w=get_fundamentals(q)<br><span class="hljs-built_in">print</span>(w)<br>      <br><span class="hljs-comment"># 结果如下：</span><br><span class="hljs-comment">#           code  retained_profit</span><br><span class="hljs-comment"># 0  601398.XSHG     8.566400e+11</span><br><span class="hljs-comment"># 1  601939.XSHG     7.400340e+11</span><br><span class="hljs-comment"># 2  601288.XSHG     4.644490e+11</span><br><span class="hljs-comment"># 3  601988.XSHG     5.267460e+11</span><br><span class="hljs-comment"># 4  600036.XSHG     1.816520e+11</span><br><span class="hljs-comment"># 5  601328.XSHG     9.208500e+10</span><br><span class="hljs-comment"># 6  600000.XSHG     1.037620e+11</span><br><span class="hljs-comment"># 7  600016.XSHG     1.277570e+11</span><br><span class="hljs-comment"># 8  601166.XSHG     1.573490e+11</span><br><span class="hljs-comment"># 9  601998.XSHG     1.298680e+11</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="本地获取聚宽数据-JQData"><a href="#本地获取聚宽数据-JQData" class="headerlink" title="本地获取聚宽数据-JQData"></a>本地获取聚宽数据-JQData</h3><p>申请地址： <a href="https://www.joinquant.com/default/index/sdk?f=home&m=banner">https://www.joinquant.com/default/index/sdk?f=home&amp;m=banner</a><br>安装方法： <a href="https://www.joinquant.com/post/12479">https://www.joinquant.com/post/12479</a><br>调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> jqdatasdk <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> jqdatasdk <span class="hljs-keyword">as</span> jq<br>jq.auth(<span class="hljs-string">&#x27;手机号&#x27;</span>, <span class="hljs-string">&#x27;密码&#x27;</span>)<br>df = jq.get_price(<span class="hljs-string">&quot;000001.XSHE&quot;</span>)<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><p>JQData使用方法<br><a href="https://www.joinquant.com/data/dict/jqDataSdk">https://www.joinquant.com/data/dict/jqDataSdk</a><br>JQData提供哪些数据及数据更新频率<br><a href="https://www.joinquant.com/help/api/help?name=JQData#JQData%E6%8F%90%E4%BE%9B%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E9%A2%91%E7%8E%87">https://www.joinquant.com/help/api/help?name=JQData#JQData提供哪些数据及数据更新频率</a><br>JQData，jqdatasdk和jqdata的关系<br><a href="https://www.joinquant.com/help/api/help?name=faq#JQDatajqdatasdk%E5%92%8Cjqdata%E7%9A%84%E5%85%B3%E7%B3%BB">https://www.joinquant.com/help/api/help?name=faq#JQDatajqdatasdk和jqdata的关系</a><br>有关权限和付费问题请咨询管理员微信：jqdata02</p><h2 id="标的代码"><a href="#标的代码" class="headerlink" title="标的代码"></a>标的代码</h2><p>想知道 基金、期货、指数的代码都是什么，可以在这里看<a href="https://www.joinquant.com/data">聚宽数据</a>,比如聚宽数据-向下滚动页面-点击指数数据，可以看到各指数的代码。特别的是股票代码目前没有页面，但只需在平时使用的股票代码后面加后缀就好了，</p><ul><li><p><strong>深交所（深交所股票0开头）股票代码后缀为<code>.XSHE</code>,如<code>000001.XSHE</code></strong></p></li><li><p><strong>上交所股票代码（上交所股票6开头）后缀为<code>.XSHG</code> 如<code>600000.XSHG</code></strong></p></li></ul><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br><span class="hljs-comment"># 三个单引号或双引号为多行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 多行</span><br><span class="hljs-string"> 注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="一行写多条语句"><a href="#一行写多条语句" class="headerlink" title="一行写多条语句"></a>一行写多条语句</h2><p>一般习惯是一行只写一条语句，如果要一行写多条语句要用分号隔开</p><h2 id="一条语句写在多行"><a href="#一条语句写在多行" class="headerlink" title="一条语句写在多行"></a>一条语句写在多行</h2><p>一条语句写在多行,要用<code>\</code>分隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">context</span>):<br>    run_daily(period,\<br>    time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>    g.security = <span class="hljs-string">&#x27;000001.XSHE&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Python-关键字"><a href="#Python-关键字" class="headerlink" title="Python 关键字"></a>Python 关键字</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">and        exec    not     assert    finally    continue<br>  break    for        pass    class    from    print<br>  or      global    raise   def        if        return<br>  del        import    try     elif    in        while<br>  else    is        with    except    lambda    yield<br></code></pre></td></tr></table></figure><h2 id="打印-print"><a href="#打印-print" class="headerlink" title="打印 print"></a>打印 print</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 用法：print(&quot;说明、解释等,用%s表示变量的位置&quot; % (变量或数据))</span><br>a=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a=%s&quot;</span> % （a)) <span class="hljs-comment">#a=1</span><br><br><br>year = <span class="hljs-number">2004</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;year&#125;</span>年是闰年&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a><strong>全局变量</strong></h2><blockquote><p>为了让变量能在全局被使用，需要在变量前加’g.’，使之成为<strong>全局变量</strong>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">context</span>):<br>   run_daily(period,time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>   g.a=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">period</span>(<span class="hljs-params">context</span>):<br>   <span class="hljs-built_in">print</span>(g.a)  <span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure><h2 id="数据类型-数字（Number）"><a href="#数据类型-数字（Number）" class="headerlink" title="数据类型-数字（Number）"></a>数据类型-数字（Number）</h2><ul><li><p>int（整数）、</p></li><li><p>float（浮点数，即 包含小数位）、</p></li><li><p>bool（布尔值，即True和False，True是1，False是0）等</p></li></ul><h2 id="数据类型-字符串（String）"><a href="#数据类型-字符串（String）" class="headerlink" title="数据类型-字符串（String）"></a>数据类型-字符串（String）</h2><blockquote><p>Python 可使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 其中三引号可以由多行组成来编写多行文本</span><br>  a = <span class="hljs-string">&#x27;九歌&#x27;</span><br>  b = <span class="hljs-string">&quot;袅袅兮秋风&quot;</span><br>  c =<span class="hljs-string">&quot;&quot;&quot;袅袅兮秋风，</span><br><span class="hljs-string">  洞庭波兮木叶下。</span><br><span class="hljs-string">  ——屈原《九歌》&quot;&quot;&quot;</span> <br></code></pre></td></tr></table></figure><h2 id="数据类型-列表-List"><a href="#数据类型-列表-List" class="headerlink" title="数据类型-列表(List)"></a>数据类型-列表(List)</h2><blockquote><p>list中可混合的存放多种数据类型，list中放一个list也行。</p></blockquote><ol><li><p>创建列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 建立一个list： 变量名=[数据或变量名，数据或变量名，......]</span><br><br>  a=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">21</span>]<br>  b=[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;002043.XSHE&#x27;</span>,<span class="hljs-string">&#x27;002582.XSHE&#x27;</span>,<span class="hljs-string">&#x27;600000.XSHG&#x27;</span>]<br>  c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;good&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;luck&#x27;</span>],a,b]<br><br>  <span class="hljs-comment"># 值得注意的是例子中的c，c是一个list，其中的包含了6个元素，其中有数字（1,2），有字符串（&#x27;good&#x27;）,以及三个list（[1,2,&#x27;luck&#x27;],a,b）。</span><br>  <span class="hljs-comment"># 因此你应该知道，list中可混合的存放多种数据类型，list中放一个list也行。</span><br></code></pre></td></tr></table></figure></li><li><p>选取list中的某个元素 <code>list[索引]</code></p></li><li><p>选取list中的一段</p><blockquote><p>方法： list类型的变量[起点索引:终点索引]</p><ul><li>起点索引省略则默认为0</li><li>终点索引省略则默认为最后的索引</li><li>结果仍是一个list</li></ul></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(c[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>]) <span class="hljs-comment">#[3]  含左不含右</span><br><span class="hljs-built_in">print</span>(c[:-<span class="hljs-number">1</span>]) <span class="hljs-comment">#[1, 2, 3]   -1表示最后元素的索引</span><br><span class="hljs-built_in">print</span>(c[<span class="hljs-number">3</span>:]) <span class="hljs-comment">#[4]</span><br><span class="hljs-built_in">print</span>(c[:]) <span class="hljs-comment">#[1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="数据类型-字典-Dictionary"><a href="#数据类型-字典-Dictionary" class="headerlink" title="数据类型-字典(Dictionary)"></a>数据类型-字典(Dictionary)</h2><ol><li><p>创建字典</p><blockquote><p>建立方法: 变量名&#x3D;{索引名:数据,索引名:数据,….}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dict中的索引也叫键(key)，数据也叫值(value)</span><br>a=&#123;<span class="hljs-string">&#x27;平安银行&#x27;</span>:<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;浦发银行&#x27;</span>:<span class="hljs-string">&#x27;600000.XSHG&#x27;</span>&#125;<br>b=&#123;<span class="hljs-string">&#x27;开盘价&#x27;</span>:<span class="hljs-number">10.0</span>,<span class="hljs-string">&#x27;收盘价&#x27;</span>:<span class="hljs-number">11.0</span>,<span class="hljs-string">&#x27;涨跌幅&#x27;</span>:<span class="hljs-number">0.10</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>取值</p><blockquote><p>选取方法 <code>dict[key]</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;<span class="hljs-string">&#x27;平安银行&#x27;</span>:<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;浦发银行&#x27;</span>:<span class="hljs-string">&#x27;600000.XSHG&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&#x27;平安银行&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>取全部key和value</p><blockquote><p>返回的结果是list类型的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;<span class="hljs-string">&#x27;平安银行&#x27;</span>:<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;浦发银行&#x27;</span>:<span class="hljs-string">&#x27;600000.XSHG&#x27;</span>&#125;<br>b=a.keys()<br>c=a.values()<br></code></pre></td></tr></table></figure></li></ol><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><blockquote><p>注意如果两个整数类型进行计算，结果默认还是整数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">3.0</span><br> b=<span class="hljs-number">2.0</span><br><br> <span class="hljs-comment"># 加</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a+b=%s&quot;</span> % (a+b))<br> <span class="hljs-comment"># 减</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a-b=%s&quot;</span> % (a-b))<br> <span class="hljs-comment"># 乘</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a*b=%s&quot;</span> % (a*b))<br> <span class="hljs-comment"># 除</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a/b=%s&quot;</span> % (a/b))<br> <span class="hljs-comment"># a除以b的商的整数部分</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a//b=%s&quot;</span> % (a//b))<br> <span class="hljs-comment"># a的b次幂，即指数运算</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a**b=%s&quot;</span> % (a**b))<br> <span class="hljs-comment"># a除以b的余数，即取余运算，为了打印“%”百分号要用两个百分号代表“%”百分号</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a%%b=%s&quot;</span> % (a%b)) <br></code></pre></td></tr></table></figure><h2 id="查看数据类型-type"><a href="#查看数据类型-type" class="headerlink" title="查看数据类型 type"></a>查看数据类型 type</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用法：type(变量名)</span><br>a=<span class="hljs-number">1</span><br>b=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<span class="hljs-comment">#int</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))<span class="hljs-comment">#string</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数列表</span>):<br>      函数体<br>    <br><span class="hljs-comment">#前2个参数无默认值,必传;后3个参数有默认值,非必传</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">order</span>（security, amount, style=<span class="hljs-literal">None</span>, side- long<span class="hljs-string">&#x27;, pindex=0）</span><br><span class="hljs-string"></span><br><span class="hljs-string">#在返回值的时候可以返回多个变量</span><br><span class="hljs-string">  def yuan(r,k=1):</span><br><span class="hljs-string">      p=3.14</span><br><span class="hljs-string">      l=2*p*r/k</span><br><span class="hljs-string">      s=p*r*r/k</span><br><span class="hljs-string">      return l,s</span><br></code></pre></td></tr></table></figure></li><li><p>正常用法:</p></li></ul><p>​函数名(参数,参数,……)</p><ul><li>不按顺序提供参数的正确写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 如下是把100当做amount参数，把&quot;000001.XSHE&quot;当做security参数。</span><br>  order(amount=<span class="hljs-number">100</span>,security=<span class="hljs-string">&quot;000001.XSHE&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>示例:写个函数判断年份是否是闰年</strong></li></ul><blockquote><p>闰年定义为：普通年（不能被100整除的年份）能被4整除的为闰年。（如2004年就是闰年,1999年不是闰年）；世纪年（能被100整除的年份）能被400整除的是闰年。(如2000年是闰年，1900年不是闰年)；【提示:利用取余运算（%）判断是否整除】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_leap_year</span>(<span class="hljs-params">year</span>):<br>    <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 调用函数来判断年份是否是闰年</span><br>year = <span class="hljs-number">2004</span><br><span class="hljs-keyword">if</span> is_leap_year(year):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;year&#125;</span>年是闰年&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;year&#125;</span>年不是闰年&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h2><blockquote><p>写条件常用运算符：<br><code>&lt;</code> 小于<br><code>&gt;</code>大于<br> <code>&lt;=</code> 小于等于<br><code>&gt;=</code> 大于等于<br> <code>==</code> 等于<br> <code>!=</code> 不等于<br> <code>and</code> 与，即and两边条件同为真，则真<br> <code>or</code> 或，即or两边条件任意一个为真，则真<br> <code>not</code> 非，即not右侧条件为真，则假，not右侧条件为假，则真</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> a&gt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正&#x27;</span>)<br><span class="hljs-keyword">elif</span> a&lt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;负&#x27;</span>)<br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;零&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 含义是依次把序列中的元素赋值给for后的变量，并执行循环语句</span><br><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 一个序列:<br>    要循环的语句，也叫循环体<br></code></pre></td></tr></table></figure><h3 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h3><p>使用for语句时有一个常见一起使用的语句range()，它的功能是生成等差数列的，用法如下：</p><p><code>range(首项,上限,步长)</code></p><ul><li>首项 就是这个数列的第一项，可省略，省略后默认为0</li><li>步长 就是数列的公差、间隔，可省略，省略后默认为1</li><li>上限 是用来限制数列长度的，即数列不得大于或等于上限。不可省略。</li><li>另外，python2中range产生的是list，但python3中产生的不是list，但可以用list()这个语句把结果转成list类型，比如list(range(1,7,2))。我们策略编辑环境是python2。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个例子</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(j)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># 执行后日志如下:</span><br><span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 5</span><br><span class="hljs-comment"># [1, 3, 5]</span><br></code></pre></td></tr></table></figure><h3 id="continue与break"><a href="#continue与break" class="headerlink" title="continue与break"></a>continue与break</h3><ul><li>continue的作用是写在循环体中用来跳出当前的这一次的循环过程</li><li>break的作用是写在循环体中用来跳出当前的整个循环过程</li></ul><h1 id="读取context中的数据与策略代码实现"><a href="#读取context中的数据与策略代码实现" class="headerlink" title="读取context中的数据与策略代码实现"></a><strong>读取context中的数据与策略代码实现</strong></h1><blockquote><p>context是一个回测系统建立的Context类型的对象，其中存储了如当前策略运行的时间点、所持有的股票、数量、持仓成本等数据。</p><p>详细介绍可以看API文档：<a href="https://www.joinquant.com/api#context">Context对象</a></p></blockquote><h2 id="context的结构"><a href="#context的结构" class="headerlink" title="context的结构"></a>context的结构</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404272010426.png" alt="Img"></p><h2 id="context中的数据取用方法"><a href="#context中的数据取用方法" class="headerlink" title="context中的数据取用方法"></a>context中的数据取用方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印可用资金</span><br> <span class="hljs-built_in">print</span>(context.portfolio.available_cash)<span class="hljs-comment"># 1000000.0</span><br> <span class="hljs-comment"># 打印运行频率</span><br> <span class="hljs-built_in">print</span>(context.run_params.frequency)<span class="hljs-comment"># day</span><br> <span class="hljs-comment"># 打印当前单位时间的开始时间</span><br> <span class="hljs-built_in">print</span>(context.current_dt)<span class="hljs-comment"># 2016-06-01 09:30:00</span><br> <br> <span class="hljs-comment"># 打印所有键</span><br> <span class="hljs-built_in">print</span>(context.portfolio.positions.keys())<span class="hljs-comment"># [&#x27;000001.XSHE&#x27;]</span><br> <span class="hljs-comment"># 打印所有值</span><br> <span class="hljs-built_in">print</span>(context.portfolio.positions.values())<span class="hljs-comment"># [UserPosition(&#123;&#x27;avg_cost&#x27;: 8.539999999999997, &#x27;security&#x27;: &#x27;000001.XSHE&#x27;, &#x27;closeable_amount&#x27;: 0, &#x27;price&#x27;: 8.53, &#x27;total_amount&#x27;: 100&#125;)]</span><br> <span class="hljs-comment"># 打印g.security的开仓均价</span><br> <span class="hljs-built_in">print</span>(context.portfolio.positions[g.security].avg_cost)<span class="hljs-comment"># 8.54</span><br></code></pre></td></tr></table></figure><h2 id="常用的context数据写法"><a href="#常用的context数据写法" class="headerlink" title="常用的context数据写法"></a>常用的context数据写法</h2><ul><li>当前时间 <code>context.current_dt</code></li><li>当前时间的“年-月-日”的字符串格式 <code>context.current_dt.strftime(&quot;%Y-%m-%d&quot;)</code></li><li>前一个交易日 <code>context.previous_date</code></li><li>当前可用资金 <code>context.portfolio.available_cash</code></li><li>持仓价值 <code>context.portfolio.positions_value</code></li><li>累计收益 <code>context.portfolio.returns</code></li><li>当前持有股票 <code>context.portfolio.positions.keys()</code></li><li>当前持有的某股票的开仓均价 <code>context.portfolio.positions[&#39;xxxxxx.xxxx&#39;].avg_cost</code></li><li>当前持有的某股票的可卖持仓量 <code>context.portfolio.positions[&#39;xxxxxx.xxxx&#39;].closeable_amount</code></li></ul><h2 id="代码实现止损"><a href="#代码实现止损" class="headerlink" title="代码实现止损"></a>代码实现止损</h2><blockquote><p>狭义的止损是指当亏损达到一定幅度后下单卖出该股票的操作，目的是减少进一步的亏损。</p><p>广义则指在狭义的思路上衍生的复杂的减少亏损的方法。</p><p>更多的情况下指狭义的止损。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">context</span>):<br>    run_daily(period,time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>    <span class="hljs-comment">#标的代码:平安银行</span><br>    g.security = <span class="hljs-string">&#x27;000001.XSHE&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">period</span>(<span class="hljs-params">context</span>):<br>    <span class="hljs-comment"># 买入股票100股</span><br>    order(g.security, <span class="hljs-number">100</span>)<br>    <span class="hljs-comment"># 获得股票持仓成本</span><br>    cost=context.portfolio.positions[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>].avg_cost<br>    <span class="hljs-comment"># 获得股票现价</span><br>    price=context.portfolio.positions[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>].price<br>    <span class="hljs-comment"># 计算收益率:现价/成本价 - 1</span><br>    ret=price/cost-<span class="hljs-number">1</span><br>    <span class="hljs-comment"># 打印日志</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成本价：%s&#x27;</span> % cost)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;现价：%s&#x27;</span> % price)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;收益率：%s&#x27;</span> % ret)<br>    <span class="hljs-comment"># 如果收益率小于-0.01，即亏损达到1%则卖出股票，幅度可以自己调，一般10%</span><br>    <span class="hljs-keyword">if</span> ret&lt;-<span class="hljs-number">0.01</span>:<br>      <span class="hljs-comment">#将股票仓位调整至一定数量（单位：股）。security是股票代码，amount是数量</span><br>        order_target(<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;触发止损&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="代码实现多股票策略"><a href="#代码实现多股票策略" class="headerlink" title="代码实现多股票策略"></a>代码实现多股票策略</h2><blockquote><p>在策略中操作多个股票</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">context</span>):<br>     run_daily(period,time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>     <span class="hljs-comment"># 把两个股票代码作为list存入g.security中</span><br>     g.security = [<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;000002.XSHE&#x27;</span>]<br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">period</span>(<span class="hljs-params">context</span>):<br>     <span class="hljs-keyword">for</span> stk <span class="hljs-keyword">in</span> g.security:<br>         order(stk,<span class="hljs-number">100</span>)<br>         <span class="hljs-comment"># 获得股票持仓成本</span><br>         cost=context.portfolio.positions[stk].avg_cost<br>         <span class="hljs-comment"># 获得股票现价</span><br>         price=context.portfolio.positions[stk].price<br>         <span class="hljs-comment"># 计算收益率</span><br>         ret=price/cost-<span class="hljs-number">1</span><br>         <span class="hljs-comment"># 如果收益率小于-0.01，即亏损达到1%则卖出股票，幅度可以自己调，一般10%</span><br>         <span class="hljs-keyword">if</span> ret&lt;-<span class="hljs-number">0.01</span>:<br>             order_target(stk,<span class="hljs-number">0</span>)<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;触发止损&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="代码实现综合策略"><a href="#代码实现综合策略" class="headerlink" title="代码实现综合策略"></a>代码实现综合策略</h2><blockquote><p>现在你听说了这样一件事，<strong>小市值股票过去很长一段时间内收益特别好，但最近不太行了</strong>。你觉得这件事比较有价值，想要写成策略来回测验证下。</p><ul><li><p>为了验证灵感，我们把灵感细化成内容如下的这样一个策略。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">每天找出市值排名最小的前10只股票作为要买入的股票。<br>若已持有的股票的市值已经不够小而不在要买入的股票中，则卖出这些股票。<br>买入要买入的股票，买入金额为当前可用资金的10分之一。<br></code></pre></td></tr></table></figure></li><li><p>考虑到不一定要选10个股票，股票数量应该是个可以方便调节的变量，因此策略内容改成如下这样更好。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">设定好要交易的股票数量stocksnum <br>每天找出市值排名最小的前stocksnum只股票作为要买入的股票。<br>若已持有的股票的市值已经不够小而不在要买入的股票中，则卖出这些股票。<br>买入要买入的股票，买入金额为当前可用资金的stocksnum分之一。<br></code></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">context</span>):<br>      run_daily(period,time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>      <span class="hljs-comment"># 代码：设定好要交易的股票数量stocksnum</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">period</span>(<span class="hljs-params">context</span>):<br>      <span class="hljs-comment"># 代码：找出市值排名最小的前stocksnum只股票作为要买入的股票</span><br>      <span class="hljs-comment"># 代码：若已持有的股票的市值已经不够小而不在要买入的股票中，则卖出这些股票。</span><br>      <span class="hljs-comment"># 代码：买入要买入的股票，买入金额为可用资金的stocksnum分之一</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">context</span>):<br>     run_daily(period,time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>     <span class="hljs-comment"># 设定好要交易的股票数量</span><br>     g.stocksnum = <span class="hljs-number">7</span><br>     <span class="hljs-comment"># 设定交易周期</span><br>     g.period = <span class="hljs-number">13</span><br>     <span class="hljs-comment"># 记录策略进行天数</span><br>     g.days = <span class="hljs-number">0</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">period</span>(<span class="hljs-params">context</span>):<br>     <span class="hljs-comment"># 判断策略进行天数是否能被轮动频率整除余1</span><br>     <span class="hljs-keyword">if</span> g.days % g.period == <span class="hljs-number">0</span>:<br>         <span class="hljs-comment"># 代码：找出市值排名最小的前stocksnum只股票作为要买入的股票</span><br>     <span class="hljs-comment"># 获取当天的股票列表</span><br>     scu = get_all_securities(date= context.current_dt).index.tolist()<br>         <span class="hljs-comment"># 选出在scu内的市值排名最小的前stocksnum只股票</span><br>         q=query(valuation.code<br>                     ).<span class="hljs-built_in">filter</span>(<br>                         valuation.code.in_(scu)<br>                     ).order_by( <br>                         valuation.market_cap.asc()<br>                     ).limit(g.stocksnum)<br>         df = get_fundamentals(q)<br>         <span class="hljs-comment"># 选取股票代码并转为list</span><br>         buylist=<span class="hljs-built_in">list</span>(df[<span class="hljs-string">&#x27;code&#x27;</span>])<br><br>         <span class="hljs-comment"># 代码：若已持有的股票的市值已经不够小而不在要买入的股票中，则卖出这些股票。</span><br>         <span class="hljs-comment"># 对于每个当下持有的股票进行判断：现在是否已经不在buylist里，如果是则卖出</span><br>         <span class="hljs-keyword">for</span> stock <span class="hljs-keyword">in</span> context.portfolio.positions:<br>             <span class="hljs-keyword">if</span> stock <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> buylist: <span class="hljs-comment">#如果stock不在buylist</span><br>                 order_target(stock, <span class="hljs-number">0</span>) <span class="hljs-comment">#调整stock的持仓为0，即卖出</span><br><br>         <span class="hljs-comment"># 代码：买入要买入的股票，买入金额为可用资金的stocksnum分之一</span><br>         <span class="hljs-comment"># 将资金分成g.stocksnum份</span><br>         position_per_stk = context.portfolio.cash/g.stocksnum<br>         <span class="hljs-comment"># 用position_per_stk大小的g.stocksnum份资金去买buylist中的股票</span><br>         <span class="hljs-keyword">for</span> stock <span class="hljs-keyword">in</span> buylist:<br>             order_value(stock, position_per_stk)<br>     <span class="hljs-comment"># 策略进行天数增加1        </span><br>     g.days = g.days + <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h1 id="策略回测指标"><a href="#策略回测指标" class="headerlink" title="策略回测指标"></a>策略回测指标</h1><blockquote><p>如下图，一个策略回测后会给出一些指标，可以在<a href="https://joinquant.com/help/api/help?name=api#%E9%A3%8E%E9%99%A9%E6%8C%87%E6%A0%87">API文档：风险指标</a>查看这些指标的公式及基本说明。下文将补充介绍下几个重要指标。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404281654432.png" alt="Img"></p></blockquote><ul><li>策略收益。这是最基础的指标，衡量回测期间策略收益率的。</li><li>基准收益。基准默认是沪深300指数，所以此指标是回测期间基准收益率的。一般来说，基准收益代表市场整体的收益情况，所以如果策略收益长期低于基准收益，往往意味着策略是失败的。通过set_benchmark()这个API可以自定义基准。</li><li><strong>年化收益率</strong>。年化收益率是一个衡量策略盈利能力的重要指标，越大越好。刚刚讲的策略收益这个指标是和回测时间长短强相关的，比如一个普通策略运行10年肯定比优秀的策略跑半年策略收益高，但这样就不利于比较策略的盈利能力。因此，通过数学方法，把策略收益统一互相化归为一年时间的收益率，比如10年的变为平均每年的收益率，半年的变为以这半年盈利能力运行一年的收益率，如此一来，让策略盈利能力在比较时有了一个大致等同的时间标准。</li><li><strong>最大回撤率</strong>。最大回撤率是一个衡量策略风险的重要指标，越小越好。新手初见这个指标的时候可能会感到一点点的困难，其实这个指标是对应着一个很自然的想法的，比如，你现在要实盘用真钱去跟一个策略操作，而你现在是知道这个策略的过去一段时间的历史收益曲线的，你觉得你的最大亏损率估计是多少？建议读者自己随手画下几条曲线当做历史收益曲线，思考下这个问题。一个经典的回答就是最大回撤率的含义，它的思路是这样的，既然我们还在拿历史数据做回测，说明我们应当还是相信历史对未来有指导意义的，那么我现在实盘用真钱去跟策略操作，接下来我们假设策略收益的未来走势应当是跟历史走势相当的，历史走势有一直涨的时候，也有一直跌的时候，那么我实盘跟策略最大亏损率应该就是，我刚开始跟策略就开始走的跟历史走势中一直跌的那一段那样，而且是一直跌且跌的最多的那段，那么历史走势中一直跌且跌的最多的那段跌跌了多少呢？用人眼一般很容易找到是哪段，而且聚宽的回测图中也标出了，如下图。不过不妨进一步思考下怎么算出最大回撤率，然后看下文档中的公式说明，看你的结果是否正确。当然，初学者知道最大回撤率越小越好可能就够了，但有志者应该借机学习如何思考如何评估风险以及量化风险，因为难度相对不高。</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404281654669.png" alt="Img"></p><ul><li><strong>交易次数</strong>。交易次数其实是一个可以初步衡量策略回测结果是否可靠的指标，过少往往意味着回测结果不可靠。试想这样一种情况，别人给你推荐一个策略，策略进行了10年历史数据的回测，年化收益非常高，最大回撤非常小，你很高兴，但仔细一看，交易次数只有2次，此时，你愿意用真金白银去使用这个策略吗？你难免会想可能只是这2次操作运气好而已，这样的回测结果虽好但是不可信不可靠。其实这基于一个简单统计学思想，样本过少，则统计结果不可靠，所以足够多的交易次数才能让回测结果有说服力。目前，回测结果中不能直接看到交易次数了，可以通过回测结果页面的其他指标中的盈利次数与亏损次数相加得到，也可以通过回测结果图表下面的每日买卖大致看出，位置如下图。</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404281655667.png" alt="Img"></p><ul><li>Alpha（阿尔法）与Beta（贝塔）。在资本资产定价模型（CAPM）中，投资组合的收益被分为和市场系统风险相关与和市场系统风险无关的两部分，而Beta与Alpha这两个希腊字母则是该模型中的两个重要系数，分别代表这相关部分与无关部分。其实策略持有的股票可以看成一个投资组合，基准收益作为市场系统收益，Beta则是代表相关部分的策略收益相对市场波动的倍率，如Beta为2则代表市场涨1%，相关部分的策略收益波动涨大概2%（统计意义上并非实时精确），beta为负数代表与市场反向变动。而Alpha则代表独立于市场波动不受其影响的无关部分的策略收益，越大越好，所以如果策略年化收益为负但Alpha为正而且很大，说明策略有超过市场的盈利能力，不过策略整体盈利被与市场相关部分拉下来了。为了便于理解，Alpha与Beta的含义讲的很粗暴，建议数理基础不错的有志者有空去自学下Alpha与Beta的构造思路与过程。</li><li>夏普比率（Sharpe Ratio）。代表所承担的单位风险所带来的收益，越大越好。夏普比率是在资本资产定价模型进一步发展得来的，不展开讲。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/2024/04/26/websocket/"/>
      <url>/2024/04/26/websocket/</url>
      
        <content type="html"><![CDATA[<h1 id="一、为什么需要-WebSocket？"><a href="#一、为什么需要-WebSocket？" class="headerlink" title="一、为什么需要 WebSocket？"></a>一、为什么需要 WebSocket？</h1><p> <strong>HTTP 协议有一个缺陷：通信只能由客户端发起。</strong></p><p>举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p><p><strong>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。</strong>我们只能使用”轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p><p>轮询的效率低，非常浪费资源.</p><h1 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h1><p>WebSocket 协议在2008年诞生，2011年成为国际标准。<strong>所有浏览器都已经支持了</strong>。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261340474.png" alt="img"></p><p>其他特点包括：</p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）与 HTTP 协议有着良好的兼容性。<strong>默认端口也是80和443</strong>，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><p>（3）数据格式比较轻量，性能开销小，通信高效。</p><p>（4）可以发送文本，也可以发送二进制数据。</p><p>（5）没有同源限制，客户端可以与任意服务器通信。</p><p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</p><p>​<code>ws://example.com:80/some/path</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261342358.jpg" alt="img"></p><h1 id="三、客户端的简单示例"><a href="#三、客户端的简单示例" class="headerlink" title="三、客户端的简单示例"></a>三、客户端的简单示例</h1><p>WebSocket 的用法相当简单。</p><p>下面是一个网页脚本的例子（点击<a href="https://jsbin.com/muqamiqimu/edit?js,console">这里</a>看运行结果），基本上一眼就能明白。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;wss://echo.websocket.org&quot;</span>);<br><br>ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) &#123; <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Connection open ...&quot;</span>); <br>  ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello WebSockets!&quot;</span>);<br>&#125;;<br><br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;Received Message: &quot;</span> + evt.<span class="hljs-property">data</span>);<br>  ws.<span class="hljs-title function_">close</span>();<br>&#125;;<br><br>ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Connection closed.&quot;</span>);<br>&#125;;     <br></code></pre></td></tr></table></figure><h1 id="四、客户端的-API"><a href="#四、客户端的-API" class="headerlink" title="四、客户端的 API"></a>四、客户端的 API</h1><p>WebSocket 客户端的 API 如下。</p><h2 id="4-1-WebSocket-构造函数"><a href="#4-1-WebSocket-构造函数" class="headerlink" title="4.1 WebSocket 构造函数"></a>4.1 WebSocket 构造函数</h2><p>WebSocket 对象作为一个构造函数，用于新建 WebSocket 实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:8080&#x27;</span>);<br></code></pre></td></tr></table></figure><p>执行上面语句之后，客户端就会与服务器进行连接。</p><p>实例对象的所有属性和方法清单，参见<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">这里</a>。</p><h2 id="4-2-webSocket-readyState"><a href="#4-2-webSocket-readyState" class="headerlink" title="4.2 webSocket.readyState"></a>4.2 webSocket.readyState</h2><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p><ul><li><code>CONNECTING</code>：值为0，表示正在连接。</li><li><code>OPEN</code>：值为1，表示连接成功，可以通信了。</li><li><code>CLOSING</code>：值为2，表示连接正在关闭。</li><li><code>CLOSED</code>：值为3，表示连接已经关闭，或者打开连接失败。</li></ul><p>下面是一个示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (ws.<span class="hljs-property">readyState</span>) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">CONNECTING</span>:<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>:<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">CLOSING</span>:<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">CLOSED</span>:<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>    <span class="hljs-comment">// this never happens</span><br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-webSocket-onopen"><a href="#4-3-webSocket-onopen" class="headerlink" title="4.3 webSocket.onopen"></a>4.3 webSocket.onopen</h2><p><strong>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello Server!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要指定多个回调函数，可以使用<code>addEventListener</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ws.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello Server!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="4-4-webSocket-onclose"><a href="#4-4-webSocket-onclose" class="headerlink" title="4.4 webSocket.onclose"></a>4.4 webSocket.onclose</h2><p><strong>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> code = event.<span class="hljs-property">code</span>;<br>  <span class="hljs-keyword">var</span> reason = event.<span class="hljs-property">reason</span>;<br>  <span class="hljs-keyword">var</span> wasClean = event.<span class="hljs-property">wasClean</span>;<br>  <span class="hljs-comment">// handle close event</span><br>&#125;;<br><br>ws.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> code = event.<span class="hljs-property">code</span>;<br>  <span class="hljs-keyword">var</span> reason = event.<span class="hljs-property">reason</span>;<br>  <span class="hljs-keyword">var</span> wasClean = event.<span class="hljs-property">wasClean</span>;<br>  <span class="hljs-comment">// handle close event</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="4-5-webSocket-onmessage"><a href="#4-5-webSocket-onmessage" class="headerlink" title="4.5 webSocket.onmessage"></a>4.5 webSocket.onmessage</h2><p><strong>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> data = event.<span class="hljs-property">data</span>;<br>  <span class="hljs-comment">// 处理数据</span><br>&#125;;<br><br>ws.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> data = event.<span class="hljs-property">data</span>;<br>  <span class="hljs-comment">// 处理数据</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code>对象或<code>Arraybuffer</code>对象）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> event.<span class="hljs-property">data</span> === <span class="hljs-title class_">String</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Received data string&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(event.<span class="hljs-property">data</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">ArrayBuffer</span>)&#123;<br>    <span class="hljs-keyword">var</span> buffer = event.<span class="hljs-property">data</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Received arraybuffer&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显式指定收到的二进制数据类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 收到的是 blob 数据</span><br>ws.<span class="hljs-property">binaryType</span> = <span class="hljs-string">&quot;blob&quot;</span>;<br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>.<span class="hljs-property">size</span>);<br>&#125;;<br><br><span class="hljs-comment">// 收到的是 ArrayBuffer 数据</span><br>ws.<span class="hljs-property">binaryType</span> = <span class="hljs-string">&quot;arraybuffer&quot;</span>;<br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>.<span class="hljs-property">byteLength</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-6-webSocket-send"><a href="#4-6-webSocket-send" class="headerlink" title="4.6 webSocket.send()"></a>4.6 webSocket.send()</h2><p><strong>实例对象的<code>send()</code>方法用于向服务器发送数据。</strong></p><p>发送文本的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;your message&#x27;</span>);<br></code></pre></td></tr></table></figure><p>发送 <code>Blob</code> 对象的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> file = <span class="hljs-variable language_">document</span><br>  .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input[type=&quot;file&quot;]&#x27;</span>)<br>  .<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>ws.<span class="hljs-title function_">send</span>(file);<br></code></pre></td></tr></table></figure><p>发送 <code>ArrayBuffer</code> 对象的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Sending canvas ImageData as ArrayBuffer</span><br><span class="hljs-keyword">var</span> img = canvas_context.<span class="hljs-title function_">getImageData</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">400</span>, <span class="hljs-number">320</span>);<br><span class="hljs-keyword">var</span> binary = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(img.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; img.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>; i++) &#123;<br>  binary[i] = img.<span class="hljs-property">data</span>[i];<br>&#125;<br>ws.<span class="hljs-title function_">send</span>(binary.<span class="hljs-property">buffer</span>);<br></code></pre></td></tr></table></figure><h2 id="4-7-webSocket-bufferedAmount"><a href="#4-7-webSocket-bufferedAmount" class="headerlink" title="4.7 webSocket.bufferedAmount"></a>4.7 webSocket.bufferedAmount</h2><p><strong>实例对象的<code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">10000000</span>);<br>socket.<span class="hljs-title function_">send</span>(data);<br><br><span class="hljs-keyword">if</span> (socket.<span class="hljs-property">bufferedAmount</span> === <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-comment">// 发送完毕</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 发送还没结束</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-8-webSocket-onerror"><a href="#4-8-webSocket-onerror" class="headerlink" title="4.8 webSocket.onerror"></a>4.8 webSocket.onerror</h2><p><strong>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">socket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-comment">// handle error event</span><br>&#125;;<br><br>socket.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-comment">// handle error event</span><br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="五、服务端的实现"><a href="#五、服务端的实现" class="headerlink" title="五、服务端的实现"></a>五、服务端的实现</h1><p><code>WebSocket</code> 服务器的实现，可以查看维基百科的<a href="https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations">列表</a>。</p><p>常用的 <code>Node</code> 实现有以下三种。</p><ul><li><a href="https://github.com/uWebSockets/uWebSockets">µWebSockets</a></li><li><a href="http://socket.io/">Socket.IO</a></li><li><a href="https://github.com/theturtle32/WebSocket-Node">WebSocket-Node</a></li></ul><p>具体的用法请查看它们的文档，这里不详细介绍了。</p><h1 id="六、WebSocketd"><a href="#六、WebSocketd" class="headerlink" title="六、WebSocketd"></a>六、WebSocketd</h1><p>下面，我要推荐一款非常特别的 <code>WebSocket</code> 服务器：<a href="http://websocketd.com/"><code>Websocketd</code></a>。</p><p>它的最大特点，就是后台脚本不限语言，标准输入（<code>stdin</code>）就是 <code>WebSocket</code> 的输入，标准输出（<code>stdout</code>）就是 <code>WebSocket</code> 的输出。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261358467.png" alt="img"></p><p>举例来说，下面是一个 Bash 脚本counter.sh。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> 1<br><span class="hljs-built_in">sleep</span> 1<br><br><span class="hljs-built_in">echo</span> 2<br><span class="hljs-built_in">sleep</span> 1<br><br><span class="hljs-built_in">echo</span> 3<br></code></pre></td></tr></table></figure><p>命令行下运行这个脚本，会输出1、2、3，每个值之间间隔1秒。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">bash ./counter.sh</span><br>1<br>2<br>3<br></code></pre></td></tr></table></figure><p>现在，启动<code>websocketd</code>，指定这个脚本作为服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">websocketd --port=8080 bash ./counter.sh</span><br></code></pre></td></tr></table></figure><p>上面的命令会启动一个 <code>WebSocket</code> 服务器，端口是<code>8080</code>。每当客户端连接这个服务器，就会执行counter.sh脚本，并将它的输出推送给客户端。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:8080/&#x27;</span>);<br><br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">data</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面是客户端的 <code>JavaScript</code> 代码，运行之后会在控制台依次输出1、2、3。</p><p>有了它，就可以很方便地将命令行的输出，发给浏览器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">websocketd --port=8080 <span class="hljs-built_in">ls</span></span><br></code></pre></td></tr></table></figure><p>上面的命令会执行<code>ls</code>命令，从而将当前目录的内容，发给浏览器。使用这种方式实时监控服务器，简直是轻而易举（<a href="https://github.com/joewalnes/web-vmstats">代码</a>）。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261402751.jpg" alt="img"></p><p>更多的用法可以参考<a href="https://github.com/joewalnes/websocketd/tree/master/examples/bash">官方示例</a>。</p><ul><li><a href="https://github.com/joewalnes/websocketd/blob/master/examples/bash/greeter.sh">Bash 脚本读取客户端输入的例子</a></li><li><a href="https://github.com/joewalnes/websocketd/blob/master/examples/bash/chat.sh">五行代码实现一个最简单的聊天服务器</a></li></ul><p>​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Copyright 2013 Jeroen Janssens</span><br><span class="hljs-comment"># All rights reserved.</span><br><span class="hljs-comment"># Use of this source code is governed by a BSD-style</span><br><span class="hljs-comment"># license that can be found in the LICENSE file.</span><br><br><span class="hljs-comment"># Run a simple chat server: websocketd --devconsole --port 8080 ./chat.sh</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Please note that this example requires GNU tail, which is not the default</span><br><span class="hljs-comment"># tail on OS X. Even though this script properly escapes the variables,</span><br><span class="hljs-comment"># please keep in mind that it is in general a bad idea to read</span><br><span class="hljs-comment"># untrusted data into variables and pass this onto the command line.</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Please enter your name:&quot;</span>; <span class="hljs-built_in">read</span> USER<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[<span class="hljs-subst">$(date)</span>] <span class="hljs-variable">$&#123;USER&#125;</span> joined the chat&quot;</span> &gt;&gt; chat.log<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[<span class="hljs-subst">$(date)</span>] Welcome to the chat <span class="hljs-variable">$&#123;USER&#125;</span>!&quot;</span><br><span class="hljs-built_in">tail</span> -n 0 -f chat.log --pid=$$ | grep --line-buffered -v <span class="hljs-string">&quot;] <span class="hljs-variable">$&#123;USER&#125;</span>&gt;&quot;</span> &amp;<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> MSG; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[<span class="hljs-subst">$(date)</span>] <span class="hljs-variable">$&#123;USER&#125;</span>&gt; <span class="hljs-variable">$&#123;MSG&#125;</span>&quot;</span> &gt;&gt; chat.log; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261404631.png" alt="img"></p><p>websocketd 的实质，就是命令行的 WebSocket 代理。只要命令行可以执行的程序，都可以通过它与浏览器进行 WebSocket 通信。下面是一个 Node 实现的回声服务<a href="https://github.com/joewalnes/websocketd/blob/master/examples/nodejs/greeter.js">greeter.js</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">process.<span class="hljs-property">stdin</span>.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br><br>process.<span class="hljs-property">stdin</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;readable&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> chunk = process.<span class="hljs-property">stdin</span>.<span class="hljs-title function_">read</span>();<br>  <span class="hljs-keyword">if</span> (chunk !== <span class="hljs-literal">null</span>) &#123;<br>    process.<span class="hljs-property">stdout</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;data: &#x27;</span> + chunk);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>启动这个脚本的命令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">websocketd --port=8080 node ./greeter.js</span><br></code></pre></td></tr></table></figure><p>官方仓库还有其他<a href="https://github.com/joewalnes/websocketd/tree/master/examples">各种语言</a>的例子。</p><h1 id="七、GoEasy-WebSocket-消息推送服务"><a href="#七、GoEasy-WebSocket-消息推送服务" class="headerlink" title="七、GoEasy WebSocket 消息推送服务"></a>七、GoEasy WebSocket 消息推送服务</h1><p>大家看了前面的介绍，可能已经发现了，<code>WebSocket</code> 的使用有一个前提条件，就是要自己搭建一个服务。</p><p>但是很多时候，它只是一个前后端消息的中介，没有其他功能。单独搭一个服务似乎有点麻烦，尤其是在你的应用并不大的情况下。</p><p>很多开发者都希望，直接使用现成的 <code>WebSocket</code> 服务，免得自己搭建，最好还是免费的。</p><p>下面就介绍一个国内这样的 <code>WebSocket</code> <a href="https://www.goeasy.io/cn/websocket.html?s=ryf">服务商 <code>GoEasy</code></a>。你不需要自己搭建了，前后端接入他们的服务器就可以了，他们的机器都在国内，速度和可靠性有保证。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261406683.webp" alt="img"></p><p>示例代码可以<a href="https://docs.goeasy.io/2.x/pubsub/get-start?s=ryf">参考文档</a>，只要几行，就能立刻使用 WebSocket 了。</p><p>服务端使用 <code>PHP</code>、<code>C#</code>、<code>Java</code>、<code>Go</code>、<code>Node</code>、<code>Python</code> 等各种语言，都没有问题。客户端支持 <code>Uniapp</code>、各种小程序、<code>Web</code> 等不同应用和 <code>Vue</code>、<code>React</code>、<code>Taro</code> 等主流框架。</p><p>GoEasy 2015年就上线了，有很多大企业客户，做到了百万级用户同时在线，每秒千万级消息的实时送达。他们保证消息数据全程加密传输，高并发、低延时，99.95%的高可用。</p><p>只要你的 <code>DAU</code>（日活跃用户数）不超过<code>200</code>，他们的服务是永久免费的，对于个人的小型应用应该够用了。企业的商业项目需要付费，还提供私有部署。</p><h1 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h1><p><a href="http://cjihrig.com/blog/how-to-use-websockets/">How to Use WebSockets</a><br><a href="https://www.tutorialspoint.com/websockets/websockets_send_receive_messages.htm">WebSockets - Send &amp; Receive Messages</a><br><a href="https://www.html5rocks.com/en/tutorials/websockets/basics/">Introducing WebSockets: Bringing Sockets to the Web</a></p><h1 id="九、-Spring-Boot中实现WebSocket"><a href="#九、-Spring-Boot中实现WebSocket" class="headerlink" title="九、 Spring Boot中实现WebSocket"></a>九、 Spring Boot中实现WebSocket</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cc.mrbird<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-websocket-socketjs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>spring-boot-websocket-socketjs<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="构建服务端"><a href="#构建服务端" class="headerlink" title="构建服务端"></a>构建服务端</h2><p>在cc.mrbird.socket目录下新建handler包，然后在该包下新建<code>MyStringWebSocketHandler</code>继承<code>TextWebSocketHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.ws;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStringWebSocketHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextWebSocketHandler</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;建立连接成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTransportError</span><span class="hljs-params">(WebSocketSession session, Throwable exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        session.close(CloseStatus.SERVER_ERROR);<br>        log.error(<span class="hljs-string">&quot;连接异常&quot;</span>, exception);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.afterConnectionClosed(session, status);<br>        log.info(<span class="hljs-string">&quot;断开连接&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理客户端发来的消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">receiveMessage</span> <span class="hljs-operator">=</span> message.getPayload();<br>        log.info(<span class="hljs-string">&quot;客户端发送过来的消息:&quot;</span>+receiveMessage);<br>        <span class="hljs-comment">// 发送消息给客户端</span><br>        session.sendMessage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(fakeAi(receiveMessage)));<br>        <span class="hljs-comment">// 关闭连接</span><br>        <span class="hljs-comment">// session.close(CloseStatus.NORMAL);</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">fakeAi</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(input)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;说句话啊?&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> input.replace(<span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>)<br>                .replace(<span class="hljs-string">&quot;吗&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                .replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>)<br>                .replace(<span class="hljs-string">&#x27;？&#x27;</span>, <span class="hljs-string">&#x27;！&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该类重写了父类<code>AbstractWebSocketHandler</code>的四个方法：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261443865.png" alt="QQ20200316-185332@2x"></p><ul><li>afterConnectionEstablished，和客户端链接成功的时候触发该方法；</li><li>handleTransportError，和客户端连接失败的时候触发该方法；</li><li>afterConnectionClosed，和客户端断开连接的时候触发该方法；</li><li>handleTextMessage，和客户端建立连接后，处理客户端发送的请求。</li></ul><p><code>WebSocketSession</code>对象代表每个客户端会话，包含许多实用方法：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261443263.png" alt="QQ20200316-185851@2x"></p><p>此外，因为我们的目的是实现和客户端的通信，并且内容为文本内容，所以我们继承的是<code>TextWebSocketHandler</code>；如果传输的是二进制内容，则可以继承<code>BinaryWebSocketHandler</code>，更多信息可以自行查看<code>WebSocketHandler</code>的子类。</p><p>接着在cc.mrbird.socket目录下新建configure包，然后在该包下新建<code>WebSocketServerConfigure</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.ws;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServerConfigure</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入自定定义的消息处理Handler</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyStringWebSocketHandler myStringWebSocketHandler;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册消息处理handler,并和发送消息url:/connect绑定</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry.addHandler(myStringWebSocketHandler, <span class="hljs-string">&quot;/connect&quot;</span>).withSockJS();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@EnableWebSocket</code>用于开启<code>WebSocket</code>相关功能，我们注入了上面创建的<code>MyStringWebSocketHandler</code>，并将其注册到了<code>WebSocketHandlerRegistry</code>。</p><p>上面代码的含义是，当客户端通过<code>/connect</code>url和服务端连接通信时，使用<code>MyStringWebSocketHandler</code>处理会话。<code>withSockJS</code>的含义是，通信的客户端是通过<code>SockJS</code>实现的，下面会介绍到。</p><h2 id="构建客户端"><a href="#构建客户端" class="headerlink" title="构建客户端"></a>构建客户端</h2><p><a href="https://github.com/sockjs/sockjs-client">SockJS</a>是一个JS插件，用于构建<code>WebSocket</code>，兼容性好。</p><p>在resources目录下新建static包，然后在该包下新建client.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket客户端<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/sockjs-client/0.3.4/sockjs.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/twitter-bootstrap/4.4.1/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.jumbotron</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#text</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">3rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">3rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.btn</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#connect</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#log</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你想传输的内容&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-12&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;连接&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connect&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;connect()&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发送&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sent&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sent()&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;断开&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;disconnect&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;disconnect()&quot;</span>/&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>聊天记录:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#text&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> connectBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#connect&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> sentBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#sent&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> disconnectBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#disconnect&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> logDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#log&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> ws = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> targetUri = <span class="hljs-string">&quot;/connect&quot;</span>;</span><br><span class="language-javascript">        ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SockJS</span>(targetUri);</span><br><span class="language-javascript">        ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">setConnected</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">            <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;和服务端连接成功！&#x27;</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务端说：&#x27;</span> + event.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">setConnected</span>(<span class="hljs-literal">false</span>);</span><br><span class="language-javascript">            <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;和服务端断开连接！&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sent</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (ws != <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">            ws.<span class="hljs-title function_">send</span>(text.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">            <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;客户端说：&#x27;</span> + text.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请先建立连接！&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (ws != <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">            ws.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">            ws = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">setConnected</span>(<span class="hljs-literal">false</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        content.<span class="hljs-property">innerHTML</span> = value;</span><br><span class="language-javascript">        logDiv.<span class="hljs-title function_">appendChild</span>(content);</span><br><span class="language-javascript">        text.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setConnected</span>(<span class="hljs-params">connected</span>) &#123;</span><br><span class="language-javascript">        connectBtn.<span class="hljs-property">disabled</span> = connected;</span><br><span class="language-javascript">        disconnectBtn.<span class="hljs-property">disabled</span> = !connected;</span><br><span class="language-javascript">        sentBtn.<span class="hljs-property">disabled</span> = !connected;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>html，css那些都不重要，重要的是我们引入了<code>SockJS</code>库。在<code>connect()</code>方法中，我们通过<code>new SockJS(/connect)</code>和上面的服务端建立了Socket通信。<code>SockJS</code>对象包含几个常用的实用方法：</p><ul><li><code>onopen</code>，和服务端讲了连接后的回调方法；</li><li><code>onmessage</code>，服务端返回消息时的回调方法；</li><li><code>onclose</code>，和服务端断开连接的回调方法；</li><li><code>send</code>，发送消息给服务端；</li><li><code>close</code>，断开和服务端的连接。</li></ul><p>上面的JS较为简单，其他逻辑自己看看吧。</p><h2 id="通信测试"><a href="#通信测试" class="headerlink" title="通信测试"></a>通信测试</h2><p>启动项目，浏览器访问：<a href="http://localhost:8080/client.html%EF%BC%9A">http://localhost:8080/client.html：</a></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404261443795.png" alt="QQ20200316-191957@2x"></p><p>文章来源 :</p><ul><li><strong><a href="https://www.ruanyifeng.com/blog/2017/05/websocket.html">阮一峰的网络日志</a></strong></li><li><strong><a href="https://mrbird.cc/Spring-Boot%E6%95%B4%E5%90%88WebSocket.html">MrBird</a></strong></li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dart</title>
      <link href="/2024/04/23/dart_%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"/>
      <url>/2024/04/23/dart_%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><p>​    Dart是由谷歌开发的计算机编程语言,它可以被用于web、服务器、移动应用 和物联网等领域的开发。</p><p>​    Dart诞生于2011年，号称要取代JavaScript。但是过去的几年中一直不温不火。直到Flutter的出现现在被人们重新重视。</p><p>​    要学Flutter的话我们必须首先得会Dart。</p><p>​    官网：<a href="https://dart.dev/">https://dart.dev/</a></p><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><p>​      要在我们本地开发Dart程序的话首先需要安装<code>Dart Sdk</code></p><p>​  官方文档：<a href="https://dart.dev/get-dart">https://dart.dev/get-dart</a></p><h3 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h3><p>​       <a href="http://www.gekorm.com/dart-windows/">http://www.gekorm.com/dart-windows/</a></p><h3 id="mac："><a href="#mac：" class="headerlink" title="mac："></a>mac：</h3><p>​        如果mac电脑没有安装<code>brew</code>这个工具首先第一步需要安装它：  <a href="https://brew.sh/">https://brew.sh/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew tap dart-lang/dart<br>brew install dart<br></code></pre></td></tr></table></figure><h2 id="Dart-开发工具："><a href="#Dart-开发工具：" class="headerlink" title="Dart 开发工具："></a>Dart 开发工具：</h2><p>​    Dart的开发工具有很多： IntelliJ IDEA  、 WebStorm、 Atom、Vscode等</p><h3 id="Vscode中配置Dart。"><a href="#Vscode中配置Dart。" class="headerlink" title="Vscode中配置Dart。"></a>Vscode中配置Dart。</h3><p>​       1、vscode插件安装<code>dart</code></p><p>​      2、vscode插安装<code>code runner</code>     <code>code runner</code>  可以运行我们的文件</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="入口方法"><a href="#入口方法" class="headerlink" title="入口方法"></a>入口方法</h2><p> 入口方法的两种定义方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart">main()&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好dart&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//表示main方法没有返回值</span><br><span class="hljs-keyword">void</span> main()&#123;<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好dart&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>  dart是一个强大的脚本类语言，可以不预先定义变量类型 ，自动会类型推断</p><p>  dart中定义变量可以通过<strong>var</strong>关键字申明</p><p>  如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;this is var&#x27;</span>;<br><span class="hljs-built_in">String</span> str=<span class="hljs-string">&#x27;this is var&#x27;</span>;<br><span class="hljs-built_in">int</span> str=<span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>  注意： <code>var</code> 后就不要写类型 ，写了类型就不要<code>var</code>   两者都写报错</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong><code>const</code> 值不变,一开始就得赋值</strong>.</p><p><strong><code>final</code> 可以不赋初始值,但只能赋一次.</strong></p><p>常量命名一般全大写.</p><p>而final不仅有const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">main() &#123;<br>  <span class="hljs-keyword">final</span> name = <span class="hljs-string">&#x27;Bob&#x27;</span>;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> nickname = <span class="hljs-string">&#x27;Bobby&#x27;</span>;<br>  <span class="hljs-built_in">print</span>(name);<br>  <span class="hljs-built_in">print</span>(nickname);<br><br>  <span class="hljs-keyword">const</span> bar = <span class="hljs-number">1000000</span>; <br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">double</span> atm = <span class="hljs-number">1.01325</span> * bar; <br>  <span class="hljs-built_in">print</span>(bar);<br>  <span class="hljs-built_in">print</span>(atm);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ol><li>变量名称必须<strong>由数字、字母、下划线和美元符($)组成</strong>。</li><li>标识符<strong>开头不能是数字</strong></li><li>标识符<strong>不能是保留字和关键字</strong>。   </li><li>变量的名字是<strong>区分大小写</strong>的.如: age和Age是不同的变量。</li><li>标识符(变量名称)一定要见名思意 ：变量名称建议用名词，方法名称建议用动词</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><blockquote><p>int</p><p>double</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><br>  <span class="hljs-comment">//1、int   必须是整型</span><br>    <span class="hljs-built_in">int</span> a=<span class="hljs-number">123</span>;<br>    a=<span class="hljs-number">45</span>;<br>    <span class="hljs-built_in">print</span>(a);<br>  <span class="hljs-comment">//2、double  既可以是整型 也可是浮点型</span><br>    <span class="hljs-built_in">double</span> b=<span class="hljs-number">23.5</span>;<br>    b=<span class="hljs-number">24</span>;<br>    <span class="hljs-built_in">print</span>(b);<br>  <span class="hljs-comment">//3、运算符</span><br>    <span class="hljs-comment">// + - * / %</span><br>    <span class="hljs-keyword">var</span> c=a+b;<br>    <span class="hljs-built_in">print</span>(c);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">//1、字符串定义的几种方式:单引号 双引号</span><br>  <span class="hljs-comment">// var str1=&#x27;this is str1&#x27;;</span><br>  <span class="hljs-comment">// var str2=&quot;this is str2&quot;;</span><br>  <span class="hljs-comment">// print(str1);</span><br>  <span class="hljs-comment">// print(str2);</span><br>  <br><span class="hljs-comment">//2.三单引号 可换行</span><br>  <span class="hljs-comment">// String str1=&#x27;&#x27;&#x27;this is str1</span><br>  <span class="hljs-comment">// this is str1</span><br>  <span class="hljs-comment">// this is str1</span><br>  <span class="hljs-comment">// &#x27;&#x27;&#x27;;</span><br>  <span class="hljs-comment">//  print(str1);</span><br><br><span class="hljs-comment">//3.三双引号 可换行</span><br>  <span class="hljs-comment">//   String str1=&quot;&quot;&quot;</span><br>  <span class="hljs-comment">//   this is str1</span><br>  <span class="hljs-comment">//   this is str1</span><br>  <span class="hljs-comment">//   this is str1</span><br>  <span class="hljs-comment">//   &quot;&quot;&quot;;</span><br>  <span class="hljs-comment">//  print(str1);</span><br><br>  <span class="hljs-comment">//4、字符串的拼接</span><br>  <span class="hljs-built_in">String</span> str1=<span class="hljs-string">&#x27;你好&#x27;</span>;<br>  <span class="hljs-built_in">String</span> str2=<span class="hljs-string">&#x27;Dart&#x27;</span>;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$str1</span> <span class="hljs-subst">$str2</span>&quot;</span>);<br>  <span class="hljs-built_in">print</span>(str1 + str2);  <br>  <span class="hljs-built_in">print</span>(str1 +<span class="hljs-string">&quot; &quot;</span>+ str2);<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h3><blockquote><p>bool</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><br>  <span class="hljs-comment">//1、bool</span><br>  <span class="hljs-built_in">bool</span> flag1=<span class="hljs-keyword">true</span>;<br>  <span class="hljs-built_in">print</span>(flag1);<br><br>  <span class="hljs-built_in">bool</span> flag2=<span class="hljs-keyword">false</span>;<br>  <span class="hljs-built_in">print</span>(flag2);<br><br>  <span class="hljs-comment">//2、条件判断语句</span><br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-keyword">true</span>;<br>  <span class="hljs-keyword">if</span>(flag)&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;真&#x27;</span>);      <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;假&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> a=<span class="hljs-number">123</span>;<br>  <span class="hljs-keyword">var</span> b=<span class="hljs-number">123</span>;<br>  <span class="hljs-keyword">if</span>(a==b)&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a=b&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a!=b&#x27;</span>);<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="List（数组）"><a href="#List（数组）" class="headerlink" title="List（数组）"></a>List（数组）</h3><blockquote><p>在Dart中，数组是列表对象，所以大多数人只是称它们为列表</p></blockquote><h4 id="创建list方式"><a href="#创建list方式" class="headerlink" title="创建list方式"></a>创建list方式</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-comment">//1、第一种定义List的方式</span><br>  <span class="hljs-keyword">var</span> l1=[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-keyword">true</span>];<br>  <span class="hljs-built_in">print</span>(l1);  <span class="hljs-comment">//[张三, 20, true]</span><br>  <span class="hljs-built_in">print</span>(l1.length);  <span class="hljs-comment">//3</span><br>  <span class="hljs-built_in">print</span>(l1[<span class="hljs-number">0</span>]); <span class="hljs-comment">//张三</span><br>  <span class="hljs-built_in">print</span>(l1[<span class="hljs-number">1</span>]); <span class="hljs-comment">//20</span><br><br>  <span class="hljs-comment">//2、第二种定义List的方式 指定类型</span><br>  <span class="hljs-keyword">var</span> l2=&lt;<span class="hljs-built_in">String</span>&gt;[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>];<br>  <span class="hljs-built_in">print</span>(l2);<br><br> <span class="hljs-keyword">var</span> l3 = &lt;<span class="hljs-built_in">int</span>&gt;[<span class="hljs-number">12</span>, <span class="hljs-number">30</span>];<br> <span class="hljs-built_in">print</span>(l3);<br><br>  <span class="hljs-comment">//3、第三种定义List的方式  增加数据 ,通过[]创建的集合它的容量可以变化</span><br><br>  <span class="hljs-keyword">var</span> l4 = [];<br>  <span class="hljs-built_in">print</span>(l4);<br>  <span class="hljs-built_in">print</span>(l4.length);<br><br>  l4.add(<span class="hljs-string">&quot;张三&quot;</span>);<br>  l4.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>  l4.add(<span class="hljs-number">20</span>);<br>  <span class="hljs-built_in">print</span>(l4);<br>  <span class="hljs-built_in">print</span>(l4.length);<br><br>  <span class="hljs-keyword">var</span> l5 = [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-keyword">true</span>];<br>  l5.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>  l5.add(<span class="hljs-string">&quot;zhaosi&quot;</span>);<br>  <span class="hljs-built_in">print</span>(l5);<br><br><br>  <span class="hljs-comment">//4、第四种定义List的方式 创建一个固定长度的集合</span><br><br>  <span class="hljs-keyword">var</span> l6=<span class="hljs-built_in">List</span>.filled(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-built_in">print</span>(l6);<br>  <span class="hljs-built_in">print</span>(l6[<span class="hljs-number">0</span>]);<br><br>  l6[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;张三&quot;</span>;   <span class="hljs-comment">//修改集合的内容</span><br>  l6[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;李四&quot;</span>;<br>  <span class="hljs-built_in">print</span>(l6);  <span class="hljs-comment">//[张三, 李四]</span><br>  l6.add(<span class="hljs-string">&quot;王五&quot;</span>);  <span class="hljs-comment">//报错  通过List.filled创建的集合长度是固定,没法增加数据</span><br><br><br><br>  <span class="hljs-comment">//通过List.filled创建的集合长度是固定</span><br>  <span class="hljs-keyword">var</span> l6=<span class="hljs-built_in">List</span>.filled(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-built_in">print</span>(l6.length);<br>  l6.length=<span class="hljs-number">0</span>;  <span class="hljs-comment">//修改集合的长度   报错</span><br><br>  <span class="hljs-keyword">var</span> l7=&lt;<span class="hljs-built_in">String</span>&gt;[<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>];<br>  <span class="hljs-built_in">print</span>(l7.length);  <span class="hljs-comment">//2</span><br>  l7.length=<span class="hljs-number">0</span>;  <span class="hljs-comment">//可以改变的</span><br>  <span class="hljs-built_in">print</span>(l7);  <span class="hljs-comment">//[]</span><br><br><span class="hljs-comment">//生成时可以不是指定类型</span><br>  <span class="hljs-keyword">var</span> l8=<span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;.filled(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>);<br>  l8[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;string&quot;</span>;<br>  <span class="hljs-comment">// l8[0]=222;//报错.修改时必须是指定类型</span><br>  <span class="hljs-built_in">print</span>(l8);<span class="hljs-comment">//[string, ]   </span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="List常用属性-方法："><a href="#List常用属性-方法：" class="headerlink" title="List常用属性&amp;方法："></a>List常用属性&amp;方法：</h4><p>​    <strong>常用属性：</strong></p><ul><li>length          长度</li><li>reversed        翻转</li><li>isEmpty         是否为空</li><li>isNotEmpty      是否不为空</li></ul><p>​    <strong>常用方法：</strong>  </p><ul><li>add         增加</li><li>addAll      拼接数组</li><li>indexOf     查找  传入具体值</li><li>remove      删除  传入具体值</li><li>removeAt    删除  传入索引值</li><li>fillRange   修改   </li><li>insert(index,value);            指定位置插入    </li><li>insertAll(index,list)           指定位置插入List</li><li>toList()    其他类型转换成List  </li><li>join()      List转换成字符串</li><li>split()     字符串转化成List</li><li>forEach   </li><li>map</li><li>where 返回满足条件的元素</li><li>any 只要集合里面有满足条件的就返回true</li><li>every 每个元素都满足条件返回true</li></ul><p><strong>示例:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><br><span class="hljs-comment">//List里面的属性：</span><br> <span class="hljs-built_in">List</span> myList=[<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;西瓜&#x27;</span>];<br> <span class="hljs-built_in">print</span>(myList.length);<br> <span class="hljs-built_in">print</span>(myList.isEmpty);<br> <span class="hljs-built_in">print</span>(myList.isNotEmpty);<br> <span class="hljs-built_in">print</span>(myList.reversed);  <span class="hljs-comment">//对列表倒序排序</span><br> <span class="hljs-keyword">var</span> newMyList=myList.reversed.toList();<br> <span class="hljs-built_in">print</span>(newMyList);<br><br><span class="hljs-comment">//List里面的方法：</span><br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;西瓜&#x27;</span>];<br>  myList.add(<span class="hljs-string">&#x27;桃子&#x27;</span>);   <span class="hljs-comment">//增加数据  增加一个</span><br>  myList.addAll([<span class="hljs-string">&#x27;桃子&#x27;</span>,<span class="hljs-string">&#x27;葡萄&#x27;</span>]);  <span class="hljs-comment">//拼接数组</span><br>  <span class="hljs-built_in">print</span>(myList);<br>  <span class="hljs-built_in">print</span>(myList.indexOf(<span class="hljs-string">&#x27;苹x果&#x27;</span>));    <span class="hljs-comment">//indexOf查找数据 查找不到返回-1  查找到返回索引值</span><br><span class="hljs-comment">//forEach 遍历</span><br> myList.forEach((value)&#123;<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$value</span>&quot;</span>);<br>     <span class="hljs-built_in">print</span>(value);<br> &#125;);<br><br>  myList.remove(<span class="hljs-string">&#x27;西瓜&#x27;</span>);<span class="hljs-comment">//删除元素</span><br>  myList.removeAt(<span class="hljs-number">1</span>);<span class="hljs-comment">//根据索引删除元素</span><br>  <span class="hljs-built_in">print</span>(myList);<br>  <br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;西瓜&#x27;</span>];<br>  myList.fillRange(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>);  <span class="hljs-comment">//修改  [香蕉, aaa, 西瓜]</span><br>  myList.fillRange(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>);<span class="hljs-comment">//修改  [香蕉, aaa, aaa]</span><br>  <span class="hljs-built_in">print</span>(myList);<br><br>  myList.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>);      <span class="hljs-comment">//插入  一个</span><br>  myList.insertAll(<span class="hljs-number">1</span>, [<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>]);  <span class="hljs-comment">//插入 多个</span><br>  <span class="hljs-built_in">print</span>(myList);<br><br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;西瓜&#x27;</span>];<br>  <span class="hljs-keyword">var</span> str=myList.join(<span class="hljs-string">&#x27;-&#x27;</span>);   <span class="hljs-comment">//list转换成字符串</span><br>  <span class="hljs-built_in">print</span>(str);<br>  <span class="hljs-built_in">print</span>(str <span class="hljs-keyword">is</span> <span class="hljs-built_in">String</span>);  <span class="hljs-comment">//true</span><br><br>  <span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;香蕉-苹果-西瓜&#x27;</span>;<br>  <span class="hljs-keyword">var</span> list=str.split(<span class="hljs-string">&#x27;-&#x27;</span>);<br>  <span class="hljs-built_in">print</span>(list);<span class="hljs-comment">//[香蕉, 苹果, 西瓜]</span><br>  <span class="hljs-built_in">print</span>(list <span class="hljs-keyword">is</span> <span class="hljs-built_in">List</span>);<span class="hljs-comment">//true</span><br>  <span class="hljs-comment">//every 每一个都满足条件返回true  否则返回false</span><br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>   <span class="hljs-keyword">var</span> f=myList.every((value)&#123;<br>       <span class="hljs-keyword">return</span> value&gt;<span class="hljs-number">5</span>;<br>   &#125;);<br>   <span class="hljs-built_in">print</span>(f);<span class="hljs-comment">//false</span><br>  <span class="hljs-comment">//any 只要集合里面有满足条件的就返回true</span><br>   <span class="hljs-built_in">List</span> myList=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>   <span class="hljs-keyword">var</span> f=myList.any((value)&#123;<br>       <span class="hljs-keyword">return</span> value&gt;<span class="hljs-number">5</span>;<br>   &#125;);<br>   <span class="hljs-built_in">print</span>(f);<br>  <span class="hljs-comment">//where 返回满足条件的元素</span><br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>   <span class="hljs-keyword">var</span> newList=myList.where((value)&#123;<br>       <span class="hljs-keyword">return</span> value&gt;<span class="hljs-number">5</span>;<br>   &#125;);<br>   <span class="hljs-built_in">print</span>(newList.toList());<br>  <span class="hljs-comment">//map</span><br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];      <br>   <span class="hljs-keyword">var</span> newList=myList.map((value)&#123;<br>       <span class="hljs-keyword">return</span> value*<span class="hljs-number">2</span>;<br>   &#125;);<br>   <span class="hljs-built_in">print</span>(newList.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>无序 不重复集合</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">//set转list</span><br>  <span class="hljs-keyword">var</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>  s.add(<span class="hljs-string">&#x27;香蕉&#x27;</span>);<br>  s.add(<span class="hljs-string">&#x27;苹果&#x27;</span>);<br>  s.add(<span class="hljs-string">&#x27;苹果&#x27;</span>);<br>  <span class="hljs-built_in">print</span>(s);   <span class="hljs-comment">//&#123;香蕉, 苹果&#125;</span><br>  <span class="hljs-built_in">print</span>(s.toList()); <br><br><span class="hljs-comment">//list转set</span><br>  <span class="hljs-built_in">List</span> myList=[<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;西瓜&#x27;</span>,<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;苹果&#x27;</span>];<br>  <span class="hljs-keyword">var</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>  s.addAll(myList);<br>  <span class="hljs-built_in">print</span>(s);<br>  <span class="hljs-built_in">print</span>(s.toList());<br>  <br>  <span class="hljs-comment">//遍历</span><br>  s.forEach((value)=&gt;<span class="hljs-built_in">print</span>(value));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Maps（字典）"><a href="#Maps（字典）" class="headerlink" title="Maps（字典）"></a>Maps（字典）</h3><blockquote><p> 通常来说，Map 是一个键值对相关的对象。 键和值可以是任何类型的对象。</p><p><strong>每个键只出现一次， 而一个值则可以出现多次</strong></p></blockquote><h4 id="创建map方式"><a href="#创建map方式" class="headerlink" title="创建map方式"></a>创建map方式</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">//第一种定义 Maps的方式</span><br>  <span class="hljs-keyword">var</span> person=&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&quot;work&quot;</span>:[<span class="hljs-string">&quot;程序员&quot;</span>,<span class="hljs-string">&quot;送外卖&quot;</span>]<br>  &#125;;<br><br>  <span class="hljs-built_in">print</span>(person);<br>  <span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;name&quot;</span>]);<br>  <span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;age&quot;</span>]);<br>  <span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;work&quot;</span>]);<br><br> <span class="hljs-comment">//第二种定义 Maps的方式</span><br> <span class="hljs-keyword">var</span> p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br> p[<span class="hljs-string">&quot;name&quot;</span>]=<span class="hljs-string">&quot;李四&quot;</span>;<br> p[<span class="hljs-string">&quot;age&quot;</span>]=<span class="hljs-number">22</span>;<br> p[<span class="hljs-string">&quot;work&quot;</span>]=[<span class="hljs-string">&quot;程序员&quot;</span>,<span class="hljs-string">&quot;送外卖&quot;</span>];<br> <span class="hljs-built_in">print</span>(p);<br> <span class="hljs-built_in">print</span>(p[<span class="hljs-string">&quot;age&quot;</span>]);   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Map常用属性-方法"><a href="#Map常用属性-方法" class="headerlink" title="Map常用属性&amp;方法"></a>Map常用属性&amp;方法</h4><p><strong>常用属性：</strong></p><ul><li><p>keys            获取所有的key值</p></li><li><p>values          获取所有的value值</p></li><li><p>isEmpty         是否为空</p></li><li><p>isNotEmpty      是否不为空</p></li></ul><p><strong>常用方法:</strong></p><ul><li><p>remove(key)     删除指定key的数据</p></li><li><p>addAll({…})   合并映射  给映射内增加属性</p></li><li><p>containsValue   映射内的值是否包含指定值  返回true&#x2F;false</p></li><li><p>forEach    遍历</p></li><li><p>map </p></li><li><p>where</p></li><li><p>any</p></li><li><p>every</p></li></ul><p><strong>示例</strong>:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><span class="hljs-comment">//常用属性：</span><br>  <span class="hljs-built_in">Map</span> person=&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span><br>  &#125;;<br><br>  <span class="hljs-built_in">print</span>(person.keys.toList());<br>  <span class="hljs-built_in">print</span>(person.values.toList());<br>  <span class="hljs-built_in">print</span>(person.isEmpty);<br>  <span class="hljs-built_in">print</span>(person.isNotEmpty);<br><br><br><span class="hljs-comment">//常用方法：</span><br>    <span class="hljs-built_in">Map</span> person=&#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>      <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span><br>    &#125;;<br><span class="hljs-comment">//增加元素</span><br>    person.addAll(&#123;<br>      <span class="hljs-string">&quot;work&quot;</span>:[<span class="hljs-string">&#x27;敲代码&#x27;</span>,<span class="hljs-string">&#x27;送外卖&#x27;</span>],<br>      <span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-number">160</span><br>    &#125;);<br>    <span class="hljs-built_in">print</span>(person);<br><span class="hljs-comment">//删除元素</span><br>    person.remove(<span class="hljs-string">&quot;sex&quot;</span>);<br>    <span class="hljs-built_in">print</span>(person);<br><span class="hljs-comment">//value是否包含张三</span><br>    <span class="hljs-built_in">print</span>(person.containsValue(<span class="hljs-string">&#x27;张三&#x27;</span>));<br><span class="hljs-comment">//遍历</span><br>    person.forEach((key,value)&#123;            <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$key</span>---<span class="hljs-subst">$value</span>&quot;</span>);<br>    &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用不到的数据类型："><a href="#用不到的数据类型：" class="headerlink" title="用不到的数据类型："></a><strong>用不到的数据类型：</strong></h3><ul><li>Runes</li></ul><p>​        Rune是UTF-32编码的字符串。它可以通过文字转换成符号表情或者代表特定的文字。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart">main() &#123;<br>     <span class="hljs-keyword">var</span> clapping = <span class="hljs-string">&#x27;\u&#123;1f44f&#125;&#x27;</span>;<br>     <span class="hljs-built_in">print</span>(clapping);<br>     <span class="hljs-built_in">print</span>(clapping.codeUnits);<br>     <span class="hljs-built_in">print</span>(clapping.runes.toList());<br>     Runes input = <span class="hljs-keyword">new</span> Runes(<br>         <span class="hljs-string">&#x27;\u2665  \u&#123;1f605&#125;  \u&#123;1f60e&#125;  \u&#123;1f47b&#125;  \u&#123;1f596&#125;  \u&#123;1f44d&#125;&#x27;</span>);<br>     <span class="hljs-built_in">print</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>.fromCharCodes(input));<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Symbols</li></ul><p>​        Symbol对象表示在Dart程序中声明的运算符或标识符。您可能永远不需要使用符号，但它们对于按名称引用标识符的API非常有用，因为缩小会更改标识符名称而不会更改标识符符号。要获取标识符的符号，请使用符号文字，它只是＃后跟标识符.</p><h3 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h3><blockquote><p>is 关键词来判断类型</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><br>  <span class="hljs-keyword">var</span> str=<span class="hljs-number">123</span>;<br>  <span class="hljs-keyword">if</span>(str <span class="hljs-keyword">is</span> <span class="hljs-built_in">String</span>)&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;是string类型&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>)&#123;<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;int&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;其他类型&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-built_in">int</span> a=<span class="hljs-number">13</span>;<br>  <span class="hljs-built_in">int</span> b=<span class="hljs-number">5</span>;<br><br>  <span class="hljs-built_in">print</span>(a+b);   <span class="hljs-comment">//加</span><br>  <span class="hljs-built_in">print</span>(a-b);   <span class="hljs-comment">//减</span><br>  <span class="hljs-built_in">print</span>(a*b);   <span class="hljs-comment">//乘</span><br>  <span class="hljs-built_in">print</span>(a/b);   <span class="hljs-comment">//除</span><br>  <span class="hljs-built_in">print</span>(a%b);   <span class="hljs-comment">//取余</span><br>  <span class="hljs-built_in">print</span>(a~/b);  <span class="hljs-comment">//取整</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-built_in">int</span> a=<span class="hljs-number">5</span>;<br>  <span class="hljs-built_in">int</span> b=<span class="hljs-number">3</span>;<br>  <span class="hljs-built_in">print</span>(a==b);   <span class="hljs-comment">//相等</span><br>  <span class="hljs-built_in">print</span>(a!=b);   <span class="hljs-comment">//不等</span><br>  <span class="hljs-built_in">print</span>(a&gt;b);    <span class="hljs-comment">//大于</span><br>  <span class="hljs-built_in">print</span>(a&lt;b);    <span class="hljs-comment">//小于</span><br>  <span class="hljs-built_in">print</span>(a&gt;=b);   <span class="hljs-comment">//大于等于</span><br>  <span class="hljs-built_in">print</span>(a&lt;=b);   <span class="hljs-comment">//小于等于</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">/* ! 取反 */</span> <br>  <span class="hljs-built_in">bool</span> flag=<span class="hljs-keyword">false</span>;<br>  <span class="hljs-built_in">print</span>(!flag);<br><br>  <span class="hljs-comment">/* &amp;&amp;并且:全部为true的话值为true 否则值为false */</span> <br>  <span class="hljs-built_in">bool</span> a=<span class="hljs-keyword">true</span>;<br>  <span class="hljs-built_in">bool</span> b=<span class="hljs-keyword">true</span>;<br>  <span class="hljs-built_in">print</span>(a &amp;&amp; b);<br><br>  <span class="hljs-comment">/* ||或者：全为false的话值为false 否则值为true */</span> <br>  <span class="hljs-built_in">bool</span> a=<span class="hljs-keyword">false</span>;<br>  <span class="hljs-built_in">bool</span> b=<span class="hljs-keyword">false</span>;<br>  <span class="hljs-built_in">print</span>(a || b);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><span class="hljs-comment">//  1、基础赋值运算符   =   ??=      </span><br>   <span class="hljs-built_in">int</span> a=<span class="hljs-number">10</span>;<br>   <span class="hljs-built_in">int</span> b=<span class="hljs-number">3</span>;<br>   <span class="hljs-built_in">print</span>(a);<br>   <span class="hljs-built_in">int</span> c=a+b; <br><br>    <span class="hljs-comment">// b??=23;  表示如果b为空的话把 23赋值给b</span><br>    <span class="hljs-built_in">int</span> b=<span class="hljs-number">6</span>;<br>    b??=<span class="hljs-number">23</span>;<br>    <span class="hljs-built_in">print</span>(b);<br><br><span class="hljs-comment">//2、  复合赋值运算符   +=  -=  *=   /=   %=  ~/=</span><br>   <span class="hljs-keyword">var</span> a=<span class="hljs-number">13</span>;<br>   a+=<span class="hljs-number">10</span>;<br>   <span class="hljs-built_in">print</span>(a);<br>  <br>  <span class="hljs-comment">//3.如果++ -- 写在前面 这时候先运算 再赋值，如果++ --写在后面 先赋值后运行运算</span><br>    <span class="hljs-keyword">var</span> a=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">var</span> b=a--;<br><br>    <span class="hljs-built_in">print</span>(a);  <span class="hljs-comment">//9</span><br>    <span class="hljs-built_in">print</span>(b);  <span class="hljs-comment">//10</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>  <span class="hljs-comment">//1、if else   switch case </span><br>  <span class="hljs-keyword">var</span> score=<span class="hljs-number">41</span>;<br>  <span class="hljs-keyword">if</span>(score&gt;<span class="hljs-number">90</span>)&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;优秀&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&gt;<span class="hljs-number">70</span>)&#123;<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;良好&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">60</span>)&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;及格&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不及格&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> sex=<span class="hljs-string">&quot;女&quot;</span>;<br>  <span class="hljs-keyword">switch</span>(sex)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;男&quot;</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;性别是男&#x27;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;女&quot;</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;性别是女&#x27;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;传入参数错误&#x27;</span>);<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//2、三目运算符 </span><br>  <span class="hljs-built_in">bool</span> flag=<span class="hljs-keyword">false</span>;<br>  <span class="hljs-built_in">String</span> c=flag?<span class="hljs-string">&#x27;我是true&#x27;</span>:<span class="hljs-string">&#x27;我是false&#x27;</span>;<br>  <span class="hljs-built_in">print</span>(c);<br>     <br>  <span class="hljs-comment">//3  ??运算符  为空才赋值</span><br>  <span class="hljs-keyword">var</span> a;<br>  <span class="hljs-keyword">var</span> b= a ?? <span class="hljs-number">10</span>;<br>  <span class="hljs-built_in">print</span>(b);   <span class="hljs-comment">//10</span><br><br>  <span class="hljs-keyword">var</span> a=<span class="hljs-number">22</span>;<br>  <span class="hljs-keyword">var</span> b= a ?? <span class="hljs-number">10</span>;<br>  <span class="hljs-built_in">print</span>(b);<span class="hljs-comment">//22</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br>    <span class="hljs-comment">//1、Number与String类型之间的转换</span><br><br>      <span class="hljs-comment">// Number类型转换成String类型 toString()</span><br>      <span class="hljs-keyword">var</span> myNum=<span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">var</span> str=myNum.toString();<br>    <span class="hljs-built_in">print</span>(str <span class="hljs-keyword">is</span> <span class="hljs-built_in">String</span>);<br>      <span class="hljs-comment">// String类型转成Number类型  int.parse()</span><br>      <span class="hljs-built_in">String</span> str=<span class="hljs-string">&#x27;123&#x27;</span>;<br>      <span class="hljs-keyword">var</span> myNum=<span class="hljs-built_in">int</span>.parse(str);<br>      <span class="hljs-built_in">print</span>(myNum <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>);<br><br>      <span class="hljs-built_in">String</span> str=<span class="hljs-string">&#x27;123.1&#x27;</span>;<br>      <span class="hljs-keyword">var</span> myNum=<span class="hljs-built_in">double</span>.parse(str);<br>      <span class="hljs-built_in">print</span>(myNum <span class="hljs-keyword">is</span> <span class="hljs-built_in">double</span>);<br><br>    <span class="hljs-comment">// try  ... catch</span><br>    <span class="hljs-built_in">String</span> price=<span class="hljs-string">&#x27;&#x27;</span>;<br>     <span class="hljs-keyword">try</span>&#123;<br>       <span class="hljs-keyword">var</span> myNum=<span class="hljs-built_in">double</span>.parse(price);<br>       <span class="hljs-built_in">print</span>(myNum);<br>     &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>          <span class="hljs-built_in">print</span>(<span class="hljs-number">0</span>);<br>     &#125; <br><br> <span class="hljs-comment">// 2、其他类型转换成Booleans类型</span><br>        <span class="hljs-comment">// isEmpty:判断字符串是否为空</span><br>        <br>        <span class="hljs-comment">// var str=&#x27;&#x27;;</span><br>        <span class="hljs-comment">// if(str.isEmpty)&#123;</span><br>        <span class="hljs-comment">//   print(&#x27;str空&#x27;);</span><br>        <span class="hljs-comment">// &#125;else&#123;</span><br>        <span class="hljs-comment">//   print(&#x27;str不为空&#x27;);</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">// var myNum=123;</span><br>        <span class="hljs-comment">// if(myNum==0)&#123;</span><br>        <span class="hljs-comment">//    print(&#x27;0&#x27;);</span><br>        <span class="hljs-comment">// &#125;else&#123;</span><br>        <span class="hljs-comment">//   print(&#x27;非0&#x27;);</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">// var myNum;</span><br>        <span class="hljs-comment">// if(myNum==0)&#123;</span><br>        <span class="hljs-comment">//    print(&#x27;0&#x27;);</span><br>        <span class="hljs-comment">// &#125;else&#123;</span><br>        <span class="hljs-comment">//   print(&#x27;非0&#x27;);</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">// var myNum;</span><br>        <span class="hljs-comment">// if(myNum==null)&#123;</span><br>        <span class="hljs-comment">//    print(&#x27;空&#x27;);</span><br>        <span class="hljs-comment">// &#125;else&#123;</span><br>        <span class="hljs-comment">//   print(&#x27;非空&#x27;);</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-keyword">var</span> myNum=<span class="hljs-number">0</span>/<span class="hljs-number">0</span>;        <br>        <span class="hljs-comment">// print(myNum);</span><br>        <span class="hljs-keyword">if</span>(myNum.isNaN)&#123;<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NaN&#x27;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>基本语法</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">100</span>; i++) &#123;   <br>  <span class="hljs-built_in">print</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>示例</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><br>  <span class="hljs-comment">//1、打印0-50所有的偶数</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>       <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-built_in">print</span>(i);<br>       &#125;<br>   &#125;<br><br>  <span class="hljs-comment">//2、求 1+2+3+4 +...100的和</span><br>    <span class="hljs-keyword">var</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>        sum+=i;<br>    &#125;<br>    <span class="hljs-built_in">print</span>(sum);<br><br>  <span class="hljs-comment">// 3、计算5的阶乘   (1*2*3*4*5    n的阶乘1*2……*n)</span><br><br>   <span class="hljs-keyword">var</span> sum=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>       sum*=i;<br>   &#125;<br>   <span class="hljs-built_in">print</span>(sum);<br><br>  <span class="hljs-comment">//4、打印List  [&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;] 里面的内容</span><br>   <span class="hljs-built_in">List</span> list=[<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;list.length;i++)&#123;<br>     <span class="hljs-built_in">print</span>(list[i]);<br>   &#125;<br><br>  <span class="hljs-comment">//5、打印List </span><br>  <span class="hljs-built_in">List</span> list=[&#123;<br>    <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;新闻111&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;新闻222&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;新闻333&quot;</span><br>  &#125;];<br><br>  <span class="hljs-built_in">print</span>(list[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;list.length;i++)&#123;<br>    <span class="hljs-built_in">print</span>(list[i][<span class="hljs-string">&#x27;title&#x27;</span>]);<br>  &#125;<br><br><br>  <span class="hljs-comment">//4、定义一个二维数组 打印里面的内容</span><br>        <span class="hljs-built_in">List</span> list=[<br>          &#123;<br>              <span class="hljs-string">&quot;cate&quot;</span>:<span class="hljs-string">&#x27;国内&#x27;</span>,<br>              <span class="hljs-string">&quot;news&quot;</span>:[<br>                &#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;国内新闻1&quot;</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;国内新闻2&quot;</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;国内新闻3&quot;</span>&#125;<br>              ]<br>          &#125;,<br>          &#123;<br>              <span class="hljs-string">&quot;cate&quot;</span>:<span class="hljs-string">&#x27;国际&#x27;</span>,<br>              <span class="hljs-string">&quot;news&quot;</span>:[<br>                &#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;国际新闻1&quot;</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;国际新闻2&quot;</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;国际新闻3&quot;</span>&#125;<br>              ]<br>          &#125;<br>        ];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;list.length;i++)&#123;<br>            <span class="hljs-built_in">print</span>(list[i][<span class="hljs-string">&quot;cate&quot;</span>]);<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------&#x27;</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;list[i][<span class="hljs-string">&quot;news&quot;</span>].length;j++)&#123;<br>                <span class="hljs-built_in">print</span>(list[i][<span class="hljs-string">&quot;news&quot;</span>][j][<span class="hljs-string">&quot;title&quot;</span>]);<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li>基础语法</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">while</span>(表达式/循环条件)&#123;<br>语句/循环体<br>&#125;<br>    <br><span class="hljs-keyword">do</span>&#123;<br>语句/循环体<br>&#125;<span class="hljs-keyword">while</span>(表达式/循环条件);<br></code></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main()&#123;<br><br><span class="hljs-comment">//1、求1+2+3+4 ...+100的和</span><br>   <span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">var</span> sum=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)&#123;<br>      sum+=i;<br>      i++;<br>   &#125;<br>   <span class="hljs-built_in">print</span>(sum);<br><br><br>   <span class="hljs-built_in">int</span> ii=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">var</span> sum2=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">do</span>&#123;<br>      sum2+=ii;<br>      ii++;<br>   &#125;<span class="hljs-keyword">while</span>(ii&lt;=<span class="hljs-number">100</span>);<br>   <span class="hljs-built_in">print</span>(sum2);<br><br>  <span class="hljs-comment">//while 和 do while的区别   第一次循环条件不成立的情况下do while执行一次</span><br>    <span class="hljs-built_in">int</span> iii=<span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span>(iii&lt;<span class="hljs-number">2</span>)&#123;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;执行代码&#x27;</span>);<span class="hljs-comment">//未执行</span><br>  &#125;<br><br>  <span class="hljs-keyword">var</span> jj=<span class="hljs-number">10</span>;  <br>  <span class="hljs-keyword">do</span>&#123;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;执行代码&#x27;</span>);<span class="hljs-comment">//执行</span><br>  &#125;<span class="hljs-keyword">while</span>(jj&lt;<span class="hljs-number">2</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h3><ul><li><strong>break语句功能:</strong></li></ul><p>​          1、在switch语句中使流程跳出switch结构。</p><p>​          2、在循环语句中使流程跳出当前循环,遇到break 循环终止，后面代码也不会执行</p><p>​          注意:</p><p>​          1、如果在循环中已经执行了break语句,就不会执行循环体中位于break后的语句。</p><p>​          2、在多层循环中,一个break语句只能向外跳出一层</p><p>​        <strong>break可以用在switch case中 也可以用在 for 循环和 while循环中</strong></p><ul><li><strong>continue语句的功能:</strong></li></ul><p>​          【注】只能在循环语句中使用,使本次循环结束，即跳过循环体重下面尚未执行的语句，接着进行下次的是否执行循环的判断。</p><p>​        <em>continue可以用在for循环以及 while循环中，但是不建议用在while循环中，不小心容易死循环</em></p><ul><li><p>示例</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs dart">main() &#123;<br><br>    <span class="hljs-comment">//1、如果i等于4的话跳过</span><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>       <span class="hljs-keyword">if</span>(i==<span class="hljs-number">4</span>)&#123;<br>         <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">/*跳过当前循环体 然后循环还会继续执行*/</span><br>       &#125;<br>       <span class="hljs-built_in">print</span>(i);<br>     &#125;<br>  <br><br><br>    <span class="hljs-comment">//2、如果 i等于4的话跳出循环</span><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>       <span class="hljs-keyword">if</span>(i==<span class="hljs-number">4</span>)&#123;<br>         <span class="hljs-keyword">break</span>;  <span class="hljs-comment">/*跳出循环体*/</span><br>       &#125;<br>       <span class="hljs-built_in">print</span>(i);<br>     &#125;<br>      <br><br>    <span class="hljs-comment">//3、break语句只能向外跳出一层</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;            <br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;外层---<span class="hljs-subst">$i</span>&#x27;</span>);<br>          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;            <br>            <span class="hljs-keyword">if</span>(j==<span class="hljs-number">1</span>)&#123;<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;里层<span class="hljs-subst">$j</span>&#x27;</span>);<br>          &#125;<br>  &#125;<br><br><br><br>  <span class="hljs-comment">//4、while循环 break跳出循环</span><br>  <span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">4</span>)&#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">print</span>(i);<br>    i++;<br>  &#125;<br><br> <span class="hljs-comment">//5. break跳出switch语句</span><br>   <span class="hljs-keyword">var</span> sex=<span class="hljs-string">&quot;男&quot;</span>;<br>   <span class="hljs-keyword">switch</span> (sex) &#123;<br>     <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;男&quot;</span>:<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;男&#x27;</span>);<br>       <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;女&quot;</span>:<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;男&#x27;</span>);<br>       <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">default</span>:<br>   &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">返回类型  方法名称（参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>,...）&#123;<br>  方法体<br>  <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> printInfo()&#123;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是一个自定义方法&#x27;</span>);<br>&#125;<br><br><span class="hljs-built_in">int</span> getNum()&#123;<br>  <span class="hljs-keyword">var</span> myNum=<span class="hljs-number">123</span>;<br>  <span class="hljs-keyword">return</span> myNum;<br>&#125;<br><br><span class="hljs-built_in">String</span> printUserInfo()&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;this is str&#x27;</span>;<br>&#125;<br><br><span class="hljs-built_in">List</span> getList()&#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;2222&#x27;</span>,<span class="hljs-string">&#x27;333&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">void</span> main()&#123;<br>   <span class="hljs-built_in">print</span>(printUserInfo());<span class="hljs-comment">//this is str</span><br><br><span class="hljs-comment">//演示方法的作用域:方法内部可以再定义方法,但作用域仅限外部方法</span><br>  <span class="hljs-keyword">void</span> xxx()&#123;<br>      aaa()&#123;<br><br>          <span class="hljs-built_in">print</span>(getList());<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>      &#125;<br>      aaa();<br>  &#125;<br><br>  <span class="hljs-comment">// aaa();  错误写法 </span><br>  xxx();  <span class="hljs-comment">//调用方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法传参"><a href="#方法传参" class="headerlink" title="方法传参"></a>方法传参</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs dart">main() &#123;<br><span class="hljs-comment">//1、定义一个方法 求1到这个数的所有数的和</span><br>  <span class="hljs-built_in">int</span> sumNum(<span class="hljs-built_in">int</span> n)&#123;<br>      <span class="hljs-keyword">var</span> sum=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        sum+=i;<br>      &#125;<br>      <span class="hljs-keyword">return</span> sum;<br>    &#125; <br><br>    <span class="hljs-keyword">var</span> n1=sumNum(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">print</span>(n1);<br><br><span class="hljs-comment">//2、定义一个带可选参数的方法 ，最新的dart定义可选参数需要指定类型默认值</span><br>   <span class="hljs-built_in">String</span> printUserInfo(<span class="hljs-built_in">String</span> username,[<span class="hljs-built_in">int</span> age=<span class="hljs-number">0</span>])&#123;  <span class="hljs-comment">//行参</span><br>     <span class="hljs-keyword">if</span>(age!=<span class="hljs-number">0</span>)&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:<span class="hljs-subst">$username</span>---年龄:<span class="hljs-subst">$age</span>&quot;</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:<span class="hljs-subst">$username</span>---年龄保密&quot;</span>;<br>   &#125;<br>   <span class="hljs-built_in">print</span>(printUserInfo(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">21</span>)); <span class="hljs-comment">//实参</span><br>   <span class="hljs-built_in">print</span>(printUserInfo(<span class="hljs-string">&#x27;张三&#x27;</span>));<br><br><span class="hljs-comment">//3、定义一个带默认参数的方法</span><br>   <span class="hljs-built_in">String</span> printUserInfo(<span class="hljs-built_in">String</span> username,[<span class="hljs-built_in">String</span> sex=<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-built_in">int</span> age=<span class="hljs-number">0</span>])&#123;  <span class="hljs-comment">//行参</span><br>     <span class="hljs-keyword">if</span>(age!=<span class="hljs-number">0</span>)&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:<span class="hljs-subst">$username</span>---性别:<span class="hljs-subst">$sex</span>--年龄:<span class="hljs-subst">$age</span>&quot;</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:<span class="hljs-subst">$username</span>---性别:<span class="hljs-subst">$sex</span>--年龄保密&quot;</span>;<br>   &#125;<br>   <span class="hljs-built_in">print</span>(printUserInfo(<span class="hljs-string">&#x27;张三&#x27;</span>));<br>   <span class="hljs-built_in">print</span>(printUserInfo(<span class="hljs-string">&#x27;小李&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>));<br>   <span class="hljs-built_in">print</span>(printUserInfo(<span class="hljs-string">&#x27;小李&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">30</span>));<br><br><span class="hljs-comment">//5、定义一个命名参数的方法，最新的dart定义命名参数需要指定类型默认值</span><br><br>  <span class="hljs-comment">// String printUserInfo(String username, &#123;int age = 0, String sex = &#x27;男&#x27;&#125;) &#123;//行参    </span><br>  <span class="hljs-comment">//   if (age != 0) &#123;</span><br>  <span class="hljs-comment">//     return &quot;姓名:$username---性别:$sex--年龄:$age&quot;;</span><br>  <span class="hljs-comment">//   &#125;</span><br>  <span class="hljs-comment">//   return &quot;姓名:$username---性别:$sex--年龄保密&quot;;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// print(printUserInfo(&#x27;张三&#x27;, age: 20, sex: &#x27;未知&#x27;));</span><br><br><br><span class="hljs-comment">//6、实现一个 把方法当做参数的方法</span><br><br>  <span class="hljs-comment">// var fn=()&#123;</span><br>  <span class="hljs-comment">//   print(&#x27;我是一个匿名方法&#x27;);</span><br>  <span class="hljs-comment">// &#125;;</span><br>  <span class="hljs-comment">// fn();</span><br><br><br>  <span class="hljs-comment">//fn1方法</span><br>  fn1() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fn1&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">//fn2方法</span><br>  fn2(fn) &#123;<br>    fn();<br>  &#125;<br>  <span class="hljs-comment">//调用fn2这个方法 把fn1这个方法当做参数传入</span><br>  fn2(fn1);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><blockquote><p>箭头函数内只能写一条语句，并且语句后面没有分号</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>   <span class="hljs-built_in">List</span> list=[<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;香蕉&#x27;</span>,<span class="hljs-string">&#x27;西瓜&#x27;</span>];<br>   list.forEach((value)=&gt;<span class="hljs-built_in">print</span>(value));<br><br>  <span class="hljs-comment">//注意和方法的区别: 箭头函数内只能写一条语句，并且语句后面没有分号(;)</span><br>   list.forEach((value)=&gt;&#123;<br>     <span class="hljs-built_in">print</span>(value)<br>   &#125;);<br><br><span class="hljs-comment">/*需求：修改下面List里面的数据，让数组中大于2的值乘以2*/</span><br>   <span class="hljs-built_in">List</span> list=[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>   <span class="hljs-keyword">var</span> newList=list.map((value)=&gt;value&gt;<span class="hljs-number">2</span>?value*<span class="hljs-number">2</span>:value);<br>   <span class="hljs-built_in">print</span>(newList.toList());<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="匿名方法-自执行方法-递归"><a href="#匿名方法-自执行方法-递归" class="headerlink" title="匿名方法&amp;自执行方法&amp;递归"></a>匿名方法&amp;自执行方法&amp;递归</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-comment">//匿名方法</span><br>   <span class="hljs-keyword">var</span> printNum=()&#123;<br>     <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>);<br>   &#125;;<br>   printNum();<br><br>   <span class="hljs-keyword">var</span> printNum=(<span class="hljs-built_in">int</span> n)&#123;<br>     <span class="hljs-built_in">print</span>(n+<span class="hljs-number">2</span>);<br>   &#125;;<br>   printNum(<span class="hljs-number">12</span>);<br><br><span class="hljs-comment">//自执行方法</span><br>  ((<span class="hljs-built_in">int</span> n)&#123;<br>    <span class="hljs-built_in">print</span>(n);<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是自执行方法&#x27;</span>);<br>  &#125;)(<span class="hljs-number">12</span>);<br><br><span class="hljs-comment">//通过方法的递归 求1-100的和</span><br>  <span class="hljs-keyword">var</span> sum=<span class="hljs-number">0</span>;<br>  fn(<span class="hljs-built_in">int</span> n)&#123;<br>      sum+=n;<br>      <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      fn(n<span class="hljs-number">-1</span>);<br>  &#125;<br><br>  fn(<span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">print</span>(sum);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>1、全局变量特点:    全局变量常驻内存、全局变量污染全局<br> 2、局部变量的特点：  不常驻内存会被垃圾机制回收、不会污染全局</p><p>想实现的功能：<br>   1.常驻内存<br>   2.不污染全局</p><p>闭包可以解决这个问题.</p></blockquote><p><strong>闭包</strong>: 函数嵌套函数, 内部函数会调用外部函数的变量或参数, <strong>实现变量或参数不会被系统回收</strong>(不会释放内存)</p><p><strong>闭包的写法</strong>： 函数嵌套函数，并<code>return</code> 里面的函数，这样就形成了闭包。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/*全局变量*/</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  fn()&#123;<br>    a++;<br>    <span class="hljs-built_in">print</span>(a);<br>  &#125;<br>  fn();<span class="hljs-comment">//124</span><br>  fn();<span class="hljs-comment">//125</span><br>  fn();<span class="hljs-comment">//126</span><br><br><br><span class="hljs-comment">//闭包</span><br>  fn1() &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">/*不会污染全局   常驻内存*/</span><br>    <span class="hljs-keyword">return</span> () &#123;<span class="hljs-comment">//返回一个匿名函数</span><br>      a++;<br>      <span class="hljs-built_in">print</span>(a);<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> b = fn1();<br>  b();<span class="hljs-comment">//124</span><br>  b();<span class="hljs-comment">//125</span><br>  b();<span class="hljs-comment">//126</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象编程(OOP)的三个基本特征是：封装、继承、多态      </p><ul><li>封装：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象调用, 而一部分属性和方法则隐藏。               </li><li>继承：面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。       </li><li>多态：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果 。</li></ul><p>Dart所有的东西都是对象，所有的对象都继承自Object类。</p><p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是Object的子类</p><p>一个类通常由属性和方法组成。</p>]]></content>
      
      
      <categories>
          
          <category> dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins</title>
      <link href="/2024/04/19/jenkins_%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"/>
      <url>/2024/04/19/jenkins_%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p><code>Jenkins</code>，之前叫做<code>Hudson</code>，由SUN公司启动，2010年<code>oracle</code>收购<code>SUN</code>导致<code>hudson</code>商标归<code>oracle</code>保留，<code>hudson</code>的主要贡献者基于hudson更名为<code>jenkins</code>并持续更新。很长一段时间内<code>Jenkins</code>和<code>Hudson</code>继续作为两个独立的项目，每个都认为对方是自己的分支。目前Hudson已经停止开发，最新的版本发布于2016年，而Jenkins的社区和开发却异常活跃。<strong>Jenkins是目前市场上使用最多的CI&#x2F;CD工具。</strong></p><p><strong><code>Jenkins</code>是基于Java开发的一种持续集成工具。</strong></p><p><code>Jenkins</code>作为持续集成工具，<strong>持续集成是其核心功能</strong>，在核心功能基础之上可扩展实现强大的CD功能。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h2><ul><li>开源免费</li><li>易于安装（基本上算是所有CI工具里安装配置最简单的）</li><li>多平台支持（windows&#x2F;linux&#x2F;macos）</li><li>主从分布式架构</li><li>提供web可视化配置管理页面</li><li>安装配置简单</li><li>插件资源丰富</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h2><ul><li>集成svn&#x2F;git客户端实现源代码下载检出</li><li>集成maven&#x2F;ant&#x2F;gradle&#x2F;npm等构建工具实现源码编译打包单元测试</li><li>集成sonarqube对源代码进行质量检查（坏味道、复杂度、新增bug等）</li><li>集成SaltStack&#x2F;Ansible实现自动化部署发布</li><li>集成Jmeter&#x2F;Soar&#x2F;Kubernetes&#x2F;…..</li><li>可以自定义插件或者脚本通过jenkins传参运行</li><li>可以说Jenkins比较灵活插件资源丰富，日常运维工作都可以自动化</li></ul><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a><strong>版本</strong></h2><ul><li><code>Jenkins 1.x</code>：不支持<code>pipeline</code></li><li><code>Jenkins 2.x</code>：支持<code>pipeline</code>（主流）</li><li><code>Jenkins X</code>：基于<code>k8s</code>的持续集成（趋势）</li></ul><h2 id="主从集群"><a href="#主从集群" class="headerlink" title="主从集群"></a><strong>主从集群</strong></h2><p><code>jenkins</code>支持主从模式，这将会把构建任务分发到多个从节点去执行，这样就可以支撑起多个项目的大量构建任务，提升构建效率。</p><p>同时，你可以提供多种环境（如：开发环境、生产环境）来对同一个项目进行测试和构建。</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a><strong>部署方式</strong></h2><ol><li><strong>服务器直接运行<code>war</code></strong>(更符合我们的启动习惯)</li><li>服务器通过 <code>yum</code>命令下载<code>jenkins</code>安装包进行安装运行</li><li><code>docker</code>容器运行</li></ol><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><h2 id="2-1环境说明"><a href="#2-1环境说明" class="headerlink" title="2.1环境说明"></a>2.1<strong>环境说明</strong></h2><ul><li>centos7</li><li>jdk1.8</li><li>maven3.6.1</li><li>git1.8.3</li><li>jenkins2.241</li><li>Master主机 : 假设主机名叫 jenkins-master</li><li>Slave从机 ： 假设主机名叫 jenkins-slave1</li></ul><h2 id="2-2安装Master"><a href="#2-2安装Master" class="headerlink" title="2.2安装Master"></a>2.2安装Master</h2><blockquote><p>登录master服务器</p><p>root用户执行命令</p></blockquote><h3 id="2-2-1安装DK"><a href="#2-2-1安装DK" class="headerlink" title="2.2.1安装DK"></a>2.2.1安装DK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master ~]# yum install java-1.8.0-openjdk-devel.x86_64 -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看java 安装路径</span><br>[root@jenkins-master ~]# ls -lrt /etc/alternatives/java<br>lrwxrwxrwx. 1 root root 73 9月 24 10:21 /etc/alternatives/java -&gt;<br>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el7_9.x86_64/jre/bin/java<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证是否安装成功</span><br>[root@jenkins-master ~]# java -version<br>openjdk version &quot;1.8.0_302&quot;<br>OpenJDK Runtime Environment (build 1.8.0_302-b08)<br>OpenJDK 64-Bit Server VM (build 25.302-b08, mixed mode)<br><br>[root@jenkins-master ~]# javac -version<br>javac 1.8.0_302<br></code></pre></td></tr></table></figure><h3 id="2-2-2安装git"><a href="#2-2-2安装git" class="headerlink" title="2.2.2安装git"></a>2.2.2安装git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master ~]# yum install -y git<br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证是否安装成功</span><br>[root@jenkins-master ~]# git --version<br>git version 1.8.3.1<br></code></pre></td></tr></table></figure><h3 id="2-2-3安装sshpass"><a href="#2-2-3安装sshpass" class="headerlink" title="2.2.3安装sshpass"></a>2.2.3<strong>安装sshpass</strong></h3><blockquote><p>远程连接工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master ~]# yum install sshpass -y<br></code></pre></td></tr></table></figure><h3 id="2-2-4安装wget"><a href="#2-2-4安装wget" class="headerlink" title="2.2.4安装wget"></a>2.2.4<strong>安装wget</strong></h3><blockquote><p>下载工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master ~]# yum install wget -y<br></code></pre></td></tr></table></figure><h3 id="2-2-5安装axel"><a href="#2-2-5安装axel" class="headerlink" title="2.2.5安装axel"></a>2.2.5<strong>安装axel</strong></h3><blockquote><p>多线程下载工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master ~]# wget http://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/a/axel-2.4-9.el7.x86_64.rpm<br><br>[root@jenkins-master opt]# rpm -ivh axel-2.4-9.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="2-2-6创建jenkins用户"><a href="#2-2-6创建jenkins用户" class="headerlink" title="2.2.6创建jenkins用户"></a>2.2.6<strong>创建jenkins用户</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master opt]# useradd jenkins --home-dir /home/jenkins --shell /bin/bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置密码为12345678</span><br>[root@jenkins-master opt]# passwd jenkins<br></code></pre></td></tr></table></figure><h3 id="2-2-7下载安装maven"><a href="#2-2-7下载安装maven" class="headerlink" title="2.2.7下载安装maven"></a>2.2.7<strong>下载安装maven</strong></h3><p> <strong>下载解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果下载报错可用wget</span><br>[root@jenkins-master opt]# axel -n 20 https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz<br>[root@jenkins-master opt]# tar zxvf apache-maven-3.6.1-bin.tar.gz<br>[root@jenkins-master ~]# vi /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">maven环境配置</span><br>export MAVEN_HOME=/opt/apache-maven-3.6.1<br>export PATH=$MAVEN_HOME/bin:$PATH<br>[root@jenkins-master ~]# source /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证maven安装成功</span><br>[root@jenkins-master ~]# mvn -v<br></code></pre></td></tr></table></figure><p><strong>配置镜像加速</strong></p><blockquote><p>maven下的 conf&#x2F;settings.xml 找到<mirrors>和</mirrors>标签，在其中添加如下内容(镜像加速)：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-8安装rsync"><a href="#2-2-8安装rsync" class="headerlink" title="2.2.8安装rsync"></a>2.2.8<strong>安装rsync</strong></h3><blockquote><p>跨机器文件同步工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master opt]# yum install rsync -y<br></code></pre></td></tr></table></figure><h3 id="2-2-9关闭防火墙"><a href="#2-2-9关闭防火墙" class="headerlink" title="2.2.9关闭防火墙"></a>2.2.9<strong>关闭防火墙</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jenkins-master ~]# systemctl stop firewalld<br>[root@jenkins-master ~]# systemctl disable firewalld<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br></code></pre></td></tr></table></figure><h3 id="2-2-10安装Jenkins"><a href="#2-2-10安装Jenkins" class="headerlink" title="2.2.10安装Jenkins"></a>2.2.10<strong>安装Jenkins</strong></h3><h4 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a><strong>创建安装目录</strong></h4><blockquote><p>进入该目录后下载jenkins</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建jenkins安装目录</span><br>[root@jenkins-master ~]# mkdir /opt/jenkins<br><span class="hljs-meta prompt_"># </span><span class="language-bash">该目录为jenkins用户授权</span><br>[root@jenkins-master ~]# chown -R jenkins:jenkins /opt/jenkins<br></code></pre></td></tr></table></figure><h4 id="下载Jenkins"><a href="#下载Jenkins" class="headerlink" title="下载Jenkins"></a><strong>下载Jenkins</strong></h4><blockquote><p>下载jenkins安装包，war索引页：<a href="http://mirrors.jenkins-ci.org/war/">http://mirrors.jenkins-ci.org/war/</a></p></blockquote><ul><li>最新版本安装下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载最新版 或指定版本https://mirrors.jenkins-ci.org/war/2.346/jenkins.war</span><br>[root@jenkins-master jenkins]# axel -n 20 https://mirrors.jenkins-ci.org/war/latest/jenkins.war<br><br></code></pre></td></tr></table></figure><ul><li>指定版本下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">指定版本</span><br>[root@jenkins-master jenkins]# axel -n 20 https://mirrors.jenkins-ci.org/war/2.288/jenkins.war<br></code></pre></td></tr></table></figure><h4 id="编辑启动脚本"><a href="#编辑启动脚本" class="headerlink" title="编辑启动脚本"></a><strong>编辑启动脚本</strong></h4><blockquote><p>登录jenkins用户后创建启动脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">切换到jenkins用户下</span><br>[root@jenkins-master jenkins]# su jenkins<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建jenkins启动脚本</span><br>[jenkins@jenkins-master jenkins]$ vi jenkins.sh<br></code></pre></td></tr></table></figure><p><strong>脚本具体内容如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>args=<span class="hljs-variable">$1</span><br><span class="hljs-comment">#注意修改jenkinswar包的目录</span><br>jenkins_war_path=<span class="hljs-string">&quot;/opt/jenkins&quot;</span><br><span class="hljs-comment">#jenkins开放端口</span><br>jenkins_http_port=<span class="hljs-string">&quot;8888&quot;</span><br><span class="hljs-comment">#java安装路径</span><br>java_home=<span class="hljs-string">&quot;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el7_9.x86_64&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">isRuning</span></span>() &#123;<br><span class="hljs-built_in">local</span> jenkinsPID=$(ps -ef | grep jenkins.war | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$&#123;jenkinsPID&#125;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;jenkinsPID&#125;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#停止jenkins</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">stop</span></span>() &#123;<br><span class="hljs-built_in">local</span> runFlag=$(isRuning)<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;runFlag&#125;</span> -eq <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Jenkins is already stoped.&quot;</span><br><span class="hljs-keyword">else</span><br>$(<span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$&#123;runFlag&#125;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stop jenkins sucess.&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#启动jenkins</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">start</span></span>() &#123;<br><span class="hljs-built_in">local</span> runFlag=$(isRuning)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;runFlag&#125;</span>&quot;</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;runFlag&#125;</span> -eq <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br>$(<br><span class="hljs-variable">$&#123;java_home&#125;</span>/bin/java -jar <span class="hljs-variable">$&#123;jenkins_war_path&#125;</span>/jenkins.war --<br>httpPort=<span class="hljs-variable">$&#123;jenkins_http_port&#125;</span> &amp;<br>) &gt;/dev/null<br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start jenkins success.&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start jenkins fail.&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Jenkins is running now.&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-comment">#重启jenkins</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">restart</span></span>() &#123;<br><span class="hljs-built_in">local</span> runFlag=$(isRuning)<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;runFlag&#125;</span> -eq <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Jenkins is already stoped.&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">else</span><br>stop<br>start<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Restart jenkins success.&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-comment">#根据输入的参数执行不同的动作</span><br><span class="hljs-comment">#参数不能为空</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$&#123;args&#125;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Arg can not be null.&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-comment">#参数个数必须为1个</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$#</span> -ne 1 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Only one arg is required:start|stop|restart&quot;</span><br><span class="hljs-comment">#参数为start时启动jenkins</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$&#123;args&#125;</span> = <span class="hljs-string">&quot;start&quot;</span> ]; <span class="hljs-keyword">then</span><br>start<br><span class="hljs-comment">#参数为stop时停止jenkins</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$&#123;args&#125;</span> = <span class="hljs-string">&quot;stop&quot;</span> ]; <span class="hljs-keyword">then</span><br>stop<br><span class="hljs-comment">#参数为restart时重启jenkins</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$&#123;args&#125;</span> = <span class="hljs-string">&quot;restart&quot;</span> ]; <span class="hljs-keyword">then</span><br>restart<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;One of following args is required: start|stop|restart&quot;</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看java 安装路径</span><br>[root@jenkins-master ~]# ls -lrt /etc/alternatives/java<br>lrwxrwxrwx. 1 root root 73 9月 24 10:21 /etc/alternatives/java -&gt;<br>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el7_9.x86_64/jre/bin/java<br></code></pre></td></tr></table></figure><h3 id="2-2-11启动jenkins"><a href="#2-2-11启动jenkins" class="headerlink" title="2.2.11启动jenkins"></a>2.2.11<strong>启动jenkins</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[jenkins@jenkins-master jenkins]$ sh jenkins.sh start<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404191003220.png" alt="image-20240419100345043"></p><p>访问地址: IP:8888</p><h1 id="3-使用及配置"><a href="#3-使用及配置" class="headerlink" title="3.使用及配置"></a>3.使用及配置</h1><h2 id="3-1获取并修改管理员密码"><a href="#3-1获取并修改管理员密码" class="headerlink" title="3.1获取并修改管理员密码"></a>3.1获取并修改管理员密码</h2><p>登录后需要输入解锁密码才能够继续访问jenkins</p><p>启动日志中会打印管理员密码</p><p>也可通过如下命令可以从jenkins安装目录中获取管理员密码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[jenkins@jenkins-master .jenkins]$ cat/home/jenkins/.jenkins/secrets/initialAdminPassword<br>b3c14cb5c6844201bc0ad01e4dfbf2d2<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404191014695.png" alt="image-20240419101438632"></p><p><strong>登入后跳过插件安装,就进入了欢迎界面,点击开始使用就会来到jenkins的主页面</strong></p><p><strong>修改管理员密码为123456，具体操作为点击页面左上角<code>jenkins</code>-&gt;<code>people</code>-&gt;<code>admin</code>-&gt;<code>configure</code>进行修改</strong></p><h2 id="3-2-镜像加速"><a href="#3-2-镜像加速" class="headerlink" title="3.2 镜像加速"></a>3.2 <strong>镜像加速</strong></h2><blockquote><p>jenkins默认镜像地址：<a href="https://updates.jenkins.io/update-center.json">https://updates.jenkins.io/update-center.json</a></p><p>常见的jenkins镜像地址有以下地址</p><p>清华大学 <a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p>华为 <a href="https://mirrors.huaweicloud.com/jenkins/updates/update-center.json">https://mirrors.huaweicloud.com/jenkins/updates/update-center.json</a></p><p>xmission <a href="http://mirror.xmission.com/jenkins/updates/update-center.json">http://mirror.xmission.com/jenkins/updates/update-center.json</a></p></blockquote><ul><li>方式一</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[jenkins@jenkins-master .jenkins]$ vi /home/jenkins/.jenkins/hudson.model.UpdateCenter.xml<br></code></pre></td></tr></table></figure><p>将XML内的url的值替换为：<a href="http://mirror.xmission.com/jenkins/updates/update-center.json">http://mirror.xmission.com/jenkins/updates/update-center.json</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sites</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">site</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://mirror.xmission.com/jenkins/updates/update-center.json<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">site</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sites</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>方式二</li></ul><blockquote><p>进入到web-ui界面的<code>Manage Plugins</code>-&gt;<code>Advanced</code> -&gt; <code>Update Site</code>进行修改</p></blockquote><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404191011232.png" alt="image-20240419101137152"></p><h2 id="3-3安装插件"><a href="#3-3安装插件" class="headerlink" title="3.3安装插件"></a>3.3<strong>安装插件</strong></h2><blockquote><p>jenkins运行需要安装很多插件，下面我们介绍下如何安装插件，下面我们以 Role-based Authorization Strategy 插件为例介绍下如何安装插件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.io 包下的类</title>
      <link href="/2024/04/09/IO%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
      <url>/2024/04/09/IO%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IO-介绍"><a href="#1-IO-介绍" class="headerlink" title="1.IO 介绍"></a>1.<code>IO</code> 介绍</h1><p><code>IO</code> 是 <code>Input/Output</code> 的缩写，它是基于流模型实现的，比如操作文件时使用输入流和输出流来写入和读取文件等。</p><h2 id="IO-分类"><a href="#IO-分类" class="headerlink" title="IO 分类"></a><code>IO</code> 分类</h2><p>传统的 IO(BIO)，按照流类型我们可以分为：</p><ul><li>字符流</li><li>字节流</li></ul><p>其中，字符流包括 <code>Reader</code>、<code>Writer</code>；字节流包括 <code>InputStream</code>、<code>OutputStream</code>。<br>传统 IO 的类关系图，如下图所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404091402865.png" alt=" IO 的类关系图"></p><h1 id="2-IO-使用"><a href="#2-IO-使用" class="headerlink" title="2.IO 使用"></a>2.IO 使用</h1><h2 id="①-字符流-Writer-使用"><a href="#①-字符流-Writer-使用" class="headerlink" title="① 字符流 Writer 使用"></a>① 字符流 <code>Writer</code> 使用</h2><p>Writer 可用来写入文件，请参考以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 给指定目录下的文件追加信息</span><br><span class="hljs-type">Writer</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;d:\\io.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>writer.append(<span class="hljs-string">&quot;老王&quot;</span>);<br>writer.close();<br></code></pre></td></tr></table></figure><p>这几行简单的代码就可以实现把信息 <code>老王</code> 追加到 <code>d:\\io.txt</code> 的文件下，参数二表示的是覆盖文字还是追加文字。</p><h2 id="②-字符流Reader-使用"><a href="#②-字符流Reader-使用" class="headerlink" title="② 字符流Reader 使用"></a>② 字符流<code>Reader</code> 使用</h2><p>Reader 可用来读取文件，请参考以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;d:\\io.txt&quot;</span>);<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 逐行读取信息</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">null</span> != (str = bufferedReader.readLine())) &#123;<br>    System.out.println(str);<br>&#125;<br>bufferedReader.close();<br>reader.close();<br></code></pre></td></tr></table></figure><h2 id="③-字节流-InputStream-使用"><a href="#③-字节流-InputStream-使用" class="headerlink" title="③ 字节流 InputStream 使用"></a>③ 字节流 <code>InputStream</code> 使用</h2><p><code>InputStream</code> 可用来读取文件，请参考以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\io.txt&quot;</span>));<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[inputStream.available()];<br><span class="hljs-comment">// 读取到 byte 数组</span><br>inputStream.read(bytes);<br><span class="hljs-comment">// 内容转换为字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>inputStream.close();<br></code></pre></td></tr></table></figure><h2 id="④-字节流-OutputStream-使用"><a href="#④-字节流-OutputStream-使用" class="headerlink" title="④ 字节流 OutputStream 使用"></a>④ 字节流 <code>OutputStream</code> 使用</h2><p>OutputStream 可用来写入文件，请参考以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\io.txt&quot;</span>),<span class="hljs-literal">true</span>);<br>outputStream.write(<span class="hljs-string">&quot;老王&quot;</span>.getBytes());<br>outputStream.close();<br></code></pre></td></tr></table></figure><h1 id="3-NIO-介绍"><a href="#3-NIO-介绍" class="headerlink" title="3.NIO 介绍"></a>3.<code>NIO</code> 介绍</h1><p>上面讲的内容都是 java.io 包下的知识点，但随着 Java 的不断发展，在 <code>Java 1.4</code> 时新的 <code>IO</code> 包出现了 <code>java.nio</code>，<code>NIO（Non-Blocking IO）</code>的出现解决了传统 <code>IO</code>，也就是我们经常说的 <code>BIO（Blocking IO）</code>同步阻塞的问题，<code>NIO</code> 提供了 <code>Channel</code>、<code>Selector</code> 和 <code>Buffer</code> 等概念，可以实现多路复用和同步非阻塞 <code>IO</code> 操作，从而大大提升了 <code>IO</code> 操作的性能。<br>前面提到同步和阻塞的问题，那下面来看看同步和阻塞结合都有哪些含义。</p><table><thead><tr><th align="center">组合方式</th><th align="left">性能分析</th></tr></thead><tbody><tr><td align="center">同步阻塞</td><td align="left">最常用的一种用法，使用也是最简单的，但是 <strong><code>I/O</code> 性能一般很差，<code>CPU</code> 大部分在空闲状态</strong></td></tr><tr><td align="center">同步非阻塞</td><td align="left">提升 <code>I/O</code> 性能的常用手段，就是将 <code>I/O</code> 的阻塞改成非阻塞方式，尤其在网络 <code>I/O</code> 是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 <code>I/O</code> 性能，但是会增加 <code>CPU</code> 消耗，要考虑增加的 <code>I/O</code> 性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 <code>I/O</code> 还是在 <code>CPU</code> 上</td></tr><tr><td align="center">异步阻塞</td><td align="left">这种方式在分布式数据库中经常用到。例如，在往一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，而还有两至三份是备份记录会写到其他机器上，这些备份记录通常都是采用异步阻塞的方式写 <code>I/O</code>；异步阻塞对网络 <code>I/O</code> 能够提升效率，尤其像上面这种同时写多份相同数据的情况</td></tr><tr><td align="center">异步非阻塞</td><td align="left">这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I&#x2F;O 组合方式。例如，<code>Cassandra</code> 的 <code>Gossip</code> 通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 <code>I/O</code> 用这个方式性能能达到最高</td></tr></tbody></table><p>了解了同步和阻塞的含义，下面来看 <strong>NIO 的具体使用</strong>，请参考以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">6666</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>             <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">serverSocketChannel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();) &#123;<br>            serverSocketChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(InetAddress.getLocalHost(), port));<br>            serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                selector.select(); <span class="hljs-comment">// 阻塞等待就绪的 Channel</span><br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                    <span class="hljs-keyword">try</span> (<span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> ((ServerSocketChannel) key.channel()).accept()) &#123;<br>                        channel.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;老王，你好~&quot;</span>));<br>                    &#125;<br>                    iterator.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Socket 客户端 1（接收信息并打印）</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">cSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), port)) &#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(cSocket.getInputStream()));<br>            bufferedReader.lines().forEach(s -&gt; System.out.println(<span class="hljs-string">&quot;客户端 1 打印：&quot;</span> + s));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Socket 客户端 2（接收信息并打印）</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">cSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), port)) &#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(cSocket.getInputStream()));<br>            bufferedReader.lines().forEach(s -&gt; System.out.println(<span class="hljs-string">&quot;客户端 2 打印：&quot;</span> + s));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><p>以上代码创建了两个 Socket 客户端，用于收取和打印服务器端的消息。<br>其中，服务器端通过 <code>SelectionKey</code>（选择键）获取到 <code>SocketChannel</code>（通道），而通道都注册到 <code>Selector</code>（选择器）上，所有的客户端都可以获得对应的通道，而不是所有客户端都排队堵塞等待一个服务器连接，这样就实现多路复用的效果了。</p><p><strong>多路指的是多个通道（<code>SocketChannel</code>），而复用指的是一个服务器端连接重复被不同的客户端使用。</strong></p><h1 id="4-AIO-介绍"><a href="#4-AIO-介绍" class="headerlink" title="4.AIO 介绍"></a>4.AIO 介绍</h1><p>AIO（Asynchronous IO）是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。<br>AIO 实现简单的 Socket 服务器，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8888</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AsynchronousChannelGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            group = AsynchronousChannelGroup.withThreadPool(Executors.newFixedThreadPool(<span class="hljs-number">4</span>));<br>            <span class="hljs-type">AsynchronousServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> AsynchronousServerSocketChannel.open(group).bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(InetAddress.getLocalHost(), port));<br>            server.accept(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, AsynchronousServerSocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment)</span> &#123;<br>                    server.accept(<span class="hljs-literal">null</span>, <span class="hljs-built_in">this</span>); <span class="hljs-comment">// 接收下一个请求</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Future&lt;Integer&gt; f = result.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;Hi, 老王&quot;</span>));<br>                        f.get();<br>                        System.out.println(<span class="hljs-string">&quot;服务端发送时间：&quot;</span> + DateFormat.getDateTimeInstance().format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>                        result.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException | IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, AsynchronousServerSocketChannel attachment)</span> &#123;<br>                &#125;<br>            &#125;);<br>            group.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;).start();<br><br><span class="hljs-comment">// Socket 客户端</span><br><span class="hljs-type">AsynchronousSocketChannel</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> AsynchronousSocketChannel.open();<br>Future&lt;Void&gt; future = client.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(InetAddress.getLocalHost(), port));<br>future.get();<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">100</span>);<br>client.read(buffer, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, Void&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, Void attachment)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端打印：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer.array()));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, Void attachment)</span> &#123;<br>        exc.printStackTrace();<br>        <span class="hljs-keyword">try</span> &#123;<br>            client.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;);<br>Thread.sleep(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h1 id="5-相关面试题"><a href="#5-相关面试题" class="headerlink" title="5.相关面试题"></a>5.相关面试题</h1><h2 id="1-使用以下哪个方法来判断一个文件是否存在？"><a href="#1-使用以下哪个方法来判断一个文件是否存在？" class="headerlink" title="1.使用以下哪个方法来判断一个文件是否存在？"></a>1.使用以下哪个方法来判断一个文件是否存在？</h2><p>A：createFile<br>B：exists<br>C：read<br>D：exist</p><p>答：B</p><h2 id="2-以下说法错误的是？"><a href="#2-以下说法错误的是？" class="headerlink" title="2.以下说法错误的是？"></a>2.以下说法错误的是？</h2><p>A：同步操作不一定会阻塞<br>B：异步操作不一定会阻塞<br>C：阻塞一定是同步操作<br>D：同步或异步都可能会阻塞</p><p>答：C</p><p>题目解析：异步操作也可能会阻塞，比如分布式集群消息同步，采用的就是异步阻塞的方式。</p><h2 id="3-BIO、NIO、AIO-的区别是什么？"><a href="#3-BIO、NIO、AIO-的区别是什么？" class="headerlink" title="3.BIO、NIO、AIO 的区别是什么？"></a>3.BIO、NIO、AIO 的区别是什么？</h2><p>答：它们三者的区别如下。</p><ul><li>BIO 就是传统的 java.io 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。</li><li>NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。</li><li>AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，因此人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</li></ul><p>简单来说 BIO 就是传统 IO 包，产生的最早；NIO 是对 BIO 的改进提供了多路复用的同步非阻塞 IO，而 AIO 是 NIO 的升级，提供了异步非阻塞 IO。</p><h2 id="4-读取和写入文件最简洁的方式是什么？"><a href="#4-读取和写入文件最简洁的方式是什么？" class="headerlink" title="4.读取和写入文件最简洁的方式是什么？"></a>4.读取和写入文件最简洁的方式是什么？</h2><p>答：使用 Java 7 提供的 Files 读取和写入文件是最简洁，请参考以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 读取文件</span><br><span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;d:\\io.txt&quot;</span>));<br><span class="hljs-comment">// 写入文件</span><br>Files.write(Paths.get(<span class="hljs-string">&quot;d:\\io.txt&quot;</span>), <span class="hljs-string">&quot;追加内容&quot;</span>.getBytes(), StandardOpenOption.APPEND);<br></code></pre></td></tr></table></figure><p>读取和写入都是一行代码搞定，可以说很简洁了。</p><h2 id="5-Files-常用方法都有哪些？"><a href="#5-Files-常用方法都有哪些？" class="headerlink" title="5.Files 常用方法都有哪些？"></a>5.Files 常用方法都有哪些？</h2><p>答：Files 是 Java 1.7 提供的，使得文件和文件夹的操作更加方便，它的常用方法有以下几个：</p><ul><li>Files. exists()：检测文件路径是否存在</li><li>Files. createFile()：创建文件</li><li>Files. createDirectory()：创建文件夹</li><li>Files. delete()：删除一个文件或目录</li><li>Files. copy()：复制文件</li><li>Files. move()：移动文件</li><li>Files. size()：查看文件个数</li><li>Files. read()：读取文件</li><li>Files. write()：写入文件</li></ul><h2 id="6-FileInputStream-可以实现什么功能？"><a href="#6-FileInputStream-可以实现什么功能？" class="headerlink" title="6.FileInputStream 可以实现什么功能？"></a>6.FileInputStream 可以实现什么功能？</h2><p>答：FileInputStream 可以实现文件的读取。</p><p>题目解析：因为 FileInputStream 和 FileOutputStream 很容易被记反，FileOutputStream 才是用来写入文件的，所以也经常被面试官问到。</p><h2 id="7-不定项选择：为了提高读写性能，可以采用什么流？"><a href="#7-不定项选择：为了提高读写性能，可以采用什么流？" class="headerlink" title="7.不定项选择：为了提高读写性能，可以采用什么流？"></a>7.不定项选择：为了提高读写性能，可以采用什么流？</h2><p> A：InputStream<br> B：DataInputStream<br> C：BufferedReader<br> D：BufferedInputStream<br> E：OutputStream<br> F：BufferedOutputStream</p><p>答：D、F</p><p>题目解析：BufferedInputStream 是一种带缓存区的输入流，在读取字节数据时可以从底层流中一次性读取多个字节到缓存区，而不必每次都调用系统底层；同理，BufferedOutputStream 也是一种带缓冲区的输出流，通过缓冲区输出流，应用程序先把字节写入缓冲区，缓存区满后再调用操作系统底层，从而提高系统性能，而不必每次都去调用系统底层方法。</p><h2 id="8-FileInputStream-和-BufferedInputStream-的区别是什么？"><a href="#8-FileInputStream-和-BufferedInputStream-的区别是什么？" class="headerlink" title="8.FileInputStream 和 BufferedInputStream 的区别是什么？"></a>8.FileInputStream 和 BufferedInputStream 的区别是什么？</h2><p>答：FileInputStream 在小文件读写时性能较好，而在大文件操作时使用 BufferedInputStream 更有优势。</p><h2 id="9-以下这段代码运行在-Windwos-平台，执行的结果是？"><a href="#9-以下这段代码运行在-Windwos-平台，执行的结果是？" class="headerlink" title="9.以下这段代码运行在 Windwos 平台，执行的结果是？"></a>9.以下这段代码运行在 Windwos 平台，执行的结果是？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Files.createFile(Paths.get(<span class="hljs-string">&quot;c:\\pf.txt&quot;</span>), PosixFilePermissions.asFileAttribute(<br>    EnumSet.of(PosixFilePermission.OWNER_READ)));<br></code></pre></td></tr></table></figure><p>A：在指定的盘符产生了对应的文件，文件只读<br>B：在指定的盘符产生了对应的文件，文件只写<br>C：在指定的盘符产生了对应的文件，文件可读写<br>D：程序报错</p><p>答：D</p><p>题目解析：本题目考察的是 Files.createFile 参数传递的问题，PosixFilePermissions 不支持 Windows，因此在 Windows 执行会报错 java.lang.UnsupportedOperationException: ‘posix:permissions’ not supported as initial attribute。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在 Java 1.4 之前只有 BIO（Blocking IO）可供使用，也就是 java.io 包下的那些类，它的缺点是同步阻塞式运行的。随后在 Java 1.4 时，提供了 NIO（Non-Blocking IO）属于 BIO 的升级，提供了同步非阻塞的 IO 操作方式，它的重要组件是 Selector（选择器）、Channel（通道）、Buffer（高效数据容器）实现了多路复用的高效 IO 操作。而 AIO（Asynchronous IO）也叫 NIO 2.0，属于 NIO 的补充和升级，提供了异步非阻塞的 IO 操作。</p><p>还有另一个重要的知识点，是 Java 7.0 时新增的 Files 类，极大地提升了文件操作的便利性，比如读、写文件 Files.write()、Files.readAllBytes() 等，都是非常简便和实用的方法。</p><blockquote><p>[点击此处下载本文源码](</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中的InitializingBean的使用详解</title>
      <link href="/2024/04/09/Spring%E4%B8%AD%E7%9A%84InitializingBean%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/04/09/Spring%E4%B8%AD%E7%9A%84InitializingBean%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-InitializingBean简介"><a href="#1-InitializingBean简介" class="headerlink" title="1.InitializingBean简介"></a>1.<code>InitializingBean</code>简介</h1><p><code>InitializingBean</code>是<code>Spring</code>提供的拓展性接口，<code>InitializingBean</code>接口为<code>bean</code>提供了属性初始化后的处理方法，它只有一个<code>afterPropertiesSet</code>方法，凡是继承该接口的类，在<code>bean</code>的属性初始化后都会执行该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>用法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInitializingBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是启动时加载...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404091044647.png" alt="程序启动在日志中看到输出信息"></p><h1 id="2-PostConstruct简介"><a href="#2-PostConstruct简介" class="headerlink" title="2.@PostConstruct简介"></a>2.<code>@PostConstruct</code>简介</h1><ul><li><strong>简介:</strong></li></ul><p>​该注解是<code>Java jdk</code>提供的注解，而不是<code>Spring</code>框架提供的.</p><p>​JavaEE5引入了<code>@PostConstruct</code>和<code>@PreDestroy</code>两个作用于<code>Servlet</code>生命周期的注解，实现<code>Bean</code>初始化之前和销毁之前的自定义操作。 </p><p>​官方文档：<a href="https://docs.oracle.com/javase/8/docs/api/javax/annotation/PostConstruct.html">https://docs.oracle.com/javase/8/docs/api/javax/annotation/PostConstruct.html</a></p><ul><li><strong>该注解的方法在整个Bean初始化中的执行顺序：</strong></li></ul><p>​<code>Constructor</code>(构造方法) -&gt; <code>@Autowired</code>(依赖注入) -&gt; <code>@PostConstruct</code>(注释的初始化方法)</p><ul><li><p><strong>功能：</strong></p><p>​当依赖注入完成后用于执行初始化的方法，并且<strong>只会被执行一次</strong></p></li><li><p><strong><code>@PostConstruct</code>注释规则</strong></p><ol><li><p>除了拦截器这个特殊情况以外，其他情况都不允许有参数，否则spring框架会报IllegalStateException；而且返回值要是void，但实际也可以有返回值，至少不会报错，只会忽略</p></li><li><p>方法随便用什么权限来修饰，public、protected、private都可以，反正功能是由反射来实现</p></li><li><p>方法不可以是static的，但可以是final的</p></li><li><p>文档中说一个类只能有一个方法加此注解，但实际测试中，我在一个类中多个方法加了此注解，并没有报错，而且都执行了，我用的是 Spring Boot 框架。</p></li></ol></li><li><p><strong>示例:</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br> <br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utils</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        userService.doSomething();  <span class="hljs-comment">//userService注入后执行一些初始化操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-构造方法、-PostConstruct、afterPropertiesSet、bean初始化init方法执行顺序。"><a href="#3-构造方法、-PostConstruct、afterPropertiesSet、bean初始化init方法执行顺序。" class="headerlink" title="3.构造方法、@PostConstruct、afterPropertiesSet、bean初始化init方法执行顺序。"></a>3.<code>构造方法</code>、<code>@PostConstruct</code>、<code>afterPropertiesSet</code>、<code>bean初始化init方法</code>执行顺序。</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInitializingBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInitializingBean</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是MyInitializingBean构造方法执行...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是afterPropertiesSet方法执行...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postConstruct</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是postConstruct方法执行...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是init方法执行...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;init&quot;)</span><br>    <span class="hljs-keyword">public</span> MyInitializingBean <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInitializingBean</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404091047152.png" alt="程序启动在日志中的输出信息"></p><p><strong>通过启动日志我们可以看出执行顺序优先级：<u><code>构造方法</code> &gt; <code>postConstruct</code> &gt;<code>afterPropertiesSet</code> &gt; <code>init方法</code>。</u></strong></p><p>在Spring初始化bean的时候，如果该bean实现了InitializingBean接口，并且同时在配置了init-method，系统则是先调用afterPropertieSet()方法，然后再调用init-method中指定的方法。</p><h1 id="4-总结："><a href="#4-总结：" class="headerlink" title="4.总结："></a>4.总结：</h1><p>1、<code>Spring</code>为<code>bean</code>提供了两种初始化<code>bean</code>的方式，实现<code>InitializingBean</code>接口重写<code>afterPropertiesSet</code>方法，或者在配置文件中通过<code>init-method</code>指定，两种方式可以同时使用。</p><p>2、实现<code>InitializingBean</code>接口是直接调用<code>afterPropertiesSet</code>方法，比通过反射调用<code>init-method</code>指定的方法效率要高一点，但是<code>init-method</code>方式消除了对<code>spring</code>的依赖。</p><p>3、如果调用afterPropertiesSet方法时出错，则不调用init-method指定的方法。</p><pre><code class="hljs">                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</code></pre><p>原文链接：<a href="https://blog.csdn.net/TreeShu321/article/details/108180366">https://blog.csdn.net/TreeShu321/article/details/108180366</a></p><p>原文链接：<a href="https://blog.csdn.net/skh2015java/article/details/117751380">https://blog.csdn.net/skh2015java/article/details/117751380</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> InitializingBean </tag>
            
            <tag> PostConstruct </tag>
            
            <tag> spring </tag>
            
            <tag> bean初始化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk8以上提高开发效率的新特性有哪些</title>
      <link href="/2024/04/08/jdk8%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
      <url>/2024/04/08/jdk8%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-接口的默认方法和静态方法"><a href="#1-接口的默认方法和静态方法" class="headerlink" title="1.接口的默认方法和静态方法"></a>1.接口的默认方法和静态方法</h1><p><strong>众所周知，在接口中定义的普通方法都是抽象方法，方法前面默认都会添加public abstract，不能有方法实现，需要在接口的实现类中对方法进行具体实现。</strong></p><p>但是<strong>Java8开始允许在接口中定义默认方法和静态方法</strong>，对于这两种方法，可以直接在接口对其进行实现，无需再在接口实现类中进行实现。</p><ul><li>默认方法：又叫扩展方法，在方法前面需通过<code>default</code>修饰,不能直接通过接口调用，必须通过接口实现类的实例对象进行方法调用</li><li>静态方法：又叫类方法，在方法前面需通过<code>static</code>修饰。可以直接通过接口调用。</li></ul><p><strong>普通方法必须实现，默认方法可以选择性重写，静态方法无法重写。</strong></p><h1 id="2-lambda表达式"><a href="#2-lambda表达式" class="headerlink" title="2.lambda表达式"></a>2.lambda表达式</h1><blockquote><p><strong>Lambda表达式是Java8非常重要的一个新特性,其基于函数式编程的思想,支持将代码作为方法参数进行使用</strong>。可以把Lambda表达式理解为通过一种更加简洁的方式表示可传递的匿名函数。<br>它本身没有名称,而且不像方法那样属于某一个类,但是可以有参数列表、代码体、返回值。使用了Lambda表达式之后就不需要再去编写匿名类了。</p></blockquote><h2 id="2-1基础格式"><a href="#2-1基础格式" class="headerlink" title="2.1基础格式:"></a>2.1基础格式:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">(参数列表) ‐&gt; &#123;<br>方法体<br>&#125;<br><span class="hljs-comment">//没有参数的Lambda表达式</span><br>()‐&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">//只有一个参数的Lambda表达式</span><br>x -&gt; &#123;<br>  System.out.println(x);<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-comment">//有多个参数的Lambda表达式</span><br>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)-&gt;&#123;<br>System.out.println(x);<br>  System.out.println(y);<br><span class="hljs-keyword">return</span> x+y;<br>&#125;<br><span class="hljs-comment">//上述可以进行简写，因为在Lambda中，参数列表中参数的数据类型可以交给JVM根据上下文进行推断。所以可以不用定义类型。</span><br><span class="hljs-comment">//一个参数和仅一条语句的Lambda表达式</span><br>x-&gt;<span class="hljs-number">3</span>+x;<br><span class="hljs-comment">//多个参数和仅一条语句的Lambda表达式</span><br>(x,y) -&gt;x+y;<br></code></pre></td></tr></table></figure><h2 id="2-2-Lambda表达式底层原理解析"><a href="#2-2-Lambda表达式底层原理解析" class="headerlink" title="2.2 Lambda表达式底层原理解析"></a>2.2 <strong>Lambda</strong>表达式底层原理解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//lambda循环比较 </span><br>Arrays.sort(language,(o1,o2)‐&gt;(o1.compareTo(o2)));<br><br><span class="hljs-comment">//定义一个使用Lambda表达式的方法 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SourceDemo</span> &#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123; <br>String[] language = &#123;<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;c#&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;go&quot;</span>,<span class="hljs-string">&quot;hive&quot;</span>, <span class="hljs-string">&quot;php&quot;</span>&#125;; <br>List&lt;String&gt; list = Arrays.asList(language);<br>    list.forEach(s‐&gt; System.out.println(s)); <br>    &#125; <br>    &#125;<br><span class="hljs-comment">//将当前.java文件编译生成.class文件，执行命令后，会在当前文件夹生成对应的.class文件 </span><br>javac SourceDemo.java<br><span class="hljs-comment">//将.class文件进行反编译，查看文件内容 </span><br>javap ‐p SourceDemo.class<br><span class="hljs-comment">//  生成内容如下</span><br>  Compiled from <span class="hljs-string">&quot;SourceDemo.java&quot;</span> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.itheima.lambda.source.SourceDemo &#123; <br>    <span class="hljs-keyword">public</span> com.itheima.lambda.source.SourceDemo(); <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> lambda$demo$<span class="hljs-number">0</span>(java.lang.String); <br>  &#125;<br><span class="hljs-comment">//此时可以发现，代码中执行Lambda表达式的部分生成了一个静态私有函数。这个静态私有函数的函数干就是 Lambda表达式里面的内容。 那么对于这个静态私有函数，在JDK8内部是如何实现调用的呢？可以查看 LambdaMetafactory 类，该类下有一个 metafactory方法，lambda表达式每一次在执行的时候都会进入到这个方法中，并且为lambda表达式创建一个内 部类。</span><br><br><span class="hljs-comment">//如果想查看内部类里面的内容，可以在lambda表达式执行之前，添加 </span><br>System.setProperty(<span class="hljs-string">&quot;jdk.internal.lambda.dumpProxyClasses&quot;</span>, <span class="hljs-string">&quot;D://&quot;</span>); <br><span class="hljs-comment">//这个方法会将运行时生成的内部类class文件进行输出。 当该文件生成后，可以通过 javap -c -p class文件名 查看文件中的内容</span><br><span class="hljs-comment">//此时可以发现编译后的Lambda表达式已经被执行。</span><br></code></pre></td></tr></table></figure><blockquote><p>综上所述，Lambda表达式在执行的时候，会调用LambdaMetafactory.metafactory动态的生成内部类，在方法 内调用 SourceDemo$&amp;Lambda$1 ，内部类里的调用方法块并不是动态生成的，只是在原class里已经编译生成了一个 静态的方法，内部类只需要调用该静态方法。 </p></blockquote><h1 id="3-函数式接口"><a href="#3-函数式接口" class="headerlink" title="3.函数式接口"></a>3.函数式接口</h1><blockquote><p>在Java8中为了让现在有的函数能够更加友好的使用Lambda表达式，因此引入了<strong>函数式接口</strong>这个概念。</p><p><strong>函数式接口是一个 仅有一个抽象方法的普通接口。如果声明多个抽象方法则会报错。</strong></p><p><strong>但是默认方法和静态方法在此接口中可以定义多个。</strong></p><p><strong>要想自定义一个函数式接口的话，需要在接口上添加 @FunctionalInterface 。</strong> </p><p>在<code>Java8</code>的类库设计中，已经引入了几个函数式接口：<code>Predicate</code>、<code>Consumer</code>、<code>Function</code>、<code>Supplier</code> </p></blockquote><h2 id="3-1-Predicate使用"><a href="#3-1-Predicate使用" class="headerlink" title="3.1 Predicate使用"></a>3.1 <strong>Predicate</strong>使用</h2><blockquote><p>Predicate接口是Java8定义的一个函数式接口,用于条件判断，属于**<code>java.util.function</code><strong>包下，</strong>内部定义一个 抽象方法<code>test</code>、三个默认方法<code>and</code>(与)，<code>negate</code>(非)，<code>or</code>(或)、一个静态方法<code>isEqual</code>** </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.lambda.Student;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPredicateDemo</span> &#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 定义方法,接收入参学生列表 和 函数式接口Predicate</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> studentList</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> predicate</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Student&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(List&lt;Student&gt; studentList, Predicate&lt;Student&gt; predicate)</span>&#123;<br>    ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    studentList.forEach(s‐&gt;&#123;<br>       <span class="hljs-keyword">if</span> (predicate.test(s))&#123;<br>        list.add(s);<br>       &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> list;<br> &#125;<br> <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>));<br>    students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>));<br>    students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>));<br>    <span class="hljs-comment">//通过lambda表达式调用filter方法</span><br>    List&lt;Student&gt; result = filter(students, (s) ‐&gt; s.getSex().equals(<span class="hljs-string">&quot;F&quot;</span>));<br>    System.out.println(result.toString());<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>and</code>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoPredicateAnd</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isValid</span> <span class="hljs-operator">=</span> method(<br>                s -&gt; s.contains(<span class="hljs-string">&quot;H&quot;</span>), s -&gt; s.contains(<span class="hljs-string">&quot;W&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;字符串符合要求吗:&quot;</span> + isValid);<br>    &#125;<br><br>    <span class="hljs-comment">//定义过滤方法,两个条件都满足才返回true</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">method</span><span class="hljs-params">(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isValid</span> <span class="hljs-operator">=</span> one.and(two).test(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>        <span class="hljs-keyword">return</span> isValid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-Consumer使用"><a href="#3-2-Consumer使用" class="headerlink" title="3.2 Consumer使用"></a>3.2 <strong>Consumer</strong>使用</h2><blockquote><p>Consumer也是JDK8提供的函数式接口，用于进行<strong>获取数据</strong>的操作，其内部定义了一个抽象方法<code>accept</code>、一个默认方法<code>andThen</code>。</p><p>对于<code>accept()</code>方法来说，它接受一个泛型<code>T</code>对象。如果现在需要访问类型<code>T</code>对象，并对其进行某些操作的话，就可以使用这个接口。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.haier.cscp.utils;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumerDemo</span> &#123;<br>    <span class="hljs-comment">//定义遍历方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreach</span><span class="hljs-params">(List&lt;String&gt; arrays, Consumer&lt;String&gt; consumer)</span> &#123;<br>        arrays.forEach(s -&gt; consumer.accept(s));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; arrays = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        arrays.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        arrays.add(<span class="hljs-string">&quot;python&quot;</span>);<br>        arrays.add(<span class="hljs-string">&quot;go&quot;</span>);<br>        arrays.add(<span class="hljs-string">&quot;hive&quot;</span>);<br>        <span class="hljs-comment">//调用遍历方法,传入集合和逻辑</span><br>        foreach(arrays, (s) -&gt; System.out.print(s + <span class="hljs-string">&quot;,&quot;</span>));<br>        System.out.println();<br>        <span class="hljs-comment">//集合继承了Iterable,而Iterable的forEach方法入参也是Consumer,故也可直接使用forEach</span><br>        arrays.forEach(s -&gt; System.out.print(s + <span class="hljs-string">&quot;,&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-Function使用"><a href="#3-3-Function使用" class="headerlink" title="3.3 Function使用"></a>3.3 <strong>Function</strong>使用</h2><blockquote><p>Function主要用于进行类型转换的操作。内部提供一个抽象方法<code>apply</code>、两个默认方法<code>compose</code>，<code>andThen</code>、一个 静态方法<code>identity</code> </p><p>对于apply方法，它接收一个泛型<code>T</code>对象，并返回一个泛型<code>R</code>的对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.test;<br><br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFunctionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">convert</span><span class="hljs-params">(String value, Function&lt;String,Integer&gt; function)</span>&#123;<br>        <span class="hljs-keyword">return</span> function.apply(value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">convert</span> <span class="hljs-operator">=</span> convert(<span class="hljs-string">&quot;666&quot;</span>, value -&gt; Integer.valueOf(value)+<span class="hljs-number">222</span>);<br>        System.out.println(convert);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-4-Supplier使用"><a href="#3-4-Supplier使用" class="headerlink" title="3.4 Supplier使用"></a>3.4 <strong>Supplier</strong>使用</h2><blockquote><p>Supplier也是用来进行值获取操作，内部只有一个抽象方法get</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.test;<br><br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySupplierDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getMin</span><span class="hljs-params">(Supplier&lt;Integer&gt; supplier)</span>&#123;<br>        <span class="hljs-keyword">return</span>  supplier.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">100</span>,<span class="hljs-number">22</span>,<span class="hljs-number">111</span>&#125;;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">min1</span> <span class="hljs-operator">=</span> getMin(() -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a : arr) &#123;<br>                <span class="hljs-keyword">if</span> (min &gt; a) &#123;<br>                    min = a;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> min;<br>        &#125;);<br>        System.out.println(min1);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-5-类型检查-推断"><a href="#3-5-类型检查-推断" class="headerlink" title="3.5 类型检查**&amp;**推断"></a>3.5 类型检查**&amp;**推断</h2><blockquote><p>对于Lambda表达式的类型推断，它是对<code>Java7</code>中的目标类型推断进行的再次扩展。在<code>Java7</code>中引入了 <code>菱形操作符</code> 的概念，它可以是代码在编译时自动推断出泛型参数的类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//全量声明 </span><br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;(); <br><span class="hljs-comment">//菱形运算符 </span><br>Map&lt;String,String&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>第二种书写代码的方式，也是我们在开发中经常使用的。不用明确声明泛型类型，代码在进行编译时，可以自动的进行类型推断。 </p><p>那么在Java8中对于这种使用方式又进一步扩展，可以省略Lambda表达式中的所有参数类型。在编译时根据Lambda表达式的上下文信息推断出参数的正确类型。这就是所谓的类型推断。</p><blockquote><p>到现在为止，对于Lambda表达式都只用到了方法体里面的参数，但Lambda其实是支持使用外部定义的变量的。在下面这段代码中，在Lambda表达式内部引用了外部变量。<strong>但是当在Lambda方法体内使用外部变量时，其必须声明为final。下述代码虽然没有显示的声明，但是在Java8它自动的会对需要为final的变量(port)进行转换。</strong> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123; <br>  <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8086</span>; <br>  <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> ()‐&gt; System.out.println(port); <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-方法引用"><a href="#4-方法引用" class="headerlink" title="4. 方法引用::"></a>4. 方法引用<code>::</code></h1><p>方法引用更近一步的优化了Lambda的使用。它让代码感觉更加的自然。我们可以直接使用 <code>::</code> 来简化<code>Lambda</code>表达式的使用。</p><p>使用语法如下： <code>类名或实例名::方法名</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">students.sort(Comparator.comparing(Student::getId)); <br></code></pre></td></tr></table></figure><h1 id="5-Stream流使用"><a href="#5-Stream流使用" class="headerlink" title="5. Stream流使用"></a><strong>5. Stream</strong>流使用</h1><blockquote><p>流操作是Java8提供一个重要新特性，它允许开发人员以声明性方式处理集合，其<strong>核心类库主要改进了对集合类的 API和新增Stream操作</strong>。Stream类中每一个方法都对应集合上的一种操作。将真正的函数式编程引入到Java中，能 让代码更加简洁，极大地简化了集合的处理操作，提高了开发的效率和生产力。 </p><p><strong>stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或<code>I/O channel</code>等。在Stream中的操作每一次都会产生新的流，内部不会像普通集合操作一样立刻获取值，而是惰性取值，只有等到用户真正需要结果的时候才会执行。</strong> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; result = studentList.stream() <br>  .filter(s ‐&gt; s.getAge() &lt; <span class="hljs-number">20</span>) <span class="hljs-comment">//过滤出年龄小于20岁的学生 </span><br>  .sorted(Comparator.comparing(Student::getAge)) <span class="hljs-comment">//对结果进行排序 </span><br>  .map(Student::getName) <span class="hljs-comment">// 提取出结合中的name属性 </span><br>  .collect(Collectors.toList());<span class="hljs-comment">//转换成一个新的集合</span><br></code></pre></td></tr></table></figure><p>通过上述代码的执行，可以发现<strong>无需再去定义过多的冗余变量</strong>。我们可以将多个操作组成一个调用链，形成数据处理的流水线。在减少代码量的同时也更加的清晰易懂。 </p><p>并且对于现在调用的方法，本身都是一种高层次构件，与线程模型无关。因此在并行使用中，<strong>开发者们无需再去操心线程和锁了。Stream内部都已经做好了。</strong></p><p>steam流本身就是将集合的操作由外部迭代转换为了内部迭代。而内部迭代来说，它所操作的就是不是一个集合了，而是一个流。它会将所有的操作融合在流中，由其在内部进行处理，这种隐式的方式称之为<strong>内部迭代</strong>。 </p><p><strong>并且内部迭代支持并行处理，更利于集合操作的性能优化。其关注与对数据的计算。</strong> </p><h2 id="5-1流操作详解"><a href="#5-1流操作详解" class="headerlink" title="5.1流操作详解"></a>5.1流操作详解</h2><p><strong>Stream流接口中定义了许多对于集合的操作方法,总的来说可以分为两大类:中间操作和终端操作。</strong></p><ul><li><strong>中间操作</strong>:会返回一个流,通过这种方式可以将多个中间操作连接起来,形成一个调用链,从而转换为另外一个流。除非调用链最后存在一个终端操作,否则中间操作对流不会进行任何结果处理。</li><li><strong>终端操作</strong>:会返回一个具体的结果,如<code>boolean</code>, <code>list</code>, <code>integer</code>等。</li></ul><h3 id="5-1-1筛选filter-distinct"><a href="#5-1-1筛选filter-distinct" class="headerlink" title="5.1.1筛选filter distinct"></a>5.1.1筛选<code>filter distinct</code></h3><p>对于集合的操作，经常性的会涉及到对于集中符合条件的数据筛选，Stream中对于数据筛选两个常见的API：<code>filter</code>(过滤)、<code>distinct</code>(去重) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//filter</span><br>Stream&lt;Student&gt; studentStream = studentList.stream() <br>.filter(s‐&gt;s.getAge() &lt; <span class="hljs-number">20</span>); <span class="hljs-comment">//.filter(Student::getIsPass);</span><br>List&lt;Student&gt; list = studentStream.collect(Collectors.toList());<br><span class="hljs-comment">//distinct 对对象进行去重的话，还需要在对象内部重写，hashCode()和equals()方法才可以实现去重。</span><br>List&lt;Integer&gt; result = numberList.stream() <br>  .filter(n ‐&gt; n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <br>  .distinct() <br>  .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h3 id="5-1-2-切片limit-skip"><a href="#5-1-2-切片limit-skip" class="headerlink" title="5.1.2 切片limit skip"></a>5.1.2 切片<code>limit skip</code></h3><blockquote><p>基于**<code>limit()</code>**实现数据截取,该方法会返回一个不超过给定长度的流。</p><p>对于<code>limit</code>方法的实现，它会接收截取的长度，如果该值小于0，则抛出异常，否则会继续向下调用 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numberList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <br>List&lt;Integer&gt; collect = numberList.stream().limit(<span class="hljs-number">5</span>).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><blockquote><p>基于**<code>skip()</code>**实现数据跳过,刚才已经基于<code>limit</code>完成了数据截取，但是<code>limit</code>对于数据截取是从前往后截取几个。如果现在对结果只获取后几个怎么办呢？此时就需要使用<code>skip()</code>。其与<code>limit()</code>的使用是相辅相成的。 </p><p>在<code>skip</code>方法中接收的<code>n</code>代表的是要跳过的元素个数，如果<code>n</code>小于<code>0</code>，抛出非法参数异常，如果<code>n</code>等于<code>0</code>，则返回当前 流。如果<code>n</code>大于<code>0</code>，才会调用<code>makeRef()</code>。同时指定limit参数为-1. </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    List&lt;Integer&gt; numberList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    List&lt;Integer&gt; collect = numberList.stream().limit(<span class="hljs-number">5</span>).skip(<span class="hljs-number">2</span>).collect(Collectors.toList());<br>    System.out.println(collect);<span class="hljs-comment">//[3, 4, 1]</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-3映射-map"><a href="#5-1-3映射-map" class="headerlink" title="5.1.3映射  map"></a>5.1.3映射  <code>map</code></h3><blockquote><p>在对集合进行操作的时候，我们经常会从某些对象中选择性的提取某些元素的值，就像编写<code>sql</code>一样，指定获取表 中特定的数据列 :</p><p>  <code>SELECT name FROM student;</code> </p><p>在Stream API中也提供了类似的方法，<code>map()</code>。它接收一个函数作为方法参数，这个函数会被应用到集合中每一个 元素上，并最终将其映射为一个新的元素。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取每一个学生的名字，并形成一个新的集合 </span><br>List&lt;String&gt; nameList = studentList.stream() <br>  .map(Student::getName) <br>  .collect(Collectors.toList());<br><span class="hljs-comment">//获取每一个学生名字的长度</span><br>List&lt;Integer&gt; nameList = studentList.stream()<br>  .map(Student::getName)<br>  .map(String::length) <span class="hljs-comment">//也可以继续向下获取每一个名称的长度 </span><br>  .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h3 id="5-1-4匹配anyMatch-allMatch"><a href="#5-1-4匹配anyMatch-allMatch" class="headerlink" title="5.1.4匹配anyMatch allMatch"></a>5.1.4匹配<code>anyMatch allMatch</code></h3><blockquote><p>有时还需要判断集合中某些元素是否匹配对应的条件，如果有的话，在进行后续的操作。在 Stream API中也提供了相关方法供我们进行使用，如<code>anyMatch</code>、<code>allMatch</code>等。他们对应的就是<code>&amp;&amp;</code>和<code>||</code>运算符。</p><p><code>anyMatch()</code>主要用于判断流中是否至少存在一个符合条件的元素，它会返回一个<code>boolean</code>值，并且对于它的操作， 一般叫做<u>短路求值</u> (某些操作不用操作整个流就可以得到结果:<code>&amp;&amp;  ||</code> )</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//anyMatch执行时，只要流中有一个元素符合条件就会返回true</span><br><span class="hljs-keyword">if</span> (studentList.stream().anyMatch(s‐&gt;s.getAge()&lt;<span class="hljs-number">20</span>))&#123; <br>System.out.println(<span class="hljs-string">&quot;集合中有符合条件的学生&quot;</span>); <br>&#125;<br><span class="hljs-comment">//allMatch会判断流中是否所有条件都符合条件，全部符合才会返回true</span><br><span class="hljs-keyword">if</span> (studentList.stream().allMatch(Student::getIsPass))&#123; <br>  System.out.println(<span class="hljs-string">&quot;所有学生合格&quot;</span>); <br>&#125;<span class="hljs-keyword">else</span> &#123; <br>  System.out.println(<span class="hljs-string">&quot;有学生不合格&quot;</span>); <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-1-5查找findany-findFirst"><a href="#5-1-5查找findany-findFirst" class="headerlink" title="5.1.5查找findany findFirst"></a>5.1.5查找<code>findany findFirst</code></h3><ul><li><code>findany</code></li></ul><blockquote><p><code>fifindAny</code>用于获取流中随机的某一个元素，并且利用短路在找到结果时，立即结束。</p><p><code>fifindAny</code>对于同一数据源的多次操作会返回不同的结果。但是，如果我们的操作是串行的， 在数据较少的情况下，一般会返回第一个结果，如果在并行的情况下，那就不能确保返回的是第一个了。 </p><p>这种设计主要是为了获取更加高效的性能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Student&gt; optional = studentList.stream().filter(s ‐&gt; s.getAge() &lt; <span class="hljs-number">20</span>).findAny(); <br><span class="hljs-keyword">if</span> (optional.isPresent())&#123; <br>System.out.println(optional.get()); <br>&#125;<br><span class="hljs-comment">//并行流</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123; <br>  Optional&lt;Student&gt; optional = studentList.parallelStream().filter(s ‐&gt; s.getAge() &lt; <span class="hljs-number">20</span>).findAny();<br>  <span class="hljs-keyword">if</span> (optional.isPresent())&#123; <br>    System.out.println(optional.get()); <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>findFirst</code></li></ul><blockquote><p><code>fifindFirst</code>使用原理与<code>fifindAny</code>类似，但不管是在并行还是串行，指定返回流中的第一个元素。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123; <br>  Optional&lt;Student&gt; optional = studentList <br>    .stream() <br>    <span class="hljs-comment">//.parallelStream() </span><br>    .filter(s ‐&gt; s.getAge() &lt; <span class="hljs-number">20</span>) <br>    .findFirst(); <br>  <span class="hljs-keyword">if</span> (optional.isPresent())&#123; <br>    System.out.println(optional.get()); <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-6-归约-求和、最大值、最小值等"><a href="#5-1-6-归约-求和、最大值、最小值等" class="headerlink" title="5.1.6 归约(求和、最大值、最小值等)"></a>5.1.6 归约(求和、最大值、最小值等)</h3><blockquote><p>到现在截止，对于流的终端操作，我们返回的有<code>boolean</code>、<code>Optional</code>和<code>List</code>。但是在集合操作中，我们经常会涉及 对元素进行统计计算之类的操作，如求和、求最大值、最小值等，从而返回不同的数据结果。 </p></blockquote><h4 id="5-1-6-1累积求和"><a href="#5-1-6-1累积求和" class="headerlink" title="5.1.6.1累积求和"></a>5.1.6.1累积求和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一个参数声明为初始值，第二个参数接收一个lambda表达式，代表当前流中的两个元素，它会反复相加每一个元素，直到流被归约成一个最终结果</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> numbers.stream().reduce(<span class="hljs-number">0</span>, (a, b) ‐&gt; a + b);<br><span class="hljs-comment">//优化:Integer类中提供了sum方法，用于对两个数求和，这里我们可 以直接基于lambda方法调用的形式来使用</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> numbers.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br><span class="hljs-comment">//继续优化:reduce方法还有一个重载方法，不需要初始化值，会返回一个 Optional对象</span><br>Optional&lt;Integer&gt; optional = numbers.stream().reduce(Integer::sum);<br></code></pre></td></tr></table></figure><h4 id="5-1-6-2最大值最小值"><a href="#5-1-6-2最大值最小值" class="headerlink" title="5.1.6.2最大值最小值"></a>5.1.6.2最大值最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//最大值</span><br>Optional&lt;Integer&gt; optional = numbers.stream().reduce(Integer::max)<br><span class="hljs-comment">//优化</span><br>Optional&lt;Integer&gt; optional = numbers.stream().max(Integer::compareTo);<br><span class="hljs-comment">//最小值</span><br>Optional&lt;Integer&gt; min = numbers.stream().min(Integer::compareTo);<br></code></pre></td></tr></table></figure><h2 id="5-2构建流"><a href="#5-2构建流" class="headerlink" title="5.2构建流"></a>5.2构建流</h2><blockquote><p>难道Stream只能在集合基础上才能操作么？当然不是，我们还可以基于值、数组甚至文件来构建流，完成流操作。</p></blockquote><h3 id="5-2-1基于值创建流"><a href="#5-2-1基于值创建流" class="headerlink" title="5.2.1基于值创建流"></a>5.2.1基于值创建流</h3><blockquote><p>在Stream中提供了一个静态方法<code>of</code>，它可以接收任意数量参数，显式的创建一个流。并且会根据传入的参数类 型，构建不同泛型的流。</p><p>其内部就是基于<code>Arrays</code>中的<code>stream</code>方法将传入的多个参数转换为数组，然后创建流，并遍历数组，将每一个元素放入流中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;String&gt; stringStream = Stream.of(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>); <br>Stream&lt;Object&gt; stream = Stream.of(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">3</span>,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">St</span>());<br></code></pre></td></tr></table></figure><h3 id="5-2-2基于数组创建流"><a href="#5-2-2基于数组创建流" class="headerlink" title="5.2.2基于数组创建流"></a>5.2.2基于数组创建流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>Stream&lt;Integer&gt; integerStream = Arrays.stream(numbers);<br></code></pre></td></tr></table></figure><h3 id="5-2-3基于文件创建流"><a href="#5-2-3基于文件创建流" class="headerlink" title="5.2.3基于文件创建流"></a>5.2.3基于文件创建流</h3><p>​在Java中 提供了<code>Files</code>类，该类中提供了一些对于文件操作的相关方法。可以看下<code>Files</code>类中部分方法</p><p>​在该类中部分方法返回值就是Stream，如：<code>newDirectoryStream</code>、<code>list</code>、<code>lines</code>等。 </p><h2 id="5-3收集器-返回复杂数据类型"><a href="#5-3收集器-返回复杂数据类型" class="headerlink" title="5.3收集器(返回复杂数据类型)"></a>5.3收集器(返回复杂数据类型)</h2><blockquote><p>对于数据的返回，我们返回的都是一些简单的数据类型。那现在我们要做一些复杂的数据返回，应该怎么做呢？ 比方说返回一个Map或者List。就需要通过收集器来实现了</p><p>其内部主要核心是通过<code>Collectors</code>完成更加复杂的计算转换，从而获取到最终结果。并且<code>Collectors</code>内部提供了非常多的常用静态方法，直接拿来就可以了。比方说：<code>toList</code>。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据年龄进行分组</span><br>Map&lt;Integer, List&lt;Student&gt;&gt; map = studentList.stream().collect(Collectors.groupingBy(Student::getAge));<br></code></pre></td></tr></table></figure><h3 id="5-3-1-通过-counting-统计集合总数"><a href="#5-3-1-通过-counting-统计集合总数" class="headerlink" title="5.3.1 通过**counting()**统计集合总数"></a>5.3.1 通过**<code>counting()</code>**统计集合总数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Long</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> studentList.stream().collect(Collectors.counting());<br><span class="hljs-comment">//简写</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> studentList.stream().count();<br></code></pre></td></tr></table></figure><h3 id="5-3-2-通过-maxBy-与minBy-获取最大值最小值"><a href="#5-3-2-通过-maxBy-与minBy-获取最大值最小值" class="headerlink" title="5.3.2 通过**maxBy()与minBy()**获取最大值最小值"></a>5.3.2 通过**<code>maxBy()</code><strong>与</strong><code>minBy()</code>**获取最大值最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取年龄最大的学生 </span><br>Optional&lt;Student&gt; optional = studentList.stream().collect(Collectors.maxBy(Comparator.comparing(Student::getAge)));<br><span class="hljs-comment">//优化</span><br>Optional&lt;Student&gt; studentOptional = studentList.stream().max(Comparator.comparing(Student::getAge));<br><span class="hljs-comment">//获取年龄最小的学生 </span><br>Optional&lt;Student&gt; studentOptional = studentList.stream().min(Comparator.comparing(Student::getAge));<br></code></pre></td></tr></table></figure><h3 id="5-3-3-通过-summingInt-进行数据汇总"><a href="#5-3-3-通过-summingInt-进行数据汇总" class="headerlink" title="5.3.3 通过**summingInt()**进行数据汇总"></a>5.3.3 通过**<code>summingInt()</code>**进行数据汇总</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取年龄总和</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> studentList.stream().collect(Collectors.summingInt(Student::getAge));<br><span class="hljs-comment">//简化</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> studentList.stream().mapToInt(Student::getAge).sum();<br></code></pre></td></tr></table></figure><h3 id="5-3-4-通过-averagingInt-进行平均值获取"><a href="#5-3-4-通过-averagingInt-进行平均值获取" class="headerlink" title="5.3.4 通过**averagingInt()**进行平均值获取"></a>5.3.4 通过**<code>averagingInt()</code>**进行平均值获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Double</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> studentList.stream().collect(Collectors.averagingInt(Student::getAge));<br><span class="hljs-comment">//另外一种 这种方式虽然代码写多了一些，但是可以防止空值的出现。</span><br><span class="hljs-type">OptionalDouble</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> studentList.stream().mapToDouble(Student::getAge).average(); <br><span class="hljs-keyword">if</span> (average.isPresent())&#123; <br>  <span class="hljs-type">double</span> <span class="hljs-variable">asDouble</span> <span class="hljs-operator">=</span> average.getAsDouble(); <br>  System.out.println(asDouble); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-5复杂结果返回"><a href="#5-3-5复杂结果返回" class="headerlink" title="5.3.5复杂结果返回"></a>5.3.5复杂结果返回</h3><blockquote><p>到此截止，已经通过收集器完成了汇总、求和、求最大最小值、求平均值的操作。但是值得注意的是，这些操作每 一次都是返回单独的一个值，但是日常开发中，经常需要获取多种内容，那这种需求应该如何完成？Collectors也 提供了相关静态方法进行解决，这三个方法可以，返回的都是收集器。其内部已经包含了多种结果内容 </p><p>上述方法返回了<code>IntSummaryStatistics</code>类，其内部提供了相关<code>getter</code>方法用于获取汇总值、总和、最大值最小值等 方法，直接调用即可 </p><p>对于另外的<code>summarizingDouble()</code>和<code>summarizingLong()</code>使用方式都是相同的。只不过他们适用于收集属性数据类 型为<code>double</code>和<code>long</code>而已。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">IntSummaryStatistics</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> studentList.stream().collect(Collectors.summarizingInt(Student::getAge));<br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> collect.getCount(); <br><span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> collect.getSum(); <br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> collect.getMax(); <br><span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> collect.getMin(); <br><span class="hljs-type">double</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> collect.getAverage();<br></code></pre></td></tr></table></figure><h3 id="5-3-6通过-joining-进行数据拼接"><a href="#5-3-6通过-joining-进行数据拼接" class="headerlink" title="5.3.6通过**joining()**进行数据拼接"></a>5.3.6通过**joining()**进行数据拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> studentList.stream().map(Student::getName).collect(Collectors.joining());<br><span class="hljs-type">String</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> studentList.stream().map(Student::getName).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="5-3-7-分组"><a href="#5-3-7-分组" class="headerlink" title="5.3.7 分组"></a>5.3.7 分组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一级分组 根据年龄分组</span><br>Map&lt;Integer, List&lt;Student&gt;&gt; map = studentList.stream().collect(Collectors.groupingBy(Student::getAge))<br><span class="hljs-comment">//根据年龄 是否通过进行多级分组</span><br>Map&lt;Integer, Map&lt;String, List&lt;Student&gt;&gt;&gt; collect = studentList.stream().collect(Collectors.groupingBy(Student::getAge, Collectors.groupingBy(student ‐&gt; &#123; <br>  <span class="hljs-keyword">if</span> (student.getIsPass()) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pass&quot;</span>; <br>  &#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;not pass&quot;</span>; <br>  &#125; <br>&#125;)));<br><span class="hljs-comment">//多级分组变形 </span><br><span class="hljs-comment">//根据年龄进行分组，获取并汇总人数 </span><br>Map&lt;Integer, Long&gt; collect = studentList.stream().collect(Collectors.groupingBy(Student::getAge, Collectors.counting())); <br><span class="hljs-comment">//根据年龄与是否及格进行分组，并汇总人数</span><br>Map&lt;Integer, Map&lt;Boolean, Long&gt;&gt; collect = studentList.stream().collect(Collectors.groupingBy(Student::getAge, Collectors.groupingBy(Student::getIsPass, Collectors.counting())));<br><span class="hljs-comment">//根据年龄与是否及格进行分组，并获取每组中分数最高的学生</span><br>Map&lt;Integer, Map&lt;Boolean, Student&gt;&gt; collect = studentList.stream().collect( Collectors.groupingBy(Student::getAge, <br>                                                                                               Collectors.groupingBy(Student::getIsPass, <br>                                                                                                                     Collectors.collectingAndThen( <br>                                                                                                                       Collectors.maxBy( <br>                                                                                                                         Comparator.comparing(Student::getScore)), Optional::get))));<br></code></pre></td></tr></table></figure><h3 id="5-3-8-自定义收集器"><a href="#5-3-8-自定义收集器" class="headerlink" title="5.3.8 自定义收集器"></a>5.3.8 自定义收集器</h3><blockquote><p>根据源码，<code>Collector</code>接口需要三个参数。T：流中要收集的元素类型、A：累加器的类型、R：收集的结果类型。 </p><p>如想自定义收集器，需要实现Collector接口中的五个方法：<code>supplier</code>、<code>accumulator</code>、<code>fifinisher</code>、<code>combiner</code>、 </p><p><code>characteristics</code> </p><ul><li><p><code>supplier</code>：用于创建一个容器，在调用它时，需要创建一个空的累加器实例，供后续方法使用。 </p></li><li><p><code>accumulator</code>：基于supplier中创建的累加容器，进行累加操作。 </p></li><li><p><code>fifinisher</code>：当遍历完流后，在其内部完成最终转换，返回一个最终结果。 </p></li><li><p><code>combiner</code>：用于在并发情况下，将每个线程的容器进行合并。 </p></li><li><p><code>characteristics</code>：用于定义收集器行为，如是否可以并行或使用哪些优化。其本身是一个枚举，内部有三个值，分别为： </p><p><code>CONCURRENT</code>：表明收集器是并行的且只会存在一个中间容器。 </p><p><code>UNORDERED</code>：表明结果不受流中顺序影响，收集是无序的。 </p><p><code>IDENTITY_FINISH</code>：表明累积器的结果将会直接作为归约的最终结果，跳过fifinisher()。</p></li></ul></blockquote><p>自定义收集器，返回所有合格的学员:</p><p><img src="http://mele.cool/image-20201002225245978.png" alt="image-20201002225245978"></p><p>使用自定义收集器 :</p><p><img src="http://mele.cool/image-20201002225308032.png" alt="image-20201002225308032"></p><h1 id="6-数据并行化"><a href="#6-数据并行化" class="headerlink" title="6.数据并行化"></a>6.数据并行化</h1><blockquote><p>为了让数据处理更加高效，<code>Java8</code>对于<code>Stream</code>也提供了并行的操作方式，在<code>Java7</code>之前如果要对数据并行处理，需要开发人员做的事情很多，如数据如何进行分块、开启多少个线程、哪个线程负责哪部分数据、出现线程竞争怎么办等等的问题。 </p><p><code>Java8</code>对于数据并行化处理的实现非常简单，直接调用一个<code>parallelStream()</code>就可以开启并行化处理。</p><ul><li>并行：多个任务在同一时间点发生，并由不同的<code>cpu</code>进行处理，不互相抢占资源</li><li>并发：多个任务在同一时间点内同时发生了，但由同一个<code>cpu</code>进行处理，互相抢占资源</li></ul><p>当在大量数据处理上，数据并行化可以大量缩短任务的执行时间，将一个数据分解成多个部分，然后并行处理，最后将多个结果汇总，得到最终结果。 </p><p><code>int sum = numbers.parallelStream().mapToInt(i ‐&gt; i).sum();</code> </p><p><strong>当将stream()切换为parallelStream()后，则完成了串行转换为并行的实现。</strong> </p></blockquote><h2 id="6-1并行流原理"><a href="#6-1并行流原理" class="headerlink" title="6.1并行流原理"></a>6.1并行流原理</h2><p>对于并行流，其在底层实现中，是沿用了Java7提供的fork&#x2F;join分解合并框架进行实现。fork根据<strong>cpu</strong>核数进行数据分块，join对各个fork进行合并。实现过程如下所示：</p><p><img src="http://mele.cool/image-20201002225809916.png" alt="image-20201002225809916"></p><h2 id="6-2并行流注意事项"><a href="#6-2并行流注意事项" class="headerlink" title="6.2并行流注意事项"></a>6.2并行流注意事项</h2><p>对于并行流，一定不要陷入一个误区：并行一定比串行快。并行在不同的情况下它不一定是比串行快的。影响并行流性能主要存在5个因素： </p><p><strong>1）数据大小：</strong>输入数据的大小，直接影响了并行处理的性能。因为在并行内部实现中涉及到了fork&#x2F;join操作，它本身就存在性能上的开销。因此<strong>只有当数据量很大，使用并行处理才有意义。</strong> </p><p><strong>2）源数据结构</strong>：fork时会对源数据进行分割，数据源的特性直接影响了fork的性能。 </p><ul><li>ArrayList、数组或IntStream.range，可分解性最佳，因为他们都支持随机读取，因此可以被任意分割。 </li><li>HashSet、TreeSet，可分解性一般，其虽然可被分解，但因为其内部数据结构，很难被平均分解。 </li><li>LinkedList、Streams.iterate、BufferedReader.lines，可分解性极差，因为他们长度未知，无法确定在哪里进行分割。</li></ul><p><strong>3）装箱拆箱</strong> </p><ul><li><strong>尽量使用基本数据类型，避免装箱拆箱。</strong></li></ul><p><strong>4）CPU核数</strong> </p><ul><li>fork的产生数量是与可用CPU核数相关，可<strong>用的核数越多，获取的性能提升就会越大。</strong></li></ul><p><strong>5）单元处理开销</strong> </p><ul><li><strong>花在流中每个元素的时间越长，并行操作带来的性能提升就会越明显</strong>。</li></ul><h2 id="6-3结论"><a href="#6-3结论" class="headerlink" title="6.3结论"></a>6.3结论</h2><p><strong>根据性能测试可知，对于简单操作，如果环境机是多核的话，建议使用Stream并行，同时在不考虑核数的情况*下，普通for循环性能要明显高于Stream串行，相差两倍左右。</strong></p><p><strong>对于复杂操作，推荐使用Stream API操作。</strong> </p><h1 id="7-异步编程CompletableFuture"><a href="#7-异步编程CompletableFuture" class="headerlink" title="7.异步编程CompletableFuture"></a>7.异步编程<code>CompletableFuture</code></h1><blockquote><p>在现在软件开发的环境下，经常需要考虑如何能够设计出性能更加优异的系统。就像上面提到的数据并行化，就 是充分利用多核处理器结合并行操作来让代码执行效率更加优异。第二种方式就是让功能方法能够并行执行(异步编程CompletableFuture)。 </p></blockquote><h2 id="7-1Future介绍"><a href="#7-1Future介绍" class="headerlink" title="7.1Future介绍"></a>7.1<code>Future</code>介绍</h2><p>有的同学会说，对于任务并行需求，直接通过多线程实现不就可以了， 要注意，对于多线程的实现，java提 供了三种方式：继承Thread类、实现Runnable接口和实现Callable接口。但是业务代码在执行时会考虑执行顺序 的问题，直接基于这些方式实现多线程会出现两个问题： </p><p>1）要想控制线程执行顺序，会通过join()等待线程结束，那这样的话又回归到了阻塞式调用的思路上，违背了并行的需求。 另外还可以通过wait()、notify()、notifyAll()结合状态变量实现，但实现起来过于复杂。 </p><p>2）线程执行完之后，要想获取线程执行结果，还要用过共享变量或线程间通信等方式来获取，同样过于复杂。 为了解决上述问题，Java5中推出了<strong>Future</strong>，其初衷就是用于构建复杂并行操作。内部方法在返回时，不是返回一个值，而是返回Future对象。 其本质是在执行主业务的同时，异步的执行其他分业务，从而利用原本需要同步执行时的等待时间去执行其他的业 务，当需要获取其结果时，再进行获取。 </p><p><strong>在Future接口中有五个抽象方法：</strong> </p><ol><li>cancel()：取消任务, 取消成功返回true；入参mayInterruptIfRunning表示是否允许取消正在执行中的任务。 </li><li>isCancelled()：返回布尔值，代表是否取消成功。</li><li>isDone()：返回布尔值，代表是否执行完毕。 </li><li>get()：返回Future对象，获取执行结果，如果任务没有完成会阻塞到任务完成再返回。 </li><li>get(long timeout, TimeUnit unit)：获取执行结果并设置超时时间，如果超时则抛出TimeoutException</li></ol><h2 id="7-2CompletableFuture"><a href="#7-2CompletableFuture" class="headerlink" title="7.2CompletableFuture"></a>7.2CompletableFuture</h2><p>CompletableFuture是Java1.8提供的一个新类，其实现了Future与CompletionStage两个接口。提供了诸多API扩展功能，可以通过Stream形式简化异步编程的复杂度，同时提供通过回调方式处理计算结果。</p><h3 id="7-2-1-异步任务创建"><a href="#7-2-1-异步任务创建" class="headerlink" title="7.2.1 异步任务创建"></a>7.2.1 异步任务创建</h3><p>在CompletableFuture中提供了四个静态方法用于创建异步任务 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据源码可知，runAsync()分为一个参数和两个参数，并且其内部都会调用asyncRunStage().</span><br><span class="hljs-comment">//在该方法内部会创建异步任务，并把任务放入线程池中。并且runAsync()是没有返回值的。</span><br><span class="hljs-comment">//根据源码可知，当传入Executor会使用指定线程池执行，如果没有传入则使用默认ForkJoinPool.commonPool()执 行，值得注意的是，commonPool中都是守护线程，主线程执行完，子线程也就over了。因此建议当任务非常耗 时，使用自定义线程池。</span><br><span class="hljs-number">1.</span>runAsync(Runnable runnable) <br><span class="hljs-number">2.</span>runAsync(Runnable runnable,Executor executor) <br><span class="hljs-comment">//根据源码可知，supplyAsync()分为一个参数和两个参数，并且其内部都会调用asyncSupplyStage().</span><br>  <span class="hljs-comment">//现在可知，其实supplyAsync()与runAsync()内部原理类似，但supplyAsync()有返回值。</span><br><span class="hljs-number">3.</span>supplyAsync(Supplier&lt;U&gt; supplier) <br><span class="hljs-number">4.</span>supplyAsync(Supplier&lt;U&gt; supplier,Executor executor)<br>  <br></code></pre></td></tr></table></figure><p>使用示例:</p><p><img src="http://mele.cool/image-20201002232340066.png" alt="image-20201002232340066"></p><h3 id="7-2-2-异步计算结果触发回调"><a href="#7-2-2-异步计算结果触发回调" class="headerlink" title="7.2.2 异步计算结果触发回调"></a>7.2.2 异步计算结果触发回调</h3><blockquote><p>当异步任务结束或者抛出异常时，还要根据结果来完成特定的操作，对于这种需求CompletableFuture也提供了方法进行实现 </p></blockquote><h4 id="7-2-2-1whenComplete-与whenCompleteAsync"><a href="#7-2-2-1whenComplete-与whenCompleteAsync" class="headerlink" title="7.2.2.1whenComplete()与whenCompleteAsync()"></a><strong>7.2.2.1whenComplete()<strong>与</strong>whenCompleteAsync()</strong></h4><p>whenComplete是在当前任务线程中继续执行指定的特定处理，而whenCompleteAsync会将指定的特定交给线程池另开启一个线程来执行。</p><p><img src="http://mele.cool/image-20201003162011657.png" alt="image-20201003162011657"></p><h4 id="7-2-2-2-exceptionally"><a href="#7-2-2-2-exceptionally" class="headerlink" title="7.2.2.2 exceptionally()"></a>7.2.2.2 <strong>exceptionally()</strong></h4><blockquote><p>exceptionally()与上述两个方法类似，都是用于当异步任务结束后，执行特定处理，但不同的是，上述两个方法即 可以处理正常的返回结果也可以处理异常，而exceptionally()只对异常进行处理，且其使用的是主线程。</p></blockquote><p><img src="http://mele.cool/image-20201003162122297.png" alt="image-20201003162122297"></p><h3 id="7-2-3-多任务依赖执行"><a href="#7-2-3-多任务依赖执行" class="headerlink" title="7.2.3 多任务依赖执行"></a>7.2.3 多任务依赖执行</h3><h4 id="7-2-3-1-thenApply"><a href="#7-2-3-1-thenApply" class="headerlink" title="7.2.3.1 thenApply()"></a>7.2.3.1 <strong>thenApply()</strong></h4><blockquote><p>该方法会接收一个Function，用于声明后续要执行的业务，其中T代表上一个方法的执行结果，fn代表当前任务的 结果数据类型，最终其会映射到CompletableFuture中的结果数据类型。 </p></blockquote><p><img src="http://mele.cool/image-20201003162440304.png" alt="image-20201003162440304"></p><p>根据运行结果可以看到，此处通过thenApply()串接了两个任务，第二个方法会在第一个方法执行完成后触发，且第二个方法的执行依赖于第一个方法的执行结果。 </p><h4 id="7-2-3-2-handle"><a href="#7-2-3-2-handle" class="headerlink" title="7.2.3.2 handle()"></a>7.2.3.2 <strong>handle()</strong></h4><blockquote><p>handle()的使用效果与thenApply()类似，但不同的是thenApply()只能处理任务的正常返回结果，一旦出现异常则 无法进行后续处理。而handle()即可以处理正常结果，也可以处理异常结果。</p><p>当第一个任务出现异常后，第二个任务会对该异常进行后续的处理，完成串性操作。</p></blockquote><p><img src="http://mele.cool/image-20201003162616742.png" alt="image-20201003162616742"></p><h4 id="7-2-3-3-thenAccept"><a href="#7-2-3-3-thenAccept" class="headerlink" title="7.2.3.3 thenAccept()"></a>7.2.3.3 <strong>thenAccept()</strong></h4><blockquote><p>当将多个任务连接起来执行时，有时最终是不需要返回结果，CompletableFuture中也提供了方法实现。 thenAccept()使用与上述方法类似，接收任务执行结果，并使用，但其没有结果返回。 </p></blockquote><p><img src="http://mele.cool/image-20201003162744285.png" alt="image-20201003162744285"></p><h4 id="7-2-3-4-thenRun"><a href="#7-2-3-4-thenRun" class="headerlink" title="7.2.3.4  thenRun()"></a>7.2.3.4  <strong>thenRun()</strong></h4><blockquote><p>thenRun()与thenAccept()使用基本相同，都是不会进行结果返回，但不同的是，thenRun()不关心方法是否有结 果，只要它完成，就会触发其执行。</p></blockquote><p><img src="http://mele.cool/image-20201003162822708.png" alt="image-20201003162822708"></p><h3 id="7-2-4-两任务合并执行"><a href="#7-2-4-两任务合并执行" class="headerlink" title="7.2.4 两任务合并执行"></a>7.2.4 两任务合并执行</h3><h4 id="7-2-4-1-两个任务全部完成触发"><a href="#7-2-4-1-两个任务全部完成触发" class="headerlink" title="7.2.4.1 两个任务全部完成触发"></a>7.2.4.1 两个任务全部完成触发</h4><h5 id="7-2-4-1-1-thenCombine"><a href="#7-2-4-1-1-thenCombine" class="headerlink" title="7.2.4.1.1 thenCombine()"></a>7.2.4.1.1 <strong>thenCombine()</strong></h5><blockquote><p>当两个异步任务都执行完毕后，它可以将两个任务进行合并，获取到两个任务的执行结果，进行合并处理，最后会有返回值。 </p><p>内部会判断当前要执行的函数是否为null，或者任务有没有执行完。如果为true，则抛出空指针异常。接着会构建 一个新的任务，将任务放入栈中，线程池会为其分配线程让其执行。 </p></blockquote><p><img src="http://mele.cool/image-20201003163113414.png" alt="image-20201003163113414"></p><h5 id="7-2-4-1-2-thenAcceptBoth"><a href="#7-2-4-1-2-thenAcceptBoth" class="headerlink" title="7.2.4.1.2 thenAcceptBoth()"></a>7.2.4.1.2 <strong>thenAcceptBoth()</strong></h5><blockquote><p>thenAcceptBoth()使用与thenCombine()类似，当两个任务执行完，获取两个任务的结果进行特定处理，但 thenAcceptBoth()没有返回值 </p></blockquote><p><img src="http://mele.cool/image-20201003163229028.png" alt="image-20201003163229028"></p><h5 id="7-2-4-1-3-runAfterBoth"><a href="#7-2-4-1-3-runAfterBoth" class="headerlink" title="7.2.4.1.3 runAfterBoth()"></a>7.2.4.1.3 <strong>runAfterBoth()</strong></h5><blockquote><p>当两个任务执行完毕，触发特定任务处理，但不要两个异步任务结果，且不会进行值返回。</p></blockquote><p><img src="http://mele.cool/image-20201003163318219.png" alt="image-20201003163318219"></p><h4 id="7-2-4-2-两个任务任意一个完成触发"><a href="#7-2-4-2-两个任务任意一个完成触发" class="headerlink" title="7.2.4.2 两个任务任意一个完成触发"></a>7.2.4.2 两个任务任意一个完成触发</h4><h5 id="7-2-4-2-1-applyToEither"><a href="#7-2-4-2-1-applyToEither" class="headerlink" title="7.2.4.2.1 applyToEither()"></a>7.2.4.2.1 <strong>applyToEither()</strong></h5><blockquote><p>当两个任务异步任务执行，谁先执行完，就以谁的结果为准，完成后续的业务处理，并且会进行结果值返回。</p></blockquote><p><img src="http://mele.cool/image-20201003163436119.png" alt="image-20201003163436119"></p><h5 id="7-2-4-2-2-acceptEither"><a href="#7-2-4-2-2-acceptEither" class="headerlink" title="7.2.4.2.2 acceptEither()"></a>7.2.4.2.2 <strong>acceptEither()</strong></h5><blockquote><p>acceptEither()的使用效果与applyToEither()类似，但acceptEither()没有返回值</p></blockquote><p><img src="http://mele.cool/image-20201003163527665.png" alt="image-20201003163527665"></p><h5 id="7-2-4-2-3-runAfterEither"><a href="#7-2-4-2-3-runAfterEither" class="headerlink" title="7.2.4.2.3 runAfterEither()"></a>7.2.4.2.3 <strong>runAfterEither()</strong></h5><blockquote><p>当两个任务执行，只要有一个任务执行完，则触发特定处理执行，无需使用异步任务的执行结果，且特定处理不会进行值的返回。</p></blockquote><p><img src="http://mele.cool/image-20201003163634259.png" alt="image-20201003163634259"></p><h3 id="7-2-5-多任务组合执行"><a href="#7-2-5-多任务组合执行" class="headerlink" title="7.2.5 多任务组合执行"></a>7.2.5 多任务组合执行</h3><h4 id="7-2-5-1-allOf"><a href="#7-2-5-1-allOf" class="headerlink" title="7.2.5.1 allOf()"></a>7.2.5.1 <strong>allOf()</strong></h4><blockquote><p>当一个特定业务处理任务的执行需要一组异步任务完成后才能执行的话，就可以通过allOf()实现。适用场景：假设现在有一个Z任务，它的执行需要[A,B,C,D,E,F]这一组异步任务全部执行完才能触发。 </p></blockquote><p><img src="http://mele.cool/image-20201003163858821.png" alt="image-20201003163858821"></p><h4 id="7-2-5-2-）anyOf"><a href="#7-2-5-2-）anyOf" class="headerlink" title="7.2.5.2 ）anyOf()"></a>7.2.5.2 ）<strong>anyOf()</strong></h4><blockquote><p>使用anyOf()时，当一组异步任务中，只要有一个执行完毕，则会被触发，利用该特性可以用来获取最快的那个线程结果。 </p></blockquote><p><img src="http://mele.cool/image-20201003164020818.png" alt="image-20201003164020818">-<br>    System.out.println(“student存在”);<br>  }else {<br>    System.out.println(“student不存在”);<br>  }<br>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>  <br><br>- **ifPresent()**方法在执行时，接收一个consumer函数式接口，如果<span class="hljs-keyword">value</span>不为<span class="hljs-keyword">null</span>，则通过consumer中的 <br><br>  accept方法获取该值。 <br><br>  ```java<br>  Optional&lt;Student&gt; studentOptional = Optional.ofNullable(student); studentOptional.ifPresent(s‐&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;学生存在&quot;));<br></code></pre></td></tr></table></figure></p><ul><li><p><strong>get()</strong></p><blockquote><p>get()的使用非常简单，但不安全，因为其在获取值的时候，如果值存在，则直接返回封装在Optional中的值，如 果不存在，则抛出NoSuchElementException。因此它的使用前提是已经确定Optional中有值，否则没有使用意义。</p></blockquote></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (studentOptional.isPresent())&#123; <br><span class="hljs-type">Student</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> studentOptional.get(); <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>orElseThrow()</strong></li></ul><blockquote><p>该方法与get()类似，都是用于取值，但是当Optional中没有值时，get()会直接抛出NoSuchElementException， 这样的话，就存在了一定的局限性，因为有时可能需要抛出自定义异常。此时就可以使用orElseThrow()，它在取值时，如果Optional中没有值时，可以抛出自定义异常。 </p></blockquote><p><img src="http://mele.cool/image-20201003165624398.png" alt="image-20201003165624398"></p><ul><li><strong>map()</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (studentOptional.isPresent())&#123;<br>Optional&lt;String&gt; nameOptional = studentOptional.map(Student::getName);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>flflatMap()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Student类添加Job属性 </span><br><span class="hljs-keyword">private</span> Optional&lt;Job&gt; job; <br><span class="hljs-comment">//Job类添加Company属性 </span><br><span class="hljs-keyword">private</span> Optional&lt;ComPany&gt; comPany;<br></code></pre></td></tr></table></figure><blockquote><p><strong>用于多层调用</strong>，同时对于结 果它不会形成多个Optional，而是将结果处理成最终的一个类型的Optional。但是通过flflatMap获取的返回值必须是Optional类型。而map则没有这个限制。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;String&gt; nameOptional = studentOptional.flatMap(Student::getJob).flatMap(Job::getCompany).map(Company::getName);<br></code></pre></td></tr></table></figure><ul><li><strong>fifilter()</strong></li></ul><blockquote><p>会根据传入的条件进行判断，如果匹配则返回一个Optional对象并包含对应的值，否则返回一个空值的Optional </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Company&gt; company = companyOptional.filter(c ‐&gt; <span class="hljs-string">&quot;itheima&quot;</span>.equals(c.getName()));<br></code></pre></td></tr></table></figure><ul><li><strong>orElse()</strong></li></ul><blockquote><p>在取值的时候，如果值不存在，有时我们会考虑返回一个默认值。该需求就可以通过orElse()实现。 其内部会判断值是否为null，如果不为null，则返回该值，如果为null，则返回传入的默认值。 </p></blockquote><p><img src="http://mele.cool/image-20201003170351987.png" alt="image-20201003170351987"></p><ul><li><strong>orElseGet()</strong></li></ul><blockquote><p>orElseGet()也是用于当Optional中没有值时，返回默认值的方法。但是它与orElse()的区别在于，它是延迟加载 的。只有当Optional中没有值是才会被调用。</p><p><strong>在使用时，更加推荐使用orElseGet()，因为它使用延迟调用所以性能更加优异。</strong> </p></blockquote><p><img src="http://mele.cool/image-20201003170559116.png" alt="image-20201003170559116"></p><h1 id="9-日期时间新方式"><a href="#9-日期时间新方式" class="headerlink" title="9.日期时间新方式"></a>9.日期时间新方式</h1><blockquote><p><code>SimpleDateFormat</code>本身是线程不安全的，在多线程环境下，如果多个线程使用同一个类解析日期，最后的结果是 无法预期的。同时继承了它的<code>DateFormat</code>类也不是线程安全的。 </p><p><strong><code>DateTimeFormatter</code></strong> 该类是不可变和线程的。该类中提供了很多方法用于替换<code>SimpleDateFormat</code>。基于<code>DateTimeFormatter</code>改造</p></blockquote><ul><li><strong><code>LocalDate</code></strong> 根据源码可知，该类是一个不可变，线程安全的类。其内部了提供了若干用于操作日期的方法</li><li>**<code>LocalTime</code>**LocalTime类可以用来操作时间</li><li><strong><code>LocalDateTime</code></strong> LocalDateTime类可以用来操作日期+时间。</li></ul><h1 id="10-jdk11新特性"><a href="#10-jdk11新特性" class="headerlink" title="10.jdk11新特性"></a>10.jdk11新特性</h1><h2 id="1）变量类型推断"><a href="#1）变量类型推断" class="headerlink" title="1）变量类型推断"></a>1）变量类型推断</h2><p>在<code>JS</code>中，不管类型是什么，我们都是使用<code>var</code>来进行变量声明的。但是之前对于<code>Java</code>的使用，都会提到它是强类型语言，变量声明需要定义特定类型。但是在<code>JDK11</code>中对<code>JDK8</code>的类型推断思路又得以延伸，使用<code>JS</code>的方式，通过<code>var</code>定义局部变量，它会根据右边的表达式推断变量类型 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello itheima&quot;</span>; <br>sout(text);<br></code></pre></td></tr></table></figure><h2 id="2）新增字符串方法"><a href="#2）新增字符串方法" class="headerlink" title="2）新增字符串方法"></a>2）新增字符串方法</h2><p>在 JDK 11 中，新增了一些字符串方法，让字符串处理更加方便。其中包括：</p><ol><li><code>String.repeat(int)</code>：可以重复指定次数的字符串。</li><li><code>String.lines()</code>：方便地按行分割字符串。</li><li><code>String.strip()</code>：去除字符串首尾空白。</li><li><code>String.stripLeading()</code>：去除字符串开头的空白。</li><li><code>String.stripTrailing()</code>：去除字符串末尾的空白。</li><li><code>String.isBlank()</code>：判断字符串是否为空白。</li></ol><h2 id="3）新增创建集合的方式"><a href="#3）新增创建集合的方式" class="headerlink" title="3）新增创建集合的方式"></a>3）新增创建集合的方式</h2><p><code>JDK11</code>提供了通过<code>of()</code>和<code>copyOf()</code>创建集合的方式，但是创建的集合长度不可变，不能进行任何修改操作.</p><p><code>of()</code>会直接创建，而<code>copyOf()</code>首先会判断传入的集合是否为不可变集合，是的话直接返回，不是的话，调用<code>of()</code>创建新集合并返回。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> List.of(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;itheima&quot;</span>); <br><span class="hljs-type">var</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(); <br><span class="hljs-type">var</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> List.copyOf(arrayList); <br></code></pre></td></tr></table></figure><h2 id="4）Files类增强"><a href="#4）Files类增强" class="headerlink" title="4）Files类增强"></a>4）Files类增强</h2><p>在<code>Files</code>类中新增两个方法：<code>writeString</code>和<code>readString</code>。可以把<code>String</code>内容写入文件或者把整个文件以<code>String</code>读出 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Files.writeString( Path.of(<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;demo.txt&quot;</span>), <span class="hljs-string">&quot;hello,itheima&quot;</span>, <span class="hljs-string">&quot;utf‐8&quot;</span>); <br><br><span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> Files.readString(Paths.get(<span class="hljs-string">&quot;./demo.txt&quot;</span>), <span class="hljs-string">&quot;utf‐8&quot;</span>); <br></code></pre></td></tr></table></figure><h2 id="5）HTTP-Client-Api"><a href="#5）HTTP-Client-Api" class="headerlink" title="5）HTTP Client Api"></a>5）HTTP Client Api</h2><p>平时我们要去访问<code>HTTP</code>资源，大多数时间我们都是通过第三方完成的，虽然在<code>JDK</code>标准类库中有<code>HttpURLConnection</code>，但是也不太好用。 在<code>JDK9</code>就提出了<code>HTTP Client Api</code>，经过9，10两个版本的改进，在11中正式发布。其同时支持同步请求和异步请 求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpRequest.newBuilder()<br>.uri(URI.create(<span class="hljs-string">&quot;http://www.itcast.cn&quot;</span>)) <br>.POST() <br>.build(); <br><span class="hljs-type">var</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newHttpClient(); <br><span class="hljs-comment">// 同步 </span><br>HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); <br><span class="hljs-comment">// 异步 </span><br>client.sendAsync(request, HttpResponse.BodyHandlers.ofString()) <br>.thenApply(HttpResponse::body) <br>.thenAccept(System.out::println);<br></code></pre></td></tr></table></figure><h2 id="6）更方便的编译运行"><a href="#6）更方便的编译运行" class="headerlink" title="6）更方便的编译运行"></a>6）更方便的编译运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">之前</span> <br>javac Demo.java <br>java Demo <br><span class="hljs-meta prompt_">#</span><span class="language-bash">现在</span> <br>java Demo.java <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2024/04/08/git/"/>
      <url>/2024/04/08/git/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git常用命令"><a href="#1-git常用命令" class="headerlink" title="1.git常用命令"></a>1.git常用命令</h1><h2 id="1-1-设置用户信息"><a href="#1-1-设置用户信息" class="headerlink" title="1.1.设置用户信息"></a>1.1.设置用户信息</h2><ul><li><strong>设置用户名</strong> <code>git config --global user.name &quot;yourname&quot;</code></li><li><strong>设置邮箱</strong> <code>git config --global user.email &quot;youemail@qq.com&quot;</code></li><li><strong>查看配置信息</strong> <code>git config --list</code>  </li><li><strong>查看用户名</strong>  <code>git config user.name</code></li></ul><p>配置信息保存在   <code>~/.gitconfig</code> 文件中</p><h2 id="1-2-获取git仓库"><a href="#1-2-获取git仓库" class="headerlink" title="1.2 获取git仓库"></a>1.2 获取git仓库</h2><p>要使用git对代码进行版本控制,首先要获得git仓库,获得方式有两种:</p><ul><li>本地初始化一个git仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在本地仓库文件夹中</span><br>git init<br></code></pre></td></tr></table></figure><ul><li>从远程仓库克隆</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone 远程仓库地址<br></code></pre></td></tr></table></figure><h2 id="1-3-工作目录、暂存区以及版本库-概念"><a href="#1-3-工作目录、暂存区以及版本库-概念" class="headerlink" title="1.3 工作目录、暂存区以及版本库 概念"></a>1.3 工作目录、暂存区以及版本库 概念</h2><ul><li>**版本库:**前面看到的.git隐藏文件夹就是版本库,版本库中存储了很多配置信息、日志信息和文件版本信息等</li><li><strong>工作目录(工作区)</strong> :包含.git文件夹的目录就是工作目录,主要用于存放开发的代码</li><li><strong>暂存区:</strong> .git文件夹中有很多文件,其中有一个index文件就是暂存区,也可以叫做stage.暂存区是一个临时保存修改文件的地方</li></ul><h2 id="1-4-Git工作目录下文件的两种状态"><a href="#1-4-Git工作目录下文件的两种状态" class="headerlink" title="1.4 Git工作目录下文件的两种状态"></a>1.4 Git工作目录下文件的两种状态</h2><ul><li>untracked 未跟踪(未被纳入版本控制)</li><li>tracked 已跟踪(被纳入版本控制)<ul><li>Unmodified未修改状态</li><li>Modified        已修改状态</li><li>Staged          已暂存状态</li></ul></li></ul><h2 id="1-5-提交命令和查看状态"><a href="#1-5-提交命令和查看状态" class="headerlink" title="1.5 提交命令和查看状态"></a>1.5 提交命令和查看状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看各个文件状态</span><br>git status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使输出信息更简洁</span><br>git status -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">把文件加入暂存区</span> <br>git add hell.java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">把文件取消暂存</span><br>git reset HEAD hell.java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">把暂存区文件提交到本地仓库 (如果文件没加入暂存区则无法提交到本地仓库)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不加-m,则会打开编辑器让填写日志</span><br>git commit -m &quot;提交日志&quot;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">删除文件(删除本地工作区文件,需要git commit -m <span class="hljs-string">&quot;delete file&quot;</span> 提交到远程)</span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">如果右键删除文件,并没有加到暂存区,还需要通过git add 文件名加到暂存区后再commit同步到git远程</span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">推荐git <span class="hljs-built_in">rm</span>方式删除</span><br> git rm hell.java<br> <br></code></pre></td></tr></table></figure><h2 id="1-6-将文件添加到忽略列表"><a href="#1-6-将文件添加到忽略列表" class="headerlink" title="1.6 将文件添加到忽略列表"></a>1.6 将文件添加到忽略列表</h2><p>一般我们总会有些文件无需纳入Git的管理,也不希望它们总出现在未跟踪文件列表,通常都是些自动生成的文件,比如日志文件,或者编译过程中创建的临时文件等。在这种情况下,我们可以在工作目录中创建一个名为.gitignore的文件(文件名称固定) ,列出要忽略的文件模式。</p><p>windows下无法直接创建.gitignore文件,需要通过gitbash命令:touch .gitignore创建</p><h2 id="1-7-查看日志记录"><a href="#1-7-查看日志记录" class="headerlink" title="1.7 查看日志记录"></a>1.7 查看日志记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过回车分页查看 退出输入q</span><br>git log<br></code></pre></td></tr></table></figure><h2 id="1-8-远程仓库"><a href="#1-8-远程仓库" class="headerlink" title="1.8 远程仓库"></a>1.8 远程仓库</h2><h3 id="1-8-1查看远程仓库"><a href="#1-8-1查看远程仓库" class="headerlink" title="1.8.1查看远程仓库"></a>1.8.1<strong>查看远程仓库</strong></h3><p>如果想查看已经配置的远程仓库服务器,可以运行<code>git remote</code>命令,显示和本地仓库已经关联的远程仓库。它会列出指定的每一个远程服务器的简写。<br>如果已经克隆了远程仓库,那么至少应该能看到origin,这是Git克隆的仓库服务器的默认名字</p><p><code>git remote -v</code> 显示更多信息</p><h3 id="1-8-2添加远程仓库"><a href="#1-8-2添加远程仓库" class="headerlink" title="1.8.2添加远程仓库"></a><strong>1.8.2添加远程仓库</strong></h3><p>一个本地仓库可以绑定多个远程仓库</p><p><code>git remote add &lt;shortname&gt; &lt;url&gt;</code>   shortname远程仓库简称</p><p>Eg: <code>git remote add origin https://gitee.com/ChuanzhiBoKe/repo1.git</code></p><h3 id="1-8-3移除远程仓库"><a href="#1-8-3移除远程仓库" class="headerlink" title="1.8.3移除远程仓库"></a>1.8.3<strong>移除远程仓库</strong></h3><p>如果因为一些原因想要移除一个远程仓库,可以使用<code>git remote rm 远程仓库简称</code></p><p>注意:此命令只是从本地移除远程仓库的记录,并不会真正影响到远程仓库</p><h3 id="1-8-4抓取和拉取"><a href="#1-8-4抓取和拉取" class="headerlink" title="1.8.4抓取和拉取"></a>1.8.4<strong>抓取和拉取</strong></h3><ul><li>git fetch是从远程仓库获取最新版本到本地仓库,不会自动merge</li></ul><p>​执行完git fetch后会把远程仓库文件以二进制形式存储到.git中,并不会主动合并到工作区,还需要手动合并:</p><p>​<code>git merge origin/master</code>  (origin&#x2F;master会在git fetch后显示)</p><ul><li><p>git pull是从远程仓库获取最新版本并merge到本地仓库</p><p>​注意:如果当前本地仓库不是从远程仓库克隆,而是本地创建的仓库,并且仓库中存在文件,此时再从远程仓库拉取文件(<strong>git pull origin master</strong>)的时候会报错(fatal:refusing to merge unrelated histories ) ,</p><p>​解决此问题可以在git pull命令后加入参数**-allow-unrelated-histories**</p><p>​然后会让输入日志.保存即可.</p></li></ul><h3 id="1-8-5推送到远程仓库"><a href="#1-8-5推送到远程仓库" class="headerlink" title="1.8.5推送到远程仓库"></a>1.8.5<strong>推送到远程仓库</strong></h3><p>​<code>git push origin master</code></p><blockquote><p>只有把文件加入暂存区才可加到本地仓库,如果想一步完成:</p><p><code>git commit -a -m &quot;提交日志&quot;</code></p></blockquote><h2 id="1-9-git分支"><a href="#1-9-git分支" class="headerlink" title="1.9 git分支"></a>1.9 git分支</h2><h3 id="1-9-1查看分支"><a href="#1-9-1查看分支" class="headerlink" title="1.9.1查看分支:"></a>1.9.1查看分支:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有本地分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -r</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有本地分支和远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -a</span><br></code></pre></td></tr></table></figure><h3 id="1-9-2创建分支"><a href="#1-9-2创建分支" class="headerlink" title="1.9.2创建分支"></a>1.9.2创建分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建分支 (在当前分支基础上创建)</span><br>git branch 分支名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span><br>git checkout 分支名称<br></code></pre></td></tr></table></figure><h3 id="1-9-3推送本地分支至远程分支"><a href="#1-9-3推送本地分支至远程分支" class="headerlink" title="1.9.3推送本地分支至远程分支"></a>1.9.3推送本地分支至远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin 本地分支名称<br></code></pre></td></tr></table></figure><h3 id="1-9-4合并分支"><a href="#1-9-4合并分支" class="headerlink" title="1.9.4合并分支"></a>1.9.4合并分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在master分支下操作此命令,表示把b1分支合并到master</span><br>git merge b1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">有时候合并操作不会如此顺利。如果你在两个不同的分支中,对同一个文件的同一个部分进行了不同的修改, Git就没办法合并它们,同时会提示文件冲突。此时需要我们打开冲突的文件并修复冲突内容,最后执行git add命令来标识中突已解决</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">步骤如下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 git merge b1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2 提示冲突,手动解决冲突</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3 git add</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4 git commit -m <span class="hljs-string">&quot;解决冲突日志&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="1-9-5新增文件推送到远程分支"><a href="#1-9-5新增文件推送到远程分支" class="headerlink" title="1.9.5新增文件推送到远程分支"></a>1.9.5新增文件推送到远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin 远程分支名称<br></code></pre></td></tr></table></figure><h3 id="1-9-6删除本地分支"><a href="#1-9-6删除本地分支" class="headerlink" title="1.9.6删除本地分支"></a>1.9.6删除本地分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地分支 不会影响远程分支</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果要删除的分支中进行了一些开发动作,此时执行上面的删除命令并不会删除分支,如果坚持要删除此分支,可以将命令中的一d参数改为-D</span><br>git branch -d 本地分支名称<br></code></pre></td></tr></table></figure><h3 id="1-9-7删除远程分支"><a href="#1-9-7删除远程分支" class="headerlink" title="1.9.7删除远程分支"></a>1.9.7删除远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin -d branchName<br></code></pre></td></tr></table></figure><h2 id="1-10-git标签"><a href="#1-10-git标签" class="headerlink" title="1.10 git标签"></a>1.10 git标签</h2><blockquote><p>像其他版本控制系统(VCS)一样, Git可以给历史中的某一个提交打上标签,以示重要。比较有代表性的是人们会使用这个功能来标记发布结点(v1.0,v1.2等) 。标签指的是某个分支某个特定时间点的状态。通过标签,可以很方便的切换到标记时的状态。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有标签</span><br>git tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建标签 v0,1是标签名</span><br>git tag v0.1  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看tag信息 比较详细</span><br>git show 标签名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送标签到远程仓库</span><br>git push origin 标签名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检出标签</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">新建一个分支，指向某个tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b [新分支名] [标签名]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如:git checkout -b b3 v1.0 表示创建一个b3分支,其代码状态就是v1.0标签时的代码状态</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除本地标签</span><br>git tag -d 本地标签名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除远程标签</span><br>git push origin:refs/tags/远程标签名<br></code></pre></td></tr></table></figure><h1 id="2-TortoiseGit"><a href="#2-TortoiseGit" class="headerlink" title="2. TortoiseGit"></a>2. TortoiseGit</h1><p>TortoiseGit是一款开源的Git图形界面工具,使用TortoiseGit可以简化Git相关的操作(本质上还是执行的Git相关命令)<br>TortoiseGit下载地址: <a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a></p><h1 id="3-IDEA使用git"><a href="#3-IDEA使用git" class="headerlink" title="3.IDEA使用git"></a>3.IDEA使用git</h1><h1 id="4-SSH协议配置"><a href="#4-SSH协议配置" class="headerlink" title="4.SSH协议配置"></a>4.SSH协议配置</h1><p><strong>使用Git Bash生成公钥和私钥:</strong></p><ol><li>使用命令<code>ssh-keygen-trsa</code>生成公钥和私钥,执行完成后在windows本地用户.ssh目录:  <code>C:\Users\用户名\.ssh</code> 下面生成公钥和私钥</li><li>把公钥内容复制到服务器</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac常用命令</title>
      <link href="/2024/04/08/MAC%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/04/08/MAC%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>显示隐藏文件、文件夹</strong>：<code>Command + Shift + . </code>     </p></li><li><p><strong>最小化全部应用:</strong> <code>Command + Option + H + M</code></p></li><li><p><strong>显示、隐藏程序坞：</strong> <code>command + option + d  </code></p></li><li><p><strong>设置启动台图标大小：</strong> <code>defaults write com.apple.dock springboard-columns -int 10 </code> 10代表一行显示10个图标 设置完重启dock：<code>killall Dock</code></p></li><li><p><strong>调出”强制退出应用”窗口</strong>: <code>command + option + esc</code></p></li><li><p><strong>全屏:</strong> <code>command + ctrl + d</code></p></li><li><p><strong>查看本机ip:</strong> <code>ifconfig | grep &quot;inet&quot;</code></p></li><li><p><strong>连接共享服务器</strong>:在桌面上按 <code>command + k</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和抽象类</title>
      <link href="/2024/04/08/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2024/04/08/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1. 抽象类"></a>1. 抽象类</h1><h2 id="什么是抽象类"><a href="#什么是抽象类" class="headerlink" title="什么是抽象类:"></a><strong>什么是抽象类:</strong></h2><p>​ 包含一个抽象方法的类就是抽象类</p><h2 id="什么是抽象方法"><a href="#什么是抽象方法" class="headerlink" title="什么是抽象方法:"></a><strong>什么是抽象方法:</strong></h2><pre><code class="hljs">     声明而未被实现的方法，抽象方法必须使用`abstract`关键词字声明</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;  <span class="hljs-comment">//关键词abstract，声明该类为抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Num</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">Name</span><span class="hljs-params">()</span>; <span class="hljs-comment">//声明该方法为抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>抽象类被子类继承，子类（如果不是抽象类）必须重写抽象类中的所有抽象方法</strong></li><li><strong>抽象类不能被直接实例化，要通过其子类进行实例化</strong> </li><li>只要包含一个抽象方法的抽象类，该方法必须要定义成抽象类，不管是否还包含有其他方法。</li><li>子类中的抽象方法不能与父类的抽象方法同名。</li><li><code>abstract</code>不能与<code>final</code>并列修饰同一个类。</li><li><code>abstract</code>不能与<code>private</code>、<code>static</code>、<code>final</code>或<code>native</code>并列修饰同一个方法。</li></ul><h2 id="为什么需要用到抽象类？"><a href="#为什么需要用到抽象类？" class="headerlink" title="为什么需要用到抽象类？"></a>为什么需要用到抽象类？</h2><blockquote><p>在下面这个例子中，把打印机类封装成抽象类，把<code>print</code>定义成抽象方法，当<code>HPPrinter</code>和<code>CannonPrinter</code>要继承<code>Printer</code>类的时候，必须重写<code>print</code>方法。<br>这样写的好处是，<strong>每个打印机都有自己打印方式，此举可以防止子类没有写明打印方式。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印机抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Printer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        system.out.print(<span class="hljs-string">&quot;打印机开启&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        system.out.print(<span class="hljs-string">&quot;打印机关闭&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//把print方法定义为抽象方法</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;  <br>&#125;<br><span class="hljs-comment">//惠普打印机</span><br><span class="hljs-keyword">public</span> HPPrinter <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Printer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;             <span class="hljs-comment">//必须重写抽象方法print()   </span><br>        system.out.print(<span class="hljs-string">&quot;惠普打印机开始打印&quot;</span>);<br>    &#125;;<br>&#125;<br><span class="hljs-comment">//佳能打印机</span><br><span class="hljs-keyword">public</span> CanonPrinter <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Printer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;             <span class="hljs-comment">//必须重写抽象方法print()</span><br>        system.out.print(<span class="hljs-string">&quot;佳能打印机开始打印&quot;</span>);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-接口"><a href="#2-接口" class="headerlink" title="2. 接口"></a>2. 接口</h1><h2 id="JDK8之前"><a href="#JDK8之前" class="headerlink" title="JDK8之前:"></a><strong>JDK8之前:</strong></h2><p>​<strong>接口可以理解为一种特殊的类，里面全部是由全局常量和公共的抽象方法组成,接口中所有方法都是抽象方法.接口当中所有的方法都是public类型.</strong></p><h2 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性:"></a><strong>JDK8新特性:</strong></h2><ol><li><p><strong>引入默认方法和静态方法</strong>。</p><p>在 <code>JDK 8</code> 之前，接口只能包含抽象方法和静态常量。</p><p><strong>这个变化的原因在于，如果接口新增抽象方法，那么所有实现类都必须实现这个新方法，不利于接口的扩展。</strong>通过引入默认方法，可以在不破坏二进制兼容性的前提下向现有接口添加新方法，而不需要所有实现类都实现这个新方法。</p><p><strong>默认方法和静态方法都可以有自己的方法体,当然默认方法也可以被重写.</strong></p><p><strong>可以同时有多个默认方法 或 多个静态方法</strong></p><p>静态方法也是非抽象方法，有自己的方法体，在接口中定义静态方法可以直接用 <code>接口名.方法名()</code> 的形式来调用。和调用类的静态方法一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBird</span> &#123;<br>     <span class="hljs-comment">//抽象方法eat,子类须重写</span><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>  <br>     <span class="hljs-comment">//默认方法1 sing,子类选择性重写</span><br>     <span class="hljs-keyword">default</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String song)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;sing a song :&quot;</span> + song);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sing a song :&quot;</span> + song;<br>     &#125;<br>  <br>     <span class="hljs-comment">//默认方法2 fly,子类选择性重写</span><br>     <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;fly&quot;</span>);<br>     &#125;<br>  <br>     <span class="hljs-comment">//静态方法,直接调用,无法重写</span><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">layEgg</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;下蛋&quot;</span>);<br>     &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>引入函数式接口</strong>。</p><p>**<u>函数式接口是指只包含一个抽象方法的接口</u>**，可以通过 <code>Lambda</code> 表达式来创建该接口的对象。</p><p><strong>在 <code>JDK 8</code> 中，所有函数式接口都可以通过 <code>Lambda</code> 表达式进行实例化。</strong></p></li></ol><h2 id="接口的格式"><a href="#接口的格式" class="headerlink" title="接口的格式:"></a><strong>接口的格式:</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">interfaceName</span>&#123;<br>    全局常量<br>    抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的实现也必须通过子类，使用关键字implements，而且接口是可以多实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter1</span>,Inter2&#123; <span class="hljs-comment">//Inter1和Inter2是接口</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>一个类可以同时继承抽象类和接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abs</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter1</span>,Inter2&#123; <span class="hljs-comment">//Abs是一个抽象类</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>一个接口不能继承抽象类，但可以通过implements关键字继承多个接口，实现接口的多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter1</span>,Inter2&#123; <span class="hljs-comment">//Inter、Inter1、Inter2都为接口</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-抽象类和接口区别"><a href="#3-抽象类和接口区别" class="headerlink" title="3. 抽象类和接口区别"></a>3. 抽象类和接口区别</h1><h2 id="3-1-语法层次"><a href="#3-1-语法层次" class="headerlink" title="3.1 语法层次"></a>3.1 语法层次</h2><p>​抽象类用<code>abstract</code>关键字修饰类为抽象类,接口<code>Interface</code>;</p><p><strong>语法规范:</strong></p><ol><li>接口不能有构造方法，抽象类可以有。</li><li>接口不能有方法体，抽象类可以有。</li><li>接口不能有静态方法，抽象类可以有。</li><li>在接口中凡是变量必须是<code>public static final</code>(只能是常量)，而在抽象类中没有要求。</li><li>抽象类可以定义非抽象方法，而接口中所有的方法都是抽象的</li></ol><p>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;  <span class="hljs-comment">//关键词abstract，声明该类为抽象类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Num</span><span class="hljs-params">()</span>;　　　　　　<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Name</span><span class="hljs-params">()</span>; 　　　<span class="hljs-comment">//声明该方法为抽象方法</span><br>&#125;<br><br>Interface Person &#123;<br>　　<span class="hljs-keyword">void</span> <span class="hljs-title function_">Num</span><span class="hljs-params">()</span>;<br>　　<span class="hljs-keyword">void</span> <span class="hljs-title function_">Name</span><span class="hljs-params">()</span>;<br>&#125;　<br></code></pre></td></tr></table></figure><p>抽象类方式中，抽象类可以拥有任意范围的成员数据，同时也可以拥有自己的非抽象方法，<br>但是接口方式中，它仅能够有静态、不能修改的成员数据（但是我们一般是不会在接口中使用成员数据），同时它所有的方法都必须是抽象的。</p><p>在某种程度上来说，接口是抽象类的特殊化。<br>对子类而言，它只能继承一个抽象类（这是java为了数据安全而考虑的），但是却可以实现多个接口。</p><h2 id="3-2-设计层次"><a href="#3-2-设计层次" class="headerlink" title="3.2 设计层次"></a>3.2 设计层次</h2><h3 id="1-抽象层次不同"><a href="#1-抽象层次不同" class="headerlink" title="1. 抽象层次不同"></a>1. 抽象层次不同</h3><p><strong>抽象类是对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</strong></p><h3 id="2-跨域不同"><a href="#2-跨域不同" class="headerlink" title="2. 跨域不同"></a>2. 跨域不同</h3><p>抽象类所跨域的是具有相似特点的类，而接口却可以跨域不同的类。</p><p>我们知道抽象类是从子类中发现公共部分，然后泛化成抽象类，子类继承该父类即可，<br>但是接口不同。实现它的子类可以不存在任何关系或共同之处。例如猫、狗可以抽象成一个动物类抽象类，具备叫的方法。鸟、飞机可以实现飞Fly接口，具备飞的行为，这里我们总不能将鸟、飞机共用一个父类吧！</p><p>所以说抽象类所体现的是一种继承关系，要想使得继承关系合理，父类和派生类之间必须存在”is-a” 关系，即父类和派生类在概念本质上应该是相同的。</p><p>对于接口则不然，并不要求接口的实现者和接口定义在概念本质上是一致的， 仅仅是实现了接口定义的契约而已。</p><h3 id="3-设计层次不同"><a href="#3-设计层次不同" class="headerlink" title="3. 设计层次不同"></a>3. 设计层次不同</h3><p>对于抽象类而言，它是自下而上来设计的，我们要先知道子类才能抽象出父类，而接口则不同，它根本就不需要知道子类的存在，只需要定义一个规则即可，至于什么子类、什么时候怎么实现它一概不知。</p><p>比如我们只有一个猫类在这里，如果你这是就抽象成一个动物类，是不是设计有点儿过度？我们起码要有两个动物类，猫、狗在这里，我们在抽象他们的共同点形成动物抽象类吧！所以说抽象类往往都是通过重构而来的！</p><p>但是接口就不同，比如说飞，我们根本就不知道会有什么东西来实现这个飞接口，怎么实现也不得而知，我们要做的就是事前定义好飞的行为接口。所以说抽象类是自底向上抽象而来的，接口是自顶向下设计出来的。</p><h1 id="4-相同点"><a href="#4-相同点" class="headerlink" title="4.相同点:"></a>4.相同点:</h1><ol><li><p>都不能被实例化,只能通过子类实例化.</p></li><li><p>都可以被继承.</p></li><li><p>都可以实现程序的多态性.</p></li></ol><p>链接：</p><p><a href="https://www.jianshu.com/p/b0cf5d770a86">https://www.jianshu.com/p/b0cf5d770a86</a><br><a href="https://blog.csdn.net/weixin_39788493/article/details/80854547">https://blog.csdn.net/weixin_39788493/article/details/80854547</a><br><a href="https://learn.skyofit.com/archives/303">https://learn.skyofit.com/archives/303</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 接口 </tag>
            
            <tag> 抽象类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac版微信备份</title>
      <link href="/2024/04/02/mac%E7%89%88%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD/"/>
      <url>/2024/04/02/mac%E7%89%88%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-快速将iPhone上微信的聊天记录备份到电脑"><a href="#1-快速将iPhone上微信的聊天记录备份到电脑" class="headerlink" title="1.快速将iPhone上微信的聊天记录备份到电脑"></a>1.快速将iPhone上微信的聊天记录备份到电脑</h1><h2 id="第1步"><a href="#第1步" class="headerlink" title="第1步"></a>第1步</h2><p>用数据线将手机与电脑连接</p><h2 id="第2步"><a href="#第2步" class="headerlink" title="第2步"></a>第2步</h2><p>打开iPhone里的个人热点，关闭电脑的WiFi和本地连接（或者直接拔掉网线）。这样电脑就可以经由数据线通过手机的WiFi进行上网。</p><p>当然我们的目的并不是让电脑通过手机连接外网，而是让电脑和手机处于同一WiFi环境内。</p><h2 id="第3步"><a href="#第3步" class="headerlink" title="第3步"></a>第3步</h2><p>打开电脑端和手机端微信，电脑端选择备份聊天记录，手机端会自动弹出选择要备份的会话.</p><p>看到这里有小伙伴儿可能会问了，电脑连接手机的热点以后，是不是通过手机的流量备份的？会不会消耗我太多的流量？</p><p>其实大家完全不用担心，备份是通过局域网环境进行的，并没有外网的流量流入和流出，不信可以看我的截图。可以看到，此时的上网速度约等于0，也就是说并不消耗手机的流量。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021051676.png" alt="image-20240402105117625"></p><h1 id="2-Mac-版微信聊天记录备份文件路径"><a href="#2-Mac-版微信聊天记录备份文件路径" class="headerlink" title="2.Mac 版微信聊天记录备份文件路径"></a>2.Mac 版微信聊天记录备份文件路径</h1><p>访达打开路径快捷键:<code>CMD + SHIFT + G</code></p><p><code>/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.0b4.0.9</code></p><p>在 Mac 电脑系统内，微信的备份文件会存放在 2.0b4.0.9 的 Backup 文件夹内，并且备份目录的路径不会改变。每一个微信账号的聊天记录备份对应此目录下的一个文件夹，名称通常为<strong>一长串字母和数字</strong>的组合。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021053647.png" alt="image-20240402105325620"></p><p>如需把备份文件存储到网盘或硬盘,操作Backup 文件夹即可.</p><p>例如压缩文件夹保存到阿里云盘,下次备份后(增量备份)再次压缩保存阿里云盘,需要恢复时只需最新的一个备份文件即可.</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10个有趣的linux命令</title>
      <link href="/2024/04/01/10%20%E4%B8%AA%20%E6%9C%89%E8%B6%A3%E7%9A%84Linux%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/04/01/10%20%E4%B8%AA%20%E6%9C%89%E8%B6%A3%E7%9A%84Linux%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-rev命令"><a href="#1-rev命令" class="headerlink" title="1.rev命令"></a>1.rev命令</h1><p><strong>一行接一行地颠倒所输入的字符串。</strong></p><p>运行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$rev</span></span><br></code></pre></td></tr></table></figure><p>如输入：shiyanlou</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">shiyanlou</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011056756.png" alt="image-20240401105646687"></p><h1 id="2-asciiview命令"><a href="#2-asciiview命令" class="headerlink" title="2.asciiview命令"></a><strong>2.asciiview命令</strong></h1><p>1.先安装aview</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install aview<br></code></pre></td></tr></table></figure><p>2.再安装imagemagick</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install imagemagick<br></code></pre></td></tr></table></figure><p>3.使用asciiview</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$asciiview</span> shiyanlou.png -driver curses</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011058483.png" alt="image-20240401105807449"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="3-sl命令"><a href="#3-sl命令" class="headerlink" title="3.sl命令"></a><strong>3.sl命令</strong></h1><p>你会看到一辆火车从屏幕右边开往左边……</p><p>安装</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ sudo apt-<span class="hljs-meta">get</span> install <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011058207.png" alt="image-20240401105832176"></p><h1 id="4-aafire命令"><a href="#4-aafire命令" class="headerlink" title="4.aafire命令"></a><strong>4.aafire命令</strong></h1><p><strong>在你的终端放一把火。</strong></p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install libaa-bin<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$aafire</span></span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011058294.png" alt="image-20240401105857259"></p><h1 id="5-cmatrix命令"><a href="#5-cmatrix命令" class="headerlink" title="5.cmatrix命令"></a><strong>5.cmatrix命令</strong></h1><p>这个很酷！《黑客帝国》那种矩阵风格的动画效果。</p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install cmatrix<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$cmatrix</span></span><br></code></pre></td></tr></table></figure><p>要关闭效果，按ctrl+c 结束。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011059135.png" alt="image-20240401105922096"></p><h1 id="6-factor命令"><a href="#6-factor命令" class="headerlink" title="6.factor命令"></a><strong>6.factor命令</strong></h1><p><strong>分解因数</strong>，这个……可以帮家里的小学生解题</p><p>运行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$factor60</span></span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011059323.png" alt="image-20240401105939292"></p><h1 id="7-oneko命令"><a href="#7-oneko命令" class="headerlink" title="7.oneko命令"></a><strong>7.oneko命令</strong></h1><p><strong>桌面上出现一只喵星人</strong>，跟着你的鼠标跑，你不动了它就睡觉。哈哈，这个挺不错!</p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$sudo</span> apt-<span class="hljs-built_in">get</span> install oneko<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$oneko</span></span><br></code></pre></td></tr></table></figure><p>要关掉这家伙，按ctrl+c 结束。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011059412.png" alt="image-20240401105957379"></p><h1 id="8-boxes命令"><a href="#8-boxes命令" class="headerlink" title="8.boxes命令"></a><strong>8.boxes命令</strong></h1><p><strong>在输入的文本或者代码周围框上各种ASCII 艺术画。</strong></p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install boxes<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shiyanlou.com&quot;</span> | boxes</span><br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shiyanlou.com&quot;</span> | boxes -d dog</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011100842.png" alt="image-20240401110019807"></p><h1 id="9-xeyes命令"><a href="#9-xeyes命令" class="headerlink" title="9.xeyes命令"></a><strong>9.xeyes命令</strong></h1><p>xeyes命令是一个图形显示程序。运行这个程序，你会看到一双萌萌的眼睛会一直盯着你。</p><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install xeyes<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>xeyes<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011100297.png" alt="image-20240401110033259"></p><h1 id="10-pv命令"><a href="#10-pv命令" class="headerlink" title="10.pv命令"></a><strong>10.pv命令</strong></h1><p>有时候我们在电影屏幕上看到一些<strong>字幕一个个匀速显示出来</strong>，像有人在边敲键盘，边显示一样。Linux上的pv命令可以实现这种效果。</p><p>安装</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-built_in">pv</span><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;welcome to shiyanlou.com , you can learn IT by doing&quot;</span> | pv -qL 10</span><br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404011100480.png" alt="image-20240401110055448"></p><p><strong><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzQ4MTE4Mw==&mid=2247521333&idx=1&sn=b3250351772d98994580b2d9b0a4ebcc&chksm=eadb59729f996d7366bc250855930a6d7117fdb53e66dad562496faf1670241d6cf5f4e9de0c&scene=132&exptype=timeline_recommend_article_extendread_extendread_for_notrec&show_related_article=1&subscene=132&scene=132#wechat_redirect">内容来源</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源SSH软件Tabby</title>
      <link href="/2024/04/01/mac%20ssh%E8%BD%AF%E4%BB%B6Tabby/"/>
      <url>/2024/04/01/mac%20ssh%E8%BD%AF%E4%BB%B6Tabby/</url>
      
        <content type="html"><![CDATA[<h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p>Tabby 是一名老外在 Github 开源的终端连接的工具(ssh工具)，至今已经累积 45K+ star。</p><p>Tabby 的功能特性大概有：</p><ul><li>支持多平台，Windows、MacOS（Intel 芯片&#x2F;M1 芯片）、Linux 都有对应的安装包的；</li><li>自带 SFTP 功能，能够与 Linux 系统传输文件；(rz sz命令)</li><li>炫酷的终端页面，简单易用，以及各种插件支持等</li></ul><h1 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a><a href="https://github.com/Eugeny/tabby/releases">github地址</a></h1><h1 id="网页版入口"><a href="#网页版入口" class="headerlink" title="网页版入口"></a><a href="https://app.tabby.sh/">网页版入口</a></h1>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> tabby </tag>
            
            <tag> ssh </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全使用 SMB实现局域网共享</title>
      <link href="/2024/03/27/%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8SMB%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB/"/>
      <url>/2024/03/27/%E5%AE%89%E5%85%A8%E4%BD%BF%E7%94%A8SMB%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="不要使用-SMB1"><a href="#不要使用-SMB1" class="headerlink" title="不要使用 SMB1"></a>不要使用 SMB1</h1><p>在查找 SMB 协议相关资料的时候，发现很多解决 SMB 问题的资料中还会教用户开启 SMB1 协议，UP 是非常不推荐的。</p><blockquote><p>SMB1 可以追溯到20世纪80年代 IBM 和 <a href="https://pinpai.smzdm.com/1461/">微软</a>DOS 时代，距离今天已经有三十多年的时间，当时计算机安全还不存在，它在拦截攻击方面有重大的架构问题 。具体的内容就不放在本文中了，如果你感兴趣的话可以查看 《<a href="https://go.smzdm.com/73a594639ab02156/ca_aa_yc_163_akxwkxqk_14197_0_1641_0">Stop using SMB1</a>》文章。</p></blockquote><p>如今版本的 windows 10&#x2F;11 都默认禁用了 SMB1，因此如果你还在使用这一协议的话，UP 强烈建议你去关闭，方法如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215007658.png" alt="windows设置-应用"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215031091.png" alt="程序和功能"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215116409.png" alt="启用或关闭 Windows 功能"></p><h1 id="安全使用-SMB-共享的步骤"><a href="#安全使用-SMB-共享的步骤" class="headerlink" title="安全使用 SMB 共享的步骤"></a>安全使用 SMB 共享的步骤</h1><p>SMB 安全是一个可以聊三天三夜的话题，但多数人不需要涉及到深层面的安全运维设置，但如果你感兴趣，可以从下面的参考资料开始了解：</p><p><a href="https://go.smzdm.com/694444eceb20c89e/ca_aa_yc_163_akxwkxqk_14197_0_1641_0">How to Defend Users from Interception Attacks via SMB Client Defense</a></p><p><a href="https://go.smzdm.com/1a3463dea99ce5eb/ca_aa_yc_163_akxwkxqk_14197_0_1641_0">Beyond the Edge: How to Secure SMB Traffic in Windows</a></p><p>这里提供一个简单的，可以在工作或家庭的局域网中显著提高安全性且不会太复杂的 SMB 共享设置方法（如果你有更好的方法和建议，欢迎留言）：</p><ol><li><strong>新建一个用户专门用于共享文件的授权，并合理设置此用户的权限；</strong></li><li><strong>合理设置网络共享和系统安全的相关设置；</strong></li><li><strong>开启共享，授权指定用户；</strong></li><li><strong>手动添加证书，采用“映射网络驱动器”的方式访问共享。</strong></li></ol><h1 id="创建专用的用户"><a href="#创建专用的用户" class="headerlink" title="创建专用的用户"></a>创建专用的用户</h1><p>这里我们来给系统新建一个本地用户，此用户只用在 SMB 共享。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327215525782.png" alt="右击 此电脑"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea5b1c19a8241.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea5b7685fd3456.png_e1080.jpg" alt="右键空白处，点击“新用户”"></p><p>这里新建了一个账号为 “joker” 的用户，相关设置如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea5c645e375865.png_e1080.jpg" alt="由于只是用于共享，因此可以设置不能更改密码，且密码不会过期"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea6db857341022.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h1 id="合理设置网络共享和系统安全的相关设置"><a href="#合理设置网络共享和系统安全的相关设置" class="headerlink" title="合理设置网络共享和系统安全的相关设置"></a>合理设置网络共享和系统安全的相关设置</h1><h2 id="禁用“启用不安全的来宾登录”"><a href="#禁用“启用不安全的来宾登录”" class="headerlink" title="禁用“启用不安全的来宾登录”"></a>禁用“启用不安全的来宾登录”</h2><p>默认情况下，在 SMB2 和 SMB3 版本中，Windows 10 &#x2F; 11 系统下是禁用此服务的，按照本文的思路，如果你开启了我建议你关闭，步骤如下：</p><p>按住 windows 键 + R，在弹出的“运行”窗口中输入 gpedit.msc 打开“本地组策略编辑器”：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea7862c5694171.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea7b29711f3962.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617ea7fddccfb8225.png_e1080.jpg" alt="微软也明确说明了，开启此项功能会产生很大的安全漏洞"></p><p>微软也明确说明了，开启此项功能会产生很大的安全漏洞</p><p>为什么要禁用？因为很容易遭受中间人攻击。</p><p>简单来说，在你使用 SMB1 协议去共享文件时，虽然别人访问你的共享文件时 SMB1 会去验证访问者提供的用户证书是否有效，但是如果验证此证书为无效之后，SMB1 将会尝试开启“来宾”（guest）登录模式，允许访问者以“来宾”（guest）的身份进行登录。</p><p>换句话说，就相当于“<strong>我不认识你，也不知道你是好人还是坏人，但是来者皆视为宾客</strong>”。</p><p>所以你知道为啥要关闭这个设置了吧？<img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/46.png" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享">  </p><p>UP 看到很多教程都会教用户开启此项设置开解决某些 SMB 问题（比如说下图），UP 真心不建议。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe85bbab821081.jpg_e1080.jpg" alt="图片网络"></p><p>上图产生的错误，就是因为我们禁用了“来宾”身份的登录，<strong>但是大家不要认为这是不好的结果，恰恰相反，我们禁用此项功能就是为了实现这个目的——更好地保护我们的 SMB 共享资料安全</strong>。</p><p>那么该如何正确的使用 SMB 共享，请继续往下看。</p><h2 id="合理分配用户权限"><a href="#合理分配用户权限" class="headerlink" title="合理分配用户权限"></a>合理分配用户权限</h2><p>同样的，使用“运行”窗框输入 <code>secpol.msc</code> 打开 “本地安全策略”设置窗口：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eae8de94e46440.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><strong>（1）授予用户“从网络访问此计算机”的权限：</strong></p><blockquote><p>“<strong>从网络访问此计算机</strong>”指只有授权的用户能够通过网络来访问到本机上的共享文件资源（包括共享的打印机）</p></blockquote><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf6f96fe3732.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf7b8d3391245.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf82791016374.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf8a7b3595421.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf906fb054546.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617eaf964dd0a4134.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><strong>（2）限制此用户登录到系统上：“拒绝本地登录”和“拒绝通过远程桌面服务登录”</strong></p><p>按照同样的方法，将此用户添加到以下两项设置的名单中：</p><blockquote><p><strong>拒绝本地登录</strong>：即不允许特定用户在本<a href="https://www.smzdm.com/ju/sp4x11p/">电脑</a>上进行登录</p></blockquote><blockquote><p><strong>拒绝通过远程桌面服务登录</strong>：即不允许此账户使用远程桌面登录到本系统</p></blockquote><p>设置好之后，<code>joker</code> 用户就无法本地登录到系统，同时也无法通过远程桌面的形式登录到本机，因为我们的目的就是让 joker 只能用来使用 <code>SMB</code> 共享。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617f619033ba43842.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h2 id="本地安全选项设置"><a href="#本地安全选项设置" class="headerlink" title="本地安全选项设置"></a>本地安全选项设置</h2><p>请参考下图的设置进行设置：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617faa4314b368533.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><blockquote><p><strong>Microsoft网络<a href="https://www.smzdm.com/fenlei/fuwuqi/">服务器</a>：对通信进行数字签名(始终)</strong> <strong>—— 禁用</strong></p><p>此项设置用来确定 SMB 的数据包是否需要进行数字签名（类似于加密的意思），用来防止中间人攻击。比如说当我们设置了一个文件夹的 SMB 共享，那么当网络里面的其他人（相当于客户端）来想要访问我们的这个文件夹时，我们（相当于服务端）就会要求其他人也开启 SMB 数字签名的功能，否则我们不允许他们来访问我们的文件夹（不允许建立连接）。对于一般人来说是不需要开启的，除非你有很明确的理由。</p><p>默认情况下此项设置处于禁用状态，一般情况下也不需要打开。如果你打开了，说明要么你是专业人士，要么是误打误撞开启了这个选项，在你不理解这个设置背后的逻辑情况下，我建议你关掉，否则会产生访问错误。</p></blockquote><blockquote><p><strong>Microsoft网络客户端：对通信进行数字签名(如果服务器允许)</strong> <strong>—— 启用</strong></p><p>建议打开，原因是我们在访问别人的 SMB 共享文件夹时，如果对方（服务器端）要求数字签名，那么如果此项设置没有启用，对方的服务器就不会允许我们（客户端）进行连接。</p></blockquote><blockquote><p><strong>Microsoft网络客户端：对通信进行数字签名(始****终) —— 禁用</strong></p><p>默认情况下是关闭的，建议不要打开。如果开启了，并且服务器端没有启用数字签名，那么将无法实现访问 —— 因为我们坚持要对 SMB 数据包进行数字签名，不签名不访问。</p></blockquote><blockquote><p><strong>设备：防止用户安装打印机驱动程****序 —— 禁用</strong></p><p>假如开启了此项设置，那么当你共享了一个打印机让别人来使用时，别人将没有办法直接从你这边下载这个打印机的驱动（除非别人用的是你电脑的管理员账号，否则无法下载驱动），建议关闭（默认也是关闭的）。</p></blockquote><p><strong>重点，请将  “网络访问：本地账户的共享和安全模型”  设置为  “经典-对本地用户进行身份验证，不改变其本来身份”</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fb13432bbd7491.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>很多教程会教你选择第二个选项 —— “仅来宾-对本地用户进行身份验证，其身份为来宾”来解决某些问题，但跟我前面说的一样，“来宾”身份存在很大的安全漏洞，不建议设置。</p><p>微软在这一项设置中也明确说明了具体的细节：</p><blockquote><p>此安全设置确定如何对使用本地帐户的网络登录进行身份验证。如果将此设置设为“经典”，使用本地帐户凭据的网络登录通过这些凭据进行身份验证。“<strong>经典”模型能够对资源的访问权限进行精细的控制。通过使用“经典”模型，你可以针对同一个资源为不同用户授予不同类型的访问权限。</strong></p><p><strong>如果将此设置设为“仅来宾”，使用本地帐户的网络登录会自动映射到来宾帐户。使用“仅来宾”模型，所有用户都可得到平等对待。</strong>所有用户都以来宾身份进行验证，并且都获得相同的访问权限级别来访问指定的资源，这些权限可以为只读或修改。</p><p><strong>使用“仅来宾”模型时，所有可以通过网络访问计算机的用户(包括匿名 Internet 用户)都可以访问共享资源。</strong>你必须使用 Windows 防火墙或其他类似设备来防止对计算机进行未经授权的访问。同样，使用“经典”模型时，本地帐户必须受密码保护；否则，这些用户帐户可以被任何人用来访问共享的系统资源。</p></blockquote><p>至此，我们用户和系统的相关设置已经处理完毕，接下来我们来设置“网络和共享中心”。</p><h1 id="“网络和共享中心”：开启有保护的共享"><a href="#“网络和共享中心”：开启有保护的共享" class="headerlink" title="“网络和共享中心”：开启有保护的共享"></a>“网络和共享中心”：开启有保护的共享</h1><p>打开共享设置：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fcedf979866180.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fcf04721e97301.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd21f2496c3214.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>下面讲解一下上面相关共享设置的作用：</p><h2 id="“启用网络发现”：其实可以不用开启"><a href="#“启用网络发现”：其实可以不用开启" class="headerlink" title="“启用网络发现”：其实可以不用开启"></a>“启用网络发现”：其实可以不用开启</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd528023518744.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>当你勾选此项设置，那么当你在使用“网络”面板时就能发现同局域网下面的其他<a href="https://www.smzdm.com/ju/sp3rz02/">主机</a>（对方也要开启网络发现）：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd4e9c29f18188.png_e1080.jpg" alt="如果不启用将无法查看，但其实影响不大"></p><p>其实这一项设置不开启也是没问题的，不影响我们去做 SMB 共享，而且关闭此项设置能将我们从其他 Windows 主机的网络面板中隐藏起来，提高安全性。</p><h2 id="启用“文件和打印机共享”"><a href="#启用“文件和打印机共享”" class="headerlink" title="启用“文件和打印机共享”"></a>启用“文件和打印机共享”</h2><p>如果不开启，是无法实现 SMB 共享的，因此需要启用：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd6deb9eea494.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h2 id="启用密码保护"><a href="#启用密码保护" class="headerlink" title="启用密码保护"></a>启用密码保护</h2><p>这就不必多说了，密码保护必定要开启。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd7301f3f19823.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><h1 id="设置-SMB-共享"><a href="#设置-SMB-共享" class="headerlink" title="设置 SMB 共享"></a>设置 SMB 共享</h1><p>这里我们新建了一个 “share” 文件夹，我们将对此文件夹开启共享：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd8287fea72620.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe1667e1208869.png_e1080.jpg" alt="文件夹里面有一张图片"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98f381ea6469.png_e1080.jpg" alt="右键文件夹，点击“属性”"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98f2b500970.png_e1080.jpg" alt="点击“高级共享”"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98ea44ae2557.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98ea97ee3421.png_e1080.jpg" alt="删除 Everyone 用户，不然谁都可以进行访问就不好了"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98eaa6461203.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98e2af36109.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98e28fb46051.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fd98e21333337.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><blockquote><p>上图中的“网络路径”：我们可以在资源管理器的地址栏中输入此地址来访问，但是不建议采用此种方式。</p></blockquote><p>我们设置好了文件夹的共享，并且此文件夹只有 “joker” 用户以及我们管理员用户才能进行访问，接下来教大家如何正确的访问我们共享的文件夹。</p><h1 id="添加证书，并通过映射网络驱动器来访问共享的文件夹"><a href="#添加证书，并通过映射网络驱动器来访问共享的文件夹" class="headerlink" title="添加证书，并通过映射网络驱动器来访问共享的文件夹"></a>添加证书，并通过映射网络驱动器来访问共享的文件夹</h1><p>这里我们用另一个 Windows 系统来访问我们设置好的 “share” 文件夹。</p><p>此处关于 SMB 证书的相关知识，可以看<a href="https://post.smzdm.com/p/a7dmllm9/">另一篇文章</a>：</p><h2 id="添加-Windows-凭证"><a href="#添加-Windows-凭证" class="headerlink" title="添加 Windows 凭证"></a>添加 Windows 凭证</h2><p>首先，我们在另一台 Windows 系统上，可以先手动生成一份证书保存到系统中，这样以后我们在去访问 “share” 文件夹时就不需要手动输入 “joker” 用户的账号和密码了：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fdf8f54a442158.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fdf92f35c34932.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fdf9953eae1308.png_e1080.jpg" alt="注意，这里的地址我们不要用主机名的形式，而应该用ip地址"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe009e426b3576.png_e1080.jpg" alt="添加完成"></p><h2 id="映射网络驱动器"><a href="#映射网络驱动器" class="headerlink" title="映射网络驱动器"></a>映射网络驱动器</h2><p>这里，我们不要使用网络面板的形式去访问我们设置的 “share” 文件夹（如果你跟着的设置，在上面关闭了网络发现，那么通过网络面板是找不到我们的主机的），而应该是使用“映射网络启动器”的形式：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe0aacd1d21049.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe10a6dbb19742.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/617fe1ee9ac594986.png_e1080.jpg" alt="Windows 10/ 11 下安全并正确地使用 SMB 共享"></p><p>至此，我们完成所有的相关设置，并已经能够正确的访问我们设置的共享文件夹了。 </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们来回顾一下本文的重点：</p><ul><li>为了数据的安全，我们不应该去使用 SMB1 协议；</li><li>我们可以新建一个低权限的用户来使用 SMB 共享，做到安全的隔离；</li><li>在本地安全策略中，应该禁止启用“来宾”身份相关的安全设置；</li><li>我们在启用网络发现时，应该开启密码保护；</li><li>不建议通过“网络”面板去访问共享资源，而应该是使用“映射网络驱动器”的形式；</li></ul><h1 id="小米摄像头视频通过SMB保存到win11电脑上"><a href="#小米摄像头视频通过SMB保存到win11电脑上" class="headerlink" title="小米摄像头视频通过SMB保存到win11电脑上"></a>小米摄像头视频通过SMB保存到win11电脑上</h1><p>由于win11默认禁止了SMB1.0，但小米智能摄像机只支持SMB1.0，故需要通过上述第一步开启SMB1.0，开启后重启电脑生效。</p><h2 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327221145706.png" alt="image-20240327221145706"></p><h2 id="效果如图："><a href="#效果如图：" class="headerlink" title="效果如图："></a>效果如图：</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240327221224267.png" alt="image-20240327221224267"></p><h1 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h1><p><a href="https://post.smzdm.com/p/akxwkxqk/">https://post.smzdm.com/p/akxwkxqk/</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smb </tag>
            
            <tag> 局域网共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rclone</title>
      <link href="/2024/03/27/Rclone/"/>
      <url>/2024/03/27/Rclone/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://rclone.org/">官网</a></p><p><a href="https://www.rclone.cn/">中文站</a></p><p><a href="https://github.com/rclone/rclone">GitHub项目地址</a></p><p><a href="https://rclone.org/downloads/">下载地址</a></p><p>rclone是一个命令行程序，用于同步文件和目录，管理各种云存储服务。</p><p>rclone 支持多种文件传输方式，包括复制，同步，移动，删除文件。它还支持文件加密和压缩，支持分块上传和分块下载，可以暂停和恢复传输，支持文件的校验和合并。</p><p>rclone 的主要优势在于它的灵活性和可扩展性。它可以用来做很多事情，包括备份，文件同步，数据迁移等。它可以在各种平台上运行，包括 Windows，macOS，Linux，FreeBSD，NetBSD 等。</p><p>rclone 的配置简单，可以使用命令行或者配置文件来配置。使用 rclone 可以非常方便的操作云存储，支持的命令也非常丰富，使用起来非常方便。</p><p>简单来讲，主要的功能如下：</p><ul><li>将文件备份（和加密）到云存储</li><li>从云存储还原（和解密）文件</li><li>将云数据镜像到其他云服务或本地</li><li>将数据迁移到云，或在云存储供应商之间迁移</li><li>将多个、加密、缓存或不同的云存储挂载为磁盘</li><li>使用 lsf、ljson、size、ncdu 分析和核算云存储上保存的数据</li><li>将文件系统合并在一起，将多个本地和&#x2F;或云文件系统呈现为一个</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这个工具就是一个二进制文件，可以直接<a href="https://rclone.org/downloads/">下载</a>使用.</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p><code>brew install rclone</code></p><p>验证安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ rclone -V<br>rclone v1.66.0<br>- os/version: darwin 13.3.1 (64 bit)<br>- os/kernel: 22.4.0 (arm64)<br>- os/type: darwin<br>- os/arch: arm64 (ARMv8 compatible)<br>- go/version: go1.22.1<br>- go/linking: dynamic<br>- go/tags: none<br></code></pre></td></tr></table></figure><h1 id="可同步网盘"><a href="#可同步网盘" class="headerlink" title="可同步网盘"></a>可同步网盘</h1><ul><li>Amazon Drive</li><li>Amazon S3</li><li>Backblaze B2</li><li>Box</li><li>Ceph</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-DigitalOcean.html&source=article&objectId=1764095">DigitalOcean</a> Spaces</li><li>Dre<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-amh.html&source=article&objectId=1764095">amh</a>ost</li><li>Dropbox</li><li>FTP</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Google.html&source=article&objectId=1764095">Google</a> Cloud Storage</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Google-Drive.html&source=article&objectId=1764095">Google Drive</a></li><li>HTTP</li><li>Hubic</li><li>Jottacloud</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-IBM.html&source=article&objectId=1764095">IBM</a> COS S3</li><li>Memset Memstore</li><li>Mega</li><li>Microsoft Azure Blob Storage</li><li>Microsoft <a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-OneDrive.html&source=article&objectId=1764095">OneDrive</a></li><li>Minio</li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Nextcloud.html&source=article&objectId=1764095">Nextcloud</a></li><li>OVH</li><li>OpenDrive</li><li>Openstack Swift</li><li>Oracle Cloud Storage</li><li>ownCloud</li><li>pCloud</li><li>put.io</li><li>QingStor</li><li>Rackspace Cloud Files</li><li>SFTP</li><li>Wasabi</li><li>WebDAV</li><li>Yandex Disk</li><li>The local filesystem</li></ul><h1 id="常用的rclone命令"><a href="#常用的rclone命令" class="headerlink" title="常用的rclone命令"></a>常用的rclone命令</h1><ul><li>rclone config : 配置会话；</li><li>rclone config file : 显示配置文件的路径，一般配置文件默认为 ~&#x2F;.config&#x2F;rclone&#x2F;rclone.conf</li><li>rclone config show : 显示配置文件信息</li><li>rclone copy : 将文件从原文件夹复制至目标文件夹，跳过已复制的文件；</li><li>rclone sync : 将文件从原文件夹同步至目标文件夹，只修改目的地；</li><li>rclone move : 将文件从原文件夹移动至目标文件夹；</li><li>rclone delete : 删除路径中的内容；</li><li>rclone purge : 清空指定路径下的所有文件数据；</li><li>rclone mkdir : 创建一个新目录； </li><li>rclone rmdir : 删除一个空目录；</li><li>rclone rmdirs : 删除路径下的所有空目录；</li><li>rclone check : 检查源和目标的数据是否匹配；</li><li>rclone ls : 列出指定路径下所有的文件包含文件的大小及路径；</li><li>rclone lsd : 列出路径中的所有目录containers和buckets；</li><li>rclone lsl : 列出具有大小、修改时间和路径中的所有对象；</li><li>rclone md5sum : 为路径中的所有对象生成一个md5sum文件；</li><li>rclone sha1sum : 为路径中的所有对象生成一个sha1sum文件；</li><li>rclone size : 返回远程路径中对象的总大小和数量；</li><li>rclone version : 显示版本号；</li><li>rclone cleanup : 如果可能的话，清理remote；</li><li>rclone d<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-edu.html&source=article&objectId=1764095">edu</a>pe : 交互式查找<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6.html&source=article&objectId=1764095">重复文件</a>并删除重命名它们；</li><li>rclone authorize : 远程认证；</li><li>rclone cat : 连接文件并将它们发送到stdout；</li><li>rclone copyto : 将文件从源复制到目标，跳过已复制的文件；</li><li>rclone genautocomplete : rclone输出完成脚本；</li><li>rclone gendocs : rclone将markdown文档输出到所提供的目录；</li><li>rclone listremotes : 列出所有远程的配置文件；</li><li>rclone mount : 将远程目标挂载至本地；</li><li>rclone moveto : 将文件或目录从源移动至目标；</li><li>rclone obscure : 在rclone.conf文件中使用模糊密码；</li><li>rclone cryptcheck : 检验远程认证；</li><li>rclone about : 获取配额信息；</li></ul><h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><h2 id="–backup-dir-DIR"><a href="#–backup-dir-DIR" class="headerlink" title="–backup-dir&#x3D;DIR"></a>–backup-dir&#x3D;DIR</h2><p>当使用<code>sync、copy or move</code>时，所有涉及到覆盖或删除的文件变动，原始文件会被移动到<code>--backup-dir=DIR</code>选项所设置的目录中，如果设置了后缀选项<code>--suffix</code>，则在文件后缀附加指定字符串，例如原文件’abc.txt’，如果指定<code>--suffix 20181101</code>，则<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E5%A4%87%E4%BB%BD.html&source=article&objectId=1764095">备份</a>后的文件名全称为”abc.txt20181101”      # 同步本地目录至远程目录current的文件，并且备份已经覆盖或删除文件至远程old文件夹中     $ rclone sync &#x2F;path&#x2F;to&#x2F;local remote:current –backup-dir remote:old     # 同步本地目录“.&#x2F;“至远程”test“目录，覆盖或删除的文件移动至远程old文件夹中，并将后缀名后附加”20181108“     $ sudo rclone sync .&#x2F; One:test –backup-dir One:old –suffix 20181108  </p><h2 id="–bind-string"><a href="#–bind-string" class="headerlink" title="–bind string"></a>–bind string</h2><p>要绑定到输出连接的本地地址。这可以是IPv4地址、IPv6地址或主机名。如果主机名没有解析或解析为多个IP地址，则会出错。</p><h2 id="–bwlimit-BANDWIDTH-SPEC"><a href="#–bwlimit-BANDWIDTH-SPEC" class="headerlink" title="–bwlimit&#x3D;BANDWIDTH_SPEC"></a>–bwlimit&#x3D;BANDWIDTH_S<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-PE.html&source=article&objectId=1764095">PE</a>C</h2><p>此选项控制带宽限制。限制可以通过两种方式指定：单个限制或依据时间表限制。指定带宽限制单位为kBytes&#x2F;s，或使用后缀b、k、M、G，默认值为0，表示不限制带宽。例如，要将带宽限制为10MB&#x2F;s，则使用–bwlimit 10M。</p><p>还可以指定限制的”时间表“，这将导致在某些时间应用某些限制。要指定时间表，请将条目格式设置为”WEEKDAY-HH:MM, BANDWIDTH WEEKDAY-HH:MM, BANDWIDTH…“，其中：WEEKDAY是可选元素。它可以写成整个世界或仅使用3个第一个字符。HH:MM从00：00到23：59是一小时。</p><p>例1：如下时间表避免白天工作时间，早8:00限制带宽512kBytes&#x2F;sec，12:00限制提升至10M，下午13:00降至512kBytes&#x2F;sec，18:00提升至30M，在23:00开始完全禁用，网络全速运行。      –bwlimit “08:00,512 12:00,10M 13:00,512 18:00,30M 23:00,off”  </p><p>例2：周一带宽限制为512kBytes&#x2F;sec，周五结束前提升至10Mbytes&#x2F;s。周日10:00，它将设置为1Mbyte&#x2F;s。从周日的20：00起将是无限的。      –bwlimit “Mon-00:00,512 Fri-23:59,10M Sat-10:00,1M Sun-20:00,off”  </p><p>例3：等价于例4      –bwlimit “Mon-00:00,512 12:00,1M Sun-20:00,off”  </p><p>例4：      –bwlimit “Mon-00:00,512 Mon-12:00,1M Tue-12:00,1M Wed-12:00,1M Thu-12:00,1M Fri-12:00,1M Sat-12:00,1M Sun-12:00,1M Sun-20:00,off”  </p><p>带宽限制仅适用于数据传输。它们不适用于目录列表的带宽。注意，这些单位是字节&#x2F;秒,而不是比特&#x2F;秒。通常连接是以比特&#x2F;秒来测量的，转换时需要除以8。例如10Mbit&#x2F;s连接，那么在指定参数时需要计算10&#x2F;8&#x3D;1.25Mbyte&#x2F;s，即”–bwlimit 1.25M“</p><p>在Unix系统（<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-Linux.html&source=article&objectId=1764095">Linux</a>, MacOS, …）上，可以通过向rclone发送SIGUSR2信号来切换带宽限制器。它允许消除长时间运行的rclone传输的限制，并在需要时将其恢复为使用<code>--bwlimit</code>指定的值。假设只有一个rclone实例在运行，你可以像这样切换限制器：      kill -SIGUSR2 $(pidof rclone)  </p><p>通过如下配置可以动态更改bwlimit      rclone rc core&#x2F;bwlimit rate&#x3D;1M  </p><h2 id="–buffer-size-SIZE"><a href="#–buffer-size-SIZE" class="headerlink" title="–buffer-size&#x3D;SIZE"></a>–buffer-size&#x3D;SIZE</h2><p>设置缓冲区大小来加速文件传输。每个-transfer都会使用这么多内存来缓冲。当使用mount或cmount时，每个打开的文件描述符将使用设置的缓冲区大小的内存进行缓冲。设置为0可禁用最小内存使用的缓冲。</p><h2 id="–checkers-N"><a href="#–checkers-N" class="headerlink" title="–checkers&#x3D;N"></a>–checkers&#x3D;N</h2><p>并行运行的检查器数量。检查程序在同步期间对文件进行等同性检查。对于某些存储系统（例如S3, Swift, Dropbox），这可能需要很长时间才能并行运行。默认是并行运行8个检查程序。</p><h2 id="c-–checksum"><a href="#c-–checksum" class="headerlink" title="-c, –checksum"></a>-c, –checksum</h2><p>通常，rclone会查看文件的修改时间和大小，以查看它们是否相等。如果设置此标志，则rclone将检查文件哈希和大小以确定文件是否相等。当远程不支持设置修改时间并且需要比仅检查文件大小更准确的同步时，这非常有用。</p><p>当在对象上存储相同散列类型的远程之间进行传输时，这非常有用，例如Drive和Swift。有关哪些远程控制支持哪种散列类型的详细信息，<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/overview/&source=article&objectId=1764095">请参阅概述部分中的表</a>。</p><p>例如<code>rclone --checksum sync s3:/bucket swift:/bucket</code>比没有–checksum标志的运行得快的多。使用些标志时，如果远程文件不正常，rclone将不会更新远程文件的mtimes。</p><h2 id="–config-CONFIG-FILE"><a href="#–config-CONFIG-FILE" class="headerlink" title="–config&#x3D;CONFIG_FILE"></a>–config&#x3D;CONFIG_FILE</h2><p>指定rclone配置文件的位置。通常配置文件位于主目录中.config&#x2F;rclone&#x2F;rclone.conf，如果设置了XDGCONFIGHOME，它将位于XDG_CONFIG_HOME&#x2F;rclone&#x2F;rclone.conf</p><p>如果您运行rclone -h并查看–config选项帮助，您将看到默认位置的位置。使用此标志可覆盖配置位置，例如<code>rclone --config=&#39;.myconfig&quot;</code></p><h2 id="–contimeout-TIME"><a href="#–contimeout-TIME" class="headerlink" title="–contimeout&#x3D;TIME"></a>–contimeout&#x3D;TIME</h2><p>设置连接超时时间。TIME为时间格式，5秒参数为5s，10分钟为10m或3h30m。连接超时是rclone等待连接进入远程<a href="https://cloud.tencent.com/product/cos?from_column=20065&from=20065">对象存储</a>系统的时间。默认为1m（1分钟）</p><h2 id="–dedupe-mode-MODE"><a href="#–dedupe-mode-MODE" class="headerlink" title="–dedupe-mode MODE"></a>–dedupe-mode MODE</h2><p>运行重复数据删除命令模式。模式分为interactive, skip, first, newest, oldest, rename。缺省为interactive（交互式）</p><h2 id="–disable-FEATURE-FEATURE-…"><a href="#–disable-FEATURE-FEATURE-…" class="headerlink" title="–disable FEATURE, FEATURE, …"></a>–disable FEATURE, FEATURE, …</h2><p>禁用以逗号分隔的可选功能列表。例如：禁用<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E6%9C%8D%E5%8A%A1%E5%99%A8.html&source=article&objectId=1764095">服务器</a>端move和<a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065">服务器</a>copy的使用：      –disable move, copy  </p><p>查看可以禁用哪些功能的列表：      –disable help  </p><p>请<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/overview/%23features&source=article&objectId=1764095">参阅概览功能</a>和<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/overview/%23optional-features&source=article&objectId=1764095">可选功能</a>，了解哪个功能能做到什么。 此标志可用于调试和特殊情况（例如Google Drive将服务器端copy总量限制为100GB&#x2F;天）</p><h2 id="n-–dry-run"><a href="#n-–dry-run" class="headerlink" title="-n, –dry-run"></a>-n, –dry-run</h2><p>进行试运行而不进行永久性更改。使用它来查看rclone在没有实际操作的情况下会做什么。设置同步命令以删除目标中的文件时很有用。</p><h2 id="–ignore-checksum"><a href="#–ignore-checksum" class="headerlink" title="–ignore-checksum"></a>–ignore-checksum</h2><p>通常，rclone会检查传输文件的校验和是否匹配，如果没有，则会在传输时出现”损坏“错误。您可以使用些选项跳过该检查。您应该只在遇到”传输损坏“错误消息时才使用它，并且您确定可能要传输可能已损坏的数据。</p><h2 id="–ignore-existing"><a href="#–ignore-existing" class="headerlink" title="–ignore-existing"></a>–ignore-existing</h2><p>使用此选项将使rclone无条件地跳过目标上存在的所有文件，无论这些文件的内容如何。虽然这不是一般推荐的选项，但在文件因加密而发生变化的情况下，它可能很有用。但是，如果传输中断，则无法纠正部分传输。</p><h2 id="–ignore-size"><a href="#–ignore-size" class="headerlink" title="–ignore-size"></a>–ignore-size</h2><p>通常，rclone会查看文件的修改时间和大小，以查看它们是否相等。如果设置此标志，则rclone将仅检查修改时间。如果设置–checksum，那么它只检查checksum。它还会导致rclone跳过验证传输后大小相同。</p><p>这对于向<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://onedrive.live.com/&source=article&objectId=1764095">OneDrive</a>传输文件和从OneDrive传输文件非常有用，OneDrive偶尔会误报图像文件的大小([有关详细信息，请参阅#399])[<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/ncw/rclone/issues/399%5D&source=article&objectId=1764095">https://github.com/ncw/rclone/issues/399]</a></p><h2 id="i-–ignore-times"><a href="#i-–ignore-times" class="headerlink" title="-i, –ignore-times"></a>-i, –ignore-times</h2><p>使用此选项将导致rclone无条件地上载所有文件，而不管目标上的文件状态如何。通常，rclone会跳过任何具有相同修改时间且大小相同的文件（如果使用–checksum，则具有相同的checksum）。</p><h2 id="–immutable"><a href="#–immutable" class="headerlink" title="–immutable"></a>–immutable</h2><p>将源文件和目标文件视为不可变并禁止修改。设置此选项后，将根据请求创建和删除文件，但永远不会更新现有文件。如果源和目标之间的现有文件不匹配，则rclone将给出错误源和目标存在但不匹配：修改了不可变文件。</p><p>请注意，只有传输文件的命令（例如sync、copy、move）才会受到此行为影响，并且只允许修改。文件仍然可以被明确删除（例如delete、purge）或隐式删除（例如sync、move）。如果需要避免删除和修改，请使用copy -immutable。</p><p>这用作不可变或仅附加数据集（特别是备份存档）的附加保护层，其中修改意味着损坏并且不应传播。</p><h2 id="–leave-root"><a href="#–leave-root" class="headerlink" title="–leave-root"></a>–leave-root</h2><p>在rmdirs中，即使它是空的，它也不会删除根目录。</p><h2 id="–log-file-FILE"><a href="#–log-file-FILE" class="headerlink" title="–log-file&#x3D;FILE"></a>–log-file&#x3D;FILE</h2><p>将输出记录输出至FILE。默认情况下，此选项无效。这对于跟踪同步和-v标志的问题非常有用。有关详细信息，请参阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/docs/%23logging&source=article&objectId=1764095">“日志记录部分”</a>。</p><p>请注意，如果您使用logrotate程序来<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E7%AE%A1%E7%90%86.html&source=article&objectId=1764095">管理</a>rclone的<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E6%97%A5%E5%BF%97.html&source=article&objectId=1764095">日志</a>，那么您应该使用copytruncate选项，因为rclone没有旋转日志的信号。</p><h2 id="–log-format-LIST"><a href="#–log-format-LIST" class="headerlink" title="–log-format LIST"></a>–log-format LIST</h2><p>日志格式选项是以逗号来分隔的列表。date, time, microseconds, longfile, shortfile, UTC。默认为“date,time”</p><h2 id="–log-level-LEVEL"><a href="#–log-level-LEVEL" class="headerlink" title="–log-level LEVEL"></a>–log-level LEVEL</h2><p>设置rclone的日志级别：默认的日志级别为NOTICE（警告）</p><ol><li>DEBUG（调试）：等效于-vv。它输出大量的调试信息及有用的<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-bug.html&source=article&objectId=1764095">bug</a>报告，并真正打出rclone正在做什么。</li><li>INFO（信息）：等效于-v。它全出差于每个传输的信息，默认情况下每分钟打印一次STATS。</li><li>NOTICE（警告）：如果没有提供日志标志，则为默认日志级别。当工作时它输出的信息有限，只输出警告及重要的信息。</li><li>ERROR（错误）：等效于-q。它只输出错误消息。</li></ol><h2 id="–low-level-retries-NUMBNER"><a href="#–low-level-retries-NUMBNER" class="headerlink" title="–low-level-retries NUMBNER"></a>–low-level-retries NUMBNER</h2><p>这个选项可以控制rclone的低级重试次数，它用于重试失败的操作，通常是一个HTTP请求。例如，这可能是上传大文件的一部分。你将在日志中看到带有-v标志的低级重试。 这不应该从正常操作中的默认值更改。但是，如果您进行了大量的低级重试，则可能希望减小该值，以便rclone更快的进行高级重试，请参阅–retries标志。</p><p>禁用低次重试，使用命令<code>--low-level-retries 1</code></p><h2 id="–max-backlog-N"><a href="#–max-backlog-N" class="headerlink" title="–max-backlog&#x3D;N"></a>–max-backlog&#x3D;N</h2><p>设定检测或传输用于sync、copy或move的最大的的排队等候的文件积压。你可以任意设定它，它只会在队列使用的时候占用内存。需要注意的是，当使用积压时，它将以数字N单位kb的内存顺序完成。</p><p>设置N的值越大则rclone可以能够更准确地计算待处理文件的数量，并能够更精准地预估完成时间。N值越小则rclone同步至远程列表的越快。</p><h2 id="–max-delete-N"><a href="#–max-delete-N" class="headerlink" title="–max-delete&#x3D;N"></a>–max-delete&#x3D;N</h2><p>设置rclone不要删除超过N个文件。如果超出限制，那么返回错误信息并且rclone将停止正在进行的操作。</p><h2 id="–max-depth-N"><a href="#–max-depth-N" class="headerlink" title="–max-depth&#x3D;N"></a>–max-depth&#x3D;N</h2><p>设置除了purge（清空）命令之外所有命令的递归深度。例如：<code>rclone --max-depth 1 ls remote:path</code>命令，它只能看到远程设定目录中的顶级目录文件，使用<code>--max-depth 2</code>则意味着您将看到两层目录级别中的所有文件，依次类推。</p><p>由于历史的原因，lsd命令默认使用<code>--max-depth</code>为1，您可以使用命令行标志覆盖它。也可以使用<code>--max-depth 1</code>命令来禁用递归操作。需要注意的是，如果与sync并使用–delete-excluded一起使用，则会将未递归的文件视为已经排除，并将在目标上删除。如果你不确定会发生什么，请先使用–dry-run进行测试。</p><h2 id="–max-transfer-SIZE"><a href="#–max-transfer-SIZE" class="headerlink" title="–max-transfer&#x3D;SIZE"></a>–max-transfer&#x3D;SIZE</h2><p>设定传输的最大值，rclone当达到指定的大小时，它将停止传输，并将退出代码标记为8。默认为关闭。</p><h2 id="–modify-window-TIME"><a href="#–modify-window-TIME" class="headerlink" title="–modify-window&#x3D;TIME"></a>–modify-window&#x3D;TIME</h2><p>检查文件是否已被修改时，这是文件可以具有的最大允许时间差，仍然被视为等效。默认值为1ns，除非被远程控制覆盖。 例如，OS X仅将修改时间存储到最近的秒，因此如果您正在读取和写入OSX文件系统，则默认情况下这将是1秒。此命令行标志允许您覆盖该计算的默认值。</p><h2 id="–no-gzip-encoding"><a href="#–no-gzip-encoding" class="headerlink" title="–no-gzip-encoding"></a>–no-gzip-en<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-coding.html&source=article&objectId=1764095">coding</a></h2><p>不要设置Accept-Encoding：gzip。 这意味着rclone不会自动向服务器请求压缩文件。如果您已将服务器设置为使用Content-Encoding返回文件：gzip但您上传了压缩文件，则非常有用。没有必要在正常操作中设置它，这样做会降低rclone的网络传输效率。</p><h2 id="–no-update-modtime"><a href="#–no-update-modtime" class="headerlink" title="–no-update-modtime"></a>–no-update-modtime</h2><p>使用此标志时，如果远程文件不正常，rclone将不会更新远程文件的修改时间。如果远程与其他<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://xtboke.cn/tag-%E5%B7%A5%E5%85%B7.html&source=article&objectId=1764095">工具</a>同步（例如Google Drive客户端），则可以使用此功能。</p><h2 id="P-–progress"><a href="#P-–progress" class="headerlink" title="-P, –progress"></a>-P, –progress</h2><p>此标志使rclone更新终端中静态块中的统计信息，提供传输的实时概述。任何日志消息都将在静态块上方滚动。 日志消息会将静态块向下推到终端的底部。通常每500mS更新一次，但可以使用–stats标志覆盖此期间。这可以与–stats-one-line标志一起使用，以实现更简单的显示。注意：在Windows上，在修复此错误之前，所有非ASCII字符都将替换为。 当–progress正在使用时。</p><h2 id="q-–quiet"><a href="#q-–quiet" class="headerlink" title="-q, –quiet"></a>-q, –quiet</h2><p>通常，rclone输出统计信息和完成消息。 如果设置此标志，它将尽可能少地输出。</p><h2 id="–retries-int"><a href="#–retries-int" class="headerlink" title="–retries int"></a>–retries int</h2><p>如果失败多次失败，则重试整个同步（默认值为3）。一些遥控器可能不可靠，一些重试有助于获取由于错误而未被转移的文件。使用–retries 1禁用重试。</p><h2 id="–retries-sleep-time"><a href="#–retries-sleep-time" class="headerlink" title="–retries-sleep&#x3D;time"></a>–retries-sleep&#x3D;time</h2><p>这将设置–retries指定的每次重试之间的间隔默认值为0.使用0禁用。</p><h2 id="–size-only"><a href="#–size-only" class="headerlink" title="–size-only"></a>–size-only</h2><p>通常，rclone会查看文件的修改时间和大小，以查看它们是否相等。 如果设置此标志，则rclone将仅检查大小。这可以用于从Dropbox传输文件，这些文件已经被桌面同步客户端修改，该客户端没有像rclone那样设置修改时间的校验和。</p><h2 id="–stats-TIME"><a href="#–stats-TIME" class="headerlink" title="–stats&#x3D;TIME"></a>–stats&#x3D;TIME</h2><p>传输数据（sync, copy, copyto, move, moveto）的命令将定期打印数据传输统计信息以显示其进度。默认值为1m，使用0禁用。如果设置统计间隔，则所有命令都可以显示统计信息。这在运行其他命令，检查或安装时非常有用。</p><p>默认情况下，统计信息记录在INFO级别，这意味着它们不会以默认日志级别显示NOTICE。使用–stats-log-level NOTICE或-v使它们显示。有关日志级别的详细信息，请参阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/docs/%23logging&source=article&objectId=1764095">“日志记录”</a>部分。</p><p>请注意，在macOS上，你可以发送SIGINFO(通常是终端中的ctrl-T)以立即打印统计信息。</p><h2 id="–stats-file-name-length-integer"><a href="#–stats-file-name-length-integer" class="headerlink" title="–stats-file-name-length integer"></a>–stats-file-name-length integer</h2><p>默认情况下，-stats输出将截断超过40个字符的文件名和路径。 这相当于提供–stats-file-name-length 40.使用–stats-file-name-length 0禁用由stats打印的文件名截断。</p><h2 id="–stats-log-level-string"><a href="#–stats-log-level-string" class="headerlink" title="–stats-log-level string"></a>–stats-log-level string</h2><p>日志级别显示–stats输出。 这可以是DEBUG，INFO，NOTICE或ERROR。 默认值为INFO。 这意味着在默认的日志记录级别，即注意，统计信息将不会显示 - 如果您希望它们使用–stats-log-level NOTICE。 有关日志级别的详细信息，请参阅<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://rclone.org/docs/%23logging&source=article&objectId=1764095">“日志记录”</a>部分。</p><h2 id="–stats-one-line"><a href="#–stats-one-line" class="headerlink" title="–stats-one-line"></a>–stats-one-line</h2><p>指定此值后，rclone会将统计信息压缩为一行，仅显示最重要的统计信息。</p><h2 id="–stats-unit-bits-bytes"><a href="#–stats-unit-bits-bytes" class="headerlink" title="–stats-unit&#x3D;bits|bytes"></a>–stats-unit&#x3D;bits|bytes</h2><p>默认情况下，数据传输速率将以bytes&#x2F;s打印。此选项允许以bit&#x2F;s打印数据速率</p><h2 id="–suffix-SUFFIX"><a href="#–suffix-SUFFIX" class="headerlink" title="–suffix&#x3D;SUFFIX"></a>–suffix&#x3D;SUFFIX</h2><p>这仅适用于–backup-dir。 如果未设置，则–backup-dir将使用其原始名称移动文件。 如果已设置，则文件将添加SUFFIX。有关详细信息，请参阅–backup-dir。</p><h2 id="–syslog"><a href="#–syslog" class="headerlink" title="–syslog"></a>–syslog</h2><p>在功能强大的操作系统（不是Windows或Plan9）上，将所有日志输出发送到syslog。这对于在脚本或rclone挂载中运行rclone非常有用。</p><h2 id="–syslog-facility-string"><a href="#–syslog-facility-string" class="headerlink" title="–syslog-facility string"></a>–syslog-facility string</h2><p>如果使用–syslog，则设置syslog工具（例如KERN，USER）。 请参阅man syslog以获取可能的设施列表。 默认设施是DAEMON。</p><h2 id="–tpslimit-float"><a href="#–tpslimit-float" class="headerlink" title="–tpslimit float"></a>–tpslimit float</h2><p>每秒限制HTTP事务。 默认值为0，用于表示每秒无限制的事务数。例如，要将rclone限制为每秒10个HTTP事务使用–tpslimit 10，或者每2秒限制1个事务使用–tpslimit 0.5。当rclone每秒的事务数导致<a href="https://cloud.tencent.com/product/cos?from_column=20065&from=20065">云存储</a>提供程序出现问题时（例如，禁止您或限制速率），请使用此选项。这对于rclone mount来控制使用它的应用程序的行为非常有用。另见–tpslimit-burst。</p><h2 id="–tpslimit-burst-int"><a href="#–tpslimit-burst-int" class="headerlink" title="–tpslimit-burst int"></a>–tpslimit-burst int</h2><p>–tpslimit的最大交易次数。 （默认1） 通常–tpslimit将完成指定的每秒事务数。 但是，如果你提供–tps-burst，那么rclone可以在空闲时保存一些事务，从而提供一个高达所提供参数的突发。例如，如果你提供–tpslimit-burst 10那么如果rclone已经空闲超过10 *  -tpslimit那么它可以在它们再次受限之前非常快地完成10个事务。 这可用于提高–tpslimit的性能，而不会更改每秒的长期平均事务数。</p><h2 id="–track-renames"><a href="#–track-renames" class="headerlink" title="–track-renames"></a>–track-renames</h2><p>默认情况下，rclone不会跟踪重命名的文件，因此如果您在本地重命名文件然后将其同步到远程文件，rclone将删除远程文件上的旧文件并上传新副本。</p><p>如果您使用些标志，并且远程支持服务器端副本或服务器端移动，并且源和目标具有兼容的哈希，则这将在同步操作期间跟踪重命名并执行服务器端重命名。文件将按大小和哈希匹配，如果两者都不匹配，则将考虑重命名。</p><p>如果目标不支持服务器端复制或移动，则rclone将回退到默认行为并将错误级别消息记录到控制台。注意：–track-renames不支持加密。</p><h2 id="–delete-before-during-after"><a href="#–delete-before-during-after" class="headerlink" title="–delete-(before, during, after)"></a>–delete-(before, during, after)</h2><p>此选项允许您指定在同步文件夹时删除目标上的文件时间。在开始传输任何新文件或更新文件之前，指定值–delete-before将删除目标上存在的所有文件，但不删除源文件。这使用两次通过文件系统，一次用于删除，一次用于复制。</p><p>指定–delete-during将在检查和上载文件时删除文件。这是最快的选项，使用的内存最少。</p><p>指定–delete-after（默认值）将延迟删除文件，直到成功传输所有新的&#x2F;更新的文件。要删除的文件将在复制传递中收集，然后在复制传递成功完成后删除。要删除的文件保存在内存中，因此此模式可能会占用更多内存。这是最安全的模式，因为如果之后没有错误，它只会删除文件。如果在删除开始之前出现错误，那么由于存在IO错误，您将收不到删除文件的消息。</p><h2 id="–fast-list"><a href="#–fast-list" class="headerlink" title="–fast-list"></a>–fast-list</h2><p>任何涉及目录列表的事件（例如sync, copy, ls ）时，rclone通常会列出一个目录并在使用更多目录列表处理任何子目录之前对其进行处理。这可以并行化，前且使用最少的内存可以非常快速地工作。</p><p>但是，某些云存储可以在一个（或少量）事务中列出目录下的所有文件。它些往往是基于bucket的云存储（例如S3, B2, GCS, Swift, Hubic）。</p><p>如果使用–fast-list标志，则rclone将使用些方法列出目录。这将对列表产生以下影响：</p><ul><li>它将使用更少的交易</li><li>它将使用更多内存，rclone必须将整个列表加载到内存中</li><li>它可能更快，因为它使用更少的事务</li><li>它可能会更慢，因为它无法并行化</li><li>rclone应始终使用和不使用–fast-list提供相同的结果</li></ul><p>如果您为交易付费并且可以将整个同步列表放入内存中，则建议使用–fast-list。如果你有一个非常大的同步，那么不要使用–fast-list否则你将耗尽内存。如果你在不支持的的云存储上使用–fast-list，那么rclone将忽略它。</p><h2 id="–timeout-TIME"><a href="#–timeout-TIME" class="headerlink" title="–timeout&#x3D;TIME"></a>–timeout&#x3D;TIME</h2><p>此参数将设置IO空闲超过。如果传输已经开始但是在这么长时间内变为空闲，则认为它已断开并断开连接。默认为5分钟，设置0为禁用。</p><h2 id="–transfers-N"><a href="#–transfers-N" class="headerlink" title="–transfers&#x3D;N"></a>–transfers&#x3D;N</h2><p>并行运行的文件传输数。如果云存储提供大量超时，或者如果你有足够的带宽和快速的云存储，那么将它设置为较小的数字有时会很有用。默认设置是并行运行4个文件传输。</p><h2 id="u-–update"><a href="#u-–update" class="headerlink" title="-u, –update"></a>-u, –update</h2><p>该参数会强制rclone跳过目标上存在的任何文件，并且修改时间比源文件更新。如果现有目标文件的修改时间与源文件的修改时间相等，则在大小不同时将更新。不支持MOD时间的云存储上，检查的时间将是上传的时间。这意味着如果上传到其中一个云存储，rclone将跳过目标上存在的任何文件，并且上传的时间比源文件的修改时间更新。当转移到不直接支持MOD时间的云存储时，这很有用，因为它比–size-only检查更准确，比使用–checksum更快。</p><h2 id="–use-server-modtime"><a href="#–use-server-modtime" class="headerlink" title="–use-server-modtime"></a>–use-server-modtime</h2><p>一些云存储是不保留文件修改时间的（例如：Swift, S3）。在此类的云存储上，rclone将原始的modtime存储为对象的附加元数据。默认情况下，当操作modtime时，它将进行API调用以检索元数据。 使用此参数，可以禁用额外的API调有用，而是依赖服务器的修改时间。通常情况下，本地同步远程数据，只要知道本地文件比服务器文件的时间更新就足够了，因此它可以加快进程并减少所需的API调用次数。</p><h2 id="v-w-–verbose"><a href="#v-w-–verbose" class="headerlink" title="-v, -w, –verbose"></a>-v, -w, –verbose</h2><p>使用参数-v，则rclone会返回每个传输文件的少量重要事件；</p><p>使用参数-vv，则rclone会返回每个传输文件执行每一步的详细的信息。</p><h2 id="V-–VERSION"><a href="#V-–VERSION" class="headerlink" title="-V, –VERSION"></a>-V, –VERSION</h2><p>显示rclone版本信息</p><h1 id="语法及示例"><a href="#语法及示例" class="headerlink" title="语法及示例"></a>语法及示例</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 本地到网盘</span><br>rclone [功能选项] <span class="hljs-variable">&lt;本地路径&gt;</span> <span class="hljs-variable">&lt;配置名称:路径&gt;</span> [参数] [参数]<br><span class="hljs-comment"># 网盘到本地</span><br>rclone [功能选项] <span class="hljs-variable">&lt;配置名称:路径&gt;</span> <span class="hljs-variable">&lt;本地路径&gt;</span> [参数] [参数]<br><span class="hljs-comment"># 网盘到网盘</span><br>rclone [功能选项] <span class="hljs-variable">&lt;配置名称:路径&gt;</span> <span class="hljs-variable">&lt;配置名称:路径&gt;</span> [参数] [参数]<br> <br><span class="hljs-comment"># [参数]为可选项</span><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">同步本地/data/file的文件夹内容到tencent-cos存储下的/beifen文件夹中,并且排除/root/excludes.txt中指定的文件内容</span><br>rclone sync /data/file tencent-cos:/beifen --exclude-from &#x27;/root/excludes.txt&#x27;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">两个网盘文件同步</span><br>rclone copy 配置网盘名称1:网盘路径 配置网盘名称2:网盘路径<br></code></pre></td></tr></table></figure><h1 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1764095">https://cloud.tencent.com/developer/article/1764095</a></li><li><a href="https://blog.csdn.net/qq_22903531/article/details/131434705">https://blog.csdn.net/qq_22903531/article/details/131434705</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ventoy打造最强U盘启动盘,安装istoreOS系统</title>
      <link href="/2024/03/24/Ventoy%E6%89%93%E9%80%A0%E6%9C%80%E5%BC%BAU%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
      <url>/2024/03/24/Ventoy%E6%89%93%E9%80%A0%E6%9C%80%E5%BC%BAU%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ventoy是一个制作可启动山盘的工具,官可以将你喜欢的PE全部整合到一起,例如优启通\ FirePE\微PE,如果你的U盘容量够大,也可以将多个系统安装镜像统统塞进去,例如Win7.ISO \Win8.ISO \Wini0.lSO\ Win1l.ISO.</p><p>不仅如此,你还可以将Windows等系统装进U盘,随时随地就可以打开你的个人电脑.</p></blockquote><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>32g以上u盘</li></ul><h1 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h1><p><a href="https://www.ventoy.net/cn/download.html">官网</a>下载ventoy,解压,打开安装程序.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215206822.png" alt="image-20240324215206822"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215227266.png"></p><p>选择你的u盘</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215541049.png" alt="image-20240324215541049"></p><p>分区类型选GPT</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215609107.png" alt="image-20240324215609107"></p><p>点击安装,提示格式化硬盘.</p><p>完成后如果u盘名称变为<code>Ventoy</code>,表示安装成功.</p><h1 id="iStoreOS系统安装"><a href="#iStoreOS系统安装" class="headerlink" title="iStoreOS系统安装"></a>iStoreOS系统安装</h1><p><a href="https://fw.koolcenter.com/iStoreOS/x86_64_efi/">下载最新iStoreOS固件</a>,下载完固件后需要先解压，再放到Ventoy启动盘的根目录下U盘才能识别到。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324215915851.png" alt="image-20240324215915851"></p><p>把u盘插入要刷系统的主机,开机进入BIOS界面,</p><blockquote><p>注意:如果找不到U盘的原因可能是U盘不兼容，需要换一个兼容的U盘</p></blockquote><p>进入Ventoy界面,选择IstoreOS固件,按回车.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220209542.png" alt="image-20240324220209542"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220254495.png" alt="image-20240324220254495"></p><p>然后输入 <code>quickstart</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220405683.png" alt="image-20240324220405683"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220436139.png" alt="image-20240324220436139"></p><p>完成后拔掉u盘,重启系统即可.</p><p>重启完成进入后台 管理页面:默认IP是。192.168.100.1 默认密码是。password</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220659443.png" alt="image-20240324220659443"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220736193.png" alt="image-20240324220736193"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240324220815873.png" alt="image-20240324220815873"></p><p> 现在我们的Ventov启动盘就有两个(StoreOS固件（新版和测试版）,我们可以两个固件随时切换使用</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>本文来源:  <a href="https://www.bilibili.com/list/watchlater?oid=572960814&bvid=BV1qz4y1n7pu&spm_id_from=333.788.top_right_bar_window_view_later.content.click">https://www.bilibili.com/list/watchlater?oid=572960814&amp;bvid=BV1qz4y1n7pu&amp;spm_id_from=333.788.top_right_bar_window_view_later.content.click</a></p><p>Ventoy下载：<a href="https://www.ventoy.net/cn/download.html">https://www.ventoy.net/cn/download.html</a> </p><p>iStoreOS最新版固件下载：<a href="https://fw.koolcenter.com/iStoreOS/x86_64_efi/">https://fw.koolcenter.com/iStoreOS/x86_64_efi/</a> </p><p>iStoreOS测试版固件下载：<a href="https://fw.koolcenter.com/iStoreOS/alpha/x86/x86_64_efi/">https://fw.koolcenter.com/iStoreOS/alpha/x86/x86_64_efi/</a> </p><p>酷友社的QQ频道： <a href="https://pd.qq.com/s/448pvg3jq">https://pd.qq.com/s/448pvg3jq</a> </p><p>iStoreOS官网： <a href="https://www.istoreos.com/">https://www.istoreos.com/</a> </p><p>易有云官网： <a href="https://www.linkease.com/">https://www.linkease.com/</a> </p><p>关于我们： <a href="https://www.istoreos.com/about/">https://www.istoreos.com/about/</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ventoy </tag>
            
            <tag> u盘 </tag>
            
            <tag> istoreOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Alist搭建本地影音系统挂载阿里云盘为本地</title>
      <link href="/2024/03/22/Alist/"/>
      <url>/2024/03/22/Alist/</url>
      
        <content type="html"><![CDATA[<p><a href="https://alist.nn.ci/zh/guide/install/script.html">官方文档</a></p><h1 id="一键脚本安装"><a href="#一键脚本安装" class="headerlink" title="一键脚本安装"></a>一键脚本安装</h1><p>默认安装在 <code>/opt/alist</code> 中。 自定义安装路径，将安装路径作为第二个参数添加，必须是绝对路径（如果路径以 alist 结尾，则直接安装到给定路径，否则会安装在给定路径 alist 目录下），如 安装到 <code>/root</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Install</span><br>curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s install /root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">update</span><br>curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s update /root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Uninstall</span><br>curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s uninstall /root<br></code></pre></td></tr></table></figure><h1 id="安装完毕提示"><a href="#安装完毕提示" class="headerlink" title="安装完毕提示"></a>安装完毕提示</h1><p>用户名默认<code>admin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">Alist 安装成功！<br><br>访问地址：http://YOUR_IP:5244/<br><br>配置文件路径：/root/alist/data/config.json<br>---------如何获取密码？--------<br>先cd到alist所在目录:<br>cd /root/alist<br>随机设置新密码:<br>./alist admin random<br>或者手动设置新密码:<br>./alist admin set NEW_PASSWORD<br>----------------------------<br>启动服务中<br><br>查看状态：systemctl status alist<br>启动服务：systemctl start alist<br>重启服务：systemctl restart alist<br>停止服务：systemctl stop alist<br><br>温馨提示：如果端口无法正常访问，请检查 服务器安全组、本机防火墙、Alist状态<br></code></pre></td></tr></table></figure><h1 id="配置阿里云盘"><a href="#配置阿里云盘" class="headerlink" title="配置阿里云盘"></a>配置阿里云盘</h1><p>首次进入<a href="http://your_ip:5244/">网站</a>会有如下提示,需要点下面的manage进入配置:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240322101908638.png" alt="image-20240322101908638"></p><p>参考:</p><p><a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive">官方文档</a></p><p><a href="https://www.zhihu.com/question/567047941">知乎</a></p><p>点击左侧的存储，点击添加。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-66c2f637b8e505be57eab2e6c4ac19aa_1440w.png" alt="img"></p><p><strong>驱动一定要选择阿里云盘Open</strong>，不要选“阿里云盘”，千万别搞错了。<strong>挂载路径可以自己填写喜欢的名称，前面的斜杠要加上</strong>。我这里就写阿里云盘备份盘。</p><p><strong>序号是给我们挂载的云盘排序用的，这是第一个，就从0开始</strong>。<strong>Web代理关闭，WebDAV策略选择<a href="https://www.zhihu.com/search?q=302%E9%87%8D%E5%AE%9A%E5%90%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">302重定向</a>。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-74ec08721c218bc490de72b396dc65da_1440w.png" alt="img"></p><p>往下滚动，其他选项均保持默认不变，<strong>将云盘类型设置为资源库</strong>，然后<strong>填入自己阿里云盘的刷新令牌(重点！)，如何获得刷新令牌呢？需要从电脑浏览器访问下面这个网站：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://alist.nn.ci/tool/aliyundrive/request<br></code></pre></td></tr></table></figure><p>打开后，先点击Scan QrCode，然后用手机版阿里云盘app扫码，授权成功后，再点击页面最下方的I have scan。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-15420860a19c65ccb06f5abe6fcead71_1440w.webp" alt="img"></p><p>接下来就会获得阿里云盘的<a href="https://www.zhihu.com/search?q=refresh_token&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">refresh_token</a>，全选并复制。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-eac0db32e33889e69eb5ae2cfef672d1_1440w.webp" alt="img"></p><p>填入alist的“刷新令牌”框中即可。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240322145721358.png" alt="image-20240322145721358"></p><p>页面继续往下滚动，确认Oauth令牌链接为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">https://api.xhofe.top/alist/ali_open/token<br>或者<br>https://api.nn.ci/alist/ali_open/token<br></code></pre></td></tr></table></figure><p>移除方式可以选择删除或者回收站，看自己需求。其他选项保持默认，设置完毕后点击添加。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-5e82757bfe67087779345815531a0c0d_1440w.webp" alt="img"></p><p>我们可以按照以上方式，同样将阿里云盘资源库也挂载一次，除了将挂载路径和云盘类型更换为资源库及设置一个新的序号外，其他内容全部保持不变，包括刷新令牌也不变。两个盘都挂载成功后，会在alist的存储页面显示出来，并且状态为WORK：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-28ac4b6d80720ef96f1f49aa81beef06_1440w.png" alt="img"></p><p>点击alist左下角的“主页”，回到主页后，可以看到我们的阿里云盘已经能正常显示了：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-35899a6058e9c9efe4cf8f426972f536_1440w.webp" alt="img"></p><p>作者：袋鼠叔叔<br>链接：<a href="https://www.zhihu.com/question/567047941/answer/3206878540">https://www.zhihu.com/question/567047941/answer/3206878540</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h1 id="配置夸克网盘"><a href="#配置夸克网盘" class="headerlink" title="配置夸克网盘"></a>配置夸克网盘</h1><p>夸克网盘也是阿里旗下的产品，主要优势在于88VIP免费赠送会员，所以这两年也非常火爆，用户数量已经不逊于阿里云盘，甚至有赶超百度网盘的势头。夸克网盘的alist挂载方法和前面的阿里云盘有一些区别，主要是获取Cookie的方式不一样，下面我们开始。</p><p><strong>仍然进入Alist管理页面，添加一个新的驱动，驱动选择“夸克”。挂载路径和序号根据自己需求填写，缓存过期时间仍然填0。Webdav策略选择“<a href="https://www.zhihu.com/search?q=%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">本地代理</a>”。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-630b18f25dada42db400cecb9ffa16cb_1440w.webp" alt="img"></p><p><strong>继续往下滚动，我们需要获取Cookie。</strong>打开电脑浏览器并登录夸克网盘账号(用网页版登录)，然后按键盘上的F12，进入开发者模式。</p><p>点击上方的Network(网络)选项卡，在左侧的Name(名称)中找到“sort?<a href="https://www.zhihu.com/search?q=pr=u&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">pr&#x3D;u</a>”开头的条目并选中(如果该条目没刷新出来，需要稍等几秒钟)，然后在右侧的Request Headers中，找到<a href="https://www.zhihu.com/search?q=Cookie%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">Cookie值</a>并复制：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-19dbf01b385ef70908ab3cab7facfd2f_1440w.png" alt="img"></p><p>将复制的Cookie值填入alist设置页面，其他选项全部保持默认，然后点击添加即可。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-5527d6db8f3ae448658c0c4f807e9397_1440w.webp" alt="img"></p><p>夸克网盘挂载成功。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-8faecfea8c376e69d4a9297197a89aa3_1440w.webp" alt="img"></p><h1 id="配置百度网盘"><a href="#配置百度网盘" class="headerlink" title="配置百度网盘"></a><strong>配置百度网盘</strong></h1><p><strong>目前使用人数最多，市场最大的网盘。VIP会员价格不便宜，速度快，资源多，但是对非会员限速很厉害。使用Alist挂载的情况下，如果是VIP会员，请优先选择官方API接口。非会员可以尝试使用第三方接口，但有时候会不太稳定。</strong></p><p>仍然打开Alist管理页面—存储—添加。驱动选择百度网盘，挂载路径和序号按需填写。特别注意，一定要打开<a href="https://www.zhihu.com/search?q=web%E4%BB%A3%E7%90%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">web代理</a>，并且将WebDAV策略设置为302重定向，才能正常在线播放视频。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-901d6bda7ccf4a9da5d18a4e6c67f27d_1440w.webp" alt="img"></p><p>继续往下滚动，这里只有一个地方需要我们自己填写，就是刷新令牌。那么如何获取呢？首先用电脑浏览器登录<a href="https://pan.baidu.com/login?redirecturl=https://pan.baidu.com/disk/main%23/index">网页版百度网盘</a>，然后访问以下地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://alist.nn.ci/zh/guide/drivers/baidu.html<br></code></pre></td></tr></table></figure><p>在页面中找到刷新令牌链接，并点击：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-b0cda62dffed703c1ad7b5d712e30938_1440w.png" alt="img"></p><p>点击后就可以看到refresh_token，这个就是刷新令牌。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-03f17f9504a2ac219d81d9f8fd663d38_1440w.webp" alt="img"></p><p>将其复制粘贴到alist的页面中即可：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-c3bda8bbb79f8e8a8e30e1b5c7a2d050_1440w.webp" alt="img"></p><p>下面的自定义UA，上传线程及上传api全部保持默认，点击添加完成，百度云盘成功挂载至Alist。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-ebb12034a958e4a93cc121fe4791a784_1440w.webp" alt="img"></p><p><strong>我以上仅展示了最常用的百度，夸克和阿里云盘作为实操案例。但实际上Alist作为目前市面上最强大的网盘挂载工具，支持几乎所有的网盘类型及厂商，如果有其他网盘需求，可以自己搜索一下方法，基本大同小异。Alist官网也为大家贴心的准备了每一种网盘的说明文档供参考。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-0e56b6405dd69ad09a774dca4bb70384_1440w.webp" alt="img"></p><h1 id="大招-使用RaiDrive将Alist中的云盘挂载到电脑"><a href="#大招-使用RaiDrive将Alist中的云盘挂载到电脑" class="headerlink" title="大招:使用RaiDrive将Alist中的云盘挂载到电脑"></a>大招:使用RaiDrive将Alist中的云盘挂载到电脑</h1><p>现在，我们已经可以通过浏览器的alist管理页面，从而访问所有已挂载的云盘，但这还不是结束。<strong>我们的最终目的是将这些网盘全部挂载到电脑，像使用本地硬盘那样使用网盘</strong>。接下来要用到的就是RaiDrive这款强大的<a href="https://www.zhihu.com/search?q=%E6%9C%AC%E5%9C%B0%E7%A3%81%E7%9B%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">本地磁盘</a>映射软件。</p><blockquote><p><strong>RaiDrive目前只支持Windows平台，但在苹果macOS平台上，你可以考虑使用Folx开发商出品的Cloud Mounter作为替代。Cloud Mounter是一款类似于RaiDrive的工具，可以帮助你将网盘挂载映射成电脑本地硬盘。</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240325120020339.png" alt="image-20240325120020339"></p></blockquote><p>百度搜索RaiDrive官网，点击download并选择合适的版本，32位系统选择X86，64位系统选择X64，下载后安装在电脑中：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-552220a75d9592c72fea25b6578a8d65_1440w.webp" alt="img"></p><p>接下来点击设置页面最上方的添加，新建一个<a href="https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">虚拟服务器</a>，服务类型为NAS—WebDAV。<a href="https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E9%A9%B1%E5%8A%A8%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">虚拟驱动器</a>选择一个自己喜欢且尚未被占用的，盘符随意填写。</p><p>最重要的是把地址后面的√去掉，使用http方式连接，然后在http:&#x2F;&#x2F;后输入NAS的ip地址+Alist端口号。最后输入自己的Alist登录账户和密码，确认连接即可。我把所有要点击或填写的位置都明确标注在下图，方便大家跟着设置：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-f501520896c8588272276be189065127_1440w.webp" alt="img"></p><p>连接成功后，在“我的电脑”中就可以看到由RaiDrive虚拟的本地硬盘盘符了，打开以后和我们日常使用本地硬盘并无二致：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-7ae64622a9479a1a7af1e8a6e6ffba27_1440w.webp" alt="img"></p><p>经过测试，只要跟着这个教程一步一步走，我们既可以使用浏览器正常下载，上传及播放云盘中的文件(视频)，也可以通过RaiDrive像操作本地硬盘那样使用云盘，在几个云盘之间来回复制粘贴也没有问题，完全能够跑满宽带的上传和下载速度：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-9519bd92bbb78320f5d1ca653ce673c4_1440w.webp" alt="img"></p><p>夸克网盘复制到阿里云盘稳定在3M&#x2F;S，跑满上行</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-8a33347680d52aa5572f71c280e2ca8d_1440w.png" alt="img"></p><p>百度网盘复制到电脑桌面稳定在20M&#x2F;S以上，跑满200M宽带下行</p><p>当然，如果想要在手机上挂载alist中的网盘到本地，也没有任何问题，使用支持WebDAV协议的App即可，如ES<a href="https://www.zhihu.com/search?q=%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3206878540%7D">文件浏览器</a>，SolidExplorer等，设置方法和RaiDrive是完全一样的。比如我这里以Solid Explorer为例：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-87f2e168e6765f5e7ab816d0bb88d5ff_1440w.webp" alt="img"></p><p>如果想要在手机或TV端集中观看网盘中的视频，只要使用支持WebDAV的播放器即可，如Kodi，Emby，Jellyfin等，实测无论是播放还是拖拽，都非常丝滑:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/v2-0bc8f0abbcd5f7d7aaa53abec12f55fc_1440w.webp" alt="img"></p><p>作者：袋鼠叔叔<br>链接：<a href="https://www.zhihu.com/question/567047941/answer/3206878540">https://www.zhihu.com/question/567047941/answer/3206878540</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合分页工具类</title>
      <link href="/2024/03/14/%E9%9B%86%E5%90%88%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2024/03/14/%E9%9B%86%E5%90%88%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.demo;<br><br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 集合分页工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListPageUtil</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; data;<br><br>    <span class="hljs-comment">/** 上一页 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> lastPage;<br><br>    <span class="hljs-comment">/** 当前页 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> currentPage;<br><br>    <span class="hljs-comment">/** 下一页 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nextPage;<br><span class="hljs-comment">//</span><br>    <span class="hljs-comment">/** 每页条数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<br><br>    <span class="hljs-comment">/** 总页数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalPage;<br><br>    <span class="hljs-comment">/** 总数据条数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalCount;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListPageUtil</span><span class="hljs-params">(List&lt;T&gt; data,<span class="hljs-type">int</span> currentPage,<span class="hljs-type">int</span> pageSize)</span> &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;data must be not empty!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.pageSize = pageSize;<br>        <span class="hljs-built_in">this</span>.currentPage = currentPage;<br>        <span class="hljs-built_in">this</span>.totalCount = data.size();<br>        <span class="hljs-built_in">this</span>.totalPage = (totalCount + pageSize - <span class="hljs-number">1</span>) / pageSize;<br>        <span class="hljs-built_in">this</span>.lastPage = currentPage-<span class="hljs-number">1</span>&gt;<span class="hljs-number">1</span>? currentPage-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">this</span>.nextPage = currentPage&gt;=totalPage? totalPage: currentPage + <span class="hljs-number">1</span>;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPageSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pageSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">fromIndex</span> <span class="hljs-operator">=</span> (currentPage - <span class="hljs-number">1</span>) * pageSize;<br>        <span class="hljs-keyword">if</span> (fromIndex &gt;= data.size()) &#123;<br>            <span class="hljs-keyword">return</span> Collections.emptyList();<span class="hljs-comment">//空数组</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(fromIndex&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> Collections.emptyList();<span class="hljs-comment">//空数组</span><br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">toIndex</span> <span class="hljs-operator">=</span> currentPage * pageSize;<br>        <span class="hljs-keyword">if</span> (toIndex &gt;= data.size()) &#123;<br>            toIndex = data.size();<br>        &#125;<br>        <span class="hljs-keyword">return</span> data.subList(fromIndex, toIndex);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLastPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCurrentPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNextPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nextPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalPage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalCount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.demo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>            strings.add(<span class="hljs-string">&quot;str_&quot;</span>+i);<br>        &#125;<br>        ListPageUtil&lt;String&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListPageUtil</span>&lt;&gt;(strings, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>        System.err.println(<span class="hljs-string">&quot;分页数据：&quot;</span>+pageInfo.getData());<br>        System.err.println(<span class="hljs-string">&quot;总页数：&quot;</span>+pageInfo.getTotalPage());<br>        System.err.println(<span class="hljs-string">&quot;总条数：&quot;</span>+pageInfo.getTotalCount());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举</title>
      <link href="/2024/03/14/%E6%9E%9A%E4%B8%BE/"/>
      <url>/2024/03/14/%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="单值enum"><a href="#单值enum" class="headerlink" title="单值enum"></a>单值enum</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserRole</span> &#123;<br>        ROLE_ROOT_ADMIN,  <span class="hljs-comment">// 系统管理员</span><br>        ROLE_ORDER_ADMIN, <span class="hljs-comment">// 订单管理员</span><br>        ROLE_NORMAL       <span class="hljs-comment">// 普通用户</span><br>    &#125;<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">role1</span> <span class="hljs-operator">=</span> UserRole.ROLE_ROOT_ADMIN;<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">role2</span> <span class="hljs-operator">=</span> UserRole.ROLE_ORDER_ADMIN;<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">role3</span> <span class="hljs-operator">=</span> UserRole.ROLE_NORMAL;<br></code></pre></td></tr></table></figure><h2 id="values-方法：返回所有枚举常量的数组集合"><a href="#values-方法：返回所有枚举常量的数组集合" class="headerlink" title="values()方法：返回所有枚举常量的数组集合"></a>values()方法：返回所有枚举常量的数组集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> ( UserRole role : UserRole.values() ) &#123;<br>     System.out.println(role);<br>&#125;<br><span class="hljs-comment">// 打印：</span><br><span class="hljs-comment">// ROLE_ROOT_ADMIN</span><br><span class="hljs-comment">// ROLE_ORDER_ADMIN</span><br><span class="hljs-comment">// ROLE_NORMAL</span><br></code></pre></td></tr></table></figure><h2 id="ordinal-方法：返回枚举常量的序数，注意从0开始"><a href="#ordinal-方法：返回枚举常量的序数，注意从0开始" class="headerlink" title="ordinal()方法：返回枚举常量的序数，注意从0开始"></a>ordinal()方法：返回枚举常量的序数，注意从0开始</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( role1.ordinal() ); <span class="hljs-comment">// 打印0</span><br>System.out.println( role2.ordinal() ); <span class="hljs-comment">// 打印1</span><br>System.out.println( role3.ordinal() ); <span class="hljs-comment">// 打印2</span><br></code></pre></td></tr></table></figure><h2 id="compareTo-方法：枚举常量间的比较"><a href="#compareTo-方法：枚举常量间的比较" class="headerlink" title="compareTo()方法：枚举常量间的比较"></a>compareTo()方法：枚举常量间的比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( role1.compareTo(role2) ); <span class="hljs-comment">//打印-1</span><br>System.out.println( role2.compareTo(role3) ); <span class="hljs-comment">//打印-1</span><br>System.out.println( role1.compareTo(role3) ); <span class="hljs-comment">//打印-2</span><br></code></pre></td></tr></table></figure><h2 id="name-方法：获得枚举常量的名称"><a href="#name-方法：获得枚举常量的名称" class="headerlink" title="name()方法：获得枚举常量的名称"></a>name()方法：获得枚举常量的名称</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( role1.name() ); <span class="hljs-comment">// 打印ROLE_ROOT_ADMIN</span><br>System.out.println( role2.name() ); <span class="hljs-comment">// 打印ROLE_ORDER_ADMIN</span><br>System.out.println( role3.name() ); <span class="hljs-comment">// 打印ROLE_NORMAL</span><br></code></pre></td></tr></table></figure><h2 id="valueOf-方法：返回指定名称的枚举常量"><a href="#valueOf-方法：返回指定名称的枚举常量" class="headerlink" title="valueOf()方法：返回指定名称的枚举常量"></a>valueOf()方法：返回指定名称的枚举常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserRole</span> <span class="hljs-variable">roleRootAdmin</span> <span class="hljs-operator">=</span> UserRole.valueOf(<span class="hljs-string">&quot;ROLE_ROOT_ADMIN&quot;</span>);<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">roleOrderAdmin</span> <span class="hljs-operator">=</span> UserRole.valueOf(<span class="hljs-string">&quot;ROLE_ORDER_ADMIN&quot;</span>);<br><span class="hljs-type">UserRole</span> <span class="hljs-variable">roleNormal</span> <span class="hljs-operator">=</span> UserRole.valueOf(<span class="hljs-string">&quot;ROLE_NORMAL&quot;</span>);<br>System.out.println(roleRootAdmin);<span class="hljs-comment">//ROLE_ROOT_ADMIN</span><br>System.out.println(roleOrderAdmin);<span class="hljs-comment">//ROLE_ORDER_ADMIN</span><br>System.out.println(roleNormal);<span class="hljs-comment">//ROLE_NORMAL</span><br></code></pre></td></tr></table></figure><h2 id="用于switch语句中，而且意义更加明确"><a href="#用于switch语句中，而且意义更加明确" class="headerlink" title="用于switch语句中，而且意义更加明确"></a>用于switch语句中，而且意义更加明确</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserRole</span> <span class="hljs-variable">userRole</span> <span class="hljs-operator">=</span> UserRole.ROLE_ORDER_ADMIN;<br><span class="hljs-keyword">switch</span> (userRole) &#123;<br>    <span class="hljs-keyword">case</span> ROLE_ROOT_ADMIN:  <span class="hljs-comment">// 比如此处的意义就非常清晰了，比1，2，3这种数字好！</span><br>        System.out.println(<span class="hljs-string">&quot;这是系统管理员角色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ROLE_ORDER_ADMIN:<br>        System.out.println(<span class="hljs-string">&quot;这是订单管理员角色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> ROLE_NORMAL:<br>        System.out.println(<span class="hljs-string">&quot;这是普通用户角色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多值enum"><a href="#多值enum" class="headerlink" title="多值enum"></a>多值enum</h1><blockquote><p>在enum枚举类中完全可以像在普通Class里一样声明属性、构造函数以及成员方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">publicenum UserRole &#123;<br><br>    ROLE_ROOT_ADMIN( <span class="hljs-string">&quot;系统管理员&quot;</span>, <span class="hljs-number">000000</span> ),<br>    ROLE_ORDER_ADMIN( <span class="hljs-string">&quot;订单管理员&quot;</span>, <span class="hljs-number">100000</span> ),<br>    ROLE_NORMAL( <span class="hljs-string">&quot;普通用户&quot;</span>, <span class="hljs-number">200000</span> ),<br>    ;<br><br>    <span class="hljs-comment">// 以下为自定义属性</span><br>    privatefinal String roleName;  <span class="hljs-comment">//角色名称</span><br>    privatefinal Integer roleCode; <span class="hljs-comment">//角色编码</span><br><br>    <span class="hljs-comment">// 以下为自定义构造函数</span><br>    UserRole( String roleName, Integer roleCode ) &#123;<br>        <span class="hljs-built_in">this</span>.roleName = roleName;<br>        <span class="hljs-built_in">this</span>.roleCode = roleCode;<br>    &#125;<br><br>    <span class="hljs-comment">// 以下为自定义方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRoleName</span><span class="hljs-params">()</span> &#123;<br>        returnthis.roleName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getRoleCode</span><span class="hljs-params">()</span> &#123;<br>        returnthis.roleCode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getRoleCodeByRoleName</span><span class="hljs-params">( String roleName )</span> &#123;<br>        <span class="hljs-keyword">for</span>( UserRole enums : UserRole.values() ) &#123;<br>            <span class="hljs-keyword">if</span>( enums.getRoleName().equals( roleName ) ) &#123;<br>                <span class="hljs-keyword">return</span> enums.getRoleCode();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举-接口"><a href="#枚举-接口" class="headerlink" title="枚举 + 接口"></a>枚举 + 接口</h1><p>先定义一个公用的接口RoleOperation，表示不同角色所能做的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RoleOperation</span> &#123;<br>    String <span class="hljs-title function_">op</span><span class="hljs-params">()</span>;  <span class="hljs-comment">// 表示某个角色可以做哪些op操作</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将不同角色的情况全部交由枚举类来做，定义一个枚举类RoleEnum，并让它去实现RoleOperation接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RoleEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RoleOperation</span> &#123;<br><br>    <span class="hljs-comment">// 系统管理员(有A操作权限)</span><br>    ROLE_ROOT_ADMIN &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">op</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;ROLE_ROOT_ADMIN:&quot;</span> + <span class="hljs-string">&quot; has AAA permission&quot;</span>;<br>        &#125;<br>    &#125;,<br><br>    <span class="hljs-comment">// 订单管理员(有B操作权限)</span><br>    ROLE_ORDER_ADMIN &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">op</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;ROLE_ORDER_ADMIN:&quot;</span> + <span class="hljs-string">&quot; has BBB permission&quot;</span>;<br>        &#125;<br>    &#125;,<br><br>    <span class="hljs-comment">// 普通用户(有C操作权限)</span><br>    ROLE_NORMAL &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">op</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;ROLE_NORMAL:&quot;</span> + <span class="hljs-string">&quot; has CCC permission&quot;</span>;<br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><p>这样，在调用处就变得异常简单了，一行代码就行了，根本不需要什么<code>if/else</code>：</p><p>而且这样一来，以后假如我想扩充条件，只需要去枚举类中<strong>加代码</strong>即可，而不用改任何老代码，非常符合<strong>开闭原则</strong>！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JudgeRole</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">judge</span><span class="hljs-params">( String roleName )</span> &#123;<br>        <span class="hljs-comment">// 一行代码搞定！之前的if/else灰飞烟灭</span><br>        <span class="hljs-keyword">return</span> RoleEnum.valueOf(roleName).op();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举与设计模式"><a href="#枚举与设计模式" class="headerlink" title="枚举与设计模式"></a>枚举与设计模式</h1><blockquote><p>枚举还能实现设计模式？是的！不仅能而且还能实现好几种！</p></blockquote><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-comment">// 构造函数私有化，避免外部创建实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//定义一个内部枚举</span><br>    publicenum SingletonEnum&#123;<br><br>        SEED;  <span class="hljs-comment">// 唯一一个枚举对象，我们称它为“种子选手”！</span><br><br>        <span class="hljs-keyword">private</span> Singleton singleton;<br><br>        SingletonEnum()&#123;<br>            singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>(); <span class="hljs-comment">//真正的对象创建隐蔽在此！</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Singleton <span class="hljs-title function_">getInstnce</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> singleton;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 故意外露的对象获取方法，也是外面获取实例的唯一入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonEnum.SEED.getInstnce(); <span class="hljs-comment">// 通过枚举的种子选手来完成</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>比如用枚举就可以写出一个基于策略模式的加减乘除计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>        ADDITION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x + y; <span class="hljs-comment">// 加法</span><br>            &#125;<br>        &#125;,<br><br>        SUBTRACTION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x - y; <span class="hljs-comment">// 减法</span><br>            &#125;<br>        &#125;,<br><br>        MULTIPLICATION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x * y; <span class="hljs-comment">// 乘法</span><br>            &#125;<br>        &#125;,<br>      <br>        DIVISION &#123;<br>            <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">( Double x, Double y )</span> &#123;<br>                <span class="hljs-keyword">return</span> x/y;  <span class="hljs-comment">// 除法</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Double <span class="hljs-title function_">execute</span><span class="hljs-params">(Double x, Double y)</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println( Calculator.ADDITION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 6.0</span><br>        System.out.println( Calculator.SUBTRACTION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 2.0</span><br>        System.out.println( Calculator.MULTIPLICATION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 8.0</span><br>        System.out.println( Calculator.DIVISION.execute( <span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span> ) );<br>        <span class="hljs-comment">// 打印 2.0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="专门用于枚举的集合类"><a href="#专门用于枚举的集合类" class="headerlink" title="专门用于枚举的集合类"></a>专门用于枚举的集合类</h1><blockquote><p>对于枚举，有它专门的集合类：EnumSet和EnumMap</p></blockquote><h2 id="EnumSet-是专门为盛放枚举类型所设计的-Set-类型。"><a href="#EnumSet-是专门为盛放枚举类型所设计的-Set-类型。" class="headerlink" title="EnumSet 是专门为盛放枚举类型所设计的 Set 类型。"></a>EnumSet 是专门为盛放枚举类型所设计的 Set 类型。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserRole</span> &#123;<br><br>    ROLE_ROOT_ADMIN,  <span class="hljs-comment">// 系统管理员</span><br><br>    ROLE_ORDER_ADMIN, <span class="hljs-comment">// 订单管理员</span><br><br>    ROLE_NORMAL       <span class="hljs-comment">// 普通用户</span><br>&#125;<br></code></pre></td></tr></table></figure><p>比如系统里来了一批人，我们需要查看他是不是某个角色中的一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个管理员角色的专属集合</span><br>EnumSet&lt;UserRole&gt; userRolesForAdmin = EnumSet.of(<br>        UserRole.ROLE_ROOT_ADMIN,<br>        UserRole.ROLE_ORDER_ADMIN<br>    );<br><br><span class="hljs-comment">// 判断某个进来的用户是不是管理员</span><br>Boolean <span class="hljs-title function_">isAdmin</span><span class="hljs-params">( User user )</span> &#123;<br>    <span class="hljs-keyword">if</span>( userRolesForAdmin.contains( user.getUserRole()))&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="EnumMap-是用来专门盛放枚举类型为key的-Map-类型。"><a href="#EnumMap-是用来专门盛放枚举类型为key的-Map-类型。" class="headerlink" title="EnumMap 是用来专门盛放枚举类型为key的 Map 类型。"></a>EnumMap 是用来专门盛放枚举类型为key的 Map 类型。</h2><p>比如，系统里来了一批人，我们需要统计不同的角色到底有多少人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;UserRole,Integer&gt; userStatisticMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;&gt;(UserRole.class);<br><br><span class="hljs-keyword">for</span> ( User user : userList ) &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> userStatisticMap.get( user.getUserRole() );<br>    <span class="hljs-keyword">if</span>( <span class="hljs-literal">null</span> != num ) &#123;<br>        userStatisticMap.put( user.getUserRole(), num+<span class="hljs-number">1</span> );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        userStatisticMap.put( user.getUserRole(), <span class="hljs-number">1</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps</title>
      <link href="/2024/03/13/PS/"/>
      <url>/2024/03/13/PS/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常用操作快捷键"><a href="#1-常用操作快捷键" class="headerlink" title="1.常用操作快捷键"></a>1.常用操作快捷键</h1><ul><li>打开文件： <code>Ctrl+O</code></li><li>复制图层： <code>Ctrl +J</code></li><li>放大缩小画面：<code>Alt</code>+鼠标滚轮</li><li>移动画面：按住空格键 ,鼠标变成小手形状，拖动即可</li><li>取消选区： <code>Ctrl+D</code></li><li>保存文件：【文件】-【存储为】-选择路径 选择保存的文件类型</li><li>前进一步:<code>Shift+ Ctrl +Z</code></li><li>后退一步:<code>Alt + Ctrl +Z</code></li><li>画笔变大:<code>[</code></li><li>画笔变小:<code>]</code></li><li>图层重命名:（双击文字）</li><li>新建一份空白PSD文档：<code>Ctrl+N</code></li><li>创建新的图层:<code>Shift+Alt+Ctrl+N</code> 或点击右下角新建图层的按钮(折纸形状图标)</li></ul><h1 id="2-修补工具"><a href="#2-修补工具" class="headerlink" title="2.修补工具"></a>2.修补工具</h1><ul><li><p>污点修复画笔工具  <code>shift J</code></p><p>选择修补工具，点击鼠标右键，选择【<strong>污点修复画笔工具</strong>】,将鼠标移动到唇印位置，按住鼠标左键进行涂抹（可以根据需要自动调整画笔大小）.画笔更小调整更精细.</p></li><li><p>修补工具  <code>shift J</code></p><p>选择修补工具，点击鼠标右键，选择【<strong>修补工具</strong>】,鼠标左键圈选区域并移动到其他干净的位置,放开鼠标,原圈选区域被修补干净.</p></li><li><p>修复画笔工具  <code>shift J</code></p><p>1.取样：按住 At 键，光标变为靶心,选取干净的皮肤处，单击一下左键</p><p>2.涂抹：左键单击或涂抹污点处</p></li><li><p>内容识别  <code>shift F5</code></p><p>去除水印:使用<code>套索工具</code>或<code>修补工具</code>,画出水印位置,按shift F5,选<code>内容识别</code>,点击<code>确定</code>.</p></li></ul><h1 id="3-图层"><a href="#3-图层" class="headerlink" title="3.图层"></a>3.图层</h1><h2 id="如何多选图层？"><a href="#如何多选图层？" class="headerlink" title="如何多选图层？"></a>如何多选图层？</h2><ul><li><p>通过右键选择</p></li><li><p><code>Ctrl</code>多选。按住<code>Ctr</code>！鼠标点击需要的图层.或者,<code>Shift</code>多选。按住<code>Shft</code>只可选择相邻图层</p></li><li><p>鼠标框选图层</p></li><li><p>链接图层</p><p>为了方便我们选择图层，我可以把两个图层绑定，这样就能同时移动了</p></li></ul><h2 id="对齐图层"><a href="#对齐图层" class="headerlink" title="对齐图层"></a>对齐图层</h2><ul><li>移动工具 自动对齐</li><li>使用居中对齐功能</li></ul><h2 id="调整图层顺序"><a href="#调整图层顺序" class="headerlink" title="调整图层顺序"></a>调整图层顺序</h2><ul><li>手动移动 <code>Ctrl+]</code> 图层向上移一层 <code>ctrl +[</code> 图层向下移一层 <code>shift +ctrl+]</code> 图层至顶 <code>shift+ctrl +[</code> 图层至底</li></ul><h2 id="复制图层"><a href="#复制图层" class="headerlink" title="复制图层:"></a>复制图层:</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ctrl J</span><br></code></pre></td></tr></table></figure><h2 id="图层分组"><a href="#图层分组" class="headerlink" title="图层分组"></a>图层分组</h2><h2 id="如何调出混合选项"><a href="#如何调出混合选项" class="headerlink" title="如何调出混合选项"></a>如何调出混合选项</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172730896.png" alt="image-20240313172730896"></p><h2 id="常见的图层样式"><a href="#常见的图层样式" class="headerlink" title="常见的图层样式"></a>常见的图层样式</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172802350.png" alt="image-20240313172802350"></p><h2 id="快速定位-查找图层"><a href="#快速定位-查找图层" class="headerlink" title="快速定位&#x2F;查找图层"></a>快速定位&#x2F;查找图层</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172857445.png" alt="image-20240313172857445"></p><h2 id="图层快速导出PNG"><a href="#图层快速导出PNG" class="headerlink" title="图层快速导出PNG"></a>图层快速导出PNG</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172919844.png" alt="image-20240313172919844"></p><h2 id="不透明度和填充的区别"><a href="#不透明度和填充的区别" class="headerlink" title="不透明度和填充的区别"></a>不透明度和填充的区别</h2><p><img src="https://gitee.com/blydd/imgs_bed/raw/master/pic/image-20240313172938485.png" alt="image-20240313172938485"></p><h2 id="只显示当前图层："><a href="#只显示当前图层：" class="headerlink" title="只显示当前图层："></a>只显示当前图层：</h2><p>按住At键点击当前图层眼睛</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装方式</title>
      <link href="/2024/03/07/Nginx%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/03/07/Nginx%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CentOS"><a href="#1-CentOS" class="headerlink" title="1.CentOS"></a>1.CentOS</h1><h2 id="1-1yum安装"><a href="#1-1yum安装" class="headerlink" title="1.1yum安装"></a>1.1yum安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 安装EPEL仓库</span><br>sudo yum install epel-release<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 更新repo</span><br>sudo yum update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 安装nginx</span><br>sudo yum install nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 验证安装</span><br>sudo nginx -V<br></code></pre></td></tr></table></figure><h2 id="1-2通过Nginx的官⽅仓库来安装"><a href="#1-2通过Nginx的官⽅仓库来安装" class="headerlink" title="1.2通过Nginx的官⽅仓库来安装"></a>1.2通过Nginx的官⽅仓库来安装</h2><blockquote><p>这样可以保证安装的是最新的版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. 安装前置依赖<br>sudo yum install yum-utils<br><br>2. 添加nginx仓库<br>sudo vim /etc/yum.repos.d/nginx.repo<br><br>3. 添加以下内容<br>[nginx-stable] [nginx-stable]<br>name=nginx stable repo<br>baseurl=http://nginx.org/packages/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br>或者<br>[nginx-mainline] [nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br>module_hotfixes=true<br>上⾯的 stable 和 mainline 就分别表示稳定版和主线版，可以根据⾃⼰的需要来选择。<br><br>4. 更新repo<br>sudo yum update<br><br>5. 安装nginx<br>sudo yum install nginx<br><br>6. 验证安装<br>除了使⽤ sudo nginx -V 之外，还可以使⽤下⾯的⽅式来验证：<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动Nginx</span><br>sudo nginx<br>curl -I 127.0.0.1<br>如果能够看到类似下⾯的输出，就表示安装成功了：<br>HTTP/1.1 200 OK<br>Server: nginx/1.25.1<br></code></pre></td></tr></table></figure><h1 id="2-Debian、Ubuntu"><a href="#2-Debian、Ubuntu" class="headerlink" title="2.Debian、Ubuntu"></a>2.Debian、Ubuntu</h1><h2 id="2-1apt安装"><a href="#2-1apt安装" class="headerlink" title="2.1apt安装"></a>2.1apt安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 更新仓库信息</span><br>sudo apt-get update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 安装nginx</span><br>sudo apt-get install nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 验证安装</span><br>sudo nginx -V<br></code></pre></td></tr></table></figure><h2 id="2-2通过Nginx的官⽅仓库来安装"><a href="#2-2通过Nginx的官⽅仓库来安装" class="headerlink" title="2.2通过Nginx的官⽅仓库来安装"></a>2.2通过Nginx的官⽅仓库来安装</h2><blockquote><p>这样可以保证安装的是最新的版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 安装前置依赖</span><br>sudo apt install curl gnupg2 ca-certificates lsb-release debian-archivekeyring<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 导⼊官⽅Nginx签名密钥</span><br>curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \<br> | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 验证下载的⽂件中包含了正确的密钥</span><br>gpg --dry-run --quiet --no-keyring --import --import-options import-show<br>/usr/share/keyrings/nginx-archive-keyring.gpg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 设置稳定版或者主线版的Nginx包</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">稳定版</span><br>echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \<br>http://nginx.org/packages/debian `lsb_release -cs` nginx&quot; \<br> | sudo tee /etc/apt/sources.list.d/nginx.list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">主线版</span><br>echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \<br>http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx&quot; \<br> | sudo tee /etc/apt/sources.list.d/nginx.list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5. 设置仓库优先级，优先使⽤Nginx官⽅仓库</span><br>echo -e &quot;Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPinPriority: 900\n&quot; \<br> | sudo tee /etc/apt/preferences.d/99nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6. 安装nginx</span><br>sudo apt update<br>sudo apt install nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">7. 验证安装</span><br>sudo nginx<br>curl -I 127.0.0.1<br></code></pre></td></tr></table></figure><h1 id="3-MAC安装"><a href="#3-MAC安装" class="headerlink" title="3.MAC安装"></a>3.MAC安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install nginx<br></code></pre></td></tr></table></figure><h1 id="4-从源码编译安装"><a href="#4-从源码编译安装" class="headerlink" title="4.从源码编译安装"></a>4.从源码编译安装</h1><blockquote><p>从源码编译安装的⽅式可以让我们⾃定义Nginx的安装⽬录、模块等，但是安装过程⽐较繁琐，需要安装⼀些依赖库</p></blockquote><h2 id="4-1安装PCRE库"><a href="#4-1安装PCRE库" class="headerlink" title="4.1安装PCRE库"></a>4.1安装PCRE库</h2><blockquote><p>PCRE是Perl Compatible Regular Expressions的缩写，是⼀个Perl库，包括perl兼容的正则表达式库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget github.com/PCRE2Project/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.gz<br>tar -zxf pcre2-10.42.tar.gz<br>cd pcre2-10.42<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-2-安装zlib库"><a href="#4-2-安装zlib库" class="headerlink" title="4.2 安装zlib库"></a>4.2 安装zlib库</h2><blockquote><p>zlib是⼀个数据压缩库，⽤于Nginx的gzip模块。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://zlib.net/zlib-1.2.13.tar.gz<br>tar -zxf zlib-1.2.13.tar.gz<br>cd zlib-1.2.13<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-3-安装OpenSSL库"><a href="#4-3-安装OpenSSL库" class="headerlink" title="4.3 安装OpenSSL库"></a>4.3 安装OpenSSL库</h2><blockquote><p>OpenSSL是⼀个强⼤的安全套接字层密码库，⽤于Nginx的SSL模块</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://www.openssl.org/source/openssl-1.1.1t.tar.gz<br>tar -zxf openssl-1.1.1t.tar.gz<br>cd openssl-1.1.1t<br>./Configure darwin64-x86_64-cc --prefix=/usr<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-4-下载Nginx源码"><a href="#4-4-下载Nginx源码" class="headerlink" title="4.4 下载Nginx源码"></a>4.4 下载Nginx源码</h2><h3 id="4-4-1下载主线版的Nginx源码："><a href="#4-4-1下载主线版的Nginx源码：" class="headerlink" title="4.4.1下载主线版的Nginx源码："></a>4.4.1下载主线版的Nginx源码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nginx.org/download/nginx-1.23.4.tar.gz<br>tar zxf nginx-1.23.4.tar.gz<br>cd nginx-1.23.4<br></code></pre></td></tr></table></figure><h3 id="4-4-2下载稳定版的Nginx源码："><a href="#4-4-2下载稳定版的Nginx源码：" class="headerlink" title="4.4.2下载稳定版的Nginx源码："></a>4.4.2下载稳定版的Nginx源码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nginx.org/download/nginx-1.24.0.tar.gz<br>tar zxf nginx-1.24.0.tar.gz<br>cd nginx-1.24.0<br></code></pre></td></tr></table></figure><h2 id="4-5-配置编译选项"><a href="#4-5-配置编译选项" class="headerlink" title="4.5 配置编译选项"></a>4.5 配置编译选项</h2><blockquote><p>编译选项可以通过 .&#x2F;configure –help 来查看。 下⾯是⼀个官⽹的例⼦：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure<br>--sbin-path=/usr/local/nginx/nginx<br>--conf-path=/usr/local/nginx/nginx.conf<br>--pid-path=/usr/local/nginx/nginx.pid<br>--with-pcre=../pcre2-10.42<br>--with-zlib=../zlib-1.2.13<br>--with-http_ssl_module<br>--with-stream<br>--with-mail=dynamic<br>--add-module=/usr/build/nginx-rtmp-module<br>--add-dynamic-module=/usr/build/3party_module<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>参数（Parameter）</strong></th><th><strong>说明（Description）</strong></th></tr></thead><tbody><tr><td>–prefix&#x3D;</td><td>指定安装⽬录</td></tr><tr><td>–sbin-path&#x3D;</td><td>指定Nginx可执⾏⽂件</td></tr><tr><td>–conf-path&#x3D;</td><td>指定配置⽂件位置</td></tr><tr><td>–pid-path&#x3D;</td><td>指定pid⽂件位置</td></tr><tr><td>–error-log-path&#x3D;</td><td>指定错误⽇志⽂件</td></tr><tr><td>–http-log-path&#x3D;</td><td>指定HTTP⽇志⽂件</td></tr><tr><td>–user&#x3D;</td><td>指定运⾏Nginx的⽤户</td></tr><tr><td>–group&#x3D;</td><td>指定运⾏Nginx的组</td></tr><tr><td>–with-pcre&#x3D;</td><td>指定PCRE库的位置</td></tr><tr><td>–with-pcre-jit</td><td>开启PCRE的JIT（Just-in-time compilation）⽀持</td></tr><tr><td>–with-zlib&#x3D;</td><td>指定zlib库的位置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> nginx安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx如何处理请求</title>
      <link href="/2024/03/07/Nginx%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-%E5%AE%98%E7%BF%BB%E6%96%87%E6%A1%A3/"/>
      <url>/2024/03/07/Nginx%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-%E5%AE%98%E7%BF%BB%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>翻自<a href="http://nginx.org/en/docs/http/request_processing.html">官网</a> <a href="http://nginx.org/en/docs/http/server_names.html">server_name官网文档</a></p></blockquote><h1 id="1-基于名称的虚拟服务器"><a href="#1-基于名称的虚拟服务器" class="headerlink" title="1.基于名称的虚拟服务器"></a>1.基于名称的虚拟服务器</h1><p><strong>nginx首先决定哪个服务器应该处理请求。</strong>让我们从一个简单的配置开始，其中所有三个虚拟服务器都在端口*上侦听：80:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">www.example.com;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在这个配置中，nginx只验证请求头字<code>Host</code>以确定请求应该路由到哪个服务器</strong>。如果它的值与任何服务器名称都不匹配，或者请求根本不包含这个头字段，那么nginx会将请求路由到这个端口的默认服务器。在上面的配置中，默认服务器是第一个服务器，这是nginx的标准默认行为。还可以使用listen指令中的default_server参数显式设置哪个服务器应为默认服务器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span> <span class="hljs-string">default_server;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><em>default_server参数自0.8.21版本以来一直可用。在早期版本中，应使用默认参数。</em></p></blockquote><p>请注意，<strong>default_server是侦听端口的属性，而不是服务器名称的属性</strong>。稍后将对此进行详细介绍。</p><h1 id="2-如何拦截未携带Host请求头参数的请求"><a href="#2-如何拦截未携带Host请求头参数的请求" class="headerlink" title="2.如何拦截未携带Host请求头参数的请求"></a>2.如何拦截未携带Host请求头参数的请求</h1><p>如果不允许没有“Host”请求头字段的请求，则可以定义一个丢弃请求的服务器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">return</span>      <span class="hljs-number">444</span><span class="hljs-string">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，服务器名称被设置为一个空字符串，该字符串将匹配没有“Host”请求头字段的请求，并返回一个特殊的nginx的非标准代码444来关闭连接。</p><blockquote><p>从版本0.8.48开始，这是服务器名称的默认设置，因此可以省略server_name “”。在早期版本中，机器的主机名被用作默认服务器名称。</p></blockquote><h1 id="3-同时配置了ip和域名-server-name-的混合虚拟服务器"><a href="#3-同时配置了ip和域名-server-name-的混合虚拟服务器" class="headerlink" title="3.同时配置了ip和域名(server_name)的混合虚拟服务器"></a>3.同时配置了ip和域名(server_name)的混合虚拟服务器</h1><p>让我们来看一个更复杂的配置，其中一些虚拟服务器侦听不同的地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">www.example.com;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个配置中，nginx首先根据<code>listen</code>指令验证请求的IP地址和端口。然后，它根据与IP地址和端口匹配的<code>server</code>块的<code>server_name</code>条目来验证请求的<code>Host</code>头字段。如果找不到匹配的<code>server_name</code>，则由默认服务器处理请求。</p><p>例如，在<code>192.168.1.1:80</code>端口上收到的对<code>www.example.com</code>的请求将由<code>192.168.1.1:80</code>端口的默认服务器处理，即由第一台服务器处理，因为没有为此端口定义<code>www.example.com</code>,<strong>即listen属性监听了具体的ip和端口后就监听指定的ip和端口请求,此时server_name配置失效.</strong></p><p>如前所述，**<code>default_server</code>**是侦听端口的属性，并且可以为不同的端口定义不同的默认服务器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-string">:80</span> <span class="hljs-string">default_server;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.net</span> <span class="hljs-string">www.example.net;</span><br>    <span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span><span class="hljs-string">:80</span> <span class="hljs-string">default_server;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">www.example.com;</span><br>    <span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-nginx如何选择location来处理一个请求"><a href="#4-nginx如何选择location来处理一个请求" class="headerlink" title="4.nginx如何选择location来处理一个请求"></a>4.nginx如何选择location来处理一个请求</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span>      <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.org</span> <span class="hljs-string">www.example.org;</span><br>    <span class="hljs-string">root</span>        <span class="hljs-string">/data/www;</span><br><br>    <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>        <span class="hljs-string">index</span>   <span class="hljs-string">index.html</span> <span class="hljs-string">index.php;</span><br>    &#125;<br><br>    <span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|png)$</span> &#123;<br>        <span class="hljs-string">expires</span> <span class="hljs-string">30d;</span><br>    &#125;<br><br>    <span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">\.php$</span> &#123;<br>        <span class="hljs-string">fastcgi_pass</span>  <span class="hljs-string">localhost:9000;</span><br>        <span class="hljs-string">fastcgi_param</span> <span class="hljs-string">SCRIPT_FILENAME</span><br>                      <span class="hljs-string">$document_root$fastcgi_script_name;</span><br>        <span class="hljs-string">include</span>       <span class="hljs-string">fastcgi_params;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nginx首先搜索由文字字符串给出的最具体的前缀位置，而不考虑列出的顺序。在上述配置中，唯一的前缀位置是“&#x2F;”，由于它与任何请求匹配，因此将作为最后手段使用。然后nginx按照配置文件中列出的顺序检查正则表达式给出的位置。第一个匹配到表达式即停止向下匹配，nginx将使用这个location。如果没有正则表达式与请求匹配，那么nginx将使用前面找到的最特定的前缀位置。</p><p>请注意，所有类型的位置都只测试请求行中没有参数的URI部分。这样做是因为查询字符串中的参数可以通过几种方式给出，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/index.php?user=john&amp;page=1<br>/index.php?page=1&amp;user=john<br></code></pre></td></tr></table></figure><p>此外，任何人都可以请求查询字符串中的任何内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/index.php?page=1&amp;something+else&amp;user=john<br></code></pre></td></tr></table></figure><p>现在，让我们看看在上面的配置中如何处理请求：</p><ul><li>请求<code>“/logo.gif”</code>首先由前缀位置<code>“/”</code>匹配，然后由正则表达式<code>“</code>\.（gif|jpg|png）$<code>”</code>匹配，因此由后一个位置处理。使用指令<code>“</code>root &#x2F;data&#x2F;www<code>”</code>，将请求映射到文件<code>/data/ww/logo.gif</code>，并将文件发送到客户端。</li><li>请求<code>“</code>&#x2F;index.php<code>”</code>也首先由前缀位置<code>“</code>&#x2F;<code>”</code>匹配，然后由正则表达式<code>“</code>\.（php）$<code>”</code>匹配。因此，它由后一个位置处理，并将请求传递给在<code>localhost:9000</code>上侦听的FastCGI服务器。fastcgi_param指令将fastcgi参数SCRIPT_FILENAME设置为<code>“/data/www/index.php”</code>，然后fastcgi服务器执行该文件。变量<code>$document_root</code>等于根指令的值，变量<code>$fastcgi_script_name</code>等于请求URI，即“&#x2F;index.php”。</li><li>请求<code>“</code>&#x2F;about.html<code>”</code>仅与前缀位置<code>“</code>&#x2F;<code>”</code>匹配，因此在该位置进行处理。使用指令<code>“</code>root &#x2F;data&#x2F;www<code>”</code>，将请求映射到文件<code>/data/ww/about.html</code>，并将文件发送到客户端。</li><li>处理请求<code>“/”</code>更为复杂。它只与前缀位置“&#x2F;”匹配，因此，它由该位置处理。然后，index指令根据其参数和<code>“</code>root &#x2F;data&#x2F;www<code>”</code>指令来测试索引文件的存在。如果文件<code>/data/www/index.html</code>不存在，而文件<code>/data/www/index.php</code>存在，那么指令会进行内部重定向到“<code>/index.php</code>”，nginx会再次搜索位置，就像请求是由客户端发送的一样。正如我们之前看到的，重定向的请求最终将由FastCGI服务器处理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> nginx-server块 </tag>
            
            <tag> nginx配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用命令</title>
      <link href="/2024/03/07/Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/03/07/Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx # 启动Nginx<br>nginx -c filename # 指定配置⽂件<br>nginx -V # 查看nginx安装目录 编译参数 配置文件和日志文件的位置等各种信息<br>nginx -t # 检查配置⽂件是否正确，也可⽤来定位配置⽂件的位置<br>nginx -s quit # 优雅停⽌Nginx<br>nginx -s stop # 快速停⽌Nginx<br>nginx -s reload # 重新加载配置⽂件<br>nginx -s reopen # 重新打开⽇志⽂件<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> nginx常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置文件</title>
      <link href="/2024/03/07/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/03/07/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Nginx的配置⽂件是 nginx.conf ，⼀般位于 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 。 可以使⽤ nginx -t 来查看配置⽂件的位置和检查配置⽂件是否正确。</p></blockquote><h1 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h1><blockquote><p>主要⽤来设置⼀些影响Nginx服务器整体运⾏的配置指令，主要包括配置运⾏Nginx服务器的⽤户（组）、允许⽣成的worker process数、进程PID存放路径、⽇志存放路径和类型以及配置⽂件引⼊等。</p></blockquote><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><blockquote><p>指定运⾏Nginx服务器的⽤户，只能在全局块配置</p><p>将user指令注释掉，或者配置成nobody的话所有⽤户都可以运⾏</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">user [user] [group]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">user nginx;</span><br>user nobody nobody;<br></code></pre></td></tr></table></figure><h2 id="worker-processes"><a href="#worker-processes" class="headerlink" title="worker_processes"></a>worker_processes</h2><blockquote><p>指定⽣成的worker进程的数量，也可使⽤⾃动模式，只能在全局块配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes  1; #auto或其他数字<br></code></pre></td></tr></table></figure><h2 id="error-log"><a href="#error-log" class="headerlink" title="error_log"></a>error_log</h2><blockquote><p>错误⽇志存放路径和类型</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  /var/log/nginx/error.log;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  /var/log/nginx/error.log  notice;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  /var/log/nginx/error.log  info;</span><br></code></pre></td></tr></table></figure><h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h2><blockquote><p>进程PID存放路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pid /var/run/nginx.pid;<br></code></pre></td></tr></table></figure><h1 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">events &#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定使⽤哪种⽹络IO模型，只能在events块中进⾏配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">use epoll</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">每个worker process允许的最⼤连接数</span><br>  worker_connections  1024;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h1><blockquote><p>http块是配置⽂件的主要部分，包括http全局块和server块。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>****<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><blockquote><p>nginx 可以使⽤include指令引⼊其他配置⽂件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">include       mime.types;<br></code></pre></td></tr></table></figure><h2 id="default-type"><a href="#default-type" class="headerlink" title="default_type"></a>default_type</h2><blockquote><p>默认类型，如果请求的URL没有包含⽂件类型，会使⽤默认类型</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">default_type  application/octet-stream;<br></code></pre></td></tr></table></figure><h2 id="log-format"><a href="#log-format" class="headerlink" title="log_format"></a>log_format</h2><blockquote><p>定义⽇志格式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">                 <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">                 <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br></code></pre></td></tr></table></figure><h2 id="access-log"><a href="#access-log" class="headerlink" title="access_log"></a>access_log</h2><blockquote><p>⽇志存放路径和类型</p><p>格式为：access_log <path> [format [buffer&#x3D;size] [gzip[&#x3D;level]] [flush&#x3D;time] [if&#x3D;condition]];</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">access_log /var/log/nginx/access.log main;<br></code></pre></td></tr></table></figure><h2 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h2><blockquote><p>开启⾼效⽂件传输模式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sendfile        on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp_nopush     on;</span><br></code></pre></td></tr></table></figure><h2 id="sendfile-max-chunk"><a href="#sendfile-max-chunk" class="headerlink" title="sendfile_max_chunk"></a>sendfile_max_chunk</h2><blockquote><p>设置sendfile最⼤传输⽚段⼤⼩，默认为0，表示不限制</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sendfile_max_chunk 1m;<br></code></pre></td></tr></table></figure><h2 id="keepalive-requests"><a href="#keepalive-requests" class="headerlink" title="keepalive_requests"></a>keepalive_requests</h2><blockquote><p>每个连接的请求次数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keepalive_requests 100;<br></code></pre></td></tr></table></figure><h2 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a>keepalive_timeout</h2><blockquote><p>连接超时时间</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keepalive_timeout  65;<br></code></pre></td></tr></table></figure><h2 id="gzip压缩相关"><a href="#gzip压缩相关" class="headerlink" title="gzip压缩相关"></a>gzip压缩相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"> # </span><span class="language-bash">开启gzip压缩</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">gzip  on;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启gzip压缩的最⼩⽂件⼤⼩</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip_min_length 1k;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip压缩级别，1-9，级别越⾼压缩率越⾼，但是消耗CPU资源也越多</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip_comp_level 2;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip压缩⽂件类型</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip_types text/plain application/javascript application/xjavascript text/css application/xml text/javascript application/x-httpdphp image/jpeg image/gif image/png;</span><br></code></pre></td></tr></table></figure><h2 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h2><blockquote><p>upstream指令⽤于定义⼀组服务器，⼀般⽤来配置反向代理和负载均衡</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream www.example.com &#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ip_hash指令⽤于设置负载均衡的⽅式，ip_hash表示使⽤客户端的IP进⾏<span class="hljs-built_in">hash</span>，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这样可以保证同⼀个客户端的请求每次都会分配到同⼀个服务器，解决了session共享的问题</span><br>ip_hash;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">weight ⽤于设置权重，权重越⾼被分配到的⼏率越⼤</span><br>server 192.168.50.11:80 weight=3;<br>server 192.168.50.12:80;<br>server 192.168.50.13:80;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><blockquote><p>server块是配置虚拟主机的，⼀个http块可以包含多个server块，每个server块就是⼀个虚拟主机。</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br># 监听IP和端⼝<br># listen的格式为：<br># listen [ip]:port [default_server] [ssl] [http2] [spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number];<br># listen指令⾮常灵活，可以指定多个IP和端⼝，也可以使⽤通配符<br># 下⾯是⼏个实际的例⼦：<br># listen 127.0.0.1:80; # 监听来⾃127.0.0.1的80端⼝的请求<br># listen 80; # 监听来⾃所有IP的80端⼝的请求<br># listen *:80; # 监听来⾃所有IP的80端⼝的请求，同上<br># listen 127.0.0.1; # 监听来⾃来⾃127.0.0.1的80端⼝，默认端⼝为80<br>        listen       80;<br># server_name ⽤来指定虚拟主机的域名，可以使⽤精确匹配、通配符匹配和正则匹配等⽅式<br># server_name example.org www.example.org; # 精确匹配<br># server_name *.example.org; # 通配符匹配<br># server_name ~^www\d+\.example\.net$; # 正则匹配<br>        server_name  localhost;<br><br>        #charset koi8-r;<br><br>        #access_log  logs/host.access.log  main;<br><br># location块⽤来配置请求的路由，⼀个server块可以包含多个location块，每个location块就是⼀个请求路由<br>        # location块的格式是：<br># location [=|~|~*|^~] /uri/ &#123; ... &#125;<br># = 表示精确匹配，只有完全匹配上才能⽣效<br># ~ 表示区分⼤⼩写的正则匹配<br># ~* 表示不区分⼤⼩写的正则匹配<br># ^~ 表示普通字符匹配，如果匹配成功，则不再匹配其他location<br># /uri/ 表示请求的URI，可以是字符串，也可以是正则表达式<br># &#123; ... &#125; 表示location块的配置内容<br>location / &#123;<br># root指令指定请求的根⽬录，可是绝对路径，也可是相对路径<br>            root   html;<br># index指令指定默认⽂件，如请求的是⽬录，则会在⽬录下查找默认⽂件<br>            index  index.html index.htm;<br>        &#125;<br># 下⾯是⼀些location的示例：<br> location = / &#123; # 精确匹配请求<br> root /usr/share/nginx/html;<br> index index.html index.htm;<br> &#125;<br> location ^~ /images/ &#123; # 匹配以/images/开头的请求<br> root /usr/share/nginx/html;<br> &#125;<br> location ~* \.(gif|jpg|jpeg)$ &#123; # 匹配以gif、jpg或者jpeg结尾的请求<br> root /usr/share/nginx/html;<br> &#125;<br> location !~ \.(gif|jpg|jpeg)$ &#123; # 不匹配以gif、jpg或者jpeg结尾的请求<br> root /usr/share/nginx/html;<br> &#125;<br> location !~* \.(gif|jpg|jpeg)$ &#123; # 不匹配以gif、jpg或者jpeg结尾的请求<br> root /usr/share/nginx/html;<br> &#125;<br><br># error_page ⽤于指定错误⻚⾯，可以指定多个，按照优先级从⾼到低依次查找<br>        #error_page  404              /404.html;<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br><br>        # proxy the PHP scripts to Apache listening on 127.0.0.1:80<br>        #<br>        #location ~ \.php$ &#123;<br>        #    proxy_pass   http://127.0.0.1;<br>        #&#125;<br><br>        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000<br>        #<br>        #location ~ \.php$ &#123;<br>        #    root           html;<br>        #    fastcgi_pass   127.0.0.1:9000;<br>        #    fastcgi_index  index.php;<br>        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>        #    include        fastcgi_params;<br>        #&#125;<br><br>        # deny access to .htaccess files, if Apache&#x27;s document root<br>        # concurs with nginx&#x27;s one<br>        #<br>        #location ~ /\.ht &#123;<br>        #    deny  all;<br>        #&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="其他的server块例子"><a href="#其他的server块例子" class="headerlink" title="其他的server块例子"></a>其他的server块例子</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="hljs-meta prompt_">   #</span><span class="language-bash"></span><br><span class="language-bash">   <span class="hljs-comment">#server &#123;</span></span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   listen       8000;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   listen       somename:8080;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   server_name  somename  <span class="hljs-built_in">alias</span>  another.alias;</span><br><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   location / &#123;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">       root   html;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">       index  index.html index.htm;</span><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">   &#125;</span><br><span class="hljs-meta prompt_">   #</span><span class="language-bash">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen 443 ssl;<br>server_name www.lifeab.asia;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">相对路径下的证书目录</span><br>ssl_certificate   cert/a.pem;<br>ssl_certificate_key  cert/a.key;<br>ssl_session_timeout 5m;<br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>ssl_prefer_server_ciphers on;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash">把https请求重定向</span><br>location / &#123;<br>#实际服务开放地址<br>        proxy_pass http://182.92.10.251:8888;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> nginx配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/07/hello-world/"/>
      <url>/2024/03/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>！这是你的第一篇文章。查看<a href="https://hexo.io/docs/">文档</a>以了解更多信息。如果你在使用Hexo时遇到任何问题，你可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案，也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server <span class="hljs-comment">#简写 hexo s</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="编辑静态文件"><a href="#编辑静态文件" class="headerlink" title="编辑静态文件"></a>编辑静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate <span class="hljs-comment">#编译:简写 hexo g</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">编译</a></p><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AE</title>
      <link href="/2021/02/25/AE/"/>
      <url>/2021/02/25/AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-赛博朋克案例"><a href="#1-赛博朋克案例" class="headerlink" title="1.赛博朋克案例"></a>1.赛博朋克案例</h1><p><strong>窗口界面初始化</strong>:<code>窗口--工作区--默认</code></p><h2 id="导入素材"><a href="#导入素材" class="headerlink" title="导入素材"></a><strong>导入素材</strong></h2><ol><li>项目面板出双击</li><li>直接拖动</li></ol><h2 id="新建合成"><a href="#新建合成" class="headerlink" title="新建合成"></a><strong>新建合成</strong></h2><p>自定义或者选<code>HDTV 1080 25</code>,分辨率完整,修改合适持续时间.</p><h2 id="创建跟踪器"><a href="#创建跟踪器" class="headerlink" title="创建跟踪器"></a><strong>创建跟踪器</strong></h2><p>:选中素材–指针放到素材开始位置–右侧找到跟踪器面板–跟踪摄像机–智能分析,完成后及时保存–按shift选中三个或多个牢靠的点组成一个平面– 右击创建实底和摄像机–素材区就多出一个跟踪实底的图层</p><p>​替换跟踪实底素材:导入文字特效素材–选中跟踪实底图层–按着<code>alt</code>键点选特效素材拉到实底图层.解决黑底:模式改为屏幕</p><p>​往右一帧:<code>page down</code>,往左一帧:<code>page up</code>;按住shift则10帧</p><p><strong>裁剪(蒙版)</strong>:创建跟踪电脑屏幕的实底时,上下和左右无法同时靠边,需要裁剪:选中粒子流素材–选择菜单栏下<code>矩形工具</code>–裁剪即可.</p><p>调整参数时幅度比较大,按住<code>ctrl</code>再调整就变小.</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键:"></a><strong>快捷键:</strong></h2><ul><li>缩放快捷键<code>S</code>,</li><li>不透明度快捷键<code>T</code>, </li><li>位置快捷键<code>P</code>,  <code>shift P</code>把位置属性调出来</li><li><code>ctrll shift C</code>:新建一个预合成</li></ul><p>导入模板素材–双击新跟踪实底进入预合成–把模板拖入预合成上面–预合成小眼睛去掉就只显示模板内容了.</p><ul><li><p><strong>裁剪视频</strong>:指针放到时间轴后</p><ul><li><p>按<code>alt [</code> 或 <code>option [</code>裁剪左半段,</p></li><li><p>同样<code>alt ]</code>或 <code>option ]</code>裁剪右半段.</p></li><li><p>或者<code>ctrl shift D</code>  或 <code>command shift D</code>在指针位置截断视频</p></li></ul></li><li><p><strong>调整画面大小</strong>  :  鼠标放到视频窗口:<code>alt + 滚轮</code> </p></li><li><p><strong>导出</strong></p></li></ul><p>​快捷键<code>ctrl M</code>:输出模块选无损,格式选<code>quick time</code>,格式选项进去视频编解码器选动画,–点击渲染导出 </p><p>​推荐使用<code>media encoder</code>导出</p><h1 id="2-动态电子相册案例-动态追踪"><a href="#2-动态电子相册案例-动态追踪" class="headerlink" title="2.动态电子相册案例-动态追踪"></a>2.动态电子相册案例-动态追踪</h1><h2 id="预合成"><a href="#预合成" class="headerlink" title="预合成"></a><strong>预合成</strong></h2><p>裁剪视频片段(<code>ctrl shift D</code>  或 <code>command shift D</code>)–&gt;添加预合成(<code>ctrl shift c</code>)–&gt;第二个选项,同时勾选.</p><ul><li><strong>选项一</strong>:把效果添加到合成外面.</li><li><strong>选项二</strong>:把效果添加到合成里面的片段上</li></ul><h2 id="四点追踪"><a href="#四点追踪" class="headerlink" title="四点追踪:"></a><strong>四点追踪</strong>:</h2><p>选中素材–&gt;指针放到开始位置–&gt;跟踪器–&gt;跟踪运动–&gt;跟踪类型改为<code>透视边角定位</code>–&gt;调整四点(按空格变为抓手工具)–&gt;点击向右分析(追踪不准:手动配帧.) –&gt;把要替换的图片拖到素材上面–&gt;选中追踪素材–&gt;跟踪器–&gt;运动源选追踪素材–&gt;编辑目标–&gt;选择图片–&gt;应用</p><p>​<strong>Q&amp;A:如果追踪素材是横版,图片是竖版,图片大小和追踪素材不一致</strong>:项目面板新建合成–&gt;横版参数–&gt;横版图片拖入–&gt;调整大小–&gt;把该合成拖入追踪素材–&gt;选中追踪素材–&gt;运动源–&gt;编辑目标选新合成–&gt;应用</p><p><strong>添加边框阴影</strong>:把边框阴影文件导入–&gt;拖到合成中图片上面–&gt;模式选相乘–&gt;拖动调整,确保上下左右和边框贴合</p><h2 id="模板推荐"><a href="#模板推荐" class="headerlink" title="模板推荐:"></a><strong>模板推荐:</strong></h2><ul><li>生日聚会主题模板:</li></ul><p>​<a href="https://www.cgown.com/ae/ae-project/32614.html">https://www.cgown.com/ae/ae-project/32614.html</a><br>​<a href="https://www.cgown.com/ae/ae-project/50830.html">https://www.cgown.com/ae/ae-project/50830.html</a><br>​<a href="https://www.cgown.com/ae/ae-project/46964.html">https://www.cgown.com/ae/ae-project/46964.html</a><br>​<a href="https://www.cgown.com/ae/ae-project/48155.html">https://www.cgown.com/ae/ae-project/48155.html</a><br>​<a href="https://www.cgown.com/ae/ae-project/37001.html">https://www.cgown.com/ae/ae-project/37001.html</a></p><ul><li>毕业纪念主题</li></ul><p>​<a href="http://www.gfxcamp.com/hand-drawn-slideshow-26144584/">http://www.gfxcamp.com/hand-drawn-slideshow-26144584/</a><br>​<a href="http://www.gfxcamp.com/kids-slideshow-ii-23470025/">http://www.gfxcamp.com/kids-slideshow-ii-23470025/</a><br>​<a href="http://www.gfxcamp.com/viaggio-romantic-gallery/">http://www.gfxcamp.com/viaggio-romantic-gallery/</a><br>​<a href="http://www.gfxcamp.com/travel-adventure-20817229/">http://www.gfxcamp.com/travel-adventure-20817229/</a><br>​<a href="http://www.gfxcamp.com/a-little-story/">http://www.gfxcamp.com/a-little-story/</a><br>​<a href="http://www.gfxcamp.com/wonderful-moments-photo-gallery-and-logo-reveal/">http://www.gfxcamp.com/wonderful-moments-photo-gallery-and-logo-reveal/</a></p><ul><li>情人节表白主题</li></ul><p>​<a href="https://www.cgown.com/ae/ae-project/26733.html">https://www.cgown.com/ae/ae-project/26733.html</a><br>​<a href="http://www.lookae.com/blossom-wedding/">http://www.lookae.com/blossom-wedding/</a><br>​<a href="https://www.newcger.com/aemoban/33018.html">https://www.newcger.com/aemoban/33018.html</a><br>​<a href="https://www.newcger.com/aemoban/30278.html">https://www.newcger.com/aemoban/30278.html</a><br>​<a href="https://www.newcger.com/aemoban/31117.html">https://www.newcger.com/aemoban/31117.html</a><br>​<a href="http://www.gfxcamp.com/paper-love-photo-video-slideshow/">http://www.gfxcamp.com/paper-love-photo-video-slideshow/</a><br>​<a href="http://www.gfxcamp.com/animated-love-messages/">http://www.gfxcamp.com/animated-love-messages/</a></p><h2 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><strong>调整图片大小铺满全屏</strong></li></ul><ol><li>上下对齐优先:<code>ctrl shift alt G</code> </li><li>左右对齐优先:<code>ctrl shift alt H</code></li></ol><ul><li><strong>打标记</strong></li></ul><p>​选中素材–按小键盘上的星号键打标记</p><ul><li>导出一段素材快捷键:</li></ul><p>​ 开始位置B,结束位置N.</p><h2 id="复制合成"><a href="#复制合成" class="headerlink" title="复制合成:"></a>复制合成:</h2><p>选中合成–&gt;<code>ctrl d</code>复制一个–&gt;右击复制品:显示–&gt;在项目中显示–&gt;在项目中选中再次<code>ctrl d</code>复制一个然后重命名–&gt;选中下面复制品,按住<code>alt</code>把上面复制品拖到下面复制品上–&gt; 同样如果合成中还有合成也是同样操作.</p><h1 id="3-百发百中"><a href="#3-百发百中" class="headerlink" title="3.百发百中"></a>3.百发百中</h1><p>拍摄:机位固定 光线固定 背景固定   </p><p>调整合成:ctrl K</p><p>时间轴上两个条:一个显示预览,一个显示选定的工作区(工作区内片段循环播放;右键工作区修剪合成时长;快捷键B &amp; N)</p><p>蒙版:选中素材–选择钢笔工具画蒙版,蒙版羽化选10左右减轻画面过度不自然问题–把前面部分裁掉即可.</p><p>钢笔工具长按可以调出添加顶点等操作.</p><p>补帧法:先定位出几帧笔的轨迹,把图片笔的位置 缩放 旋转 不透明度关键帧都打开;</p><p>模糊效果:搜索定向模糊.</p><p>运动轨迹调整:选中位置属性–调整线条上的小点</p><p>把原画面的笔的轨迹遮罩掉:截一张干净的背景图(合成–帧另存为–文件–输出模块png,通道RGB–确定)–导入项目放到笔下面–画个蒙版遮罩,只画笔轨迹部分–羽化值60</p><p>RGB分离特效:裁剪要做特效的片段–打预合成–进入预合成–效果搜索通道混合器拖到素材–把绿色蓝色调整为0–复制一个素材,把红色蓝色调整为0以此类推–把第二层素材删除一帧,对齐,把第一层素材删除两帧对齐.模式都改成屏幕</p><p>镜头晃动特效:裁剪要做特效片段–调出位置属性–按住alt点下位置小闹钟图标调出wiggle表达式输入wiggle(10,30),10表示晃动频率,30表示晃动幅度–给上面两层都做晃动效果.</p><h1 id="4-ae模板套用详解"><a href="#4-ae模板套用详解" class="headerlink" title="4.ae模板套用详解"></a>4.ae模板套用详解</h1><blockquote><p>模板分为四类:logo演绎类,图片展示类,视频展示类,文字动画类</p></blockquote><h2 id="模板网站"><a href="#模板网站" class="headerlink" title="模板网站"></a>模板网站</h2><h3 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h3><ul><li><h3 id="www-newcger-com"><a href="#www-newcger-com" class="headerlink" title="www.newcger.com"></a><a href="http://www.newcger.com/">www.newcger.com</a></h3></li><li><p><a href="http://www.lookae.com/">www.lookae.com</a>  模板和插件</p></li><li><p><a href="http://www.cgown.com/">www.cgown.com</a></p></li><li><p><a href="http://www.gfxcamp.com/">www.gfxcamp.com</a></p></li></ul><h3 id="收费"><a href="#收费" class="headerlink" title="收费"></a><strong>收费</strong></h3><ul><li><a href="http://www.vjshi.com/">www.vjshi.com</a></li><li><a href="http://www.envato.com/">www.envato.com</a></li></ul><h2 id="优化ae速度"><a href="#优化ae速度" class="headerlink" title="优化ae速度"></a>优化ae速度</h2><ul><li>注意字体和插件,插件无则安装–编辑-首选项-媒体和磁盘缓存-启用磁盘缓存-清空缓存提高–内存,其他应用保留内存可以小点.</li><li>点击项目面板三道杠–项目设置–使用范围选mercury Gpu加速</li></ul><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="表达式错误"><a href="#表达式错误" class="headerlink" title="表达式错误:"></a>表达式错误:</h3><ol><li>窗口–&gt;ae表达式助手–&gt;修复(该插件需安装)</li><li>修改为英文版：搜索<code>application.xml</code>把<code>zh_CN</code>改成<code>en_US</code> </li><li>修改表达式</li></ol><h3 id="解决脱机素材"><a href="#解决脱机素材" class="headerlink" title="解决脱机素材"></a>解决脱机素材</h3><p>右击脱机素材–替换素材–文件–找到文件替换</p><h2 id="快捷键-2"><a href="#快捷键-2" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>按<code>U</code>打开关键帧属性，</li><li>按<code>UU</code>所有被更改的关键帧参数显示出来</li></ul><h1 id="5-中国风水墨片头"><a href="#5-中国风水墨片头" class="headerlink" title="5.中国风水墨片头"></a>5.中国风水墨片头</h1><p>导入psd格式素材（多层素材）–导入种类选第三个（保持图层大小），勾选第一个–确定–项目面板出现一个合成和里面的素材</p><p>搜图网 </p><p>第一镜：把导入的第一镜素材复制到新建的第一镜合成中–时间轴面板右击–新建–纯色–颜色纯白色–拖到最底层–把纯色之外所有素材打开3d开关（正方体图标）–右击–新建–摄像机–类型选双节点摄像机，预设35mm–2个视图，左侧用顶部视图–选中某个素材–左侧视图出现蓝色图标，鼠标移上去多一个Z的图标可上下拖动，调整出层次感</p><p>摄像机移动：时间轴面板右击–新建一个空对象 –点击摄像机–父级连接指向空对象–打开空对象3d开关–为空对象添加位置关键帧，Y轴旋转关键帧开始5度，后恢复0度。</p><p>给摄像机和小船添加缓动关键帧:选中空对象&#x2F;小船–打开图表编辑器–调整曲线先快后慢</p><p>小船动画：给小船加位置关键帧。</p><p>关键帧类型:    </p><p>​匀速关键帧</p><p>​缓入关键帧:先快后慢.选中全部关键帧,右击–关键帧辅助–缓入 shift F9</p><p>​缓出关键帧:先慢后快, 选中全部关键帧,右击–关键帧辅助–缓出 ctrl shift F9</p><p>​定格关键帧:最后一帧完成所有动画,选中全部关键帧,右击–切换定格关键帧  </p><p>​缓动关键帧:F9 </p><p>选中一个属性:J跳转到前一关键帧,K跳转到下一关键帧,选中全部关键帧,按着alt键实现左右等比例缩放关键帧. </p><p>图表编辑器:时间轴面板右击–编辑速度图表. </p><p> 摄像机：</p><p>​生效的前提是图层打开3d开关。</p><p>​选中预览面板，ctrl R调出标尺，十字点就是摄像机焦点。双节点摄像机的目标点（焦点）保持固定。</p><p>​两种摄像机转换：选中摄像机–ctrl alt O –关–确定–双节点就变成单节点</p><p>​选中摄像机–ctrl alt O –定向到目标点–确定–单节点就变成双节点</p><p>新建第二镜合成:宽5500,高1080 </p><p>新建第三镜合成:宽1920,高1080 </p><h1 id="8-爱情公寓片头拆解"><a href="#8-爱情公寓片头拆解" class="headerlink" title="8.爱情公寓片头拆解"></a>8.爱情公寓片头拆解</h1><p> 质量高的模板:up痕迹痕迹.</p><p>板块1:抠图</p><p>在线网站抠图:稿定抠图,<a href="http://www.remove.bg/">www.remove.bg</a>,</p><p>ps抠图:导入图片–解锁–快速选择工具–alt键取消选区–ctrl shift I–delete–ctrl D</p><p>​导入图片–解锁–钢笔工具–alt修改拉杆,ctrl修改落点 –ctrl enter–选择并遮住–调整边缘画笔工具–显示边缘….</p><p>板块2:套模板</p><p>替换图片,修改文字</p><p>板块3:做模板效果</p><p>整体镜头效果通过控制图层实现,其他图层父级连接都指向控制图层.</p><p>运动模糊:斜圆柱的图标预览上面渲染器选经典3D :</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031654028.png" alt="image-20210824232051750"></p><p>投影效果:复制人物图层–搜索填充效果拖到复制图层–修改颜色 </p><p>百叶窗效果:效果搜索百叶窗拖到素材–效果控件过渡完成添加关键帧–修改方向45宽度45. </p><p>修改天空颜色:选中蓝天背景–效果搜索色相&#x2F;饱和度拖到素材–调整主色相</p><h1 id="9-AE绿幕抠图"><a href="#9-AE绿幕抠图" class="headerlink" title="9.AE绿幕抠图"></a>9.AE绿幕抠图</h1><h3 id="情况1-绿幕比较好"><a href="#情况1-绿幕比较好" class="headerlink" title="情况1:绿幕比较好"></a>情况1:绿幕比较好</h3><p>1.搜索效果<code>颜色范围</code>拖到素材–&gt;点击最上面吸管吸取人物旁边绿色–&gt;反复点击第二个加号吸管吸取其他地方绿色–&gt;边上可以通过蒙版排除绿色.</p><p>2.效果搜索<code>keyCleaner</code>拖到素材,人物边缘变柔和一些–&gt;其他边缘半径5左右,减少震颤勾选,alpha对比度30-50,</p><p>3.效果搜索抠像下的<code>advanced spill suppressor</code>(高级溢出抑制器)拖到素材,人物周围绿色被消除–背景是绿幕则方法选标准. </p><p>4.通过上面三步还有点泛绿的话:新建调整图层–效果搜索曲线拖到调整图层–效果控件通道选绿色–曲线往右下稍微拉点有效减轻泛绿问题.</p><h3 id="情况2-复杂情况抠图"><a href="#情况2-复杂情况抠图" class="headerlink" title="情况2:复杂情况抠图"></a>情况2:复杂情况抠图</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031654843.png" alt="image-20210824222100345"></p><p>搜索效果keylight拖到素材–预览选final result–screen colour吸管工具吸下绿色–预览选screen matte(黑遮白显)–修改clip black,数字越大黑色 越黑(10-20)–修改clip white:数字越小,白色越干净(70多)–预览切回final result查看效果.–可以添加白色纯色图层,画蒙版使人物背景只在白色背景中–人物周围还是有些模糊,调整keylight中screen pro-blur为3-5,用来解决噪点问题.–screen shrink&#x2F;G一般调整为负值-1左右,使人物有线收缩效果–修改screen softness为1左右,羽化边缘,使边缘平滑–效果搜索key cleaner拖到素材–其他边缘半径1左右–勾选减小震颤–效果搜索advanced spill suppressor(高级溢出抑制器)拖到素材</p><h3 id="情况3-裸眼3d-roto笔刷"><a href="#情况3-裸眼3d-roto笔刷" class="headerlink" title="情况3:裸眼3d,roto笔刷"></a>情况3:裸眼3d,roto笔刷</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031654268.png" alt="image-20210824224834585"></p><p> 导入原始素材–活动摄像机旁边有个切换透明网格,不显示,保证背景全黑–最上方矩形工具画两个黑条–裁剪需要抠图的素材,alt复制一层放在最上层图层用来抠图–最上面小人毛笔图标长按选择roto笔刷工具– 双击预览面板–按着ctrl鼠标左右拖动出现合适大小图标–抹一笔就选中–如果要取消选区按着alt,抹一笔– 扣好后按下空格自动续扣,只能自动分析20帧左右–逐帧微调</p><h3 id="绿幕素材的抠图"><a href="#绿幕素材的抠图" class="headerlink" title="绿幕素材的抠图"></a>绿幕素材的抠图</h3><p>  绿幕素材直接拖进去有绿底–效果搜索线性颜色键拖到绿幕素材–吸管工具吸下绿色即可–如果边缘有泛绿情况可以把匹配容差拉大一点.匹配柔和度也稍微拉大</p><p>也可以用keylight效果.</p><h1 id="18-多机位攻略"><a href="#18-多机位攻略" class="headerlink" title="18.多机位攻略"></a>18.多机位攻略</h1><p>​简单多机位</p><p>​复杂多机位</p><h1 id="20-素材网站"><a href="#20-素材网站" class="headerlink" title="20.素材网站"></a>20.素材网站</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片:"></a>图片:</h2><h3 id="免费-1"><a href="#免费-1" class="headerlink" title="免费:"></a>免费:</h3><ol><li>pixabay.com</li><li>pexels.com  图片和视频</li><li>unsplash.com</li><li><a href="sc.chinaz.com">站长素材</a>图片 模板 字体 等</li></ol><h3 id="收费-1"><a href="#收费-1" class="headerlink" title="收费:"></a>收费:</h3><ol><li><a href="699pic.com">摄图网</a></li><li><a href="588ku.com">千库网</a>,优点是可下一些免抠图图片</li></ol><p>​</p><h2 id="视频"><a href="#视频" class="headerlink" title="视频:"></a>视频:</h2><ol><li>videvo.net</li><li>videezy.com</li><li>mixkit.co</li></ol><h2 id="ae模板"><a href="#ae模板" class="headerlink" title="ae模板:"></a>ae模板:</h2><h3 id="免费-2"><a href="#免费-2" class="headerlink" title="免费:"></a>免费:</h3><ol><li>newcger.com</li><li><a href="lookae.com">大众脸网</a></li><li><a href="gfxcamp.com">龋齿一号</a></li><li>adobeae.com</li></ol><h3 id="收费-2"><a href="#收费-2" class="headerlink" title="收费:"></a>收费:</h3><ol><li>envato.com</li><li>vjshi.com</li></ol><h2 id="音效"><a href="#音效" class="headerlink" title="音效:"></a>音效:</h2><ol><li><a href="aigei.com">爱给网</a></li><li><a href="sc.chinaz.com">站长素材</a></li><li><a href="tosound.com">淘声网</a></li></ol><p>​</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体:"></a>字体:</h2><ol><li><a href="hellofont.com">字由网</a></li><li>100font.com</li><li><a href="qiuziti.com">求字体网</a>,可识别字体</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><ol><li><a href="anduril.cn">配色网站</a> </li><li><a href="iconfont.cn">阿里巴巴矢量图标库</a></li><li><a href="bilibili.huangyuehe.com">bilibili封面提取</a></li><li>安全软件,火绒安全,智能屏蔽电脑上基本全部广告弹窗</li><li>windows自带截图功能快捷键:<code>shift windows s</code></li><li>播放器:potplayer.无广告,解码器多,c快进,x降速,z还原,f往右一帧,d往左一帧,p打标签,h快速查找标签,置顶功能,</li><li><code>screenToGif</code> 录制gif,体积小且高清,可录制gif,可编辑gif</li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ae </tag>
            
            <tag> 剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR</title>
      <link href="/2021/02/25/PR/"/>
      <url>/2021/02/25/PR/</url>
      
        <content type="html"><![CDATA[<h1 id="1-电子相册案例"><a href="#1-电子相册案例" class="headerlink" title="1.电子相册案例"></a>1.电子相册案例</h1><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键:"></a>快捷键:</h3><p>​选中素材按<code>\</code>,自动调整面板到合适大小.</p><p>​<code>c</code> 菜刀工具</p><p>​<code>v</code> 选择工具</p><p>​<code>ctrl alt v</code> 粘贴属性</p><p>​鼠标指针放到音频左侧,按<code>alt</code>键滑动鼠标滚轮,可以放大音频波峰.</p><p>导入光晕后不显示其他图层问题:选中素材–效果控件–不透明度–混合模式改为滤色</p><h3 id="用到效果"><a href="#用到效果" class="headerlink" title="用到效果:"></a>用到效果:</h3><p>​高斯模糊,</p><p>​径向阴影:相框效果:白色,不透明度100%,光源:1000 530).光源参数调整位置.如果没效果把”调整图层大小”勾选上.</p><p>​投影:相框阴影效果(颜色黑色,不透明80%,距离30,柔和度15)</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出:"></a>导出:</h3><p>​格式:<code>H.264  (mp4)</code></p><p>​预设:高比特率</p><h1 id="2-电影混剪案例"><a href="#2-电影混剪案例" class="headerlink" title="2.电影混剪案例"></a>2.电影混剪案例</h1><p>首先确定剪辑思路.</p><p>创建序列:拖着视频到新建序列按钮.</p><p>小丸工具箱设置:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031649658.png" alt="image-20210730220239921"></p><ul><li>视频显示不全问题:</li></ul><p>​序列是<code>1080p</code>,拖进去视频是<code>720p</code>,则会出现视频显示不全的问题.</p><p>​解决:选中视频,右击,缩放为帧大小.</p><ul><li>电影遮罩:</li></ul><p>​新建–颜色遮罩–默认值–纯黑色–添加到时间轴并拉长–搜索效果裁剪添加到遮罩,修改顶部88%(或者直接拖动)</p><ul><li>字幕:新版标题</li></ul><p>​选中时间轴–&gt;<code>ctrl t</code>–&gt;新建了字幕图层. </p><p>​改字体:效果–文本–英文用<code>light</code>,中文用<code>regular</code>,更有层次感</p><p>​<strong>问题:显示不全</strong></p><p>​解决:效果调整矢量运动(该属性只有字幕图层才有).</p><p><strong>打标记</strong>:选中标记,按<code>alt</code>,向右拖动可以把标记拉长为一段标记.</p><p><strong>挑选视频片段技巧</strong>:砍好视频片段后,右击创建子剪辑,该片段就会放入素材区.</p><h2 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键:"></a><strong>快捷键:</strong></h2><ul><li><p><code>L</code> 播放视频-加速,</p></li><li><p><code>K</code>播放视频-暂停,</p></li><li><p><code>J</code>播放视频-倒退.</p></li><li><p>视频启用&#x2F;不启用:<code>shift E</code></p></li><li><p>把音频上移一个轨道:选中音频:按上箭头.</p></li></ul><p><strong>视频结尾渐隐效果</strong>:效果搜索<strong>黑场过度</strong>,拖到视频结尾,设置16帧长.</p><p><strong>音频淡出效果</strong>:效果搜索<strong>恒定功率</strong>,拖到音频结尾. </p><p>音效素材:<a href="http://www.aigei.com/">www.aigei.com</a></p><p>戴耳机画面: 把全部轨道素材右移:然后选中中间空白,右键<strong>波纹删除.</strong></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031649743.png" alt="image-20210730224638766"></p><p><strong>导出</strong>:中等比特率,大小和视频质量比较适中.</p><h1 id="3-定格动画案例"><a href="#3-定格动画案例" class="headerlink" title="3.定格动画案例"></a>3.定格动画案例</h1><p> <strong>批量修改持续时间</strong>:选中批量素材右键–&gt;更改持续时间(快捷键<code>ctrl R</code>)</p><p><strong>删除素材间隙</strong>:</p><ol><li>点击空白右键波纹删除.</li><li>序列–封闭间隙.</li><li>更改持续时间时勾选”波纹剪辑,移动尾部剪辑”</li></ol><p><strong>添加花字</strong>:推荐旧版标题.</p><p>​问题:色块把字体遮住了.  解决:选中字体,<code>ctrl x</code>剪切,<code>ctrl v</code>粘贴,就放到最上面一层了.</p><p>​添加阴影. </p><p><strong>关键帧动画</strong>: 左右箭头中间的按钮点下表示添加一个关键帧点. </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031649318.png" alt="image-20210730231144955"></p><p><strong>蒙版</strong>:</p><p>​选中素材–效果控件–不透明度–点下钢笔工具 </p><p>​alt键:画蒙版路径时方便调整线条 </p><h1 id="4-手机也能拍和剪"><a href="#4-手机也能拍和剪" class="headerlink" title="4.手机也能拍和剪"></a>4.手机也能拍和剪</h1><p> 曝光三要素:ppt讲解 </p><p>​快门:</p><p>​速度越快,进光量越小,照片越暗;速度越快,画面清晰无残影.(1&#x2F;50秒和人眼差不多)</p><p>​</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031649816.png" alt="image-20210801162918125"></p><p>​光圈:</p><p>​决定相机镜头打开的大小,数字越大、光圈越小,进光量越小</p><p>​影响景深,使背景虚化:光圈越大,景深越小(背景虚化越严重),适合拍以人为主题画面</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031650536.png" alt="image-20210801163800245"></p><p>ISO</p><p>​相机感光元件本身的敏感度</p><p>​数字越大、感光元件对光线越敏感,画面越亮.</p><p>​数字越大,噪点越多.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031650880.png" alt="image-20210801163939613"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031650828.png" alt="image-20210801164021158"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031650264.png" alt="image-20210801164045570"></p><p>苹果手机拍摄:相机一定要设置为兼容模式.</p><p>推荐软件:filmic,调节快门ISo自平衡等参数;</p><p>​定格动画工作室,可以把拍摄的上一张照片的残影显示在屏幕,收费.</p><p>设备:曼富图手持三脚架稳定器,八爪鱼,手机稳定器,俯拍支架.</p><p>手机剪辑软件:</p><p>​巧影:操作逻辑和pr很像.</p><h1 id="5-生活化vlog"><a href="#5-生活化vlog" class="headerlink" title="5.生活化vlog"></a>5.生活化vlog</h1><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031650129.png" alt="image-20210801173535808"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031651155.png" alt="image-20210801173602238"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031651939.png" alt="image-20210801173703724"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652326.png" alt="image-20210801173742186"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652717.png" alt="image-20210801173812520"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652697.png" alt="image-20210801173852331"></p><p>大神:peter mckinnon,b站搜索皮老师,或者关注8k8k,搬运翻译了很多皮老师作品.</p><p>​燃烧的陀螺仪</p><p>手持自拍叙事:a-roll;</p><p>声音旁边叙事:b-roll;</p><p>环境音.</p><p>找音乐:网易云音乐搜索vlog.</p><p>调整音量:关键帧.有人说话时背景音乐小点.</p><p>调色:选中素材–窗口–Lumetri颜色–调整参数.</p><p>​通过调高曝光和阴影使画面变亮,适当拉高下对比度是画面更好看,稍微降低点黑色</p><h1 id="6-旅拍vlog"><a href="#6-旅拍vlog" class="headerlink" title="6.旅拍vlog"></a>6.旅拍vlog</h1><p>推荐博主:小墨与阿猴.影视飓风,sam kolder.</p><p>旅游攻略网站:马蜂窝</p><p>平时注意搜集名人名言</p><p>收音设备:铁三角AT9912,wireless go</p><p>​“我的组合是ulanzi V2的兔笼,加转接线 加铁三角AT9912”</p><p>转场:b站搜索无缝转场.</p><p>音乐:b站搜索”别只用网易云了!影视飓风音乐资源大公开”.课程整理无版权音乐素材包</p><p>百度地图:录屏–搜索–快速点叉.</p><h1 id="7-上镜要点"><a href="#7-上镜要点" class="headerlink" title="7.上镜要点"></a>7.上镜要点</h1><p>上镜方法:</p><p>​emoji:视频.</p><p>​带头套</p><p>​老番茄处境法</p><p>背景:</p><p>​基础简洁版,细节精致版.</p><p>​拍摄时选大光圈,定焦镜头 ,可以虚化背景. </p><p>打光:</p><p>​单灯打光法</p><p>​三灯打光法:</p><p>​主光:拍摄中的主要光源</p><p>​补光:降低主光产生的阴影</p><p>​顶光:分离人物和背景</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652011.png" alt="image-20210802213756039"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652596.png" alt="image-20210802213926957"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652336.png" alt="image-20210802214019554"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031652267.png" alt="image-20210802214141269"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031653120.png" alt="image-20210802214209691"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031653678.png" alt="image-20210802214230517"></p><h1 id="8-视频剪辑全流程"><a href="#8-视频剪辑全流程" class="headerlink" title="8.视频剪辑全流程"></a>8.视频剪辑全流程</h1><p>好用的录屏软件:oCam </p><p>更高清的录屏软件:OBS,视频比特率2500比较合适.</p><p>降噪:处理音频神器–Au. </p><p>​选中视频–右击–在adobe audition中编辑剪辑–选中无人说话的2秒左右–效果–降噪&#x2F;恢复–捕捉噪声样本 –全选音频–效果–降噪&#x2F;恢复–降噪(处理) –降噪参数调整为85,降噪幅度改为40db–应用.</p><p>​快捷键三秒完成:选中无人说话素材–shift P–Ctrl A–ctrl shift P–回车</p><p>匹配响度:让所有声音响度保持一致.</p><p>​au窗口–匹配响度– 匹配响度面板–把音频拉进来–改参数:匹配到选ITU-R BS.1770-3响度,目标响度-15,容差2,最高实际峰值电平-2–点击运行–ctrl s–文件–全部关闭–回到pr自动处理完成. </p><p>QW快速剪辑法:时间轴指针放一位置–选中素材–按q,指针前面素材就会波纹删除掉.W用来删除指针后面素材. </p><p>如果序列是1080p,但是素材是720p,无法铺满全屏:右击素材–缩放为帧大小.</p><p>花字制作:</p><p>​使用旧版标题制作简单花字.还有可以把花字做成样式,方便后续多次使用:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031653154.png" alt="image-20210802220636071"></p><p>复杂花字需要借助ps做好后放入pr使用:ps导出png图片.</p><p>花字动画:主要是关键帧.</p><p>导入预设:随便右击一个效果–导入预设</p><p>两种花字动画制作方法:1.关键帧;2.视频过渡效果</p><p>音效:素材大礼包.爱给网,站长素材网</p><p>视频放大缩小动画:选中视频–打开位置和缩放关键帧–shift + 右箭头 按两下右移10帧– 改缩放为200,改下位置.</p><h1 id="9-玩转pr特效"><a href="#9-玩转pr特效" class="headerlink" title="9.玩转pr特效"></a>9.玩转pr特效</h1><p><strong>预渲染</strong>:运算量比较大的片段会变红色,选中入点,按<code>i</code>,选中出点,按<code>o</code>,按<code>enter</code>进行预渲染.</p><h3 id="花字特效"><a href="#花字特效" class="headerlink" title="花字特效"></a>花字特效</h3><p>转场插件.素材大礼包安装.安装完成后在效果面板视频过渡下面多出很多转场特效. </p><p>​双击转场特效,更改持续时间. 也可选中转场特效后在效果控件面板更改其他属性.</p><p>​批量更改转场持续时间:编辑–首选项–时间轴–视频过渡默认持续时间12帧比较合适.</p><p>​效果面板右下角新建素材箱,把常用的放进去.</p><h3 id="图片花字法"><a href="#图片花字法" class="headerlink" title="图片花字法"></a>图片花字法</h3><p>选用透明底的png图片:千库网,stickpng</p><p>gif图片:站长素材网 ,soogif.com,阿里矢量.</p><h3 id="表情贴图法"><a href="#表情贴图法" class="headerlink" title="表情贴图法"></a>表情贴图法</h3><p>​花瓣网:搜索贴纸.</p><p>​追踪动画:选中贴纸–效果控件–运动–调整好位置–打开位置关键帧–每隔五帧调整.</p><h3 id="特效素材法"><a href="#特效素材法" class="headerlink" title="特效素材法"></a>特效素材法</h3><p>​综艺结果素材包</p><h3 id="TBC法"><a href="#TBC法" class="headerlink" title="TBC法"></a>TBC法</h3><p>​ to be continue:作死用.</p><pre><code class="hljs"> 时间轴指针放到指定片段位置,右击,添加帧定格, 后面片段就全静止住了.</code></pre><p>​黑白效果:效果–新建–新建调整图层–放到素材视频上方–效果搜索黑白添加到调整图层–素材和调整图层都变黑白,比直接把黑白效果添加到视频中更灵活. </p><p>​慢放:方法一:右击素材–调整持续时间(速度或持续时间都可更改以实现慢放 )</p><p>​方法二:选中素材–按快捷键R–鼠标会变样–把视频往前拉就是快进,反之慢放 </p><h3 id="雪茄墨镜法"><a href="#雪茄墨镜法" class="headerlink" title="雪茄墨镜法"></a>雪茄墨镜法</h3><p>​关键帧:位置,旋转.</p><h3 id="头部放大法"><a href="#头部放大法" class="headerlink" title="头部放大法"></a>头部放大法</h3><p>​把要放大的片段砍出来–效果搜索放大,添加到砍出的片段 –选中素材–效果控件–放大– 调中央和大小和羽化值属性,还可加关键帧.</p><h1 id="10-鬼畜节目效果"><a href="#10-鬼畜节目效果" class="headerlink" title="10.鬼畜节目效果"></a>10.鬼畜节目效果</h1><h3 id="Up主"><a href="#Up主" class="headerlink" title="Up主"></a>Up主</h3><p>​小可儿:作品念诗之王,调音教程,从0开始学鬼畜.</p><p>​还有一天就放假了:鬼畜小课堂</p><p>​ </p><h3 id="搜索素材"><a href="#搜索素材" class="headerlink" title="搜索素材:"></a>搜索素材:</h3><p>​b站搜索鬼畜明星 + 原版,例如:元首 原版</p><p>​音乐:网易云搜索鬼畜.</p><p>找伴奏的网站:5sing.kugou.com</p><h3 id="处理音频神器-iZotope-RX-7-Audio-Editor"><a href="#处理音频神器-iZotope-RX-7-Audio-Editor" class="headerlink" title="处理音频神器:iZotope.RX.7.Audio.Editor."></a>处理音频神器:iZotope.RX.7.Audio.Editor.</h3><p>​separation algorithm选joint channel选项.</p><p>​把音乐拖进去–右侧找到music rebalance调出面板– 把voice拉最低,点preview预览,人声部分就被擦除了,Bypass是还原按钮.</p><p>​把音乐拖进去–右侧找到music rebalance调出面板– 把voice之外的拉最低,点preview预览,音乐 部分就被擦除了,Bypass是还原按钮.</p><p>​渲染–保存.</p><h3 id="使用pr模板"><a href="#使用pr模板" class="headerlink" title="使用pr模板:"></a>使用pr模板:</h3><p>​模板导入素材库 </p><p>​鬼畜技法:倒放–&gt;右击素材,持续时间,倒放</p><p>​小人翻转:关键帧旋转.</p><p>ps去掉无关人物:图片导入ps–点击左侧矩形框选工具– 框选住要删的小人–shift f5–内容识别弹框点确定–导出图片.</p><p>导入震动预设:效果–presets–震动–模糊震动</p><p>水平反转效果:画面左右反转.</p><p>复制效果:把画面切成几份.</p><p>RGB图层分离效果:效果颜色平衡(RGB)拖到视频上–效果控件红色降为0,  绿色降为0,不透明度改为滤色–按住alt键复制一层,把绿色调到100,红色蓝色降为0–再alt复制一层把红色改为100–把某一层往后移2帧,另外一层后移4帧,然后对齐,即实现轻微分离效果.</p><p>镜头扭曲效果:</p><h1 id="11-调色"><a href="#11-调色" class="headerlink" title="11.调色"></a>11.调色</h1><p>色彩原理</p><p>​三原色:红绿蓝(RGB)</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031653961.png" alt="image-20210805222334615"></p><p>任意两种三原色相加,等于另外一种三原色的补色</p><p>rgb是机器语言,转换成人类语言就是色相,饱和度&#x2F;纯度(S ),明度(色彩的明亮程度 B)</p><p>调色:</p><p>​打开两个面板:lumetri颜色(调整参数)和lumetri范围(右击勾选分量即可 )</p><p>​新建一个调整图层,放到视频轨道上面:在调整图层上面进行调色.</p><p>​一级调色-基本校正:把视频的一些偏色和曝光的问题调整一下:调整白平衡,调整色调</p><p>​色相饱和度曲线:调整局部颜色.</p><p>​HSL辅助:针对某一个颜色单独调色.很厉害.</p><p>​如何使用LUT:LUT就是别人做好的调色文件,可以直接加载到视频上使用. lumetri颜色面板中加载:创意面板中使用.</p><p>​软件查看效果–找到对应的lut–pr中lumetri颜色面板中导入使用.</p><h1 id="12-绿幕抠图"><a href="#12-绿幕抠图" class="headerlink" title="12.绿幕抠图"></a>12.绿幕抠图</h1><p>效果搜索<code>键控</code>拖到绿幕素材上–效果控件–超级键–吸管工具–点下绿幕的绿色部分   这种方法扣不干净.</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>效果搜索**<code>颜色键</code>**拖到素材上</li><li>效果控件<code>颜色键</code></li><li><code>吸管工具</code>点一下人物附近的颜色 </li><li>颜色键<code>颜色容差</code>(最好不超过50,推荐30左右)</li><li>若没扣干净,再次拖一个<code>颜色键</code>(同样设置颜色容差30左右)扣剩下的绿色.</li><li>如果还扣不干净再拖一个<code>颜色键</code>.</li><li>如果最后边上剩一点扣不干净,可以搜索<code>裁剪</code>效果把视频裁剪一部分,把没扣掉的绿色裁剪掉</li></ul><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>人物边上的绿色没有完全扣干净,搜索**<code>超级键</code>**拖到素材,<code>吸管工具</code>点下人物边上的绿色(如果大部分都扣掉了看不见绿色可以暂时点下颜色键左边的<code>fx</code>,超级键点完再还原)</p><p>效果面板:修改<code>遮罩生成</code>:</p><ul><li>**<code>透明度</code>**35左右.透明度越高,人物更像幽灵一样</li><li>**<code>基值</code>**30. 基值越高,人物周围效果不会那么硬,但太高会显假,建议30-50.</li><li>**<code>抑制</code>**可以把周围毛糙的边缘扣干净(10-30),</li><li>**<code>柔化</code>**看情况调整.一般10-20</li></ul><p><strong>人物调色</strong>:lumetri颜色–RGB曲线</p><p><strong>人物磨皮</strong>:安装插件beauty box,效果搜索beauty box拖到调整图层 </p><p><strong>绿幕素材使用</strong>:绿幕素材拖到时间轴–右击缩放为帧大小–搜索超级键拖上去–吸管工具吸一下绿色.</p><p>下载绿幕素材:b站搜索GB绿幕素材</p><h1 id="13-延时摄影"><a href="#13-延时摄影" class="headerlink" title="13.延时摄影"></a>13.延时摄影</h1><p>固定延时:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031653955.png" alt="image-20210808102442281"></p><p>去闪烁插件: 安装好插件后,效果搜索high speed拖到视频上:适用于水面等.</p><p>移动延时:</p><p>​ 处理时解决抖动问题:右击视频–嵌套,变绿色–效果搜索变形稳定器拖到绿色的视频上,开始智能分析 </p><p>​但是如果原片过于抖动也旧不了,会出现果冻效应</p><h1 id="14-剪辑魔术"><a href="#14-剪辑魔术" class="headerlink" title="14.剪辑魔术"></a>14.剪辑魔术</h1><p>​大神:油管 zach king博主</p><p>​跳接类:不要出现光线变化,机位固定 ,加手持抖动效果:导入手持抖动预设–选中素材右击嵌套–选择抖动效果拖到素材.</p><p>​遮罩类:关键帧.</p><h1 id="15-大师珍藏篇"><a href="#15-大师珍藏篇" class="headerlink" title="15.大师珍藏篇"></a>15.大师珍藏篇</h1><p>​    模板资源网站:</p><ul><li>NEWCG \</li><li>大众联网:ae模板 pr模板 音乐素材 插件 等</li></ul><p>​音效素材网站:爱给网 站长素材</p><p>​图片素材网站:免费可商用–pixabay.com,unsplash.com,pexels.com</p><p>​收费网站–摄图网699pic.com, 千库网588ku.com,千图网58pic.com</p><p>​pr快捷键:</p><p>​QWE快速剪辑:编辑–快捷键– 搜索添加编辑–添加快捷键E(砍视频)  </p><p>​波纹删除: 编辑–快捷键–搜索波纹删除–添加快捷键S</p><p>​添加出入点:<code>i</code>添加入点,<code>o</code>添加出点,选中按<code>enter</code>可以预渲染,也可用于导出指定片段:导出时源范围选”序列切入&#x2F;序列切出”</p><p>​<code>JKL</code>:播放速度.</p><p>​拖动素材位置:选中素材,按着<code>ctrl</code>可以往前拖动,也可拖到预览面板.  </p><p>​反撤销:<code>ctrl shift z</code> </p><p>队列导出工具:adobe media encoder,批量导出视频,导出时选择队列,添加到队列自动启动该软件.</p><p>文件管理神器:<code>windows:clover</code>  </p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1-电影开场-文字背景"><a href="#1-电影开场-文字背景" class="headerlink" title="1.电影开场 文字背景"></a>1.电影开场 文字背景</h2><ol><li><p>导入视频,添加效果裁剪,打开顶部和底部关键帧,进行裁剪.</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405232140744.png" alt="image-20240523214058559"></p></li><li><p>把视频按住Alt键向上复制一份,把复制的视频删掉裁剪效果,并添加文字调整大小,并保证文字在黑幕范围内</p></li></ol><p>   <img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202405232142154.png" alt="image-20240523214255102"></p><ol start="3"><li><p>添加效果轨道遮罩键到复制的视频上,效果控件中修改属性遮罩为视频3,合成方式改成亮度遮罩</p><p><img src="/Users/boguotong/Library/Application%20Support/typora-user-images/image-20240523214450352.png" alt="image-20240523214450352"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪辑 </tag>
            
            <tag> pr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Properties 类</title>
      <link href="/2021/02/25/Properties%E7%B1%BB/"/>
      <url>/2021/02/25/Properties%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Properties 继承于 Hashtable。表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</strong></p><p>Properties 类被许多 Java 类使用。例如，在获取环境变量时它就作为 System.getProperties() 方法的返回值。</p></blockquote><h1 id="1-定义方法"><a href="#1-定义方法" class="headerlink" title="1.定义方法"></a>1.定义方法</h1><table><thead><tr><th><strong>String getProperty(String key)</strong></th><th>用指定的键在此属性列表中搜索属性。</th></tr></thead><tbody><tr><td><strong>String getProperty(String key, String defaultProperty)</strong></td><td>用指定的键在属性列表中搜索属性。若不存在则返回defaultProperty</td></tr><tr><td><strong>void list(PrintStream streamOut)</strong></td><td>将属性列表输出到指定的输出流。</td></tr><tr><td><strong>void list(PrintWriter streamOut)</strong></td><td>将属性列表输出到指定的输出流。</td></tr><tr><td><strong>void load(InputStream streamIn) throws IOException</strong></td><td>从输入流中读取属性列表（键和元素对）。</td></tr><tr><td><strong>Enumeration propertyNames( )</strong></td><td>按简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。</td></tr><tr><td><strong>Object setProperty(String key, String value)</strong></td><td>添加属性键值对</td></tr><tr><td><strong>void store(OutputStream streamOut, String description)</strong></td><td>以适合使用 load(InputStream)方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流。</td></tr></tbody></table><h1 id="2-简单实例"><a href="#2-简单实例" class="headerlink" title="2.简单实例"></a>2.简单实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropDemo</span> &#123;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">capitals</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>      Set states;<br>      String str;<br>      <br>      capitals.put(<span class="hljs-string">&quot;Illinois&quot;</span>, <span class="hljs-string">&quot;Springfield&quot;</span>);<br>      capitals.put(<span class="hljs-string">&quot;Missouri&quot;</span>, <span class="hljs-string">&quot;Jefferson City&quot;</span>);<br>      capitals.put(<span class="hljs-string">&quot;Washington&quot;</span>, <span class="hljs-string">&quot;Olympia&quot;</span>);<br>      capitals.put(<span class="hljs-string">&quot;California&quot;</span>, <span class="hljs-string">&quot;Sacramento&quot;</span>);<br>      capitals.put(<span class="hljs-string">&quot;Indiana&quot;</span>, <span class="hljs-string">&quot;Indianapolis&quot;</span>);<br> <br>      <span class="hljs-comment">// Show all states and capitals in hashtable.</span><br>      states = capitals.keySet(); <span class="hljs-comment">// get set-view of keys</span><br>      <span class="hljs-type">Iterator</span> <span class="hljs-variable">itr</span> <span class="hljs-operator">=</span> states.iterator();<br>      <span class="hljs-keyword">while</span>(itr.hasNext()) &#123;<br>         str = (String) itr.next();<br>         System.out.println(<span class="hljs-string">&quot;The capital of &quot;</span> +<br>            str + <span class="hljs-string">&quot; is &quot;</span> + capitals.getProperty(str) + <span class="hljs-string">&quot;.&quot;</span>);<br>      &#125;<br>      System.out.println();<br> <br>      <span class="hljs-comment">// look for state not in list -- specify default</span><br>      str = capitals.getProperty(<span class="hljs-string">&quot;Florida&quot;</span>, <span class="hljs-string">&quot;Not Found&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;The capital of Florida is &quot;</span><br>          + str + <span class="hljs-string">&quot;.&quot;</span>);<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-写入"><a href="#3-写入" class="headerlink" title="3.写入"></a>3.写入</h1><blockquote><p>Properties类调用setProperty方法将键值对<strong>保存到内存</strong>中，此时可以通过getProperty方法读取，propertyNames方法进行遍历，但是并没有将键值对持久化到属性文件中，故<strong>需要调用store方法持久化键值对到属性文件中</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProperties</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeProperties</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;config.properties&quot;</span>);<br>properties.setProperty(<span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/&quot;</span>);<br>properties.setProperty(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>properties.setProperty(<span class="hljs-string">&quot;databases&quot;</span>, <span class="hljs-string">&quot;music_player&quot;</span>);<br>properties.store(output, <span class="hljs-string">&quot;Steven1997 modify&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString());<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span>(output!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>output.close();<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">TestProperties</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestProperties</span>();<br>t.writeProperties();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行后，工程下面会出现一个config.properties文件，属性文件内容如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031632273.png" alt="image-20210225221111804"></p><h1 id="4-读取"><a href="#4-读取" class="headerlink" title="4.读取"></a>4.读取</h1><blockquote><p>使用getProperty获取config.properties文件配置文件的各项属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> property;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadProperties</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadProperties</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;config.properties&quot;</span>);<br>properties.load(inputStream);<br>System.out.println(<span class="hljs-string">&quot;url:&quot;</span> + properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;username:&quot;</span> + properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;password:&quot;</span> + properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;database:&quot;</span> + properties.getProperty(<span class="hljs-string">&quot;database&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span>(inputStream !=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>inputStream.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">LoadProperties</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadProperties</span>();<br>l.loadProperties();<br>&#125;<br>&#125;<br><span class="hljs-comment">//运行后的结果</span><br>url:jdbc:mysql:<span class="hljs-comment">//localhost:3306/</span><br>username:root<br>password:root<br>database:music_player<br></code></pre></td></tr></table></figure><h1 id="5-遍历"><a href="#5-遍历" class="headerlink" title="5.遍历"></a>5.遍历</h1><blockquote><p>遍历属性文件中的键值对</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> property;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.Map.Entry;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAll</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;config.properties&quot;</span>;<br>input = getClass().getClassLoader().getResourceAsStream(file);<br><span class="hljs-keyword">if</span>(input == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;无法加载文件&quot;</span> + file);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>prop.load(input);<br><span class="hljs-comment">// 方法一</span><br>Set&lt;Object&gt; keys = prop.keySet();<br><span class="hljs-keyword">for</span>(Object key:keys) &#123;<br>System.out.println(<span class="hljs-string">&quot;key:&quot;</span> + key.toString() + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">&quot;value:&quot;</span> + prop.get(key));<br>&#125;<br><span class="hljs-comment">//方法二：</span><br>Set&lt;Entry&lt;Object, Object&gt;&gt; entrys =prop.entrySet();<span class="hljs-comment">//返回的属性键值对实体</span><br><span class="hljs-keyword">for</span>(Entry&lt;Object, Object&gt; entry:entrys)&#123;<br>System.out.println(<span class="hljs-string">&quot;key:&quot;</span>+entry.getKey()+<span class="hljs-string">&quot;,value:&quot;</span>+entry.getValue());<br>&#125;<br><span class="hljs-comment">//方法三：</span><br>Enumeration&lt;?&gt; e = prop.propertyNames();<br><span class="hljs-keyword">while</span> (e.hasMoreElements()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (String) e.nextElement();<br><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> prop.getProperty(key);<br>System.out.println(<span class="hljs-string">&quot;Key:&quot;</span> + key + <span class="hljs-string">&quot;,Value:&quot;</span> + value);<br>&#125;<br><br>&#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span>(input != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>input.close();<br>&#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">PropertiesTest</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesTest</span>();<br>p.printAll();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="6-注意"><a href="#6-注意" class="headerlink" title="6.注意"></a>6.注意</h1><blockquote><p>properties文件默认的编码格式居然是ISO-8859-1，这样导致往配置文件里面写入中文的时候转换成另一种格式的编码，需要把properties 文件的编码格式改为UTF-8，这样才会让配置文件保存中文数据的时候不会出现转码的问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Properties </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写高效优雅java代码</title>
      <link href="/2021/01/26/%E7%BC%96%E5%86%99%E4%BC%98%E9%9B%85%E9%AB%98%E6%95%88%E7%9A%84java%E4%BB%A3%E7%A0%81/"/>
      <url>/2021/01/26/%E7%BC%96%E5%86%99%E4%BC%98%E9%9B%85%E9%AB%98%E6%95%88%E7%9A%84java%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h1 id="构造器参数太多怎么办"><a href="#构造器参数太多怎么办" class="headerlink" title="构造器参数太多怎么办"></a>构造器参数太多怎么办</h1><blockquote><p>Java类设计过程中，如果类的构造器或者静态工厂中具有多个参数，并且其中有大量的可选参数时，我们应该怎么办？</p></blockquote><h2 id="Telescoping-Constructor模式-重叠构造器"><a href="#Telescoping-Constructor模式-重叠构造器" class="headerlink" title="Telescoping Constructor模式(重叠构造器)"></a>Telescoping Constructor模式(重叠构造器)</h2><p>我们首先想到的方法肯定是传统的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是设计以及使用过程中我们发现以下几点问题：</p><ul><li>属性参数逐渐变多时属性参数逐渐变多时，由于要对之前的代码做兼容，所以不可以直接在现有构造器后面追加属性，只能不断新增构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>属性参数中有大量的可选参数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> year, String city, String newState,</span><br><span class="hljs-params">                  <span class="hljs-type">boolean</span> newIsFemale, <span class="hljs-type">boolean</span> newIsEmployed, <span class="hljs-type">boolean</span> newIsHomeOwner)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.city = city;<br>        <span class="hljs-built_in">this</span>.state = newState;<br>        <span class="hljs-built_in">this</span>.isFemale = newIsFemale;<br>        <span class="hljs-built_in">this</span>.isEmployed = newIsEmployed;<br>        <span class="hljs-built_in">this</span>.isHomewOwner = newIsHomeOwner;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>显而易见，这样写的类构造器虽然无可厚非，但是当有许多参数的时候，客户端代码会很难编写，并且难以阅读。如果读者想知道那些值是什么意思，必须很仔细的数着这些参数来探个究竟。</li></ul><h2 id="JavaBeans模式"><a href="#JavaBeans模式" class="headerlink" title="JavaBeans模式"></a>JavaBeans模式</h2><p>在这种模式下，调用一个无参构造器来创建对象，然后调用setter方法来设置每个必要的参数，以及每个相关的可选参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by itbird on 2017/3/23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFemale</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isFemale;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFemale</span><span class="hljs-params">(<span class="hljs-type">boolean</span> female)</span> &#123;<br>        isFemale = female;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmployed</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isEmployed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployed</span><span class="hljs-params">(<span class="hljs-type">boolean</span> employed)</span> &#123;<br>        isEmployed = employed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHomewOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isHomewOwner;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomewOwner</span><span class="hljs-params">(<span class="hljs-type">boolean</span> homewOwner)</span> &#123;<br>        isHomewOwner = homewOwner;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种模式弥补重叠构造器模式的不足。说的明白一点，就是创建实例很容易，这样产生的代码读起来也很容易:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>person.setCity(<span class="hljs-string">&quot;重庆&quot;</span>);<br>person.setYear(<span class="hljs-number">12</span>);<br>person.setSex(<span class="hljs-string">&quot;男&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;itbird&quot;</span>);<br></code></pre></td></tr></table></figure><p>遗憾的是，JavaBeans模式自身有着很严重的缺点。因为构造过程被分到几个调用中，在构造过程中JavaBean可能处于非一致的状态。JavaBeans模式阻止了把类做成不可变的可能，这就需要程序员付出额外的努力来确保他的线程安全。</p><h2 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h2><p>5个或者5个以上的成员变量 参数不多，但是在未来，参数会增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilder</span> &#123;<br>        <span class="hljs-comment">// 必要参数</span><br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-comment">// 可选参数</span><br>        <span class="hljs-keyword">private</span> String sex;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>        <span class="hljs-keyword">private</span> String city;<br>        <span class="hljs-keyword">private</span> String state;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isFemale;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEmployed;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isHomewOwner;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonBuilder</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>            <span class="hljs-built_in">this</span>.sex = sex;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>            <span class="hljs-built_in">this</span>.year = year;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>            <span class="hljs-built_in">this</span>.city = city;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>            <span class="hljs-built_in">this</span>.state = state;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setFemale</span><span class="hljs-params">(<span class="hljs-type">boolean</span> female)</span> &#123;<br>            isFemale = female;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setEmployed</span><span class="hljs-params">(<span class="hljs-type">boolean</span> employed)</span> &#123;<br>            isEmployed = employed;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PersonBuilder <span class="hljs-title function_">setHomewOwner</span><span class="hljs-params">(<span class="hljs-type">boolean</span> homewOwner)</span> &#123;<br>            isHomewOwner = homewOwner;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            person.name = name;<br>            person.sex = sex;<br>            person.city = city;<br>            person.isEmployed = isEmployed;<br>            person.isFemale = isFemale;<br>            person.isHomewOwner = isHomewOwner;<br>            person.state = state;<br>            person.year = year;<br>            <span class="hljs-keyword">return</span> person;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用的实例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>.PersonBuilder(<span class="hljs-string">&quot;itbird&quot;</span>)<br>                   .setCity(<span class="hljs-string">&quot;重庆&quot;</span>).setYear(<span class="hljs-number">15</span>).build();<br></code></pre></td></tr></table></figure><p>显然，使用Builder模式解决了上诉的难题，达到了“以不变(Builder)应万变(参数)”的目的。</p><h1 id="不需要实例化的类应该构造器私有"><a href="#不需要实例化的类应该构造器私有" class="headerlink" title="不需要实例化的类应该构造器私有"></a>不需要实例化的类应该构造器私有</h1><p> 一些工具类提供的都是静态方法，这些类是不应该提供具体的实例的。可以参考JDK中的Arrays。</p><h1 id="不要创建不必要的对象"><a href="#不要创建不必要的对象" class="headerlink" title="不要创建不必要的对象"></a>不要创建不必要的对象</h1><ul><li>反例<blockquote><p>该语句每次被执行的时候都创建一个新的String实例，但这些创建对象的动作全部都是不必要的。传递给String构造器的参数（”stringette”）本身就是一个String实例，功能方面等同于构造器创建的对象。如果这种用法实在一个循环中，或者在一个被频繁调用的方法中，就会创建出成千上万不必要的String实例。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;stringette&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>正例<blockquote><p>这个版本只用了一个String实例，而不是每一次执行代码都创建一个新的实例。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stringette&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h1><p>终结方法（finalizer）通常是不可预测的，也是很危险的，一般情况下是不必要的。使用终结方法会导致行为不稳定，降低性能以及可移植性问题。</p><ul><li>反例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Foo</span> <span class="hljs-variable">foo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>(...);<br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//Do what must be done with foo</span><br>    ...<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    foo.terminate();        <span class="hljs-comment">//Explicit termination method</span><br>&#125;<br></code></pre></td></tr></table></figure>使用终结方法的好处，它们有两种合法用途：</li></ul><p>第一种用途是，当对象的所有者忘记调用前面建议的显示终止方法的时，终结方法可以充当“安全网（safety net）”。迟一点释放关键资源总比永远不释放要好。但是如果终结方法发现资源还未被终止，则应该在日志中记录一条警告，因为这是客户端的一个BUG，应当被修复。</p><p>第二种合理用途与对象的本地对等体（native peer）有关。本地对等体是一个本地对象（native object），普通对象通过本地方法（native method）委托给一个本地对象。因为本地对等体不是一个普通对象，所以垃圾回收器不会知道它，当它的Java对等体被回收的时候，它不会被回收。在本地对等体不拥有关键资源的前提下，终结方法正是执行这项任务最合适的工具。如果本地对等体拥有必须被及时终止的资源，那么该类就应该具有一个显示的终止方法，如前所述。终止方法应该完成所有必要的工作以便释放关键资源。终止方法可以是本地的，或者调用本地方法。</p><h1 id="使类和成员的可访问性最小化"><a href="#使类和成员的可访问性最小化" class="headerlink" title="使类和成员的可访问性最小化"></a>使类和成员的可访问性最小化</h1><p>编写程序和设计架构，最重要的目标之一就是模块之间的解耦。使类和成员的可访问性最小化无疑是有效的途径之一。</p><h2 id="为什么要使类和成员的可访问性最小化"><a href="#为什么要使类和成员的可访问性最小化" class="headerlink" title="为什么要使类和成员的可访问性最小化"></a>为什么要使类和成员的可访问性最小化</h2><p>可以有效的解除系统中各个模块的耦合度、实现每个模块的独立开发、使得系统更加的可维护，更加的健壮。</p><h2 id="如何最小化类和接口的可访问性？"><a href="#如何最小化类和接口的可访问性？" class="headerlink" title="如何最小化类和接口的可访问性？"></a>如何最小化类和接口的可访问性？</h2><p> 能将类和接口做成包级私有就一定要做成包级私有的。</p><p> 如果一个类或者接口，只被另外的一个类应用，那么最好将这个类或者接口做成其内部的私有类或者接口。</p><h2 id="如何最小化一个了类中的成员的可访问性？"><a href="#如何最小化一个了类中的成员的可访问性？" class="headerlink" title="如何最小化一个了类中的成员的可访问性？"></a>如何最小化一个了类中的成员的可访问性？</h2><h4 id="首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。"><a href="#首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。" class="headerlink" title="首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。"></a>首先设计出该类需要暴露出来的api，然后将剩下的成员的设计成private类型。然后再其他类需要访问某些private类型的成员时，在删掉private，使其变成包级私有。如果你发现你需要经常这样做，那么就请你重新设计一下这个类的api。</h4><h4 id="对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。"><a href="#对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。" class="headerlink" title="对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。"></a>对于protected类型的成员，作用域是整个系统，所以，能用包访问类型的成员的话就尽量不要使用保护行的成员。</h4><h4 id="不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。"><a href="#不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。" class="headerlink" title="不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。"></a>不能为了测试而将包中的类或者成员变为public类型的，最多只能设置成包级私有类型。</h4><h4 id="实例域绝对不能是public类型的"><a href="#实例域绝对不能是public类型的" class="headerlink" title="实例域绝对不能是public类型的."></a>实例域绝对不能是public类型的.</h4><h2 id="使可变性最小化"><a href="#使可变性最小化" class="headerlink" title="使可变性最小化"></a>使可变性最小化</h2><blockquote><p>尽量使类不可变，不可变的类比可变的类更加易于设计、实现和使用，而且更不容易出错，更安全。</p></blockquote><h3 id="常用的手段"><a href="#常用的手段" class="headerlink" title="常用的手段"></a>常用的手段</h3><ul><li>不提供任何可以修改对象状态的方法；</li><li>使所有的域都是final的。</li><li>使所有的域都是私有的。</li><li>使用写时复制机制。带来的问题：会导致系统产生大量的对象，而且性能有一定的影响，需要在使用过程中小心权衡。</li></ul><h2 id="优先使用复合"><a href="#优先使用复合" class="headerlink" title="优先使用复合"></a>优先使用复合</h2><p>继承容易破坏封装性，而且会使子类的实现依赖于父类。<br>复合则是在类中增加一个私有域，引用类的一个实例，这样的话就避免了依赖类的具体实现。<br>只有在子类确实是父类的一个子类型时，才比较适合用继承。</p><h2 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h2><p>java是个单继承的，但是类允许实现多个接口。<br>所以当发生业务变化时，新增接口，并且需要进行业务变化的类现新接口即可。但是抽象类有可能导致不需要变化的类也不得不实现新增的业务方法。<br>在JDK里常用的一种设计方法是：定义一个接口，声明一个抽象的骨架类实现接口，骨架类类实现通用的方法，而实际的业务类可以同时实现接口又继承骨架类，也可以只实现接口。<br>如HashSet实现了implements Set接口 但是又extends 类AbstractSet，而AbstractSet本身也实现了Set接口。其他如Map，List都是这样的设计的。</p><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="可变参数要谨慎使用"><a href="#可变参数要谨慎使用" class="headerlink" title="可变参数要谨慎使用"></a>可变参数要谨慎使用</h2><p>可变参数是允许传0个参数的<br>如果是参数个数在1~多个之间的时候，要做单独的业务控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可能很多 0~很多</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... args)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> arg : args)<br>           sum += arg;<br>       <span class="hljs-keyword">return</span> sum;<br>   &#125;<br>   <br>   <span class="hljs-comment">//要求参数的个数，是1~多个</span><br>   <span class="hljs-comment">//</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">(<span class="hljs-type">int</span>... args)</span> &#123;<br>       <span class="hljs-keyword">if</span>(args.length==<span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-comment">//做点异常处理</span><br>       &#125;<br>       <span class="hljs-keyword">if</span>(args[<span class="hljs-number">0</span>]==<span class="hljs-number">100</span>) &#123;<br><br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;args.length;i++) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>           sum += args[i];<br>           <span class="hljs-keyword">return</span> sum; <br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> flag, <span class="hljs-type">int</span>... args)</span> &#123;<br>       <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">100</span>) &#123;<br><br>       &#125;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> arg : args)<br>           sum += arg;<br>       <span class="hljs-keyword">return</span> sum;<br>       <span class="hljs-keyword">return</span> Collections.EMPTY_LIST;<br>   &#125;<br>   <br></code></pre></td></tr></table></figure><h2 id="优先使用标准的异常"><a href="#优先使用标准的异常" class="headerlink" title="优先使用标准的异常"></a>优先使用标准的异常</h2><blockquote><p>要尽量追求代码的重用，同时减少类加载的数目，提高类装载的性能。</p></blockquote><p>NullPointerException 在参数值不能为null的情况下参数值为null 抛出空指针异常</p><p>IndexOutOfBoundsException 下标参数值越界 抛出索引越界异常</p><p>ConcurrentModificationException 在禁止并发修改的情况下，检测到对象的并发修改 抛出</p><p>UnsupportedOperationException 对象不支持用户请求的方法 抛出</p><hr><h1 id="让代码性能更高"><a href="#让代码性能更高" class="headerlink" title="让代码性能更高"></a>让代码性能更高</h1><h1 id="需要-Map-的主键和取值时，应该迭代-entrySet"><a href="#需要-Map-的主键和取值时，应该迭代-entrySet" class="headerlink" title="需要 Map 的主键和取值时，应该迭代 entrySet()"></a>需要 Map 的主键和取值时，应该迭代 entrySet()</h1><p>当循环中只需要 Map 的主键时，迭代 keySet() 是正确的。但是，当需要主键和取值时，迭代 entrySet() 才是更高效的做法，比先迭代 keySet() 后再去 get 取值性能更佳。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = ...;<br><span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = ...;<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="应该使用Collection-isEmpty-检测空"><a href="#应该使用Collection-isEmpty-检测空" class="headerlink" title="应该使用Collection.isEmpty()检测空"></a>应该使用Collection.isEmpty()检测空</h1><p>使用 Collection.size() 来检测空逻辑上没有问题，但是使用 Collection.isEmpty()使得代码更易读，并且可以获得更好的性能。任何 Collection.isEmpty() 实现的时间复杂度都是 O(1) ，但是某些 Collection.size() 实现的时间复杂度可能是 O(n) 。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (collection.size() == <span class="hljs-number">0</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (collection.isEmpty()) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要还需要检测 null ，可采用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CollectionUtils.isEmpty(collection)和CollectionUtils.isNotEmpty(collection)。<br></code></pre></td></tr></table></figure><h1 id="不要把集合对象传给自己"><a href="#不要把集合对象传给自己" class="headerlink" title="不要把集合对象传给自己"></a>不要把集合对象传给自己</h1><p>此外，由于某些方法要求参数在执行期间保持不变，因此将集合传递给自身可能会导致异常行为。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>list.add(<span class="hljs-string">&quot;World&quot;</span>);<br><span class="hljs-keyword">if</span> (list.containsAll(list)) &#123; <span class="hljs-comment">// 无意义,总是返回true</span><br>    ...<br>&#125;<br>list.removeAll(list); <span class="hljs-comment">// 性能差, 直接使用clear()</span><br></code></pre></td></tr></table></figure><h1 id="集合初始化尽量指定大小"><a href="#集合初始化尽量指定大小" class="headerlink" title="集合初始化尽量指定大小"></a>集合初始化尽量指定大小</h1><p>java 的集合类用起来十分方便，但是看源码可知，集合也是有大小限制的。每次扩容的时间复杂度很有可能是 O(n) ，所以尽量指定可预知的集合大小，能减少集合的扩容次数。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>    list.add(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(arr.length);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>    list.add(i);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串拼接使用-StringBuilder"><a href="#字符串拼接使用-StringBuilder" class="headerlink" title="字符串拼接使用 StringBuilder"></a>字符串拼接使用 StringBuilder</h1><p>一般的字符串拼接在编译期 java 会进行优化，但是在循环中字符串拼接， java 编译器无法做到优化，所以需要使用 StringBuilder 进行替换。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    s += i;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;c&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> a + b + c; <span class="hljs-comment">// 没问题，java编译器会进行优化</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    sb.append(i);  <span class="hljs-comment">// 循环中，java编译器无法进行优化，所以要手动使用StringBuilder</span><br>&#125;<br>```java<br># List 的随机访问<br>大家都知道数组和链表的区别：数组的随机访问效率更高。当调用方法获取到 List 后，如果想随机访问其中的数据，并不知道该数组内部实现是链表还是数组，怎么办呢？可以判断它是否实现 RandomAccess 接口。<br><br>正例<br>```java<br><span class="hljs-comment">// 调用别人的服务获取到list</span><br>List&lt;Integer&gt; list = otherService.getList();<br><span class="hljs-keyword">if</span> (list <span class="hljs-keyword">instanceof</span> RandomAccess) &#123;<br>    <span class="hljs-comment">// 内部数组实现，可以随机访问</span><br>    System.out.println(list.get(list.size() - <span class="hljs-number">1</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 内部可能是链表实现，随机访问效率低</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="频繁调用-Collection-contains-方法请使用-Set"><a href="#频繁调用-Collection-contains-方法请使用-Set" class="headerlink" title="频繁调用 Collection.contains 方法请使用 Set"></a>频繁调用 Collection.contains 方法请使用 Set</h1><p>在 java 集合类库中，List 的 contains 方法普遍时间复杂度是 O(n) ，如果在代码中需要频繁调用 contains 方法查找数据，可以先将 list 转换成 HashSet 实现，将 O(n) 的时间复杂度降为 O(1) 。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = otherService.getList();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= Integer.MAX_VALUE; i++) &#123;<br>    <span class="hljs-comment">// 时间复杂度O(n)</span><br>    list.contains(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = otherService.getList();<br>Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(list);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= Integer.MAX_VALUE; i++) &#123;<br>    <span class="hljs-comment">// 时间复杂度O(1)</span><br>    set.contains(i);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="让代码更优雅"><a href="#让代码更优雅" class="headerlink" title="让代码更优雅"></a>让代码更优雅</h1><h1 id="长整型常量后添加大写-L"><a href="#长整型常量后添加大写-L" class="headerlink" title="长整型常量后添加大写 L"></a>长整型常量后添加大写 L</h1><p>在使用长整型常量值时，后面需要添加 L ，必须是大写的 L ，不能是小写的 l ，小写 l 容易跟数字 1 混淆而造成误解。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1l</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">1L</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">1L</span>, <span class="hljs-number">5L</span>);<br></code></pre></td></tr></table></figure><h1 id="不要使用魔法值"><a href="#不要使用魔法值" class="headerlink" title="不要使用魔法值"></a>不要使用魔法值</h1><p>当你编写一段代码时，使用魔法值可能看起来很明确，但在调试时它们却不显得那么明确了。这就是为什么需要把魔法值定义为可读取常量的原因。但是，-1、0 和 1不被视为魔法值。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">100</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++)&#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">if</span> (count == MAX_COUNT) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="不要使用集合实现来赋值静态成员变量"><a href="#不要使用集合实现来赋值静态成员变量" class="headerlink" title="不要使用集合实现来赋值静态成员变量"></a>不要使用集合实现来赋值静态成员变量</h1><p>对于集合类型的静态成员变量，不要使用集合实现来赋值，应该使用静态代码块赋值。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;() &#123;<br>    &#123;<br>        put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>        put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;() &#123;<br>    &#123;<br>        add(<span class="hljs-string">&quot;a&quot;</span>);<br>        add(<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>    map.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>);<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>    list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="建议使用-try-with-resources-语句"><a href="#建议使用-try-with-resources-语句" class="headerlink" title="建议使用 try-with-resources 语句"></a>建议使用 try-with-resources 语句</h1><p>Java 7 中引入了 try-with-resources 语句，该语句能保证将相关资源关闭，优于原来的 try-catch-finally 语句，并且使程序代码更安全更简洁。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(String fileName)</span> &#123;<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        String line;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName));<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><blockquote><p>那什么是try-with-resource呢？简而言之，当一个外部资源的句柄对象（比如FileInputStream对象）实现了AutoCloseable接口，那么就可以将上面的板式代码简化为如下形式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(String fileName)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将外部资源的句柄对象的创建放在try关键字后面的括号中，当这个try-catch代码块执行完毕后，Java会确保外部资源的close方法被调用。代码是不是瞬间简洁许多！</p><h1 id="删除未使用的私有方法和字段"><a href="#删除未使用的私有方法和字段" class="headerlink" title="删除未使用的私有方法和字段"></a>删除未使用的私有方法和字段</h1><p>删除未使用的私有方法和字段，使代码更简洁更易维护。若有需要再使用，可以从历史提交中找回。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleDemo1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">unusedField</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unusedMethod</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除未使用的局部变量"><a href="#删除未使用的局部变量" class="headerlink" title="删除未使用的局部变量"></a>删除未使用的局部变量</h1><p>删除未使用的局部变量，使代码更简洁更易维护。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除未使用的方法参数"><a href="#删除未使用的方法参数" class="headerlink" title="删除未使用的方法参数"></a>删除未使用的方法参数</h1><p>未使用的方法参数具有误导性，删除未使用的方法参数，使代码更简洁更易维护。但是，由于重写方法是基于父类或接口的方法定义，即便有未使用的方法参数，也是不能删除的。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除表达式的多余括号"><a href="#删除表达式的多余括号" class="headerlink" title="删除表达式的多余括号"></a>删除表达式的多余括号</h1><p>对应表达式中的多余括号，有人认为有助于代码阅读，也有人认为完全没有必要。对于一个熟悉 Java 语法的人来说，表达式中的多余括号反而会让代码显得更繁琐。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> (x);<br><span class="hljs-keyword">return</span> (x + <span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (y * <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (n * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> n * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="工具类应该屏蔽构造函数"><a href="#工具类应该屏蔽构造函数" class="headerlink" title="工具类应该屏蔽构造函数"></a>工具类应该屏蔽构造函数</h1><p>工具类是一堆静态字段和函数的集合，不应该被实例化。但是，Java 为每个没有明确定义构造函数的类添加了一个隐式公有构造函数。所以，为了避免 java “小白”使用有误，应该显式定义私有构造函数来屏蔽这个隐式公有构造函数。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926D</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926D</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">MathUtils</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除多余的异常捕获并抛出"><a href="#删除多余的异常捕获并抛出" class="headerlink" title="删除多余的异常捕获并抛出"></a>删除多余的异常捕获并抛出</h1><p>用 catch 语句捕获异常后，什么也不进行处理，就让异常重新抛出，这跟不捕获异常的效果一样，可以删除这块代码或添加别的处理。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>        String line;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            builder.append(line);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>        String line;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            builder.append(line);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="公有静态常量应该通过类访问"><a href="#公有静态常量应该通过类访问" class="headerlink" title="公有静态常量应该通过类访问"></a>公有静态常量应该通过类访问</h1><p>虽然通过类的实例访问公有静态常量是允许的，但是容易让人它误认为每个类的实例都有一个公有静态常量。所以，公有静态常量应该直接通过类访问。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONST_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name&quot;</span>;<br>    ...<br>&#125;<br><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">nameKey</span> <span class="hljs-operator">=</span> user.CONST_NAME;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONST_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name&quot;</span>;<br>    ...<br>&#125;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">nameKey</span> <span class="hljs-operator">=</span> User.CONST_NAME;<br></code></pre></td></tr></table></figure><h1 id="不要用NullPointerException判断空"><a href="#不要用NullPointerException判断空" class="headerlink" title="不要用NullPointerException判断空"></a>不要用NullPointerException判断空</h1><p>空指针异常应该用代码规避（比如检测不为空），而不是用捕获异常的方式处理。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getName();<br>    &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(user)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> user.getName();<br>&#125;<br></code></pre></td></tr></table></figure><p>使用String.valueOf(value)代替””+value<br>当要把其它对象或类型转化为字符串时，使用 String.valueOf(value) 比””+value 的效率更高。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> + i;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.valueOf(i);<br></code></pre></td></tr></table></figure><h1 id="过时代码添加-Deprecated-注解"><a href="#过时代码添加-Deprecated-注解" class="headerlink" title="过时代码添加 @Deprecated 注解"></a>过时代码添加 @Deprecated 注解</h1><p>当一段代码过时，但为了兼容又无法直接删除，不希望以后有人再使用它时，可以添加 @Deprecated 注解进行标记。在文档注释中添加 @deprecated 来进行解释，并提供可替代方案</p><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@deprecated</span> 此方法效率较低，请使用&#123;<span class="hljs-doctag">@link</span> newSave()&#125;方法替换它</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="让代码远离-bug"><a href="#让代码远离-bug" class="headerlink" title="让代码远离 bug"></a>让代码远离 bug</h1><h1 id="禁止使用构造方法-BigDecimal-double"><a href="#禁止使用构造方法-BigDecimal-double" class="headerlink" title="禁止使用构造方法 BigDecimal(double)"></a>禁止使用构造方法 BigDecimal(double)</h1><p>BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.1D</span>); <span class="hljs-comment">// 0.100000000000000005551115...</span><br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.1D</span>);; <span class="hljs-comment">// 0.1</span><br></code></pre></td></tr></table></figure><h1 id="返回空数组和空集合而不是-null"><a href="#返回空数组和空集合而不是-null" class="headerlink" title="返回空数组和空集合而不是 null"></a>返回空数组和空集合而不是 null</h1><p>返回 null ，需要调用方强制检测 null ，否则就会抛出空指针异常。返回空数组或空集合，有效地避免了调用方因为未检测 null 而抛出空指针异常，还可以删除调用方检测 null 的语句使代码更简洁。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result[] getResults() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Result&gt; <span class="hljs-title function_">getResultList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Result&gt; <span class="hljs-title function_">getResultMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Result[] results = getResults();<br>    <span class="hljs-keyword">if</span> (results != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Result result : results) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    List&lt;Result&gt; resultList = getResultList();<br>    <span class="hljs-keyword">if</span> (resultList != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Result result : resultList) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    Map&lt;String, Result&gt; resultMap = getResultMap();<br>    <span class="hljs-keyword">if</span> (resultMap != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Result&gt; resultEntry : resultMap) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result[] getResults() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Result&gt; <span class="hljs-title function_">getResultList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Result&gt; <span class="hljs-title function_">getResultMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.emptyMap();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Result[] results = getResults();<br>    <span class="hljs-keyword">for</span> (Result result : results) &#123;<br>        ...<br>    &#125;<br><br>    List&lt;Result&gt; resultList = getResultList();<br>    <span class="hljs-keyword">for</span> (Result result : resultList) &#123;<br>        ...<br>    &#125;<br><br>    Map&lt;String, Result&gt; resultMap = getResultMap();<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Result&gt; resultEntry : resultMap) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="优先使用常量或确定值来调用-equals-方法"><a href="#优先使用常量或确定值来调用-equals-方法" class="headerlink" title="优先使用常量或确定值来调用 equals 方法"></a>优先使用常量或确定值来调用 equals 方法</h1><p>对象的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals 方法。当然，使用 java.util.Objects.equals() 方法是最佳实践。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">(OrderStatus status)</span> &#123;<br>    <span class="hljs-keyword">return</span> status.equals(OrderStatus.FINISHED); <span class="hljs-comment">// 可能抛空指针异常</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">(OrderStatus status)</span> &#123;<br>    <span class="hljs-keyword">return</span> OrderStatus.FINISHED.equals(status);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">(OrderStatus status)</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.equals(status, OrderStatus.FINISHED);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举的属性字段必须是私有不可变"><a href="#枚举的属性字段必须是私有不可变" class="headerlink" title="枚举的属性字段必须是私有不可变"></a>枚举的属性字段必须是私有不可变</h1><p>枚举通常被当做常量使用，如果枚举中存在公共属性字段或设置字段方法，那么这些枚举常量的属性很容易被修改。理想情况下，枚举中的属性字段是私有的，并在私有构造函数中赋值，没有对应的 Setter 方法，最好加上 final 修饰符。</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserStatus</span> &#123;<br>    DISABLED(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;禁用&quot;</span>),<br>    ENABLED(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;启用&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">UserStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> value, String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserStatus</span> &#123;<br>    DISABLED(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;禁用&quot;</span>),<br>    ENABLED(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;启用&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">UserStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> value, String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小心String-split-String-regex"><a href="#小心String-split-String-regex" class="headerlink" title="小心String.split(String regex)"></a>小心String.split(String regex)</h1><p>字符串 String 的 split 方法，传入的分隔字符串是正则表达式！部分关键字（比如.| 等）需要转义</p><p>反例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;a.ab.abc&quot;</span>.split(<span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">// 结果为[]</span><br><span class="hljs-string">&quot;a|ab|abc&quot;</span>.split(<span class="hljs-string">&quot;|&quot;</span>); <span class="hljs-comment">// 结果为[&quot;a&quot;, &quot;|&quot;, &quot;a&quot;, &quot;b&quot;, &quot;|&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><p>正例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;a.ab.abc&quot;</span>.split(<span class="hljs-string">&quot;\\.&quot;</span>); <span class="hljs-comment">// 结果为[&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;]</span><br><span class="hljs-string">&quot;a|ab|abc&quot;</span>.split(<span class="hljs-string">&quot;\\|&quot;</span>); <span class="hljs-comment">// 结果为[&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;]</span><br></code></pre></td></tr></table></figure><p><a href="https://baiyp.ren/%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88%E4%BC%98%E9%9B%85%E7%9A%84Java%E4%BB%A3%E7%A0%81.html">文章来源</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2021/01/23/redis/"/>
      <url>/2021/01/23/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装gcc环境</span><br>yum install gcc-c++<br>wget http://download.redis.io/releases/redis-3.2.8.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.下载安装包 6.0.5版本</span><br>wget http://download.redis.io/releases/redis-6.0.5.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.解压到指定文件夹</span><br>mkdir -p /usr/local/redis<br>tar -zxvf redis-6.0.5.tar.gz -C /usr/local/redis/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.在编译安装前，查看系统gcc环境的版本（gcc -v），centos7默认安装的版本为4.8.5，该版本过低会无法进行安装，需要升级gcc到6以上。</span><br>sudo yum -y install centos-release-scl<br>sudo yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<br>sudo scl enable devtoolset-9 bash<br>sudo echo &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt; /etc/profile<br>gcc -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.进入文件夹 编译</span><br>cd /usr/local/redis/redis-6.0.5/<br>make<br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译并安装到指定文件夹</span><br>sudo make &amp;&amp; sudo make install PREFIX=/usr/local/redis/redis-6.0.5<br><span class="hljs-meta prompt_">#</span><span class="language-bash">若编译报错:zmalloc.h:50:10: fatal error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">则使用命令:make MALLOC=libc</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5.修改redis.conf的一些必要配置：</span><br>daemonize no --&gt; yes  # 让redis启动的时候以后台服务的形式<br>requirepass foobared --&gt; #设置redis的连接密码<br>port 6379　　　　--&gt; #redis的启动端口，默认为6379<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6.将redis做成服务，并设置成开机启动：</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">7.指定redis日志和数据存放目录</span><br>mkdir -p /usr/local/redis/redis-6.0.5/log<br>mkdir -p /usr/local/redis/redis-6.0.5/data<br>vim redis.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定redis日志文件存放目录</span><br>logfile &quot;/usr/local/redis/redis-6.0.5/log/redis.log&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定redis数据存放目录</span><br>dir /usr/local/redis/redis-6.0.5/data<br></code></pre></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>C语言开发,依赖gcc环境.</p><p>客户端启动会默认连接本机6379端口.</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h2><ul><li>高效性.Redis读取的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s</li><li>原子性. Redis的所有操作都是原子性的,同时Redis还支持对几个操作全并后的原子性执行。</li><li>稳定性:持久化,主外复制(集群) .</li><li>其他特性:支持过期时间,支持事务,消息订阅。</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><code>reids</code>默认有<code>16</code>个数据库,命名是<code>0 , 1 , 2 ....15</code>,默认使用<code>0</code>号数据库,切换数据库使用命令<code>select 2</code>.</li><li>移动数据到别的库:<code>move key 2</code>: 表示把key移到2库.</li><li>清空当前数据库:<code>flushdb</code></li><li>清空redis服务器:<code>flushall</code></li><li>退出客户端:<code>quit</code>或<code>ctrl c</code></li><li>查询当前数据库中<code>key</code>的数量:<code>dbsize</code></li><li>查看当前<code>redis</code>信息:<code>info</code></li><li>启动服务端 前端启动(无法部署集群) <code>./redis/bin/redis-server</code></li><li>后端启动<ul><li>修改redis.conf文件,开启守护线程: daemonize yes</li><li><code>./bin/redis-server ./redis.conf</code></li></ul></li><li>启动客户端 默认连接本地6379端口 <code>./redis/bin/redis-cli</code></li><li>连接其他机器 <code>./bin/redis-cli -h ip -p 6379</code></li><li>关闭redis <code>kill -9 进程号</code> 或 <code>./bin/redis-cli shutdown</code></li><li>查询所有key  *表示0或多个 ?表示1个<code>keys *</code></li><li>查询长度为4的key <code>keys ????</code></li><li>模糊查询 查询带name的key <code>keys *name*</code></li><li>删除key 删除多个key <code>del key [key2 key3...]</code></li><li>判断key是否存在 存在返回1否则返回0 <code>exists key</code></li><li>重命名key 不常用 <code>rname oldkey newkey</code></li><li>返回key的value的数据类型 <code>type key</code></li><li>设置key过期时间30秒,单位是秒,默认永久有效 <code>expire key 30</code></li><li>查询key剩余有效期时间,-2表示过期,会删除key.若未设置超时返回-1 <code>ttl key</code></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p><code>key</code>都是字符串类型,<code>value</code>分为五种数据类型:<code>String</code>,<code>hash</code>,<code>list</code>,<code>set</code>,<code>有序set</code></p></blockquote><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote><p>单个值最大512M,对应<code>java</code>中的<code>map</code></p></blockquote><h3 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">set key value<br>get key<br>del key<br>getset key value<br>incr key<br>decr key<br>append key<br>incrby <br>decrby <br></code></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><blockquote><p>示例:{username:”zhangsan”,age:”18”},类似<code>JSON</code>,对应<code>java</code>中的<code>bean</code>.</p></blockquote><h3 id="使用命令-1"><a href="#使用命令-1" class="headerlink" title="使用命令"></a>使用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">赋值</span><br>hset key field value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">赋值多个</span><br>hmset key field value[field1 value1 field2 value2...]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取值</span><br>hget key field<br><span class="hljs-meta prompt_">#</span><span class="language-bash">取值多个</span><br>hmget key field1 field2...<br><span class="hljs-meta prompt_">#</span><span class="language-bash">取值全部</span><br>hgetall key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询key有几个field</span><br>hlen key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询<span class="hljs-built_in">hash</span>所有field</span><br>hkeys key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询<span class="hljs-built_in">hash</span>所有value</span><br>hvals key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除</span><br>hdel key field [field2 field3...]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除整个<span class="hljs-built_in">hash</span></span><br>del key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">增加值</span><br>hincrby key field 10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断field的value是否存在,存在返回1,否则返回0</span><br>hexists key field<br></code></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote><p>示例:[1,2,3],对应linkedList链表集合,增删快.</p><p>redis中是双向链表,增删极快.</p></blockquote><h3 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h3><p>​大数据量集合操作,任务队列</p><h3 id="使用命令-2"><a href="#使用命令-2" class="headerlink" title="使用命令"></a>使用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">左赋值</span><br>lpush key a b c d <br><span class="hljs-meta prompt_">#</span><span class="language-bash">右赋值 符合习惯</span><br>rpush key a b c d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取值,获取list中start到end的值.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">start end 从0开始,可为负数,-1表示尾部元素,-2表示倒数第二个元素...</span><br>lrange key start end<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询list长度</span><br>llen key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除左边第一个元素,若key不存在返回nil,存在返回第一个元素</span><br>lpop key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除右边最后一个元素</span><br>rpop key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除集合中所有a,若0改为2表示左边开始删2个,-2表示右边开始删2个   效率极低,因为需要给集合赋索引操作</span><br>lrem key 0 a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在pivot元素前|后插入value  效率不高</span><br>linsert kry before|after pivot value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">替换下标为index的元素为value 效率不高</span><br>lset key index value<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将集合中尾部元素弹出,添加到头部,存入新集合list2 通过循环实现队列功能</span><br>rpoplpush list1 list2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">eg: list1为 a b c ,执行一次后:list1: a b list2:c</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">循环队列</span><br>rpoplpush list1 list1<br></code></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><blockquote><p>对应hashset,无序,不重复.</p></blockquote><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景:"></a>场景:</h3><p>​redis中涉及到两个集合的交集 并集 差集运算.</p><h3 id="使用命令-3"><a href="#使用命令-3" class="headerlink" title="使用命令"></a>使用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">赋值,重复的会去除</span><br>sadd key a b c d d<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除元素</span><br>srem key a b<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询所有元素</span><br>smembers key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询a元素是否存在,存在返回1,否则返回0</span><br>sismember key a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询<span class="hljs-built_in">set</span>中元素数量</span><br>scard key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">随机返回<span class="hljs-built_in">set</span>中一个元素 伪随机</span><br>srandmember key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">差集运算,属于key1 不属于key2</span><br>sdiff key1 key2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">交集运算</span><br>sinter key1 key2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">并集运算</span><br>sunion key1 key2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将差|并|交集存入新的set3中</span><br>sdiffstore|sunionstore|sinterstore set3 set1 set2<br></code></pre></td></tr></table></figure><h2 id="有序set"><a href="#有序set" class="headerlink" title="有序set"></a>有序set</h2><blockquote><p>有序,不重复.</p><p>默认升序</p></blockquote><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景:"></a>场景:</h3><p>​排行榜 </p><h3 id="使用命令-4"><a href="#使用命令-4" class="headerlink" title="使用命令"></a>使用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">赋值</span> <br>zadd set1 500 xiaoming 200 xiaohong 100 xiaogang<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询xiaoming的分数</span><br>zscore set1 xiaoming<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询元素数量</span><br>zcard set1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询所有元素</span><br>zrange set1 0 -1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询所有元素的分数</span><br>zrange set1 0 -1 withscores<br><span class="hljs-meta prompt_">#</span><span class="language-bash">倒序查看所有元素 --&gt;排行榜</span><br>zrevrange set1 0 -1 withscores<br><span class="hljs-meta prompt_">#</span><span class="language-bash">按分数范围查询元素. 后可加withscores显示分数.后可加<span class="hljs-built_in">limit</span> 0 1查询前两名</span><br>zrangebyscore set1 200 500<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询指定分数范围内有几个元素</span><br>zcount set1 200 1000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询xiaoming在set1中的排名 从小到大</span><br>zrank set1 xiaoming<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询xiaoming在set1中的排名 从大到小</span><br>zrevrank set1 xiaoming<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除元素</span><br>zrem set1 xiaoming xiaohong<br><span class="hljs-meta prompt_">#</span><span class="language-bash">范围删除 删除前两名</span><br>zremrangebyscore set1 0 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">加值 给xiaoming加200分</span><br>zincrby set1 200 xiaoming<br><br></code></pre></td></tr></table></figure><h1 id="redis通用命令"><a href="#redis通用命令" class="headerlink" title="redis通用命令"></a>redis通用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查询所有key  *表示0或多个 ?表示1个</span><br>keys *<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询长度为4的key</span><br>keys ????<br><span class="hljs-meta prompt_">#</span><span class="language-bash">模糊查询 查询带name的key</span><br>keys *name*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除key 删除多个key</span><br>del key [key2 key3...]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断key是否存在 存在返回1否则返回0</span><br>exists key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重命名key 不常用</span><br>rname oldkey newkey<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">返回key的value的数据类型</span><br>type key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置key过期时间30秒,单位是秒,默认永久有效</span><br>expire key 30<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询key剩余有效期时间,-2表示过期,会删除key.若未设置超时返回-1</span><br>ttl key<br></code></pre></td></tr></table></figure><h1 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h1><blockquote><p>redis事务不是为了保证数据完整性,而是为了服务于批量操作.</p><p>事务中报错并不会回滚,而是正常顺序执行.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">开启事务</span><br>multi<br><span class="hljs-meta prompt_">#</span><span class="language-bash">提交事务</span><br>exec<br><span class="hljs-meta prompt_">#</span><span class="language-bash">回滚事务</span><br>discard<br></code></pre></td></tr></table></figure><h1 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h1><blockquote><p>redis默认所有增删改都是在内存中执行,因此提供了两种持久化策略</p></blockquote><ul><li><p>RDB</p><blockquote><p>默认策略.</p><p>相当于是照快照,保存的是一种状态,占用空间小.</p><p>符合要求时会随时启动保存操作,占用系统资源(内存),适合内存充裕的服务器.</p><p>大公司一般使用RDB策略.</p></blockquote><blockquote><p>持久化操作何时进行?</p><ul><li><p>服务器正常关闭时 .&#x2F;bin&#x2F;redis-cli shutdown</p></li><li><p>满足一定条件时.在redis.conf中可配置,但一般默认的即是最优配置.</p><p>默认配置如下:</p><p>Save 900 1       –&gt;每900秒(15分钟)有一个key变化,则照快照.</p><p>save 300 10     –&gt;每300秒(5分钟)有10个key变化,则照快照.</p><p>save 60 10000 –&gt;每60秒(1分钟)有10000个key变化,则照快照.</p></li></ul></blockquote></li><li><p>AOF</p><blockquote><ul><li><p>默认关闭.</p></li><li><p>原理:使用日志功能保存数据,aof只会保存导致key变化的命令.</p></li><li><p>优点:占用内存小;缺点:日志文件大,不适合灾备;恢复效率低.</p></li><li><p>适用内存小的服务器.</p></li><li><p>三种机制:</p><ul><li>everysec 每秒同步</li><li>always     每次修改同步</li><li>no             不同步(默认)</li></ul></li><li><p>配置:</p><ul><li><p>修改redis.conf文件:</p><p>Appendonly yes :开启aof</p><p>appendfsync always:选择策略</p><p>重启redis</p></li></ul></li></ul></blockquote></li></ul><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><blockquote><p>jedis是java连接操作redis的框架.</p><p>redis有什么命令,jedis就有对应的方法.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单实例使用示例</span><br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.0.20&quot;</span>,<span class="hljs-number">6379</span>);<br><br><br><span class="hljs-comment">//连接池</span><br><span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>config.setMaxTotal(<span class="hljs-number">50</span>);<span class="hljs-comment">//池中最大连接数</span><br>config.setMaxIdle(<span class="hljs-number">10</span>);<span class="hljs-comment">//池中空闲时保留的最大连接数</span><br><span class="hljs-type">JedisPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(config,<span class="hljs-string">&quot;192.168.0.20&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> pool.getResource();<br>jedis.getName(<span class="hljs-string">&quot;username&quot;</span>);<br>jedis.close();<span class="hljs-comment">//连接归还池中.</span><br></code></pre></td></tr></table></figure><h1 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h1><p>过期策略通常有以下三种:</p><ul><li><p><strong>定时过期</strong><br>每个设置过期时间的key都需要创建一个定时器,到过期时间就会立即清除。该策略可以立即清除过期的数据,<strong>对内存很友好;但是会占用大量的CPU资源去处理过期的数据</strong>,从而影响缓存的响应时间和吞吐量。</p></li><li><p><strong>惰性过期.</strong><br>只有当访问一个key时,才会判断该key是否已过期,过期则清除。<strong>该策略可以最大化地节省CPU资源,却对内存非常不友好</strong>。极端情况可能出现大量的过期key没有再次被访问,从而不会被清除,占用大量内存。</p></li><li><p><strong>定期过期</strong><br>每隔一定的时间,会扫描一定数量的数据库的expires字典中一定数量的key,并清除其中已过期的key。<strong>该策略是前两者的一个折中方案</strong>。通过调整定时扫描的时间间隔和每次扫描的限定耗时,可以在不同情况下使得CPU和内存资源达到最优的平衡效果。.</p></li></ul><h1 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h1><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时,怎么处理需要新写入且需要申请额外空间的数据.</p><p><strong>实际项目中设置内存淘汰策略: maxmemory-policy allkey-lru,移除最近最少使用的key.</strong></p><p><strong>过期策略默认是: maxmemory-policy noeviction</strong></p><p>redis.conf配置如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">MAXMEMORY POLICY: how Redis will <span class="hljs-keyword">select</span> what to remove when maxmemory</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">is reached. You can <span class="hljs-keyword">select</span> one from the following behaviors:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">最大内存策略:当到达最大使用内存时,你可以在下面5种行为中选择, Redis如何选择淘汰数据库键 当内存不足以容纳新写入数据时</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">volatile-lru -&gt; Evict using approximated LRU, only keys with an expire <span class="hljs-built_in">set</span>.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在设置了过期时间的键空间中,移除最近最少使用的key,这种情况一般是把redis既当缓存，又做持久化存储的时候才用。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除最近最少使用的key (推荐)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire <span class="hljs-built_in">set</span>.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">volatile-random -&gt; Remove a random key having an expire <span class="hljs-built_in">set</span>.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在设置了过期时间的键空间中，随机移除一个键，不推荐</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">allkeys-random -&gt; Remove a random key, any key.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接在键空间中随机移除一个键,弄啥叻</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在设置了过期时间的键空间中,有更早过期时间的key优先移除不推荐</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">noeviction -&gt; Don<span class="hljs-string">&#x27;t evict anything, just return an error on write operations.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">不做过键处理,只返回一个写操作错误。不推荐</span></span><br></code></pre></td></tr></table></figure><h1 id="Redis的主从复制架构"><a href="#Redis的主从复制架构" class="headerlink" title="Redis的主从复制架构."></a>Redis的主从复制架构.</h1><blockquote><p>主从复制,是指将一台Redis服务器的数据,复制到其他的Redis服务器。前者称为主节点(master),后者称为从节点(slave),<strong>数据的复制是单向的,只能由主节点到从节点。</strong></p><p>默认情况下,每台Redis服务器都是主节点;且一个主节点可以有多个从节点(或没有从节点),但一个从节点只能有一个主节点。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>当从数据库启动后,会向主数据库发送SYNC命令</li><li>主数据库接收到SYNC命令后开始在后台保存快照(RDB持久化) ,并将保存快照期间接收到的命令缓存进来.</li><li>快照完成后, Redis (Master)将快照文件和所有缓存的命令发送给从数据库</li><li>Redis (Slave)接收到RDB和缓存命令时,会开始载入快照文件并执行接收到的缓存的命令</li><li>后续,每当主数据库接收到写命令时,就会将命令同步给从数据库。所以3和4只会在初始化的时候执行</li></ol><h2 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h2><ol><li>备份容错(如果只有一个节点,会存在单点故障问题)</li><li>读写分离(读多写少的场景很适用) ,如果写操作很多,就得使用集群</li><li>从数据库持久化(可以将持久化的性能消耗移动到从节点)</li></ol><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改从节点的配置文件redis.conf</span><br>vim redis.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改主节点ip主节点port</span><br>slaveof masterip masterport<br></code></pre></td></tr></table></figure><h1 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h1><blockquote><p><strong>Sentinel (哨兵)是Redis的高可用性解决方案</strong>:由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器,以及这些主服务器属下的所有从服务器,并<strong>在被监视的主服务器进入下线状态时,自动将下线主服务器属下的某个从服务器升级为新的主服务器</strong>。</p></blockquote><h2 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h2><blockquote><p>每台服务器都要修改sentinel.conf文件配置哨兵.</p><p>一般哨兵的配置节点数不能是1个,最好是有几个主从节点,就配置几个哨兵。不能哨兵自己出现单点故障</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1 修改主节点配置文件</span><br>vim sentinel.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">15行 每台机器修改为自己对应的主机各</span><br>bind 127.0.0.1 192.168.1.1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改后台运行</span><br>daemonize yes<br><span class="hljs-meta prompt_">#</span><span class="language-bash">三台机器监控的主节点</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">monitor监控,master-name服务器名称可自定义,ip服务器ip,quorum为2时2代表只有两个或两个以上的哨兵认为主服务器不可用的时候,才会进行failover操作。</span><br>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果Redis是有密码的,需要指定密码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">定义服务的密码, mymaster服务名称, 123456是Redis服务器密码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2 把配置文件复制到其他节点服务器</span><br>scp sentinel.conf 从节点1ip:$PWD<br>scp sentinel.conf 从节点2ip:$PWD<br><span class="hljs-meta prompt_">#</span><span class="language-bash">分别修改从节点配置文件,绑定自己机器的ip</span><br>bind 从节点1ip<br>bind 从节点2ip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3 每台服务器启动哨兵服务</span><br>bin/redis-sentinel sentinel.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4 验证哨兵启动是否成功</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看Sentinel master的状态 连接哨兵 26379是哨兵端口</span><br>bin/redis-cli -h 从节点2ip -p 263794<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用ping命令检查哨兵是否工作,如果正常会返回PONG</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用命令info,可以查看主节点有几个从节点,及几个哨兵.</span><br></code></pre></td></tr></table></figure><h2 id="哨兵模式下的代码连接"><a href="#哨兵模式下的代码连接" class="headerlink" title="哨兵模式下的代码连接"></a>哨兵模式下的代码连接</h2><blockquote><p>哨兵模式下,代码中就不能配置主节点连接信息,因为主节点可能挂掉,所以应该配置哨兵的连接信息,并使用JedisSentinelPool来创建连接池。</p></blockquote><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id="docker搭建redis集群"><a href="#docker搭建redis集群" class="headerlink" title="docker搭建redis集群"></a>docker搭建redis集群</h2><h3 id="创建模板及脚本"><a href="#创建模板及脚本" class="headerlink" title="创建模板及脚本"></a>创建模板及脚本</h3><blockquote><p>在&#x2F;usr&#x2F;local&#x2F;server&#x2F;redis-cluster&#x2F;目录下创建一个模板,把可变参数传入;</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">集群各节点公共配置模板</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">端口</span> <br>port $&#123;PORT&#125; <br><span class="hljs-meta prompt_">#</span><span class="language-bash">非保护模式 若开启则每次都需输入密码</span> <br>protected-mode no <br><span class="hljs-meta prompt_">#</span><span class="language-bash">启用集群模式</span> <br>cluster-enabled yes c<br>luster-config-file nodes.conf <br><span class="hljs-meta prompt_">#</span><span class="language-bash">超时时间</span> <br>cluster-node-timeout 5000 <br><span class="hljs-meta prompt_">#</span><span class="language-bash">集群各节点IP地址</span> <br>cluster-announce-ip 192.168.2.110<br><span class="hljs-meta prompt_">#</span><span class="language-bash">集群节点映射端口</span> <br>cluster-announce-port $&#123;PORT&#125; <br><span class="hljs-meta prompt_">#</span><span class="language-bash">集群总线端口</span> <br>cluster-announce-bus-port 1$&#123;PORT&#125; <br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启aof持久化策略</span> <br>appendonly yes <br><span class="hljs-meta prompt_">#</span><span class="language-bash">后台运行</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">daemonize <span class="hljs-built_in">yes</span></span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">进程号存储</span> <br>pidfile /var/run/redis_$&#123;PORT&#125;.pid <br><span class="hljs-meta prompt_">#</span><span class="language-bash">集群加密</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">masterauth itheima</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">requirepass itheima</span><br></code></pre></td></tr></table></figure><blockquote><p>创建redis创建容器脚本:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/usr/local/server/redis-cluster下生成conf和data目标，并生成配置信息</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入信息</span><br>read -p &quot;请输入本机IP地址：&quot; Native_IP<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件夹</span><br>mkdir -p /usr/local/server/redis-cluster<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载redis配置模板</span><br>echo &quot;正在下载redis-cluster.tmpl配置模板，请手动下载redis-cluster.tmpl文件并复制到/usr/local/server/redis-cluster目录&quot;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件下载地址 请手动下载redis-cluster.tmpl文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">wget -P /usr/local/server/redis-cluster https://srv-file22.gofile.io/download/RoGvVk/redis-cluster.tmpl</span><br><br>echo &quot;正在创建redis-net网络&quot;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">c创建网络</span><br>docker network create redis-net<br><br>echo &quot;正在创建redis配置文件&quot;;<br>for port in `seq 7001 7006`; <br>do <br>  mkdir -p /usr/local/server/redis-cluster/$&#123;port&#125;/conf &amp;&amp; PORT=$&#123;port&#125; Native_IP=$&#123;Native_IP&#125;  envsubst &lt; /usr/local/server/redis-cluster/redis-cluster.tmpl &gt; /usr/local/server/redis-cluster/$&#123;port&#125;/conf/redis.conf &amp;&amp; mkdir -p /usr/local/server/redis-cluster/$&#123;port&#125;/data;<br>done<br>echo &quot;正在启动redis容器&quot;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建6个redis容器</span><br>for port in `seq 7001 7006`;<br>do<br>docker run -d -it -p $&#123;port&#125;:$&#123;port&#125; -p 1$&#123;port&#125;:1$&#123;port&#125; -v /usr/local/server/redis-cluster/$&#123;port&#125;/conf/redis.conf:/usr/local/etc/redis/redis.conf -v /usr/local/server/redis-cluster/$&#123;port&#125;/data:/data --privileged=true --restart always --name redis-$&#123;port&#125; --net redis-net --sysctl net.core.somaxconn=1024 redis redis-server /usr/local/etc/redis/redis.conf;<br>done<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找ip</span><br>for port in `seq 7001 7006`;<br>do<br>echo  -n &quot;$(docker inspect --format &#x27;&#123;&#123; (index .NetworkSettings.Networks &quot;redis-net&quot;).IPAddress &#125;&#125;&#x27; &quot;redis-$&#123;port&#125;&quot;)&quot;:$&#123;port&#125;&quot; &quot;;<br>done<br><span class="hljs-meta prompt_">#</span><span class="language-bash">换行</span><br>echo -e &quot;\n&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入信息</span><br>read -p &quot;请把输入要启动的docker容器名称，默认redis-7001：&quot; DOCKER_NAME<br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断是否为空</span><br>if [ ! $DOCKER_NAME ]; <br>then DOCKER_NAME=&#x27;redis-7001&#x27;; <br>fi<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器</span><br>docker exec -it redis-7001 /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除容器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">docker <span class="hljs-built_in">rm</span> -f $(docker ps -a |  grep <span class="hljs-string">&quot;redis-*&quot;</span>  | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><br></code></pre></td></tr></table></figure><blockquote><p>创建删除脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;正在停止所有redis容器&quot;;<br>docker stop $(docker ps -a |  grep &quot;redis-*&quot;  | awk &#x27;&#123;print $1&#125;&#x27;)<br>echo &quot;正在删除所有redis容器&quot;;<br>docker rm -f $(docker ps -a |  grep &quot;redis-*&quot;  | awk &#x27;&#123;print $1&#125;&#x27;)<br>echo &quot;正在删除redis-net网络&quot;;<br>docker network rm redis-net<br>echo &quot;正在删除/usr/local/server目录&quot;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf /usr/local/server</span><br>rm -rf 7001 7002 7003 7004 7005 7006<br><br></code></pre></td></tr></table></figure><h3 id="执行脚本-创建容器-创建集群"><a href="#执行脚本-创建容器-创建集群" class="headerlink" title="执行脚本,创建容器,创建集群"></a>执行脚本,创建容器,创建集群</h3><blockquote><p>执行redis.sh脚本,创建容器,创建集群:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1 执行脚本 创建容器</span><br>./redis.sh<br>[root@localhost redis-cluster]# ./redis.sh <br>请输入本机IP地址：192.168.2.110<br>正在下载redis-cluster.tmpl配置模板，请手动下载redis-cluster.tmpl文件并复制到/usr/local/server/redis-cluster目录<br>正在创建redis-net网络<br>2f24ef5a195f41775f7cd85d56218d6a7f34591f349c7c835d26b6c4ec9be019<br>正在创建redis配置文件<br>正在启动redis容器<br>df2ceae9f7e44a2ebe4727d06717db7f636693ef8a2ff42458ce7e3cf5738937<br>86e34c9145760f65394615e221ec886d9634775966cfd30bb33a41a2ba0b8963<br>fdda9586b0987c6d207b840290e5c21fc1ca624574404a3db744d54bdc074177<br>f0c725bc27884e319a7d16575dc919063a8999d2d6ab1a62773af7ce3aee227f<br>9a2373144fed4b48fb9a168cdc1ecb2fbbd3d5f08a8314580c6e4a5d2216ca32<br>1d0ed018e4c6ec2f6b292f668ac6d47658a183a7b5aa5839395eb098c2e46356<br>172.18.0.2:7001 172.18.0.3:7002 172.18.0.4:7003 172.18.0.5:7004 172.18.0.6:7005 172.18.0.7:7006 <br><span class="hljs-meta prompt_">#</span><span class="language-bash">按回车确认</span><br>请把输入要启动的docker容器名称，默认redis-7001：<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2 创建集群</span><br>cd /usr/local/bin/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入到任意一个安装好的redis节点的bin目录，里面有个脚本对象redis-cli，然后执行集群创建</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">--cluster-replicas 1 表示每个主节点有一个从节点</span><br>./redis-cli --cluster create 172.18.0.2:7001 172.18.0.3:7002 172.18.0.4:7003 172.18.0.5:7004 172.18.0.6:7005 172.18.0.7:7006 --cluster-replicas 1<br><br></code></pre></td></tr></table></figure><h3 id="验证集群是否创建成功"><a href="#验证集群是否创建成功" class="headerlink" title="验证集群是否创建成功"></a>验证集群是否创建成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入任意一个节点</span><br>cd /usr/local/bin<br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接任意节点</span><br> ./redis-cli -p 7001 -c<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">执行赋值操作,可看到进行了重定向操作:7001重定向到了7003,说明集群创建成功.</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">重定向原理:redis根据key值进行crc16%16384,计算出该key应该存到哪个节点的哈希槽中</span><br> 127.0.0.1:7001&gt; set username zhangsan<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [14315] located at 192.168.2.110:7003</span><br>OK<br>192.168.2.110:7003&gt; <br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以在节点中执行cluster nodes查看集群中节点信息,及哈希槽分配信息.</span><br>192.168.2.110:7003&gt; cluster nodes<br>76579cdead091c604e60e03454bab68ae69caa36 192.168.2.110:7004@17004 slave 52c2332c4271dba57d3be960d5feef2334b767e5 0 1611586728573 3 connected<br>b7dde8f6eb6f0385303e45bc54c588e8ea422acf 192.168.2.110:7005@17005 slave 8bddaceb3363a9675e48e6a76c4194c50cc545ac 0 1611586729588 1 connected<br>52c2332c4271dba57d3be960d5feef2334b767e5 192.168.2.110:7003@17003 myself,master - 0 1611586727000 3 connected 10923-16383<br>8bddaceb3363a9675e48e6a76c4194c50cc545ac 192.168.2.110:7001@17001 master - 0 1611586729000 1 connected 0-5460<br>4967d4c7cd28c8601eb9de843f1a1d449a343a7c 192.168.2.110:7006@17006 slave 21d108f7cb03af71f707fb314b730a76c33b8c74 0 1611586728000 2 connected<br>21d108f7cb03af71f707fb314b730a76c33b8c74 192.168.2.110:7002@17002 master - 0 1611586727561 2 connected 5461-10922<br>192.168.2.110:7003&gt; <br></code></pre></td></tr></table></figure><h2 id="创建集群遇到的问题"><a href="#创建集群遇到的问题" class="headerlink" title="创建集群遇到的问题"></a>创建集群遇到的问题</h2><h3 id="rpc-error-code-2-desc-oci-runtime-error-exec-failed-container-linux-go-247-starting-containe"><a href="#rpc-error-code-2-desc-oci-runtime-error-exec-failed-container-linux-go-247-starting-containe" class="headerlink" title="rpc error: code &#x3D; 2 desc &#x3D; oci runtime error: exec failed: container_linux.go:247: starting containe"></a>rpc error: code &#x3D; 2 desc &#x3D; oci runtime error: exec failed: container_linux.go:247: starting containe</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看我的docker 版本</span><br>docker --version<br>Docker version 1.13.1, build 07f3374/1.13.1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更新yum 即可修复 （如果yum的仓库连接不成功， 可以使用阿里仓库）</span><br> yum update -y<br></code></pre></td></tr></table></figure><h3 id="创建集群后-一直点点点等待连接"><a href="#创建集群后-一直点点点等待连接" class="headerlink" title="创建集群后,一直点点点等待连接"></a>创建集群后,一直点点点等待连接</h3><blockquote><p>相关端口未打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=7001/tcp --permanent   # 开放7001端口<br>firewall-cmd --zone=public --remove-port=17001/tcp --permanent  #关闭17001端口<br>firewall-cmd --reload   # 配置立即生效<br></code></pre></td></tr></table></figure></blockquote><h2 id="集群的扩容"><a href="#集群的扩容" class="headerlink" title="集群的扩容"></a>集群的扩容</h2><h3 id="通过启动两个节点7007-7008-一主一从"><a href="#通过启动两个节点7007-7008-一主一从" class="headerlink" title="通过启动两个节点7007 7008,一主一从"></a>通过启动两个节点7007 7008,一主一从</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">docker安装Redis这里编写了一个脚本，安装脚本 redis-port.sh 如下</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/usr/local/server/redis-cluster下生成conf和data目标，并生成配置信息</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">换行</span> <br>echo -e &quot;\n&quot; <br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入信息</span> <br>read -p &quot;请输入容器端口：&quot; DOCKER_PORT<br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入端口赋值</span><br>port=$DOCKER_PORT;<br>echo -e &quot;$port&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建配置文件</span><br>mkdir -p ./$&#123;port&#125;/conf &amp;&amp; PORT=$&#123;port&#125; envsubst &lt; ./redis-cluster.tmpl &gt; ./$&#123;port&#125;/conf/redis.conf &amp;&amp; mkdir -p ./$&#123;port&#125;/data;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建redis容器</span><br>docker run -d -it -p $&#123;port&#125;:$&#123;port&#125; -p 1$&#123;port&#125;:1$&#123;port&#125; -v /usr/local/server/redis-cluster/$&#123;port&#125;/conf/redis.conf:/usr/local/etc/redis/redis.conf -v /usr/local/server/redis-cluster/$&#123;port&#125;/data:/data --privileged=true --restart always --name redis-$&#123;port&#125; --net redis-net --sysctl net.core.somaxconn=1024 redis redis-server /usr/local/etc/redis/redis.conf;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找ip</span><br>echo -n &quot;启动$(docker inspect --format &#x27;&#123;&#123; (index .NetworkSettings.Networks &quot;redis- net&quot;).IPAddress &#125;&#125;&#x27; &quot;redis-$&#123;port&#125;&quot;)&quot;:$&#123;port&#125;&quot; 成功！&quot;;<br>echo -e &quot;\n&quot;<br></code></pre></td></tr></table></figure><h3 id="启动完成-把7007加进集群-并分配哈希槽"><a href="#启动完成-把7007加进集群-并分配哈希槽" class="headerlink" title="启动完成,把7007加进集群,并分配哈希槽."></a>启动完成,把7007加进集群,并分配哈希槽.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1 查看主节点信息 和从节点信息</span><br>[root@localhost bin]# ./redis-cli -p 7001 cluster nodes|grep master<br>52c2332c4271dba57d3be960d5feef2334b767e5 192.168.2.110:7003@17003 master - 0 1611589610513 3 connected 10923-16383<br>8bddaceb3363a9675e48e6a76c4194c50cc545ac 192.168.2.110:7001@17001 myself,master - 0 1611589610000 1 connected 0-5460<br>21d108f7cb03af71f707fb314b730a76c33b8c74 192.168.2.110:7002@17002 master - 0 1611589611527 2 connected 5461-10922<br>[root@localhost bin]# ./redis-cli -p 7001 cluster nodes|grep slave<br>4967d4c7cd28c8601eb9de843f1a1d449a343a7c 192.168.2.110:7006@17006 slave 21d108f7cb03af71f707fb314b730a76c33b8c74 0 1611589702041 2 connected<br>76579cdead091c604e60e03454bab68ae69caa36 192.168.2.110:7004@17004 slave 52c2332c4271dba57d3be960d5feef2334b767e5 0 1611589702000 3 connected<br>b7dde8f6eb6f0385303e45bc54c588e8ea422acf 192.168.2.110:7005@17005 slave 8bddaceb3363a9675e48e6a76c4194c50cc545ac 0 1611589701540 1 connected<br>[root@localhost bin]# <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2 把7007添加到集群中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令说明 将节点192.168.2.110:7007添加到节点192.168.2.110:7001所在的集群中</span><br>./redis-cli --cluster add-node 192.168.2.110:7007 192.168.2.110:7001<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3 再次查看主节点信息,已能看到7007节点,但是7007没有分配哈希槽</span><br>[root@localhost bin]# ./redis-cli -p 7001 cluster nodes|grep master<br>52c2332c4271dba57d3be960d5feef2334b767e5 192.168.2.110:7003@17003 master - 0 1611590983590 3 connected 10923-16383<br>8bddaceb3363a9675e48e6a76c4194c50cc545ac 192.168.2.110:7001@17001 myself,master - 0 1611590981000 1 connected 0-5460<br>21d108f7cb03af71f707fb314b730a76c33b8c74 192.168.2.110:7002@17002 master - 0 1611590983000 2 connected 5461-10922<br>eaf055c10e03a10e6493194bc3389d65919c3ecb 192.168.2.110:7007@17007 master - 0 1611590983590 0 connected<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4 重新分配哈希槽</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">我们将 7001,7002,7003 中的 100 个哈希槽挪给 7007 ，命令如下：</span><br>./redis-cli --cluster reshard 192.168.2.110:7001 --cluster-from 8bddaceb3363a9675e48e6a76c4194c50cc545ac,21d108f7cb03af71f707fb314b730a76c33b8c74,52c2332c4271dba57d3be960d5feef2334b767e5 --cluster-to eaf055c10e03a10e6493194bc3389d65919c3ecb --cluster-slots 100<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数说明</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">--cluster-from：表示slot目前所在的节点的node ID，多个ID用逗号分隔</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">--cluster-to：表示需要新分配节点的node ID</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">--cluster-slots：分配的slot数量</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5 再次查看主节点信息,哈希槽已成功分配给7007</span><br>[root@localhost bin]# ./redis-cli -p 7001 cluster nodes|grep master<br>52c2332c4271dba57d3be960d5feef2334b767e5 192.168.2.110:7003@17003 master - 0 1611591101000 3 connected 10956-16383<br>8bddaceb3363a9675e48e6a76c4194c50cc545ac 192.168.2.110:7001@17001 myself,master - 0 1611591102000 1 connected 33-5460<br>21d108f7cb03af71f707fb314b730a76c33b8c74 192.168.2.110:7002@17002 master - 0 1611591101598 2 connected 5495-10922<br>eaf055c10e03a10e6493194bc3389d65919c3ecb 192.168.2.110:7007@17007 master - 0 1611591102514 7 connected 0-32 5461-5494 10923-10955<br>[root@localhost bin]# <br></code></pre></td></tr></table></figure><h3 id="把7008加进7007的从节点"><a href="#把7008加进7007的从节点" class="headerlink" title="把7008加进7007的从节点"></a>把7008加进7007的从节点</h3><blockquote><p>我们需要往集群中给 7007 节点添加一个从节点 7008 ，添加从节点的主要目的是提高高可用，防止主节点宕机后该节点无法提供服务。添加从节点命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">./redis-cli --cluster add-node 192.168.2.110:7008 192.168.2.110:7007 --cluster-slave --cluster-master-id eaf055c10e03a10e6493194bc3389d65919c3ecb</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-comment">#参数说明</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-comment">#add-node: 后面的分别跟着新加入的slave和slave对应的master</span></span> <br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-comment">#cluster-slave：表示加入的是slave节点</span></span> <br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-comment">#--cluster-master-id：表示slave对应的master的node ID</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-comment">#再次查看从节点信息,7008已加入</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">[root@localhost bin]<span class="hljs-comment"># ./redis-cli -p 7001 cluster nodes|grep slavebdcc8f4553c05fe408a75045ca910b5156d5a11c 192.168.2.110:7008@17008 slave eaf055c10e03a10e6493194bc3389d65919c3ecb 0 1611591482000 7 connected</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">4967d4c7cd28c8601eb9de843f1a1d449a343a7c 192.168.2.110:7006@17006 slave 21d108f7cb03af71f707fb314b730a76c33b8c74 0 1611591481472 2 connected</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">76579cdead091c604e60e03454bab68ae69caa36 192.168.2.110:7004@17004 slave 52c2332c4271dba57d3be960d5feef2334b767e5 0 1611591482181 3 connected</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">b7dde8f6eb6f0385303e45bc54c588e8ea422acf 192.168.2.110:7005@17005 slave 8bddaceb3363a9675e48e6a76c4194c50cc545ac 0 1611591482484 1 connected</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">[root@localhost bin]<span class="hljs-comment">#</span></span> <br></code></pre></td></tr></table></figure></blockquote><h2 id="集群的收容"><a href="#集群的收容" class="headerlink" title="集群的收容"></a>集群的收容</h2><h3 id="移除从节点"><a href="#移除从节点" class="headerlink" title="移除从节点"></a><strong>移除从节点</strong></h3><p>移除 7007 的从节点 7008 ，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看从节点</span><br>root@579a0ecdc975:/usr/local/bin# ./redis-cli -p 7001 cluster nodes | grep slave<br>b7dde8f6eb6f0385303e45bc54c588e8ea422acf 192.168.2.110:7005@17005 slave,fail? 8bddaceb3363a9675e48e6a76c4194c50cc545ac 1611969411737 1611969410827 1 connected<br>bdcc8f4553c05fe408a75045ca910b5156d5a11c 192.168.2.110:7008@17008 slave,fail? eaf055c10e03a10e6493194bc3389d65919c3ecb 1611969413356 1611969410827 7 connected<br>4967d4c7cd28c8601eb9de843f1a1d449a343a7c 192.168.2.110:7006@17006 slave,fail? 21d108f7cb03af71f707fb314b730a76c33b8c74 1611969412748 1611969410827 2 connected<br>76579cdead091c604e60e03454bab68ae69caa36 192.168.2.110:7004@17004 slave,fail? 52c2332c4271dba57d3be960d5feef2334b767e5 1611969413356 1611969410827 3 connected<br>root@579a0ecdc975:/usr/local/bin# <br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除7008</span><br>[root@localhost bin]# ./redis-cli --cluster del-node 192.168.2.110:7008 bdcc8f4553c05fe408a75045ca910b5156d5a11c<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Removing node bdcc8f4553c05fe408a75045ca910b5156d5a11c from cluster 192.168.2.110:7008</span><br>Could not connect to Redis at 192.168.2.110:7008: No route to host<br>[root@localhost bin]# <br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">del-node:删除节点，后面跟着slave节点的 ip:port 和node ID<br></code></pre></td></tr></table></figure><p>删除后，我们再来查看集群节点，此时再无7008节点。</p><p><img src="https://i.loli.net/2021/01/30/oxvBH9EgWXTjSGA.png" alt="image-20210130095713026"></p><h3 id="迁移Master的Slot"><a href="#迁移Master的Slot" class="headerlink" title="迁移Master的Slot"></a>迁移Master的Slot</h3><p>我们需要将 7007 节点的哈希槽迁移到 7001,7002,7003 节点上，仍然用上面用过的 redis-cli –cluster reshard</p><p>语法，命令如下：</p><p>第1次迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-cli --cluster reshard 192.168.2.114:7007 --cluster-from 443096af2ff8c1e89f1160faed4f6a02235822a7 --cluster-to 80a69bb8af3737bce2913b2952b4456430a89eb3 --cluster-slots 33 --cluster-yes<br></code></pre></td></tr></table></figure><p>查看集群节点：</p><p><img src="https://i.loli.net/2021/01/30/iIGRsyC3n6l9w24.png" alt="image-20210130100001634"></p><p>第2次迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-cli --cluster reshard 192.168.211.141:7007 --cluster-from <br>443096af2ff8c1e89f1160faed4f6a02235822a7 --cluster-to <br>c9687b2ebec8b99ee14fcbb885b5c3439c58827f --cluster-slots 34 --cluster-yes <br></code></pre></td></tr></table></figure><p>第3次迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-cli --cluster reshard 192.168.211.141:7007 --cluster-from <br>443096af2ff8c1e89f1160faed4f6a02235822a7 --cluster-to <br>612e4af8eae48426938ce65d12a7d7376b0b37e3 --cluster-slots 33 --cluster-yes<br></code></pre></td></tr></table></figure><p>集群状态查询：</p><p><img src="https://i.loli.net/2021/01/30/daySTQE9livjgXJ.png" alt="image-20210130100113825"></p><h3 id="删除7007主节点"><a href="#删除7007主节点" class="headerlink" title="删除7007主节点"></a>删除7007主节点</h3><p>删除节点命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-cli --cluster del-node 192.168.211.141:7007 443096af2ff8c1e89f1160faed4f6a02235822a7<br></code></pre></td></tr></table></figure><p>集群节点查看：<img src="https://i.loli.net/2021/01/30/sLbq7CDHG39WI1A.png" alt="image-20210130100155133"></p><h1 id="集群面试题"><a href="#集群面试题" class="headerlink" title="集群面试题"></a>集群面试题</h1><ul><li><p>问题一: Redis的多数据库机制,了解多少?</p><blockquote><p>正常版: Redis支持多个数据库,并且每个数据库的数据是隔离的不能共享,<strong>单机</strong>下的redis可以支持16个数据库(dbo ~db15) ;<br>高调版:在Redis Cluster集群架构下只有一个数据库空间,即dbo,因此,我们没有使用Redis的多数据库功能！</p></blockquote></li><li><p>问题二:懂Redis的批量操作么?</p><blockquote><p>正常版:懂一点。比如mset, mget操作等, blabla…<br>高调版:在生产上采用的是Redis Cluster集群架构,不同的key会划分到不同的slot中,因此直接使用mset或者mget等操作是行不通的。</p></blockquote></li><li><p>问题三: Redis集群机制中,你觉得有什么不足的地方吗?.</p><blockquote><p>正常版:不知道<br>高调版:假设有一个key,对应的value是Hash类型的。如果Hash对象非常大,是不支持映射到不同节点的!只能映射到集群中的一个节点上!还有就是做批量操作比较麻烦!</p></blockquote></li><li><p>问题四:在Redis集群模式下,如何进行批量操作?</p><blockquote><p>正常版：不知道<br>高调版：如果执行的key数是比较少,就不用mget了,就用串行get操作。如果真的需要执行的key很多,就使用Hashtag保证这些key映射到同一台redis节点上。简单来说语法如下:</p></blockquote><blockquote><p> 对于key为(foo}.student1, {foo}.student2, {foo}.student3,这类key一定是在同一个redis节点上。因为key中”{}”之间的字符串就是当前key的hash tags,只有key中{}中的部分才被用来做hash,因此计算出来的redis节点一定是同一个!</p></blockquote></li><li><p>问题五:懂Redis事务么?.</p><blockquote><p>正常版: Redis事务是一些列redis命令的集合,blabla..<br>高调版：在生产上采用的是Redis Cluster集群架构，不同的key是有可能分配在不同的Redis节点上的,在这种情况下Redis的事务机制是不生效的。其次，Redis事务不支持回滚操作,简直是鸡肋,基本不用!</p></blockquote></li></ul><h1 id="缓存穿透-缓存击穿-缓存雪崩"><a href="#缓存穿透-缓存击穿-缓存雪崩" class="headerlink" title="缓存穿透 缓存击穿 缓存雪崩"></a>缓存穿透 缓存击穿 缓存雪崩</h1><p><strong>缓存穿透</strong>: key对应的数据在数据源并不存在,每次针对此key的请求从缓存获取不到,请求都会到数据源,从而可能压垮数据源。<br>                <strong>一言以蔽之:查询Key,缓存和数据源都没有,频繁查询数据源</strong></p><blockquote><p>比如用一个不存在的用户id获取用户信息,无论论缓存还是数据库都没有,若黑客利用此漏洞进行攻击可能压垮数据库。<br>解决缓存穿透的方案主要有两种:.<br><strong>方案一:当查询不存在时,也将结果保存在缓存中</strong>。但是这可能会存在一种问题:大量没有查询结果的请求保存在缓存中,这时我们就可以将这些请求的key设置得更短一些; .<br><strong>方案二:<strong>提前过滤掉不合法的请求,可以使用</strong>Redis中布隆过滤器</strong>(快速过滤不存在的key,但是对于已经存在的key无法准确判断是否存在);</p></blockquote><p><strong>缓存击穿</strong>: key对应的数据存在,但在redis中过期,此时若有大量并发请求过来,这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存,这个时候大并发的请求可能会瞬间把后端DB压垮</p><blockquote><p>​<strong>一言以蔽之:查询Key,缓存过期,大量并发,频繁查询数据派</strong></p><p>业界比较常用的做法:<strong>使用互斥锁</strong>。简单地来说,就是在缓存失效的时候(判断拿出来的值为空) ,不是立即去load db (查询数据库) ,而是先使用缓存工具的某些带成功操作返回值的操作(比如Redis的SETNX或者Memcache的ADD)去set一个mutex key,就是只让一个线程构建缓存,其他线程等待构建缓存的线程执行完,重新从缓存获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">string <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> redis.get(key);<br><span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-comment">//如果key不存在,则设置为1</span><br><span class="hljs-keyword">if</span> (redis.setnx(key_mutex, <span class="hljs-string">&quot;1&quot;</span>)) &#123; <br><span class="hljs-comment">//设置key的过期时间为3分钟</span><br>redis.expire(key_mutex, <span class="hljs-number">3</span> * <span class="hljs-number">60</span>) ;<br><span class="hljs-comment">//从db中加载数据，但注意：只有一个线程能进入到这里,其他线程访问的时候已有课key_mutex</span><br>value =db.get(key); <br><span class="hljs-comment">//从数据库中加载成功,则设置对应的数据</span><br>redis.set(key, value);<br>redis.delete(key_mutex); <br>  &#125; <span class="hljs-keyword">else</span> &#123; <br><span class="hljs-comment">//其他线程休息50毫秒后重试</span><br>    Thread.sleep (<span class="hljs-number">50</span>);<br>get(key);<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p><strong>缓存雪崩</strong>:当缓存服务器重启或者大量缓存集中在某一个时间段失效,这样在失效的时候,也会给后端系统(比如DB)带来很大压力。</p><blockquote><p><strong>一言以蔽之:缓存不可用(服务器重启或缓存失效) ,频繁查询数据源</strong><br>与缓存击穿的区别在于这里针对很多key缓存,前者则是某一个key。</p><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕!大多数系统设计者考虑用<strong>加锁或者队列</strong>的方式保证来保证不会有大量的线程对数据库一次性进行读写,从而避免失效时大量的并发请求落到底层存储系统上。还有一个简单方案就时**将缓存失效时间分散开,**比如可以在原有的失效时间基础上增加一个随机值,比如1-5分钟随机,这样每一个缓存的过期时间的重复率就会降低,就很难引发集体失效的事件。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句性能提升</title>
      <link href="/2021/01/02/SQL%E4%BC%98%E5%8C%96/"/>
      <url>/2021/01/02/SQL%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1.数据准备"></a>1.数据准备</h1><blockquote><p>1). 准备tb_sku表, 导入数据 - 数据1000w</p><p>2). 准备tb_seller表,导入数据 - 数据12条 </p></blockquote><h1 id="2-慢查询分析"><a href="#2-慢查询分析" class="headerlink" title="2.慢查询分析"></a>2.慢查询分析</h1><h2 id="2-1-show-profiles"><a href="#2-1-show-profiles" class="headerlink" title="2.1.show profiles"></a>2.1.show profiles</h2><blockquote><p><strong>show profiles 是mysql提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优测量,show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</strong></p></blockquote><p>通过 have_profiling 参数，能够看到当前MySQL<strong>是否支持profile</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@have_profiling</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@have_profiling</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> YES              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在<strong>Session级别开启profiling</strong>： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@profiling</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@profiling</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>           <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> profiling<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>开启profiling 开关；<br></code></pre></td></tr></table></figure><p><strong>通过profile，我们能够更清楚地了解SQL执行的过程。</strong><br>首先，我们可以执行一系列的操作:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases; <br>use db01; <br><span class="hljs-keyword">show</span> tables; <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_ksu <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span>; <br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_ksu;<br></code></pre></td></tr></table></figure><p>执行完上述命令之后，再执行<code>show profiles</code> 指令， 来查看SQL语句执行的耗时：<br>通过<code>show profile for query query_id</code> 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> profiles;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+---------------------------------+</span><br><span class="hljs-operator">|</span> Query_ID <span class="hljs-operator">|</span> Duration   <span class="hljs-operator">|</span> Query                           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+---------------------------------+</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00085725</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> databases                  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00020975</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> DATABASE()               <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00121950</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> tables                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00041000</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_bill <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">5</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">5</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00097875</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_bill     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+---------------------------------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> profile <span class="hljs-keyword">for</span> query <span class="hljs-number">4</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+</span><br><span class="hljs-operator">|</span> Status                         <span class="hljs-operator">|</span> Duration <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000094</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Executing hook <span class="hljs-keyword">on</span> transaction  <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000010</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> checking permissions           <span class="hljs-operator">|</span> <span class="hljs-number">0.000008</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Opening tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000042</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> init                           <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">System</span> lock                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000013</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> optimizing                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000012</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> statistics                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000052</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> preparing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> executing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000046</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">end</span>                            <span class="hljs-operator">|</span> <span class="hljs-number">0.000008</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> query <span class="hljs-keyword">end</span>                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000006</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> waiting <span class="hljs-keyword">for</span> handler <span class="hljs-keyword">commit</span>     <span class="hljs-operator">|</span> <span class="hljs-number">0.000011</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> closing tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000040</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> freeing items                  <span class="hljs-operator">|</span> <span class="hljs-number">0.000021</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cleaning up                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000013</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+</span><br><span class="hljs-number">17</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><blockquote><p>TIP ：</p><p>Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。 </p><p>由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。 </p><p>MySQL 的查询优化器可能会对查询进行优化，使得某些步骤（如 <code>Sending data</code>）在实际执行过程中被合并或省略，因此在 <code>SHOW PROFILES</code> 的结果中可能看不到这些步骤。</p></blockquote><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> profile cpu <span class="hljs-keyword">for</span> query <span class="hljs-number">7</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+----------+------------+</span><br><span class="hljs-operator">|</span> Status                         <span class="hljs-operator">|</span> Duration <span class="hljs-operator">|</span> CPU_user <span class="hljs-operator">|</span> CPU_system <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+----------+------------+</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000081</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000074</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Executing hook <span class="hljs-keyword">on</span> transaction  <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> starting                       <span class="hljs-operator">|</span> <span class="hljs-number">0.000010</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> checking permissions           <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Opening tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000032</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000032</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> init                           <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">System</span> lock                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000011</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000010</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> optimizing                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000007</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> statistics                     <span class="hljs-operator">|</span> <span class="hljs-number">0.000016</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000016</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> preparing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> executing                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000070</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000070</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">end</span>                            <span class="hljs-operator">|</span> <span class="hljs-number">0.000006</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000005</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> query <span class="hljs-keyword">end</span>                      <span class="hljs-operator">|</span> <span class="hljs-number">0.000005</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000006</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> waiting <span class="hljs-keyword">for</span> handler <span class="hljs-keyword">commit</span>     <span class="hljs-operator">|</span> <span class="hljs-number">0.000011</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000025</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> closing tables                 <span class="hljs-operator">|</span> <span class="hljs-number">0.000023</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000009</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> freeing items                  <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000019</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cleaning up                    <span class="hljs-operator">|</span> <span class="hljs-number">0.000012</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.000012</span> <span class="hljs-operator">|</span>   <span class="hljs-number">0.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+----------+----------+------------+</span><br><span class="hljs-number">17</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h2 id="2-2-慢查询日志"><a href="#2-2-慢查询日志" class="headerlink" title="2.2 慢查询日志"></a>2.2 慢查询日志</h2><blockquote><p><strong>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于</strong><br><strong>min_examined_row_limit 的所有的SQL语句的日志。long_query_time 默认为 10 秒，最小</strong><br><strong>为 0， 精度可以到微秒。</strong></p></blockquote><h3 id="2-2-1-文件位置和格式"><a href="#2-2-1-文件位置和格式" class="headerlink" title="2.2.1 文件位置和格式"></a>2.2.1 文件位置和格式</h3><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 该参数用来控制慢查询日志是否开启， 可取值： <span class="hljs-number">1</span> 和 <span class="hljs-number">0</span> ， <span class="hljs-number">1</span> 代表开启， <span class="hljs-number">0</span> 代表关闭 <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@slow_query_log</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@slow_query_log</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span>                <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br># 开启慢查询日志<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> slow_query_log<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br># 该参数用来指定慢查询日志的文件名 <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@slow_query_log_file</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@slow_query_log_file</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span><span class="hljs-number">262222839</span>fb5<span class="hljs-operator">-</span>slow.log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br># 该选项用来配置查询的时间限制， 超过这个时间将认为是慢查询， 将进行日志记录， 默认<span class="hljs-number">10</span>s <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@long_query_time</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@long_query_time</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span>         <span class="hljs-number">10.000000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br># 设置慢查询时间限制<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> long_query_time<span class="hljs-operator">=</span><span class="hljs-number">11</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br></code></pre></td></tr></table></figure><h3 id="2-2-2-日志的读取"><a href="#2-2-2-日志的读取" class="headerlink" title="2.2.2 日志的读取"></a>2.2.2 日志的读取</h3><p>慢查询日志记录的格式也是纯文本，可以被直接读取。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000030074&#x27;</span>\G;  <span class="hljs-comment">-- \G表示换行显示数据</span><br><span class="hljs-comment">-- 该SQL语句 ， 执行时长为 24.28s ，超过10s ， 所以会记录在慢查询日志文件中。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%HuaWei手机Meta87384 Pro%&#x27;</span>\G;<br></code></pre></td></tr></table></figure><p>3） 查看慢查询日志文件</p><p>直接通过cat 指令查询该日志文件 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash-4.4# cat /var/lib/mysql/262222839fb5-slow.log<br>/usr/sbin/mysqld, Version: 8.2.0 (MySQL Community Server - GPL). started with:<br>Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock<br>Time                 Id Command    Argument<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/uov1YTpgXFAW7bx.png" alt="image-20210127233051622"></p><p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的<code>mysqldumpslow</code> 工具， 来对慢查询日志进行分类汇总。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/FPJBk3ZUbVK9Eli.png" alt="image-20210127233130483"></p><h1 id="3-explain执行计划"><a href="#3-explain执行计划" class="headerlink" title="3. explain执行计划"></a>3. explain执行计划</h1><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 <code>EXPLAIN</code>或者 DESC命令获取 <code>MySQL</code>如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000030074&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/mBeIr3fAGSPZLqt.png" alt="image-20210127233204260"></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>Select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td><strong>type</strong></td><td><strong>表示表的连接类型，性能由好到差的连接类型为( system —&gt; const—–&gt; eq_ref ——&gt; ref ——-&gt; ref_or_null—-&gt;index_merge —&gt; index_subquery —–&gt; range —–&gt;index ——&gt; all )</strong></td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td><strong>key</strong></td><td><strong>表示实际使用的索引</strong></td></tr><tr><td>Key_len</td><td>索引字段的长度</td></tr><tr><td><strong>rows</strong></td><td><strong>扫描行的数量</strong></td></tr><tr><td>Extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h2 id="3-1-id"><a href="#3-1-id" class="headerlink" title="3.1 id"></a>3.1 id</h2><ul><li>字段是 select查询的序列号是一组数字表示的是查询中执行select子句或者是操作表的顺序。</li><li>id 相同表示加载表的顺序是从上到下。</li><li>id 不同id值越大，优先级越高，越先被执行。</li><li>id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</li></ul><h2 id="3-2-select-type"><a href="#3-2-select-type" class="headerlink" title="3.2 select_type"></a>3.2 select_type</h2><p>表示 SELECT 的类型，常见的取值，如下表所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240328173303966.png" alt="image-20240328173303966"></p><h2 id="3-3-type"><a href="#3-3-type" class="headerlink" title="3.3 type"></a>3.3 type</h2><p>显示的是访问类型，是较为重要的一个指标，可取值为：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021012123.png" alt="image-20240402101255999"></p><p>一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref</p><h2 id="3-4-key"><a href="#3-4-key" class="headerlink" title="3.4  key"></a>3.4  key</h2><ul><li>possible_keys : 显示可能应用在这张表的索引， 一个或多个。</li><li>key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</li><li>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下长度越短越好 。</li></ul><h2 id="3-5-rows"><a href="#3-5-rows" class="headerlink" title="3.5 rows"></a>3.5 rows</h2><p>扫描行的数量。</p><h2 id="3-6-filtered"><a href="#3-6-filtered" class="headerlink" title="3.6 filtered"></a>3.6 filtered</h2><p>这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例。</p><h1 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h1><h2 id="4-1-概述及作用"><a href="#4-1-概述及作用" class="headerlink" title="4.1 概述及作用"></a>4.1 概述及作用</h2><p>MySQL官方对索引的定义为：<strong>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。</strong>在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p><strong>优势：</strong></p><ol><li>类似于书籍的目录索引，<strong>提高数据检索的效率，降低数据库的IO成本</strong>。</li><li><strong>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</strong>。</li></ol><p><strong>劣势：</strong></p><ol><li>实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以<strong>索引列也是要占用空间的</strong>。</li><li>虽然索引大大提高了查询效率，同时却也<strong>降低更新表的速度</strong>，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li></ol><h2 id="4-2-索引结构"><a href="#4-2-索引结构" class="headerlink" title="4.2 索引结构"></a>4.2 索引结构</h2><p>MySQL数据库中默认的存储引擎InnoDB的索引结构为B+树，而根据叶子节点的内存存储不同，<strong>索引类型分为主键索引和非主键索引</strong>。</p><p>主键索引的叶子节点存储的是整行数据，在InnoDB中主键索引页被称为聚簇索引。其结构如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021017134.png" alt="image-20210127233731435"></p><p>而非主键索引的叶子节点内容存储的是主键的值，在InnoDB中，非主键索引也被称为二级索引或辅助索引。其结构如下：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021020938.png" alt="image-20210102114005619"></p><h2 id="4-3-验证索引"><a href="#4-3-验证索引" class="headerlink" title="4.3 验证索引"></a>4.3 验证索引</h2><p>在tb_sku表中一共存在1000w的记录 ;</p><p>A. 根据主键ID查询速度很快</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021022295.png" alt="image-20210102114138923"></p><p>B. 根据name查询速度变慢</p><p>C.对name字段建立索引再次查询,速度很快.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_sku_name <span class="hljs-keyword">on</span> tb_sku(name);<br></code></pre></td></tr></table></figure><h2 id="4-4-索引使用规则"><a href="#4-4-索引使用规则" class="headerlink" title="4.4 索引使用规则"></a>4.4 索引使用规则</h2><p>没有建立索引之前, 执行计划如下</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021022555.png" alt="image-20210102114309709.png"></p><p>建立索引 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_seller_name_status_address <span class="hljs-keyword">on</span> tb_seller(name, status, address);<br></code></pre></td></tr></table></figure><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h3><p>对索引中所有列都指定具体值。</p><p>该情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;小米科技&#x27;</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;北京市&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2021/01/27/5wTQco1LvV7FEan.png" alt="image-20210102114412770"></h4><h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><p>如果索引了多列，要遵守最左前缀法则。<strong>指的是查询从索引的最左前列开始，并且不跳过索引中的列</strong>(并非要求索引第一字段必须在第一位,出现即可.)。</p><ul><li>匹配最左前缀法则，走索引：</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021024524.png" alt="image-20210102114537793"></p><ul><li>违法最左前缀法则 ， 索引失效:</li></ul><p><img src="https://i.loli.net/2021/01/27/HpVSzP5ctUOxX4C.png" alt="image-20210102114555809"></p><ul><li>如果符合最左前缀法则，但是出现跳跃某一列，只有最左列索引生效：</li></ul><p><img src="https://i.loli.net/2021/01/27/RcKYmrQLfxqtUDT.png" alt="image-20210102114620872"></p><h3 id="范围查询右边的列，不能使用索引"><a href="#范围查询右边的列，不能使用索引" class="headerlink" title="范围查询右边的列，不能使用索引"></a>范围查询右边的列，不能使用索引</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021026514.png" alt="image-20210102114702779"></p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><h3 id="在索引列上进行运算操作索引将失效"><a href="#在索引列上进行运算操作索引将失效" class="headerlink" title="在索引列上进行运算操作索引将失效"></a>在索引列上进行运算操作索引将失效</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021027956.png" alt="image-20210102114742534"></p><h3 id="字符串不加单引号造成索引失效"><a href="#字符串不加单引号造成索引失效" class="headerlink" title="字符串不加单引号造成索引失效"></a>字符串不加单引号造成索引失效</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021027308.png" alt="image-20210102114759976"></p><p>由于，在查询时，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><h3 id="使用or使索引失效"><a href="#使用or使索引失效" class="headerlink" title="使用or使索引失效"></a>使用or使索引失效</h3><p><strong>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</strong></p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;黑马程序员&#x27;</span> <span class="hljs-keyword">or</span> createtime <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021028901.png" alt="image-20210102114914453"></p><h3 id="以-开头的Like模糊查询索引失效"><a href="#以-开头的Like模糊查询索引失效" class="headerlink" title="以%开头的Like模糊查询索引失效"></a>以%开头的Like模糊查询索引失效</h3><p><strong>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</strong></p><p><img src="https://i.loli.net/2021/01/27/5eQYGLuVTdZ3bKJ.png" alt="image-20210102114937160"></p><ul><li><p>解决方案 ：</p><p>通过覆盖索引来解决</p></li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021028374.png" alt="image-20210102115000614"></p><h3 id="如果MySQL评估使用索引比全表更慢则不使用索引。"><a href="#如果MySQL评估使用索引比全表更慢则不使用索引。" class="headerlink" title="如果MySQL评估使用索引比全表更慢则不使用索引。"></a>如果MySQL评估使用索引比全表更慢则不使用索引。</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029654.png" alt="image-20210102115253554"></p><h3 id="is-NULL-is-NOT-NULL-有时索引失效。"><a href="#is-NULL-is-NOT-NULL-有时索引失效。" class="headerlink" title="is NULL, is NOT NULL 有时索引失效。"></a>is NULL, is NOT NULL 有时索引失效。</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029056.png" alt="image-20210102115311582"></p><h3 id="in-not-in-有时索引失效"><a href="#in-not-in-有时索引失效" class="headerlink" title="in , not in 有时索引失效"></a>in , not in 有时索引失效</h3><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029669.png" alt="image-20210102115328409"></p><h3 id="尽量使用覆盖索引避免select"><a href="#尽量使用覆盖索引避免select" class="headerlink" title="尽量使用覆盖索引避免select *"></a>尽量使用覆盖索引避免select *</h3><p>尽量使用<strong>覆盖索引</strong>（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021029274.png" alt="image-20210102115353112"></p><p>如果查询列，超出索引列，也会降低性能。</p><blockquote><p>TIP :</p><p>using index ：使用覆盖索引的时候就会出现 </p><p>using where：在查找使用索引的情况下，需要回表去查询所需的数据 </p><p>using index condition：查找使用了索引，但是需要回表查询数据 </p><p>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据 </p></blockquote><h2 id="4-5-索引设计原则"><a href="#4-5-索引设计原则" class="headerlink" title="4.5 索引设计原则"></a>4.5 索引设计原则</h2><ul><li><p>对查询频次较高，且数据量比较大的表建立索引。</p></li><li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I&#x2F;O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I&#x2F;O效率。</p></li><li><p>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p></li></ul><h1 id="5-常见的SQL优化"><a href="#5-常见的SQL优化" class="headerlink" title="5. 常见的SQL优化"></a>5. 常见的SQL优化</h1><h2 id="5-1-环境准备"><a href="#5-1-环境准备" class="headerlink" title="5.1 环境准备"></a>5.1 环境准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `emp` ( <br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT, <br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, `age` <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `salary` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;2300&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;Jerry&#x27;</span>,<span class="hljs-string">&#x27;30&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;Luci&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;2800&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;Jay&#x27;</span>,<span class="hljs-string">&#x27;36&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;Tom2&#x27;</span>,<span class="hljs-string">&#x27;21&#x27;</span>,<span class="hljs-string">&#x27;2200&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;Jerry2&#x27;</span>,<span class="hljs-string">&#x27;31&#x27;</span>,<span class="hljs-string">&#x27;3300&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;Luci2&#x27;</span>,<span class="hljs-string">&#x27;26&#x27;</span>,<span class="hljs-string">&#x27;2700&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;Jay2&#x27;</span>,<span class="hljs-string">&#x27;33&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;Tom3&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-string">&#x27;2400&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-string">&#x27;Jerry3&#x27;</span>,<span class="hljs-string">&#x27;32&#x27;</span>,<span class="hljs-string">&#x27;3100&#x27;</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;Luci3&#x27;</span>,<span class="hljs-string">&#x27;26&#x27;</span>,<span class="hljs-string">&#x27;2900&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-2-order-by优化"><a href="#5-2-order-by优化" class="headerlink" title="5.2 order by优化"></a>5.2 order by优化</h2><h3 id="5-2-1-两种排序方式"><a href="#5-2-1-两种排序方式" class="headerlink" title="5.2.1 两种排序方式"></a>5.2.1 两种排序方式</h3><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021030509.png" alt="image-20210102115948644"></p><p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021030574.png" alt="image-20210102120019132"></p><p>多字段排序</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021030818.png" alt="image-20210102120101808"></p><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。</p><p>where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h3 id="5-2-2-Filesort-的优化"><a href="#5-2-2-Filesort-的优化" class="headerlink" title="5.2.2 Filesort 的优化"></a>5.2.2 Filesort 的优化</h3><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 现在采用的是一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size 和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021031148.png" alt="image-20210102120229796"></p><h2 id="5-3-group-by优化"><a href="#5-3-group-by优化" class="headerlink" title="5.3 group by优化"></a>5.3 group by优化</h2><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> age,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> age;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021032297.png" alt="image-20210102120357530"></p><p>优化后:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> age,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021032507.png" alt="image-20210102120425871"></p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order by null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index idx_emp_age_salary <span class="hljs-keyword">on</span> emp(age,salary);<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021032752.png" alt="image-20210102120521652"></p><h2 id="5-4-limit优化"><a href="#5-4-limit优化" class="headerlink" title="5.4 limit优化"></a>5.4 limit优化</h2><p>limit分页操作, 越往后, 性能越低 :</p><p>优化方案: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_sku t , (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_sku <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id limit <span class="hljs-number">9000000</span>,<span class="hljs-number">1</span>) a <span class="hljs-keyword">where</span> t.id <span class="hljs-operator">=</span> a.id;<br></code></pre></td></tr></table></figure><h2 id="5-5-count优化"><a href="#5-5-count优化" class="headerlink" title="5.5 count优化"></a>5.5 count优化</h2><p>在很多的业务系统中，都需要考虑进行分页操作，但是当我们执行分页操作时，都需要进行一次count操作，求取总记录数，如果数据库表的数据量大，在InnoDB引擎中，执行count操作的性能是比较低的，需要遍历全表数据，对计数进行累加。</p><p>优化方案：</p><p>①. 在大数据量的查询中，只查询数据， 而不展示总记录数 ； </p><p>②. 通过缓存redis维护一个表的计数，来记录数据库表的总记录数，在执行插入&#x2F;删除时，需要动态更新；</p><p>③. 在数据库表中定义一个大数据量的计数表，在执行插入&#x2F;删除时，需要动态更新。</p><p>弊端:无法满足各种带where条件的count查询.</p><h2 id="5-6-大批量插入优化"><a href="#5-6-大批量插入优化" class="headerlink" title="5.6 大批量插入优化"></a>5.6 大批量插入优化</h2><p>使用load命令!</p><p>环境准备:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_user` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT, <br>  `username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>  `birthday` <span class="hljs-type">DATE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `sex` <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`), <br>  <span class="hljs-keyword">UNIQUE</span> KEY `unique_user_username` (`username`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 ;<br></code></pre></td></tr></table></figure><p>Load使用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;可自定义别的符号.</span><br>load data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;/root/sql1.log&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> `tb_user` fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span> lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="5-6-1-对于-InnoDB-类型的表，有以下几种方式可以提高导入的效率："><a href="#5-6-1-对于-InnoDB-类型的表，有以下几种方式可以提高导入的效率：" class="headerlink" title="5.6.1 对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率："></a>5.6.1 对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</h3><h4 id="1）-主键顺序插入"><a href="#1）-主键顺序插入" class="headerlink" title="1） 主键顺序插入"></a>1） 主键顺序插入</h4><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021033432.png" alt="image-20210102121542033"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021033016.png" alt="image-20210102121518728"></p><h4 id="2-关闭唯一性校验"><a href="#2-关闭唯一性校验" class="headerlink" title="2) 关闭唯一性校验"></a>2) 关闭唯一性校验</h4><p>在导入数据前执行 SET UNIQUE_CHECKS&#x3D;0，关闭唯一性校验，在导入结束后执行 SET UNIQUE_CHECKS&#x3D;1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021034009.png" alt="image-20210102121608494"></p><h4 id="3-手动提交事务"><a href="#3-手动提交事务" class="headerlink" title="3) 手动提交事务"></a>3) 手动提交事务</h4><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT&#x3D;0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT&#x3D;1，打开自动提交，也可以提高导入的效率。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404021034051.png" alt="image-20210102121630297"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建静态博客</title>
      <link href="/2020/12/04/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/12/04/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hexo搭建步骤"><a href="#1-Hexo搭建步骤" class="headerlink" title="1.Hexo搭建步骤"></a>1.Hexo搭建步骤</h1><h2 id="1-1安装Git"><a href="#1-1安装Git" class="headerlink" title="1.1安装Git"></a>1.1安装Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu</span><br>sudo apt-get install git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos</span><br>sudo yum install git -y<br></code></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code> 来查看版本 </p><h2 id="1-2安装nodejs"><a href="#1-2安装nodejs" class="headerlink" title="1.2安装nodejs"></a>1.2安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu</span><br>sudo apt-get install nodejs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos</span><br>sudo apt-get install npm<br></code></pre></td></tr></table></figure><p>安装完后，打开命令行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h2 id="1-3安装hexo"><a href="#1-3安装hexo" class="headerlink" title="1.3安装hexo"></a>1.3安装hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完毕<code>hexo -v</code>查看版本 </p><p>至此就全部安装完了。</p><h2 id="1-4初始化一下hexo"><a href="#1-4初始化一下hexo" class="headerlink" title="1.4初始化一下hexo"></a>1.4初始化一下hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init myblog<br></code></pre></td></tr></table></figure><p>这个myblog就是你的博客的文件夹名称，可以自己取什么名字都行，然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd myblog //进入这个myblog文件夹<br>npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有： </p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><h2 id="1-5编译启动"><a href="#1-5编译启动" class="headerlink" title="1.5编译启动"></a>1.5编译启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g # 编译,生成public文件夹<br>hexo server # 启动服务 简写hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问localhost:4000</p><p>使用ctrl+c可以把服务关掉。 </p><h1 id="2-部署到github"><a href="#2-部署到github" class="headerlink" title="2.部署到github"></a>2.部署到github</h1><h2 id="2-1GitHub创建个人仓库"><a href="#2-1GitHub创建个人仓库" class="headerlink" title="2.1GitHub创建个人仓库"></a>2.1GitHub创建个人仓库</h2><p><strong>创建一个和你用户名相同的仓库，后面加.github.io</strong>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io.</p><h2 id="2-2生成SSH添加到GitHub"><a href="#2-2生成SSH添加到GitHub" class="headerlink" title="2.2生成SSH添加到GitHub"></a>2.2生成SSH添加到GitHub</h2><p>回到你的git bash中， </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>然后创建SSH,一路回车 </p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>在gitbash中，查看是否成功 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com #输入yes进行绑定<br></code></pre></td></tr></table></figure><h2 id="2-3将hexo部署到GitHub"><a href="#2-3将hexo部署到GitHub" class="headerlink" title="2.3将hexo部署到GitHub"></a>2.3将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/yourname/yourname.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><blockquote><p> <strong>在项目目录下执行,否则<code>hexo d</code>时会报错<code>deplyer not found</code></strong></p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean # 清理生成的文章<br>hexo generate # 生成文章 `hexo g`缩写<br>hexo deploy # 发布文章 `hexo d`缩写<br></code></pre></td></tr></table></figure><p>注意deploy时可能要你输入username和password</p><h2 id="QAQ-执行hexo-d时可能报错"><a href="#QAQ-执行hexo-d时可能报错" class="headerlink" title="QAQ:执行hexo d时可能报错:"></a>QAQ:执行hexo d时可能报错:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">emote: Support for password authentication was removed on August 13, 2021.<br>remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.<br>fatal: &#x27;https://github.com/blydd/blydd.github.io.git/&#x27; 鉴权失败<br></code></pre></td></tr></table></figure><p>此时把配置文件中git仓库地址配置为ssh类型的即可.例如原地址<code>https://github.com/blydd/blydd.github.io.git</code>,修改为<code>git@github.com:blydd/blydd.github.io.git</code></p><p>部署成功过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/Documents/myblog<br>❯ hexo deploy<br>INFO  Validating config<br>ERROR Deployer not found: git<br></code></pre></td></tr></table></figure><p>在博客项目目录下执行命令<code>npm install hexo-deployer-git --save</code></p><h1 id="3-设置个人域名"><a href="#3-设置个人域名" class="headerlink" title="3.设置个人域名"></a>3.设置个人域名</h1><p> 现在你的个人网站的地址是 <code>yourname.github.io</code></p><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5">阿里云</a>上买一个域名</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain01.jpg" alt="img"></p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br><strong>注意，解析线路选择默认</strong>，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！ </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain02.jpg" alt="img"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>baiyp.ren</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain03.jpg" alt="img"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/domain04.jpg" alt="img"></p><p>最后，在gitbash中，输入 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new newpapername  # 新建文章<br></code></pre></td></tr></table></figure><p>然后在source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h1 id="4-hexo-的使用"><a href="#4-hexo-的使用" class="headerlink" title="4.hexo 的使用"></a>4.hexo 的使用</h1><h2 id="4-1hexo基本配置"><a href="#4-1hexo基本配置" class="headerlink" title="4.1hexo基本配置"></a>4.1hexo基本配置</h2><p>在文件根目录下的<code>_config.yml</code>，就是<strong>整个hexo框架的配置文件</strong>了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方的配置</a>描述。 </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America&#x2F;New_York, Japan, 和 UTC 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。 </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>网址</td></tr><tr><td>root</td><td>网站根目录</td></tr><tr><td>permalink</td><td>文章的 永久链接 格式</td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2019/09/05</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。 </p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td><td>2013&#x2F;07&#x2F;14&#x2F;hello-world</td></tr><tr><td>:year-:month-:day-:title.html</td><td>2013-07-14-hello-world.html</td></tr><tr><td>:category&#x2F;:title</td><td>foo&#x2F;bar&#x2F;hello-world</td></tr></tbody></table><p>再往下翻，中间这些都默认就好了。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><p>theme就是选择什么主题，也就是在theme这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网(<a href="https://hexo.io/themes/)%E4%B8%8A%E4%B8%8B%E8%BD%BD%EF%BC%8C%E6%8A%8A%E4%B8%BB%E9%A2%98%E7%9A%84%E6%96%87%E4%BB%B6%E6%94%BE%E5%9C%A8theme%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%EF%BC%8C%E5%86%8D%E4%BF%AE%E6%94%B9%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://hexo.io/themes/)上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。</a></p><h2 id="4-2Front-matter"><a href="#4-2Front-matter" class="headerlink" title="4.2Front-matter"></a>4.2Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019</span><span class="hljs-string">/9/14</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="4-2-1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。"><a href="#4-2-1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。" class="headerlink" title="4.2.1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。"></a>4.2.1下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>建立日期</td></tr><tr><td>updated</td><td>更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td></tr><tr><td>permalink</td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">categories:<br>- Diary<br>tags:<br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><h3 id="4-2-2layout（布局）"><a href="#4-2-2layout（布局）" class="headerlink" title="4.2.2layout（布局）"></a>4.2.2layout（布局）</h3><p>当你每一次使用代码 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> paper<br></code></pre></td></tr></table></figure><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><strong>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</strong></p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source&#x2F;_drafts</td></tr></tbody></table><p>而new这个命令其实是： </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>只不过这个layout默认是post罢了。 </p><h3 id="4-2-3page"><a href="#4-2-3page" class="headerlink" title="4.2.3page"></a>4.2.3page</h3><p>如果你想另起一页，那么可以使用 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> board<br></code></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h3 id="4-2-4draft"><a href="#4-2-4draft" class="headerlink" title="4.2.4draft"></a>4.2.4draft</h3><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> <span class="hljs-keyword">new</span><span class="hljs-type">page</span><br></code></pre></td></tr></table></figure><p>这样会在source&#x2F;_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在本地端口中开启服务预览。</span><br>hexo server --draft <br></code></pre></td></tr></table></figure><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo publish draft newpage<br></code></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h2 id="4-3更换主题"><a href="#4-3更换主题" class="headerlink" title="4.3更换主题"></a>4.3更换主题</h2><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/">点这里</a></p><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如<a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是<a href="https://github.com/ppoffice/hexo-theme-hueman">hueman</a>这个主题，好像是从WordPress移植过来的，展示效果如下： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/hexo04.jpg" alt="img"></p><p>直接在github链接上下载下来，然后放到theme文件夹下就行了，然后再在刚才说的配置文件中把theme换成那个主题文件夹的名字，它就会自动在theme文件夹中搜索你配置的主题。</p><p>而后进入hueman这个文件夹，可以看到里面也有一个配置文件_config.yml，貌似它默认是_config.yml.example，把它复制一份，重命名为_config.yml就可以了。这个配置文件是修改你整个主题的配置文件。</p><h3 id="4-3-1menu（菜单栏）"><a href="#4-3-1menu（菜单栏）" class="headerlink" title="4.3.1menu（菜单栏）"></a>4.3.1menu（菜单栏）</h3><p>也就是上面菜单栏上的这些东西。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/menu01.jpg" alt="img"></p><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，以及index.md，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><p>如果你想要自己再自定义一个菜单栏的选项，那么就</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> yourdiy<br></code></pre></td></tr></table></figure><p>然后在主题配置文件的menu菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: &#39;中文意思&#39;</code>就可以显示中文了。 </p><h3 id="4-3-2customize-定制"><a href="#4-3-2customize-定制" class="headerlink" title="4.3.2customize(定制)"></a>4.3.2customize(定制)</h3><p>在这里可以修改你的<strong>个人logo</strong>，默认是那个hueman，在source&#x2F;css&#x2F;images文件夹中放入自己要的logo，再改一下url的链接名字就可以了。</p><p>favicon是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p>social_links ，可以显示你的社交链接，而且是有logo的。</p><h2 id="4-4添加RSS"><a href="#4-4添加RSS" class="headerlink" title="4.4添加RSS"></a>4.4添加RSS</h2><h6 id="什么是RSS？"><a href="#什么是RSS？" class="headerlink" title="什么是RSS？"></a>什么是RSS？</h6><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。 </p><h3 id="4-4-1安装RSS插件"><a href="#4-4-1安装RSS插件" class="headerlink" title="4.4.1安装RSS插件"></a>4.4.1安装RSS插件</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-generator-feed<br></code></pre></td></tr></table></figure><h3 id="4-4-2在你整个项目的-config-yml中找到Extensions"><a href="#4-4-2在你整个项目的-config-yml中找到Extensions" class="headerlink" title="4.4.2在你整个项目的_config.yml中找到Extensions"></a>4.4.2在你整个项目的<code>_config.yml</code>中找到Extensions</h3><p><strong>添加：</strong> </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Extensions</span><br><span class="hljs-meta">## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span></span><br><span class="hljs-meta">#RSS订阅</span><br><span class="hljs-symbol">plugin:</span><br>- hexo-generator-feed<br><span class="hljs-meta">#Feed Atom</span><br><span class="hljs-symbol">feed:</span><br><span class="hljs-symbol">  type:</span> atom<br><span class="hljs-symbol">  path:</span> atom.xml<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>这个时候你的RSS链接就是 <code>域名/atom.xml</code>了。</p><p>所以，在主题配置文件中的这个<code>social links</code>，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">rss:</span> /atom.xml<br></code></pre></td></tr></table></figure><h3 id="4-4-3如何关注RSS？"><a href="#4-4-3如何关注RSS？" class="headerlink" title="4.4.3如何关注RSS？"></a>4.4.3<strong>如何关注RSS？</strong></h3><p>首先，你需要一个RSS阅读器，在这里我推荐inoreader，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到inoreader上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索阮一峰，应该就能出来了。</p><p>我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。</p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h2 id="4-5widgets-侧边栏"><a href="#4-5widgets-侧边栏" class="headerlink" title="4.5widgets(侧边栏)"></a>4.5widgets(侧边栏)</h2><p>侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把communication写在上面，在zh-CN.yml中的sidebar，添加communication: ‘中文’。</p><p>然后在hueman&#x2F;layout&#x2F;widget中添加一个communicaiton.ejs，填入模板：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (site.posts.length) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-wrap widget-list&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-title&quot;</span>&gt;</span>&lt;%=</span><span class="language-ruby"> __(<span class="hljs-string">&#x27;sidebar.communiation&#x27;</span>) </span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--这里添加你要写的内容--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-6search-搜索框"><a href="#4-6search-搜索框" class="headerlink" title="4.6search(搜索框)"></a>4.6search(搜索框)</h2><p>默认搜索框是不能够用的， </p><blockquote><p>you need to install <code>hexo-generator-json-content</code> before using Insight Search </p></blockquote><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h2 id="4-7comment-评论系统"><a href="#4-7comment-评论系统" class="headerlink" title="4.7comment(评论系统)"></a>4.7comment(评论系统)</h2><p>这里的多数都是国外的，基本用不了。这个<code>valine</code>好像不错，还能统计文章阅读量，可以自己试一试，<a href="https://valine.js.org/quickstart.html#npm">链接</a>。 </p><h2 id="4-8总结："><a href="#4-8总结：" class="headerlink" title="4.8总结："></a>4.8总结：</h2><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义</li><li>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中comment是评论系统，common是常规的布局，最常修改的在这里面，比如修改页面head和footer的内容。</li><li>scripts：js脚本，暂时没什么用</li><li>source：里面放了一些css的样式，以及图片</li></ul><h1 id="5-git分支进行多终端工作"><a href="#5-git分支进行多终端工作" class="headerlink" title="5.git分支进行多终端工作"></a>5.git分支进行多终端工作</h1><p> 问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p> 在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h2 id="5-1机制"><a href="#5-1机制" class="headerlink" title="5.1机制"></a>5.1机制</h2><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。 </p><p>可以看到并没有source等源文件在内</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source01.jpg" alt="img"></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source02.jpg" alt="img"></p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。 </p><h2 id="5-2上传分支"><a href="#5-2上传分支" class="headerlink" title="5.2上传分支"></a>5.2上传分支</h2><p>首先，先在github上新建一个hexo分支，如图：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source03.jpg" alt="img"></p><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source04.jpg" alt="img"></p><p>然后在本地的任意目录下，打开git bash， </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:youremail/youremail.github.io.git<br></code></pre></td></tr></table></figure><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的youremail.github.io中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。 </p><p>而后 </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit –m <span class="hljs-string">&quot;add branch&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> <br></code></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/source05.jpg" alt="img"></p><p>这样就上传完了。 </p><h2 id="5-3更换电脑操作"><a href="#5-3更换电脑操作" class="headerlink" title="5.3更换电脑操作"></a>5.3更换电脑操作</h2><p>一样的，跟之前的环境搭建一样， </p><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install git<br></code></pre></td></tr></table></figure><h5 id="设置git全局邮箱和用户名"><a href="#设置git全局邮箱和用户名" class="headerlink" title="设置git全局邮箱和用户名"></a>设置git全局邮箱和用户名</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourgithubname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;yourgithubemail&quot;</span><br></code></pre></td></tr></table></figure><h5 id="设置ssh-key"><a href="#设置ssh-key" class="headerlink" title="设置ssh key"></a>设置ssh key</h5><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs leaf">ssh-keygen -t rsa -C &quot;youremail&quot;<br><span class="hljs-punctuation">#</span>生成后填到github和coding上（有coding平台的话）<br><span class="hljs-punctuation">#</span>验证是否成功<br>ssh -T git@github.com<br>ssh -T git@git.coding.net <span class="hljs-punctuation">#</span><span class="hljs-params">(有<span class="hljs-variable">coding</span>平台的话)</span><br></code></pre></td></tr></table></figure><h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install nodejs<br>sudo apt-<span class="hljs-built_in">get</span> install npm<br></code></pre></td></tr></table></figure><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>但是已经不需要初始化了，直接在任意文件夹下，</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@………………<br></code></pre></td></tr></table></figure><p>然后进入克隆到的文件夹 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cd xxx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br>npm install<br>npm install hexo-deployer-git <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpage<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol><li>不要忘了，每次写完最好都把源文件上传一下</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit –m <span class="hljs-string">&quot;xxxx&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> <br></code></pre></td></tr></table></figure><ol><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><h1 id="6-coding-page上部署实现国内外分流"><a href="#6-coding-page上部署实现国内外分流" class="headerlink" title="6.coding page上部署实现国内外分流"></a>6.coding page上部署实现国内外分流</h1><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><h2 id="6-1申请coding账户，新建项目"><a href="#6-1申请coding账户，新建项目" class="headerlink" title="6.1申请coding账户，新建项目"></a>6.1<strong>申请coding账户，新建项目</strong></h2><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。 </p><h2 id="6-2添加ssh-key"><a href="#6-2添加ssh-key" class="headerlink" title="6.2添加ssh key"></a>6.2<strong>添加ssh key</strong></h2><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@git</span>.coding.net<br></code></pre></td></tr></table></figure><h2 id="6-3修改-config-yml"><a href="#6-3修改-config-yml" class="headerlink" title="6.3修改_config.yml"></a>6.3<strong>修改_config.yml</strong></h2><p>hexo官方文档是这样的： </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  message:</span> [message]<br><span class="hljs-symbol">  repo:</span><br><span class="hljs-symbol">    github:</span> <span class="hljs-params">&lt;repository url&gt;</span>,[branch]<br><span class="hljs-symbol">    coding:</span> <span class="hljs-params">&lt;repository url&gt;</span>,[branch] <br></code></pre></td></tr></table></figure><p>那么，我们只需要： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deploy:<br>  type: git<br>  repo: <br>    coding: git@git<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.net</span>:yourgithubemail/yourgithubemail<span class="hljs-selector-class">.git</span>,master<br>    github: git@github<span class="hljs-selector-class">.com</span>:ZJUFangzh/yourgithubemail<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span>,master<br></code></pre></td></tr></table></figure><h2 id="6-4部署"><a href="#6-4部署" class="headerlink" title="6.4部署"></a>6.4部署</h2><p>保存一下，直接 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这样就可以在coding的项目上看到你部署的文件了。 </p><h2 id="6-5开启coding-pages服务，绑定域名"><a href="#6-5开启coding-pages服务，绑定域名" class="headerlink" title="6.5开启coding pages服务，绑定域名"></a>6.5开启coding pages服务，绑定域名</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding01.jpg" alt="img"></p><h4 id="阿里云添加解析"><a href="#阿里云添加解析" class="headerlink" title="阿里云添加解析"></a><strong>阿里云添加解析</strong></h4><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding02.jpg" alt="img"></p><p>个时候就可以把之前github的解析改成境外，把coding的解析设为默认了 </p><h2 id="6-6去除coding-page的跳转广告"><a href="#6-6去除coding-page的跳转广告" class="headerlink" title="6.6去除coding page的跳转广告"></a>6.6<strong>去除coding page的跳转广告</strong></h2><p>oding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到<code>pages服务</code>这里。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding03.jpg" alt="img"></p><p>只要你在页面上添加一行文字，写<code>Hosted by Coding Pages</code>，然后点下面的小勾勾，两个工作日内它就会审核通过了。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hosted by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pages.coding.me&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Coding Pages<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我的选择是把这一行代码放在主题文件夹<code>/layout/common/footer.ejs</code>里面，也就是本来在页面中看到的页脚部分。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/coding04.jpg" alt="img"></p><p>当然，为了统一，我又在后面加上了and <strong>Github</strong>哈哈，可以不加。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hosted by <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pages.coding.me&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Coding Pages<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> and <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Github<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是最终加上去的代码。</p><h1 id="7优化"><a href="#7优化" class="headerlink" title="7优化"></a>7优化</h1><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><p>本文参考了: <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar.com</a>这里面说的很详细了。</p><h2 id="7-1SEO优化"><a href="#7-1SEO优化" class="headerlink" title="7.1SEO优化"></a>7.1SEO优化</h2><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。 </p><blockquote><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 </p></blockquote><h5 id="百度seo"><a href="#百度seo" class="headerlink" title="百度seo"></a>百度seo</h5><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code></p><p>来查看一下。 </p><h6 id="登录百度站长平台添加网站"><a href="#登录百度站长平台添加网站" class="headerlink" title="登录百度站长平台添加网站"></a><strong>登录百度站长平台添加网站</strong></h6><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index">百度站长平台</a>，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><h6 id="提交链接"><a href="#提交链接" class="headerlink" title="提交链接"></a><strong>提交链接</strong></h6><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><p>npm install hexo-generator-sitemap –save<br>npm install hexo-generator-baidu-sitemap –save</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">COPYnpm <span class="hljs-keyword">install </span>hexo-generator-sitemap --save     <br>npm <span class="hljs-keyword">install </span>hexo-generator-<span class="hljs-keyword">baidu-sitemap </span>--save<br></code></pre></td></tr></table></figure><p>这时候你需要在你的根目录下_config.xml中看看url有没有改成你自己的：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">COPY# URL<br>## If your site is put <span class="hljs-keyword">in</span> a subdirectory, set url <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;http://yoursite.com/child&#x27;</span> and root <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;/child/&#x27;</span><br>url: http:<span class="hljs-comment">//www.baiyp.ren</span><br>root: /<br></code></pre></td></tr></table></figure><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/seo01.jpg" alt="img"></p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件&#x2F;layout&#x2F;common&#x2F;head.ejs的适当位置，然后验证一下就可以了。</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</li></ul><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/seo02.jpg" alt="img"></p><p><strong>ps:</strong> 百度收录比较慢，慢慢等个十天半个月再去<code>site:&lt;域名&gt;</code>看看有没有被收录。 </p><h2 id="7-2google的SEO"><a href="#7-2google的SEO" class="headerlink" title="7.2google的SEO"></a>7.2google的SEO</h2><p>流程一样，google更简单，而且收录更快，进入google站点地图，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 yourname.github.io，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h1 id="8评论系统"><a href="#8评论系统" class="headerlink" title="8评论系统"></a>8评论系统</h1><p>评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar</a>这个博主用的来比力评论系统，感觉也还不错。 </p><p><a href="https://livere.com/">来比力官网</a>，注册好后，点击管理页面，在<code>代码管理</code>中找到安装代码： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/pinglun01.jpg" alt="img"></p><p>获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。 </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;comment/livebe&#x27;)</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>然后可以自己设置一些东西： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/pinglun02.jpg" alt="img"></p><p>还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。 </p><h1 id="9添加百度统计"><a href="#9添加百度统计" class="headerlink" title="9添加百度统计"></a>9添加百度统计</h1><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。 </p><p><a href="https://tongji.baidu.com/">百度统计</a>，注册一下，这里的账号好像和百度账号不是一起的。 </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/bdtj01.jpg" alt="img"></p><p>照样把代码复制到<code>head.ejs</code>文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。 </p><h4 id="文章阅读量统计leanCloud"><a href="#文章阅读量统计leanCloud" class="headerlink" title="文章阅读量统计leanCloud"></a>文章阅读量统计leanCloud</h4><p><a href="https://leancloud.cn/">leanCloud</a>，进去后注册一下，进入后创建一个应用： </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/leanCloud01.jpg" alt="img"></p><p>在<code>存储</code>中创建Class，命名为Counter, </p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/leanCloud02.jpg" alt="img"></p><p>然后在设置页面看到你的<code>应用Key</code>，在主题的配置文件中： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">你的id</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">你的key</span><br></code></pre></td></tr></table></figure><p>在<code>article.ejs</code>中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了， </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">阅读数量:&lt;span <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;&lt;%= url_for(post.path) %&gt;&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;leancloud_visitors&quot;</span> <span class="hljs-attribute">data-flag-title</span>=<span class="hljs-string">&quot;&lt;%- post.title %&gt;&quot;</span>&gt;&lt;/span&gt;次<br></code></pre></td></tr></table></figure><p>然后在<code>footer.ejs</code>的最后，添加： </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;script src=<span class="hljs-string">&quot;//cdn1.lncld.net/static/js/2.5.0/av-min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> APP_ID = <span class="hljs-string">&#x27;你的app id&#x27;</span>;<br>    <span class="hljs-keyword">var</span> APP_KEY = <span class="hljs-string">&#x27;你的app key&#x27;</span>;<br>    AV.init(&#123;<br>        <span class="hljs-attr">appId</span>: APP_ID,<br>        <span class="hljs-attr">appKey</span>: APP_KEY<br>    &#125;);<br>    <span class="hljs-comment">// 显示次数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showTime</span>(<span class="hljs-params">Counter</span>) &#123;<br>        <span class="hljs-keyword">var</span> query = <span class="hljs-keyword">new</span> AV.Query(<span class="hljs-string">&quot;Counter&quot;</span>);<br>        <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).attr(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-built_in">trim</span>();<br>            <span class="hljs-comment">// where field</span><br>            query.equalTo(<span class="hljs-string">&quot;words&quot;</span>, url);<br>            <span class="hljs-comment">// count</span><br>            query.<span class="hljs-built_in">count</span>().then(<span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>                <span class="hljs-comment">// There are number instances of MyClass where words equals url.</span><br>                $(document.getElementById(url)).<span class="hljs-built_in">text</span>(<span class="hljs-built_in">number</span>?  <span class="hljs-built_in">number</span> : <span class="hljs-string">&#x27;--&#x27;</span>);<br>            &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>                <span class="hljs-comment">// error is an instance of AVError.</span><br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 追加pv</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addCount</span>(<span class="hljs-params">Counter</span>) &#123;<br>        <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span> ? $(<span class="hljs-string">&quot;.leancloud_visitors&quot;</span>).attr(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-built_in">trim</span>() : <span class="hljs-string">&#x27;icafebolger.com&#x27;</span>;<br>        <span class="hljs-keyword">var</span> Counter = AV.Object.extend(<span class="hljs-string">&quot;Counter&quot;</span>);<br>        <span class="hljs-keyword">var</span> query = <span class="hljs-keyword">new</span> Counter;<br>        query.save(&#123;<br>            <span class="hljs-attr">words</span>: url<br>        &#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params">object</span>) &#123;<br>        &#125;)<br>    &#125;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> Counter = AV.Object.extend(<span class="hljs-string">&quot;Counter&quot;</span>);<br>        addCount(Counter);<br>        showTime(Counter);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>重新部署后就可以了。</p><h1 id="10引入不蒜子访问量和访问人次统计"><a href="#10引入不蒜子访问量和访问人次统计" class="headerlink" title="10引入不蒜子访问量和访问人次统计"></a>10引入不蒜子访问量和访问人次统计</h1><p>不蒜子的添加非常非常方便，<a href="http://busuanzi.ibruce.info/">不蒜子</a></p><p>在<code>footer.ejs</code>中的合适位置，看你要显示在哪个地方，添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这一段是不蒜子的访问量统计代码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>本站总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次 <span class="hljs-symbol">&amp;nbsp;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span>访客数<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人次<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就可以了。 </p><h1 id="11总结"><a href="#11总结" class="headerlink" title="11总结"></a>11总结</h1><p>到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于hueman主题，其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。 </p><blockquote><p>博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</p><p>本文永久链接是：<a href="http://www.baiyp.ren/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html">http://www.baiyp.ren/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</a></p></blockquote><h1 id="12-Q-A"><a href="#12-Q-A" class="headerlink" title="12 Q&amp;A"></a>12 Q&amp;A</h1><h2 id="12-1-点击目录总跳转文章顶端"><a href="#12-1-点击目录总跳转文章顶端" class="headerlink" title="12.1 点击目录总跳转文章顶端"></a>12.1 点击目录总跳转文章顶端</h2><blockquote><p>在使用<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">fluid主题</a>时,文章目录点击总是跳转文章顶端</p></blockquote><p>经排查,是之前安装了<code>hexo-toc</code>插件(目录插件),和<code>fluid</code>主题的目录功能冲突导致,卸载插件即可:<code>npm uninstall hexo-toc</code></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2020/12/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/12/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="展示路径文件"><a href="#展示路径文件" class="headerlink" title="展示路径文件"></a>展示路径文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">友好展示信息</span><br>ll -h<br><span class="hljs-meta prompt_"># </span><span class="language-bash">展示指定目录的文件</span><br>ll -h /etc<br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换到上次访问目录,只能最后两个目录间切换</span><br>cd -<br></code></pre></td></tr></table></figure><h2 id="显示主机名"><a href="#显示主机名" class="headerlink" title="显示主机名"></a><strong>显示主机名</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostname        #显示完整名字<br>hostname -s   #显示短格式名字<br>hostname -a    #显示主机别名<br>hostname -i    #显示主机ip<br></code></pre></td></tr></table></figure><h2 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载:"></a><strong>上传下载:</strong></h2><blockquote><p>scp [r] 用户名@ip:文件路径 本地路径 #下载文件 -r表示下载文件夹</p></blockquote><blockquote><p>scp [r] 本地文件 用户名@ip:上传路径 #上传文件 -r表示上传文件夹</p></blockquote><blockquote><p>wget <a href="http://soft.vpser.net/Inmp/Inmp1.1-full.tar.gz">http://soft.vpser.net/Inmp/Inmp1.1-full.tar.gz</a>   #下载命令</p></blockquote><p>crl软件按:alt p</p><h2 id="grep和管道"><a href="#grep和管道" class="headerlink" title="grep和管道"></a>grep和管道</h2><p><code>|</code> 是管道符号,可连接不同命令</p><p>grep是正则表达式,用于字符串搜索.格式:<code>grep 字符串</code> 搜索的文件,eg:<code>ll | grep aaa</code></p><h2 id="命令行登陆linux服务器"><a href="#命令行登陆linux服务器" class="headerlink" title="命令行登陆linux服务器:"></a><strong>命令行登陆linux服务器:</strong></h2><blockquote><p>ssh -p22 用户名@ip<br>如果不输用户名,则以当前用户名登陆linux服务器,第一次连接会下载服务器公钥,选yes.</p></blockquote><h2 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h2><blockquote><p>rpm命令相当于windows下的添加&#x2F;卸载程序.</p><p>yum命令相当于带联网功能的rpm.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">程序安装</span><br>rpm -ivh 程序名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">程序查看</span><br>rpm -qa<br><span class="hljs-meta prompt_">#</span><span class="language-bash">程序卸载</span><br>rpm -e --nodeps 程序名<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="启动springboot项目"><a href="#启动springboot项目" class="headerlink" title="启动springboot项目"></a>启动springboot项目</h1><blockquote><p>后台启动jar并把日志输出到指定文件中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar my-blog.jar &gt; mylog.txt  &amp; <br><br>nohup java -jar my-blog.jar &gt; catalina.out 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h1 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h1><h2 id="查看系统是32位或64位"><a href="#查看系统是32位或64位" class="headerlink" title="查看系统是32位或64位"></a><strong>查看系统是32位或64位</strong></h2><p><code>getconf LONG_BIT</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统进程</span><br>ps -ef<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启</span><br>reboot<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关机</span><br>halt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">网络设置</span><br>setup<br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启某端口防火墙</span><br>firewall-cmd --permanent --zone=public --add-port=7006/tcp --permanent<br></code></pre></td></tr></table></figure><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>systemctl 命令是用来控制系统服务的实用工具，它可以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态，在<code>Centos7.0</code>之前，使用的是<code>service</code>命令，在<code>Centos7.0</code>之后， 使用<code>systemctl</code>命令来进行服务控制</p><table><thead><tr><th>服务管理命令</th><th>功能</th></tr></thead><tbody><tr><td>systemctl start 服务名</td><td>开启服务</td></tr><tr><td>systemctl stop 服务名</td><td>关闭服务</td></tr><tr><td>systemctl status 服务名</td><td>显示服务状态</td></tr><tr><td>systemctl enable 服务名</td><td>设置开机自启动</td></tr><tr><td>systemctl disable 服务名</td><td>关闭开机自启动</td></tr></tbody></table><ul><li>网络操作<ul><li>systemctl status network ＃ 查看网络服务状态 </li><li>systemctl stop network ＃ 停止网络服务 </li><li>systemctl start network ＃ 启动网络服务 </li><li>systemctl restart network ＃ 重启网络服务</li></ul></li><li>防火墙操作<ul><li>systemctl stop firewalld.service #停止firewall</li><li>systemctl disable firewalld.service #禁止firewall开机启动 </li><li>systemctl status firewalld.service #查看防火墙状态</li></ul></li></ul><h2 id="磁盘管理-硬盘-内存"><a href="#磁盘管理-硬盘-内存" class="headerlink" title="磁盘管理:硬盘&#x2F;内存"></a>磁盘管理:硬盘&#x2F;内存</h2><ul><li><code>df -h</code>  显示磁盘剩余空间</li><li><code>du -h［目录名］</code>  显示目录下的目录大小</li><li><code>free -h</code>    查看内存使用率</li></ul><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a><strong>端口</strong></h2><ul><li><p><code>netstat -nltp</code> 查看本机系统每个进程占用的端口</p></li><li><p><code>netstat -an</code>  #<strong>查看本机启用的端口</strong></p></li><li><p><code>netstat -tuln</code>#查看本机开了哪些端口和正在被远程调用的调用方</p></li><li><p><code>ipnetstat -tuln</code>查看本机开了哪些端口和正在被远程调用的调用方ip</p></li></ul><blockquote><p>telnet [域名或ip] [端口]#远程管理与端口探测命令<br>eg:telnet 192.168.0.252 80#探测服务器80端口,成功的话没有提示,进入空白页,退出摁ctrl+],退回到telnet界面,输入quit命令退出</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1、开放端口</span><br>firewall-cmd --zone=public --add-port=5672/tcp --permanent   # 开放5672端口<br>firewall-cmd --zone=public --remove-port=5672/tcp --permanent  #关闭5672端口<br>firewall-cmd --reload   # 配置立即生效<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2、查看防火墙所有开放的端口</span><br>firewall-cmd --zone=public --list-ports<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.、关闭防火墙</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</span><br>systemctl stop firewalld.service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">4、查看防火墙状态</span><br> firewall-cmd --state<br><span class="hljs-meta prompt_">#</span><span class="language-bash">5、查看监听的端口</span><br>netstat -lnpt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6、检查端口被哪个进程占用</span><br>netstat -lnpt |grep 5672<br><span class="hljs-meta prompt_"># </span><span class="language-bash">7 查看进程的详细信息</span><br>ps 6832<br></code></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向 &gt;  &gt;&gt;"></a>重定向 <code>&gt;</code>  <code>&gt;&gt;</code></h2><ul><li><code>ll &gt; aaa.txt</code>  把ll命令的输入覆盖到aaa.txt</li><li><code>ll &gt;&gt; aaa.txt</code>  把ll命令的输入追加到aaa.txt</li></ul><h2 id="生成公钥与私钥"><a href="#生成公钥与私钥" class="headerlink" title="生成公钥与私钥"></a>生成公钥与私钥</h2><blockquote><p>保存目录: <code>/root/.ssh</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t -rsa<br></code></pre></td></tr></table></figure><p>拷贝公钥到指定服务器:</p><blockquote><p>完成即可实现免密登陆</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id 指定服务器ip<br></code></pre></td></tr></table></figure><h1 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h1><ul><li><code>date</code>   查看系统时间（默认格式）</li><li><code>date + &quot;%Y-%m-%d %H:%M:%S&quot;</code> 查看系统时间（指定格式）</li><li><code>date-s “时间字符串“</code>      设置系统时间</li></ul><p>示例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@nohurry ~]#  date<br>2024年 06月 04日 星期二 09:09:01 CST<br>[root@nohurry ~]# date +&quot;%Y-%m-%d %H:%M:%S&quot;<br>2024-06-04 09:09:32<br>[root@nohurry ~]# date -s &quot;2024-06-04 09:09:32&quot;<br>2024年 06月 04日 星期二 09:09:32 CST<br>[root@nohurry ~]# date +&quot;%Y-%m-%d %H:%M:%S&quot;<br>2024-06-04 09:09:45<br></code></pre></td></tr></table></figure><h2 id="和网络时间同步-对表"><a href="#和网络时间同步-对表" class="headerlink" title="和网络时间同步(对表)"></a>和网络时间同步(对表)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab -e<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">每隔一分钟和阿里云服务器对表</span><br>* * * * * /usr/sbin/ntpdate ntp4.aliyun.com<br></code></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">- RWX RW- R--<br>1  2   3   4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">1:类型,d目录,-普通文件,l链接文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2:所属用户权限,用u(user)表示</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3:所属组权限,用g(group)表示</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4:其他用户权限,用o(other)表示</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">所有权限,用a(all)表示</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改权限</span><br>chmod u=rwx demo.java<br>chmod g=rw- demo.java<br>chmod o=rwx demo.java<br><span class="hljs-meta prompt_">#</span><span class="language-bash">给所属用户添加执行权限</span><br>chmod 744 demo.java<br><span class="hljs-meta prompt_">#</span><span class="language-bash">给所属用户添加执行权限</span><br>chmod u+x demo.java<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更改文件夹内所有文件的权限</span><br>chmod -R 权限 文件夹名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">增加执行权限</span><br>chmod +X demo.java<br></code></pre></td></tr></table></figure><h2 id="浏览文件内容"><a href="#浏览文件内容" class="headerlink" title="浏览文件内容"></a>浏览文件内容</h2><ul><li><p>cat 文件名</p><p>适合查看数据量小的文件,全部展示.</p></li><li><p>more 文件名</p><p>分页显示文件内容</p><p>空格:下一页回车:下一行ctrl+b:上一屏 q:退出</p></li><li><p>less 文件名</p><p>分页查看文件内容.操作同more.</p><p>标注行号:less -mN 文件名</p></li><li><p>tail -20 文件名</p><p>快速查看文件最后20行内容.</p></li><li><p>Vim 文件名</p><p>输入 : set nu,会显示行号.</p></li></ul><h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a><strong>查找文件</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找<br><br>find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf<br><br>find /etc -name &#x27;*srm*&#x27;　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件<br><br>find . -name &#x27;srm*&#x27; 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件<br><br>sudo find / -type d -name *tomcat*  #查找文件夹位置,文件夹名字不确定的用*补上<br></code></pre></td></tr></table></figure><h2 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建多层目录</span><br>mkdir /t1/t2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">t3目录不存在的话则先创建t3</span><br>mkdir -p t3/t4<br></code></pre></td></tr></table></figure><h2 id="复制解压"><a href="#复制解压" class="headerlink" title="复制解压"></a><strong>复制解压</strong></h2><p>压缩包格式:</p><ul><li>*.tar 打包,不压缩.</li><li>*.tar.gz 打包并压缩</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r 源文件夹 目的地  #Linux复制文件夹,-r表示递归<br>cp 文件 新目录/新文件名 #复制并改名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">压缩 -zcvf参数顺序不能变.eg压缩当前目录下全部文件:tar -zcvf hehe.tar.gz *</span><br>tar -zcvf 压缩包名字.tar.gz 需压缩的文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压缩到当前目录</span><br>tar -zxvf 压缩包名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压缩到指定目录</span><br>tar -zxvf 压缩包名 -C 指定目录地址<br><br></code></pre></td></tr></table></figure><h2 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h2><p><code>ln -s 原文件 快捷方式</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在当前目录为文件设置快捷方式</span><br>[root@nohurry ~]# ln -s /usr/local/java/reload.sh sbreload.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看快捷方式,指向原文件</span><br>[root@nohurry ~]# ll<br>lrwxrwxrwx  1 root root       25 6月   4 09:14 sbreload.sh -&gt; /usr/local/java/reload.sh<br></code></pre></td></tr></table></figure><h2 id="文件编辑器VIM"><a href="#文件编辑器VIM" class="headerlink" title="文件编辑器VIM"></a>文件编辑器VIM</h2><p><code>vim</code>命令进入文件后默认进入命令行模式,此时只能敲命令,常用命令如下:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406040920679.png" alt="image-20240604092037630"></p><p>按<code>i</code>或<code>o</code>进入<strong>输入模式</strong></p><p>按<code>esc</code>进入<strong>底行模式</strong>:</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406040924040.png" alt="image-20240604092424969"></p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="ping：测试网络命令"><a href="#ping：测试网络命令" class="headerlink" title="ping：测试网络命令"></a><strong>ping：测试网络命令</strong></h2><blockquote><pre><code class="hljs">  - -c count：ping的次数  - -W timeout：超时时间，配合-c使用  - -I ipaddress：指定用自己主机的IP去ping对方主机  - -s size：每次ping发出的数据包大小，最大值65507  - -f：竭尽自己主机的能力发出数据包</code></pre></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos7 ~]# ping -c1 -W1 192.168.0.6 #脚本中常用的ping测试，ping一次，超时时间1s<br>[root@centos7 ~]# ping -s 65507 -f 192.168.0.6 #竭尽自己所能，向192.168.0.6发出大数据包，ddos攻击<br></code></pre></td></tr></table></figure><h2 id="VMWARE虚拟机网络连接方式"><a href="#VMWARE虚拟机网络连接方式" class="headerlink" title="VMWARE虚拟机网络连接方式"></a>VMWARE虚拟机网络连接方式</h2><ul><li>桥接模式</li></ul><blockquote><p>需要依赖外部网络环境，VMware 虚拟出来的操作系统就像是局域网中的一台独立的主机， 需要手工为虚拟系统配置IP地址，虚拟机解ip必须和宿主机（windows）的ip是同一个网段。开发环境下可能会使用，学习环境不用，<strong>类似于虚剂机和主机就好比插在同一台交换机上的两台电脑</strong></p></blockquote><ul><li><p>NAT模式</p><blockquote><p>使用 NAT 模式，就是让虚拟系统借助 NAT（网络地址转换）功能，通过宿主机器所在的网络来访问公网，<strong>如果主机能够正常上网，那么虚拟机也能够直接上网。</strong>此时虚拟机处于一个新的网段内，由 VMware提供的DHCP服务自动分配IP地址，然后通过VMware提供的NAT服务，共享主机实现上网，不依赖外部网络环境</p></blockquote></li><li><p>仅主机模式</p></li></ul><blockquote><p>仅主机模式和NAT模式是类似的，<strong>在该模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机</strong>，当然多个虚拟机之间也可以互相访问，只需要记住<strong>仅主机模式是无法进行上网的</strong></p></blockquote><h2 id="配置ip-修改网卡信息文件"><a href="#配置ip-修改网卡信息文件" class="headerlink" title="配置ip,修改网卡信息文件"></a><strong>配置ip,修改网卡信息文件</strong></h2><p><code>vi /etc/sysconfig/network-scripts/ifcfg-etho</code></p><h2 id="查看DNS服务器地址"><a href="#查看DNS服务器地址" class="headerlink" title="查看DNS服务器地址:"></a><strong>查看DNS服务器地址:</strong></h2><p><code>cat /etc/resolv.conf</code></p><p><code>nslookup 127.0.0.1 | grep Server</code></p><p>修改DNS服务器非常简单，只需要修改<code>/etc/resolv.conf</code>配置文件即可。那么修改DNS是否需要重启某些服务，答案是不需要。修改后会立即生效，不需做任何额外处理。</p><h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><ul><li>安装依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install glibc.i686<br>yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6<br>yum update libstdc++-4.4.7-4.e16.x86-64<br>yum install gcc-c++<br></code></pre></td></tr></table></figure><ul><li>安装jdk</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1 查看已安装老版本</span><br>rpm -qa | grep java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2 卸载老版本</span><br>rpm -e --nodeps 上面查到的<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3 上传jdk包,解压到指定目录</span><br>tar -zxvf -C /usr/local/java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">4 配置环境变量 vim /etc/profile</span><br>JAVA_HOME=/usr/local/java/jdk...<br>CLASS_PATH=.:$JAVA_HOME/lib.tools.jar<br>PATH=$JAVA_HOME/bin:$PATH<br>export JAVA_HONE CLASSPATH PATH<br><span class="hljs-meta prompt_"># </span><span class="language-bash">5 重新加载配置文件</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><h2 id="查看JDK安装路径"><a href="#查看JDK安装路径" class="headerlink" title="查看JDK安装路径"></a>查看JDK安装路径</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -verbose #查看jdk安装路径.最后两行为jdk安装路径<br></code></pre></td></tr></table></figure><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="1-yum安装时报cannot-find-a-valid-baseurl-for-repo"><a href="#1-yum安装时报cannot-find-a-valid-baseurl-for-repo" class="headerlink" title="1.yum安装时报cannot find a valid baseurl for repo"></a>1.yum安装时报<a href="https://www.cnblogs.com/phpandmysql/p/7773063.html">cannot find a valid baseurl for repo</a></h2><blockquote><p>出现这个问题是因为yum在安装包的过程中，虽然已经联网，但是没法解析远程包管理库对应的域名，所以我们只需要在网络配置中添加上DNS对应的ip地址即可。</p></blockquote><p>​1.查看网卡名:<code>ip addr</code></p><p><img src="https://i.loli.net/2021/01/30/5Ss9Fx7OVICRnKN.png" alt="image-20210130103817342"></p><p>​2.修改网络配置文件<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">文件末尾添加</span><br>DNS1=8.8.8.8<br>DNS2=4.2.2.2<br></code></pre></td></tr></table></figure><p>​3.重启网络<code>ifup ens33</code>,成功</p><h2 id="2-ifconfig命令报-bash-ifconfig-command-not-found"><a href="#2-ifconfig命令报-bash-ifconfig-command-not-found" class="headerlink" title="2.ifconfig命令报-bash: ifconfig: command not found"></a>2.ifconfig命令报<code>-bash: ifconfig: command not found</code></h2><p> 安装网络工具:<code>yum install -y net-tools</code></p><h2 id="3-CentOS下ifconfig命令不显示ip"><a href="#3-CentOS下ifconfig命令不显示ip" class="headerlink" title="3.CentOS下ifconfig命令不显示ip"></a>3.CentOS下<code>ifconfig</code>命令不显示ip</h2><p>1.查看网卡名:<code>ip addr</code>,我的显示<code>ens33</code></p><p>2.修改配置文件:<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>,ONBOOT改为yes</p><p>3.启动网卡<code>ifup ens33</code>即可.</p><h1 id="定时器crontab"><a href="#定时器crontab" class="headerlink" title="定时器crontab"></a>定时器crontab</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406082302729.png" alt="image-20240608230223691"></p><p><code>?</code> 表示不参与运算</p><ul><li><p>分（0~59）</p></li><li><p>时（0~23）</p></li><li><p>日（0~31，但是你需要考虑你月的天数）</p></li><li><p>月（1~12）</p></li><li><p>周（0~6 O&#x3D;SUN 或 SUN， MON， TUE， WED， THU， FRI， SAT） </p></li><li><p>年（1970-2099）</p></li><li><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406082308436.png" alt="image-20240608230834371"></p></li></ul><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><p><code>crontab -e</code>,进入定时器编辑界面,编辑定时任务.</p><p>例如,每隔一分钟输出一个日期:<code>* * * * * date &gt;&gt; /root/time.txt</code></p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="语句判断"><a href="#语句判断" class="headerlink" title="语句判断"></a>语句判断</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406081833209.png" alt="image-20240608183334090"></p><h4 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h4><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406081834540.png" alt="image-20240608183411474"><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406081837658.png" alt="image-20240608183756575"></p><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="猜字游戏"><a href="#猜字游戏" class="headerlink" title="猜字游戏"></a>猜字游戏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">！/bih/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成100以内的随机数提示用户猜测猜对为止</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">random 系统自带，值为0-32767任意数</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">随机数1-100</span><br>num=$[RANDOM%100+1]<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">read</span> 提示用户猜数字</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span>判断</span><br>while :<br>do<br>read -p &quot;计算机生成了一个 1-100 的随机数,你猜:&quot; cai <br>if [ $cai -eq $num ]<br>then<br>echo &quot;恭喜,猜对了&quot;<br>exit<br>elif [ $cai -gt $num ]<br>then<br>echo &quot;不巧,猜大了&quot;<br>else<br>echo&quot;不巧,猜小了&quot;<br>fi<br>done<br></code></pre></td></tr></table></figure><h3 id="一键安装jdk"><a href="#一键安装jdk" class="headerlink" title="一键安装jdk"></a>一键安装jdk</h3><blockquote><p>先卸载完已安装的jdk</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.提示安装idk I</span><br>echo &quot;现在开始安装jdk&quot; <br>sleep 1 # 休眼1秒钟<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.删除centos自带的jdk</span><br>oldjava= ` rpm -qa | grep java `<br>for old in $&#123;oldiava&#125;;<br>do<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$old</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载命令</span><br>rpm -e --nodeps $old<br>done<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.创建安装目录/export/server,进入安装目录</span> <br>java_path=&quot;/export/server&quot; <br>if [ ! -d $java_path ]<br>then<br>mkdir -p $java_path<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4:解压jdk安装包</span><br>tar -xvf /export/software/jdk-8u241-1inux-x64.tar.gz -C $java_path<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6.设置环境变量</span><br>JAVA_HOME=&quot;/export/server/jdk1.8.0_241&quot; <br>if ! grep &quot;JAVA_HOME&quot; /etc/profile<br>then<br><span class="hljs-meta prompt_"># </span><span class="language-bash">JAVA HOME</span><br>echo &quot;------------JAVA HOME ----------&quot;<br>echo &#x27;export JAVA_HOME=/export/server/jdk.1.8.0_241&#x27; &gt;&gt; /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">PATH</span><br>echo &quot;------------PATH ----------&quot;<br>echo &#x27;export PATH=:$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; /etc/profile<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">7.加载环境变量</span><br>source /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">8。 提示用户安装成功，查看jdk安装版本</span> <br>echo &quot;恭喜您，jdk安装成功！&quot;<br>java -version<br></code></pre></td></tr></table></figure><h3 id="数据库定时备份"><a href="#数据库定时备份" class="headerlink" title="数据库定时备份"></a>数据库定时备份</h3><ul><li>编写备份脚本 <code>dump_mysql.sh</code>,并赋予执行权限:<code>chmod +x dump_mysql.sh</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">完成数据库定时备份</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份的路径</span><br>BACKUP=/export/data/db<br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前时间作为文件名</span><br>DATETIME=$(date +%Y_%m_%d_%H_%M_%S)<br>echo $DATETIME<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使甲变量的时候中可以用小花括号的方式把变量名包起来,如下：</span><br>echo $&#123;DATETIME&#125;<br><br>echo &quot;----------------开始备份数据库-------------------&quot;<br>echo &quot;----------------备份的路径是$BACKUP/$DATETIME.tar.gz--------------------&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">主机ip地址</span> <br>HOST=XXX.XXX.XXX.XXX<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库用户密码,数据库名</span><br>DB_USER=root<br>DB_PWD=xxxxxxxx<br>DATABASE=your_db_name<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建备份路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果备份的文件夹路径存在的话，就直接使用，否则就创建</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">用法:如果文件夹不存在,则才执行后面的创建命令</span><br>[ ! -d &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行mysql备份数据库的指令</span><br>mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PWD&#125; --host=$&#123;HOST&#125; $&#123;DATABASE&#125; &gt; $&#123;BACKUP&#125;/$&#123;DATETIME&#125;/$&#123;DATETIME&#125;.sql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">打包备份文件</span><br>cd $&#123;BACKUP&#125;<br>tar -czvf $&#123;DATATIME&#125;.tar.gz $&#123;DATETIME&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除临时目录</span><br>rm -rf $&#123;BACKUP&#125;/$&#123;DATETIME&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除十天前的备份文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">语法:-mtime  修改时间,+10  十天前,最后的&#123;&#125;为前面找到的文件</span> <br>find $&#123;BACKUP&#125; -mtime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;<br>echo &quot;_----------------备份成功---------------&quot;<br></code></pre></td></tr></table></figure><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202406082259050.png" alt="image-20240608225903999"></p><ul><li><p>定时任务</p><p><code>crontab -e</code></p><p><code>15 1 * * *  /export/shell/dump_mysql.sh</code></p></li></ul><h1 id="ZooKeeper集群搭建"><a href="#ZooKeeper集群搭建" class="headerlink" title="ZooKeeper集群搭建"></a>ZooKeeper集群搭建</h1><blockquote><p>Zookeeper是一个分布式协调服务的开源框架。主要用来解决分布式集群中应用系统的一致性问题.</p><p>ZooKeeper本质上是一个分布式的小文件存储系统。提供基于类似于文件系统的目录树方式的数据存储，并且可以对树中的节点进行有效管理。从而用来维护和监控你存储的数据的状态变化，通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。</p></blockquote><p>Zookeeper集群搭建指的是Zookeeper分布式模式安装。通常由2n+1台server组成。这是因为为了保证Leader选举（基于Paxos算法的实现）能过得到多数的支持，所以ZooKeeper集群的数量一般为奇数。</p><p>Zookeeper运行需要java环境，所以需要提前安装jdk。对于安装leader+follower模式的集群，大致过程如下： </p><p>配置主机名称到IP地址映射配置</p><p>修改ZooKeeper配置文件</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot AOP记录用户操作日志</title>
      <link href="/2020/12/04/Spring%20Boot%20AOP%E8%AE%B0%E5%BD%95%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
      <url>/2020/12/04/Spring%20Boot%20AOP%E8%AE%B0%E5%BD%95%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h1><p>在Spring框架中，使用AOP配合自定义注解可以方便的实现用户操作的监控。首先搭建一个基本的Spring Boot Web环境<a href="https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html">开启Spring Boot</a>，然后引入必要依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- aop依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- oracle驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.oracle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ojdbc6<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- druid数据源驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2.自定义注解"></a>2.自定义注解</h1><p>定义一个方法级别的<code>@Log</code>注解，用于标注需要监控的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-创建库表和实体"><a href="#3-创建库表和实体" class="headerlink" title="3.创建库表和实体"></a>3.创建库表和实体</h1><p>在数据库中创建一张sys_log表，用于保存用户的操作日志，数据库采用oracle 11g：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot; (<br>   &quot;ID&quot; NUMBER(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>   &quot;USERNAME&quot; VARCHAR2(<span class="hljs-number">50</span> BYTE) <span class="hljs-keyword">NULL</span> ,<br>   &quot;OPERATION&quot; VARCHAR2(<span class="hljs-number">50</span> BYTE) <span class="hljs-keyword">NULL</span> ,<br>   &quot;TIME&quot; NUMBER(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> ,<br>   &quot;METHOD&quot; VARCHAR2(<span class="hljs-number">200</span> BYTE) <span class="hljs-keyword">NULL</span> ,<br>   &quot;PARAMS&quot; VARCHAR2(<span class="hljs-number">500</span> BYTE) <span class="hljs-keyword">NULL</span> ,<br>   &quot;IP&quot; VARCHAR2(<span class="hljs-number">64</span> BYTE) <span class="hljs-keyword">NULL</span> ,<br>   &quot;CREATE_TIME&quot; <span class="hljs-type">DATE</span> <span class="hljs-keyword">NULL</span> <br>);<br><br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;USERNAME&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;用户名&#x27;</span>;<br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;OPERATION&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;用户操作&#x27;</span>;<br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;TIME&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;响应时间&#x27;</span>;<br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;METHOD&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;请求方法&#x27;</span>;<br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;PARAMS&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;请求参数&#x27;</span>;<br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;IP&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;IP地址&#x27;</span>;<br>COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">COLUMN</span> &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;CREATE_TIME&quot; <span class="hljs-keyword">IS</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> SEQUENCE seq_sys_log <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> <span class="hljs-number">1</span> INCREMENT <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>库表对应的实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6309732882044872298L</span>;<br>    <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String operation;<br>    <span class="hljs-keyword">private</span> Integer time;<br>    <span class="hljs-keyword">private</span> String method;<br>    <span class="hljs-keyword">private</span> String params;<br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-comment">// get,set略</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-保存日志的方法"><a href="#4-保存日志的方法" class="headerlink" title="4.保存日志的方法"></a>4.保存日志的方法</h1><p>为了方便，这里直接使用Spring JdbcTemplate来操作数据库。定义一个SysLogDao接口，包含一个保存操作日志的抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SysLogDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveSysLog</span><span class="hljs-params">(SysLog syslog)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实现方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLogDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SysLogDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveSysLog</span><span class="hljs-params">(SysLog syslog)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;insert into sys_log &quot;</span>);<br>        sql.append(<span class="hljs-string">&quot;(id,username,operation,time,method,params,ip,create_time) &quot;</span>);<br>        sql.append(<span class="hljs-string">&quot;values(seq_sys_log.nextval,:username,:operation,:time,:method,&quot;</span>);<br>        sql.append(<span class="hljs-string">&quot;:params,:ip,:createTime)&quot;</span>);<br>        <br>        <span class="hljs-type">NamedParameterJdbcTemplate</span> <span class="hljs-variable">npjt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamedParameterJdbcTemplate</span>(<span class="hljs-built_in">this</span>.jdbcTemplate.getDataSource());<br>        npjt.update(sql.toString(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertySqlParameterSource</span>(syslog));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-切面和切点"><a href="#5-切面和切点" class="headerlink" title="5.切面和切点"></a>5.切面和切点</h1><p>定义一个LogAspect类，使用<code>@Aspect</code>标注让其成为一个切面，切点为使用<code>@Log</code>注解标注的方法，使用<code>@Around</code>环绕通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysLogDao sysLogDao;<br>    <br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.springboot.annotation.Log)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint point)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行方法</span><br>            result = point.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 执行时长(毫秒)</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - beginTime;<br>        <span class="hljs-comment">// 保存日志</span><br>        saveLog(point, time);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br>        <span class="hljs-type">SysLog</span> <span class="hljs-variable">sysLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysLog</span>();<br>        <span class="hljs-type">Log</span> <span class="hljs-variable">logAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Log.class);<br>        <span class="hljs-keyword">if</span> (logAnnotation != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 注解上的描述</span><br>            sysLog.setOperation(logAnnotation.value());<br>        &#125;<br>        <span class="hljs-comment">// 请求的方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> signature.getName();<br>        sysLog.setMethod(className + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;()&quot;</span>);<br>        <span class="hljs-comment">// 请求的方法参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-comment">// 请求的方法参数名称</span><br>        <span class="hljs-type">LocalVariableTableParameterNameDiscoverer</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalVariableTableParameterNameDiscoverer</span>();<br>        String[] paramNames = u.getParameterNames(method);<br>        <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span> &amp;&amp; paramNames != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                params += <span class="hljs-string">&quot;  &quot;</span> + paramNames[i] + <span class="hljs-string">&quot;: &quot;</span> + args[i];<br>            &#125;<br>            sysLog.setParams(params);<br>        &#125;<br>        <span class="hljs-comment">// 获取request</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpContextUtils.getHttpServletRequest();<br>        <span class="hljs-comment">// 设置IP地址</span><br>        sysLog.setIp(IPUtils.getIpAddr(request));<br>        <span class="hljs-comment">// 模拟一个用户名</span><br>        sysLog.setUsername(<span class="hljs-string">&quot;mrbird&quot;</span>);<br>        sysLog.setTime((<span class="hljs-type">int</span>) time);<br>        sysLog.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-comment">// 保存系统日志</span><br>        sysLogDao.saveSysLog(sysLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h1><p>TestController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@Log(&quot;执行方法一&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/one&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodOne</span><span class="hljs-params">(String name)</span> &#123; &#125;<br>    <br>    <span class="hljs-meta">@Log(&quot;执行方法二&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/two&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodTwo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Log(&quot;执行方法三&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/three&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodThree</span><span class="hljs-params">(String name, String age)</span> &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终项目目录如下图所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031627200.png" alt="20200715_08572379"></p><p>启动项目，分别访问：</p><ul><li><a href="http://localhost:8080/web/one?name=KangKang">http://localhost:8080/web/one?name=KangKang</a></li><li><a href="http://localhost:8080/web/two">http://localhost:8080/web/two</a></li><li><a href="http://localhost:8080/web/three?name=Mike&age=25">http://localhost:8080/web/three?name=Mike&amp;age=25</a></li></ul><p>查询数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">SQL&gt; select * from sys_log order by id;<br><br>ID USERNAME   OPERATION        TIME METHOD                         PARAMS                         IP         CREATE_TIME<br>---------- ---------- ---------- ---------- ------------------------------ ------------------------------ ---------- --------------<br>11 mrbird     执行方法一          6 com.springboot.controller.Test  name: KangKang                127.0.0.1  08-12月-17<br>                                            Controller.methodOne()<br>12 mrbird     执行方法二       2000 com.springboot.controller.Test                                127.0.0.1  08-12月-17<br>                                            Controller.methodTwo()<br><br>13 mrbird     执行方法三          0 com.springboot.controller.Test  name: Mike age: 25            127.0.0.1  08-12月-17<br>                                            Controller.methodThree()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> aop </tag>
            
            <tag> 面向切面编程 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot中使用缓存</title>
      <link href="/2020/12/04/Spring%20Boot%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2020/12/04/Spring%20Boot%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>在程序中可以使用缓存的技术来节省对数据库的开销。Spring Boot对缓存提供了很好的支持，我们几乎不用做过多的配置即可使用各种缓存实现。这里主要介绍平日里个人接触较多的Ehcache和Redis缓存实现。</p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>yml中配置日志输出级别以观察SQL的执行情况：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">springboot:</span><br>        <span class="hljs-attr">mapper:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p>其中<code>com.spring.mapper</code>为MyBatis的Mapper接口路径。</p><p>然后编写如下测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.studentService.queryStudentBySno(<span class="hljs-string">&quot;001&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;学号&quot;</span> + student1.getSno() + <span class="hljs-string">&quot;的学生姓名为：&quot;</span> + student1.getName());<br>        <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.studentService.queryStudentBySno(<span class="hljs-string">&quot;001&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;学号&quot;</span> + student2.getSno() + <span class="hljs-string">&quot;的学生姓名为：&quot;</span> + student2.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>右键run as junit test：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">2017-11-17 16:34:26.535 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-17 16:34:26.688 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-17 16:34:26.716 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：KangKang<br>2017-11-17 16:34:26.720 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-17 16:34:26.720 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-17 16:34:26.721 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：KangKang<br></code></pre></td></tr></table></figure><p>可发现第二个查询虽然和第一个查询完全一样，但其还是对数据库进行了查询。接下来引入缓存来改善这个结果。</p><h1 id="2-使用缓存"><a href="#2-使用缓存" class="headerlink" title="2.使用缓存"></a>2.使用缓存</h1><p>要开启Spring Boot的缓存功能，需要在pom中引入<code>spring-boot-starter-cache</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着在Spring Boot入口类中加入<code>@EnableCaching</code>注解开启缓存功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在StudentService接口中加入缓存注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheConfig(cacheNames = &quot;student&quot;)</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    <span class="hljs-meta">@CachePut(key = &quot;#p0.sno&quot;)</span><br>    Student <span class="hljs-title function_">update</span><span class="hljs-params">(Student student)</span>;<br>    <br>    <span class="hljs-meta">@CacheEvict(key = &quot;#p0&quot;, allEntries = true)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteStudentBySno</span><span class="hljs-params">(String sno)</span>;<br>    <br>  <span class="hljs-comment">//将id作为redis中的key值</span><br>    <span class="hljs-meta">@Cacheable(key = &quot;#p0&quot;)</span><br>    Student <span class="hljs-title function_">queryStudentBySno</span><span class="hljs-params">(String sno)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在StudentService接口中加入了<code>@CacheConfig</code>注解，<code>queryStudentBySno</code>方法使用了注解<code>@Cacheable(key=&quot;#p0&quot;)</code>，即将sno作为redis中的key值。当我们更新数据的时候，应该使用<code>@CachePut(key=&quot;#p0.sno&quot;)</code>进行缓存数据的更新，否则将查询到脏数据，因为该注解保存的是方法的返回值，所以这里应该返回Student。</p><p>其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;studentService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">update</span><span class="hljs-params">(Student student)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentMapper.update(student);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.studentMapper.queryStudentBySno(student.getSno());<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteStudentBySno</span><span class="hljs-params">(String sno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentMapper.deleteStudentBySno(sno);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">queryStudentBySno</span><span class="hljs-params">(String sno)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.studentMapper.queryStudentBySno(sno);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Spring Boot中可使用的缓存注解有：</p><h2 id="2-1缓存注解"><a href="#2-1缓存注解" class="headerlink" title="2.1缓存注解"></a>2.1缓存注解</h2><h3 id="2-1-1-CacheConfig"><a href="#2-1-1-CacheConfig" class="headerlink" title="2.1.1 @CacheConfig"></a>2.1.1 @CacheConfig</h3><p><strong>主要用于配置该类中会用到的一些共用的缓存配置</strong>。在这里<code>@CacheConfig(cacheNames = &quot;student&quot;)</code>：配置了该数据访问对象中返回的内容将存储于名为student的缓存对象中，我们也可以不使用该注解，直接通过<code>@Cacheable</code>自己配置缓存集的名字来定义；</p><h3 id="2-1-2-Cacheable"><a href="#2-1-2-Cacheable" class="headerlink" title="2.1.2 @Cacheable"></a>2.1.2 @Cacheable</h3><p>配置了queryStudentBySno函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：</p><ul><li>**<code>value</code>、<code>cacheNames</code>**：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了<code>@CacheConfig</code>，因此在Spring 3中原本必须有的value属性，也成为非必需项了；</li><li><strong><code>key</code>：</strong>缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：<code>@Cacheable(key = &quot;#p0&quot;)</code>：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache">参考</a>；</li><li><strong><code>condition</code>：</strong>缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：<code>@Cacheable(key = &quot;#p0&quot;, condition = &quot;#p0.length() &lt; 3&quot;)</code>，表示只有当第一个参数的长度小于3的时候才会被缓存；</li><li><strong><code>unless</code>：</strong>另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断；</li><li><strong><code>keyGenerator</code>：</strong>用于指定key生成器，<strong>非必需</strong>。若需要指定一个自定义的key生成器，我们需要去实现<code>org.springframework.cache.interceptor.KeyGenerator</code>接口，并使用该参数来指定；</li><li><strong><code>cacheManager</code>：</strong>用于指定使用哪个缓存管理器，<strong>非必需</strong>。只有当有多个时才需要使用；</li><li><strong><code>cacheResolver</code>：</strong>用于指定使用那个缓存解析器，<strong>非必需</strong>。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定；</li></ul><h3 id="2-1-3-CachePut"><a href="#2-1-3-CachePut" class="headerlink" title="2.1.3 @CachePut"></a>2.1.3 @CachePut</h3><p><strong>配置于函数上，能够根据参数定义条件来进行缓存，其缓存的是方法的返回值</strong>，它与<code>@Cacheable</code>不同的是，它每次都会真实调用函数，所以主要用于数据新增和修改操作上。它的参数与<code>@Cacheable</code>类似，具体功能可参考上面对<code>@Cacheable</code>参数的解析；</p><h3 id="2-1-4-CacheEvict"><a href="#2-1-4-CacheEvict" class="headerlink" title="2.1.4 @CacheEvict"></a>2.1.4 @CacheEvict</h3><p><code>配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同</code>@Cacheable&#96;一样的参数之外，它还有下面两个参数：</p><ul><li><code>allEntries</code>：非必需，默认为false。当为true时，会移除所有数据；</li><li><code>beforeInvocation</code>：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。</li></ul><h2 id="2-2-缓存实现"><a href="#2-2-缓存实现" class="headerlink" title="2.2 缓存实现"></a>2.2 缓存实现</h2><p>要使用上Spring Boot的缓存功能，还需要提供一个缓存的具体实现。Spring Boot根据下面的顺序去侦测缓存实现：</p><ul><li>Generic</li><li>JCache (JSR-107)</li><li>EhCache 2.x</li><li>Hazelcast</li><li>Infinispan</li><li>Redis</li><li>Guava</li><li>Simple</li></ul><p>除了按顺序侦测外，我们也可以通过配置属性spring.cache.type来强制指定。</p><p>接下来主要介绍基于Redis和Ehcache的缓存实现。</p><h3 id="2-2-1-Redis"><a href="#2-2-1-Redis" class="headerlink" title="2.2.1 Redis"></a>2.2.1 Redis</h3><p>Redis的下载地址为<a href="https://github.com/MicrosoftArchive/redis/releases%EF%BC%8CRedis">https://github.com/MicrosoftArchive/redis/releases，Redis</a> 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到C盘。打开一个CMD窗口，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;cd c:\Redis-x64-3.2.100<br><br>c:\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf<br>                _._<br>           _.-``__ &#x27;&#x27;-._<br>      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 3.2.100 (00000000/0) 64 bit<br>  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._<br> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode<br> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379<br> |    `-._   `._    /     _.-&#x27;    |     PID: 6404<br>  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;<br> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|<br> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io<br>  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;<br> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|<br> |    `-._`-._        _.-&#x27;_.-&#x27;    |<br>  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;<br>      `-._    `-.__.-&#x27;    _.-&#x27;<br>          `-._        _.-&#x27;<br>              `-.__.-&#x27;<br><br>[6404] 25 Dec 09:47:58.890 # Server started, Redis version 3.2.100<br>[6404] 25 Dec 09:47:58.898 * DB loaded from disk: 0.007 seconds<br>[6404] 25 Dec 09:47:58.898 * The server is now ready to accept connections on port 6379<br></code></pre></td></tr></table></figure><p>然后打开另外一个CMD终端，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;cd c:\Redis-x64-3.2.100<br><br>c:\Redis-x64-3.2.100&gt;redis-cli.exe -p 6379<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><p>准备工作做完后，接下来开始在Spring Boot项目里引入Redis：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-boot redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在application.yml中配置Redis：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># Redis数据库索引（默认为0）</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># Redis服务器地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-comment"># Redis服务器连接端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">pool:</span><br>      <span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制）</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>      <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>      <span class="hljs-comment"># 连接池中的最大空闲连接</span><br>      <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>      <span class="hljs-comment"># 连接池中的最小空闲连接</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 连接超时时间（毫秒）</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>更多关于Spring Boot Redis配置可参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html#">https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html#</a> REDIS</p><p>接着创建一个Redis配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br><br>    <span class="hljs-comment">// 自定义缓存key生成策略</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">keyGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyGenerator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">generate</span><span class="hljs-params">(Object target, java.lang.reflect.Method method, Object... params)</span> &#123;<br>                <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>                sb.append(target.getClass().getName());<br>                sb.append(method.getName());<br>                <span class="hljs-keyword">for</span> (Object obj : params) &#123;<br>                    sb.append(obj.toString());<br>                &#125;<br>                <span class="hljs-keyword">return</span> sb.toString();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 缓存管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(<span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span> RedisTemplate redisTemplate)</span> &#123;<br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCacheManager</span>(redisTemplate);<br>        <span class="hljs-comment">// 设置缓存过期时间（秒）</span><br>        cacheManager.setDefaultExpiration(<span class="hljs-number">3600</span>);<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        <span class="hljs-type">StringRedisTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>(factory);<br>        setSerializer(template);<span class="hljs-comment">// 设置序列化工具</span><br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSerializer</span><span class="hljs-params">(StringRedisTemplate template)</span> &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试，控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">2017-11-17 18:17:06.995 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-17 18:17:07.128 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-17 18:17:07.152 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：KangKang<br>学号001的学生姓名为：KangKang<br></code></pre></td></tr></table></figure><p>第二次查询没有访问数据库，而是从缓存中获取的，在redis中查看该值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt;   keys *<br>1) &quot;student~keys&quot;<br>2) &quot;001&quot;<br>127.0.0.1:6379&gt; get 001<br>&quot;[\&quot;com.springboot.bean.Student\&quot;,&#123;\&quot;sno\&quot;:\&quot;001\&quot;,\&quot;name\&quot;:\&quot;KangKang\&quot;,\&quot;sex\&quot;:\&quot;M \&quot;&#125;]&quot;<br></code></pre></td></tr></table></figure><p>在测试方法中测试更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.studentService.queryStudentBySno(<span class="hljs-string">&quot;001&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;学号&quot;</span> + student1.getSno() + <span class="hljs-string">&quot;的学生姓名为：&quot;</span> + student1.getName());<br>    <br>    student1.setName(<span class="hljs-string">&quot;康康&quot;</span>);<br>    <span class="hljs-built_in">this</span>.studentService.update(student1);<br>    <br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.studentService.queryStudentBySno(<span class="hljs-string">&quot;001&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;学号&quot;</span> + student2.getSno() + <span class="hljs-string">&quot;的学生姓名为：&quot;</span> + student2.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">学号001的学生姓名为：KangKang<br>2017-11-17 19:30:05.813  INFO 11244 --- [main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited<br>2017-11-17 19:30:05.823 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update          : ==&gt;  Preparing: update student set sname=?,ssex=? where sno=? <br>2017-11-17 19:30:05.941 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update          : ==&gt; Parameters: 康康(String), M (String), 001(String)<br>2017-11-17 19:30:05.953 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update          : &lt;==    Updates: 1<br>2017-11-17 19:30:05.957 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-17 19:30:05.959 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-17 19:30:05.976 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：康康<br></code></pre></td></tr></table></figure><p>在redis中查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; get 001<br>&quot;[\&quot;com.springboot.bean.Student\&quot;,&#123;\&quot;sno\&quot;:\&quot;001\&quot;,\&quot;name\&quot;:\&quot;\xe5\xba\xb7\xe5\xba\xb7\&quot;,\&quot;sex\&quot;:\&quot;M \&quot;&#125;]&quot;<br></code></pre></td></tr></table></figure><p>可见更新数据库的同时，缓存也得到了更新。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/09.Spring-Boot-Redis-Cache">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/09.Spring-Boot-Redis-Cache</a></p><h3 id="2-2-2-Ehcache"><a href="#2-2-2-Ehcache" class="headerlink" title="2.2.2 Ehcache"></a>2.2.2 Ehcache</h3><p>引入Ehcache依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在src&#x2F;main&#x2F;resources目录下新建ehcache.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;ehcache.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;3600&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;student&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxEntriesLocalHeap</span>=<span class="hljs-string">&quot;2000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;3600&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">statistics</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于Ehcahe的一些说明：</p><ul><li>name：缓存名称。</li><li>maxElementsInMemory：缓存最大数目</li><li>maxElementsOnDisk：硬盘最大缓存个数。</li><li>eternal：对象是否永久有效，一但设置了，timeout将不起作用。</li><li>overflowToDisk：是否保存到磁盘。</li><li>timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当<code>eternal=false</code>对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</li><li>timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当<code>eternal=false</code>对象不是永久有效时使用，默认是0，也就是对象存活时间无穷大。</li><li>diskPersistent：是否缓存虚拟机重启期数据，默认值为false。</li><li>diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</li><li>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</li><li>memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</li><li>clearOnFlush：内存数量最大时是否清除。</li><li>memoryStoreEvictionPolicy：Ehcache的三种清空策略：<strong>FIFO</strong>，first in first out，这个是大家最熟的，先进先出。<strong>LFU</strong>， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。<strong>LRU</strong>，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</li></ul><p>接着在application.yml中指定ehcache配置的路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">ehcache:</span><br>      <span class="hljs-attr">config:</span> <span class="hljs-string">&#x27;classpath:ehcache.xml&#x27;</span><br></code></pre></td></tr></table></figure><p>这样就可以开始使用ehcache了，运行测试类，观察控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">2017-11-18 09:10:40.201 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-18 09:10:40.343 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-18 09:10:40.364 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：KangKang<br>学号001的学生姓名为：KangKang<br></code></pre></td></tr></table></figure><p>可看到第二次是从缓存中获取的。</p><p>测试更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">2017-11-18 09:18:04.230 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-18 09:18:04.397 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-18 09:18:04.427 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：KangKang<br>2017-11-18 09:18:04.433 DEBUG 11556 --- [main] c.s.mapper.StudentMapper.update          : ==&gt;  Preparing: update student set sname=?,ssex=? where sno=? <br>2017-11-18 09:18:04.438 DEBUG 11556 --- [main] c.s.mapper.StudentMapper.update          : ==&gt; Parameters: 康康(String), M (String), 001(String)<br>2017-11-18 09:18:04.440 DEBUG 11556 --- [main] c.s.mapper.StudentMapper.update          : &lt;==    Updates: 1<br>2017-11-18 09:18:04.440 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt;  Preparing: select * from student where sno=? <br>2017-11-18 09:18:04.441 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno    : ==&gt; Parameters: 001(String)<br>2017-11-18 09:18:04.442 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno    : &lt;==      Total: 1<br>学号001的学生姓名为：康康<br></code></pre></td></tr></table></figure><p>可见，即使更新方法加了<code>@CachePut</code>注解，第二次查询因为Student对象更新了，其是从数据库获取数据的，所以对于Ehcache来说，更新方法加不加<code>@CachePut</code>注解，结果都一样。</p><blockquote><p><strong>本文作者：</strong> MrBird</p><p><strong>本文链接：</strong> <a href="http://mrbird.cc/Spring-Boot">http://mrbird.cc/Spring-Boot</a> cache.html</p><p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot - 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot中使用过滤器和拦截器</title>
      <link href="/2020/12/04/Spring%20Boot%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2020/12/04/Spring%20Boot%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>过滤器（Filter）和拦截器（Interceptor）是Web项目中常用的两个功能，本文将简单介绍在Spring Boot中使用过滤器和拦截器来计算Controller中方法的执行时长，并且简单对比两者的区别。</p><p>现有如下Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id:\\d+&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>        System.out.println(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面通过配置过滤器和拦截器来实现对<code>get</code>方法执行时间计算的功能。</p><h1 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1.过滤器"></a>1.过滤器</h1><p>定义一个<code>TimeFilter</code>类，实现<code>javax.servlet.Filter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;过滤器初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始执行过滤器&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br>        filterChain.doFilter(servletRequest, servletResponse);<br>        System.out.println(<span class="hljs-string">&quot;【过滤器】耗时 &quot;</span> + (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime() - start));<br>        System.out.println(<span class="hljs-string">&quot;结束执行过滤器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;过滤器销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TimeFilter</code>重写了<code>Filter</code>的三个方法，方法名称已经很直白的描述了其作用，这里不再赘述。</p><p>要使该过滤器在Spring Boot中生效，还需要一些配置。这里主要有两种配置方式。</p><h2 id="配置方式一"><a href="#配置方式一" class="headerlink" title="配置方式一"></a>配置方式一</h2><p>可通过在<code>TimeFilter</code>上加上如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &#123;&quot;/*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>   ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Component</code>注解让<code>TimeFilter</code>成为Spring上下文中的一个Bean</li><li><code>@WebFilter</code>注解的<code>urlPatterns</code>属性配置了哪些请求可以进入该过滤器，<code>/*</code>表示所有请求。</li></ul><p>启动项目时可以看到控制台输出了<code>过滤器初始化</code>，启动后访问<a href="http://localhost:8080/user/1%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/user/1，控制台输出如下：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">开始执行过滤器<br>1<br>【过滤器】耗时 31<br>结束执行过滤器<br></code></pre></td></tr></table></figure><h2 id="配置方式二"><a href="#配置方式二" class="headerlink" title="配置方式二"></a>配置方式二</h2><p>除了在过滤器类上加注解外，我们也可以通过<code>FilterRegistrationBean</code>来注册过滤器。</p><p>定义一个<code>WebConfig</code>类，加上<code>@Configuration</code>注解表明其为配置类，然后通过<code>FilterRegistrationBean</code>来注册过滤器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">timeFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">filterRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>        <span class="hljs-type">TimeFilter</span> <span class="hljs-variable">timeFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeFilter</span>();<br>        filterRegistrationBean.setFilter(timeFilter);<br><br>        List&lt;String&gt; urlList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        urlList.add(<span class="hljs-string">&quot;/*&quot;</span>);<br><br>        filterRegistrationBean.setUrlPatterns(urlList);<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>FilterRegistrationBean</code>除了注册过滤器<code>TimeFilter</code>外还通过<code>setUrlPatterns</code>方法配置了URL匹配规则。重启项目访问<a href="http://localhost:8080/user/1%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%92%8C%E4%B8%8A%E9%9D%A2%E4%B8%80%E6%A0%B7%E7%9A%84%E6%95%88%E6%9E%9C%E3%80%82">http://localhost:8080/user/1，我们可以看到和上面一样的效果。</a></p><p><strong>通过过滤器我们只可以获取到servletRequest对象，所以并不能获取到方法的名称，所属类，参数等额外的信息。</strong></p><h1 id="2-拦截器"><a href="#2-拦截器" class="headerlink" title="2.拦截器"></a>2.拦截器</h1><p>定义一个<code>TimeInterceptor</code>类，实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;处理拦截之前&quot;</span>);<br>        httpServletRequest.setAttribute(<span class="hljs-string">&quot;startTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime());<br>        System.out.println(((HandlerMethod) o).getBean().getClass().getName());<br>        System.out.println(((HandlerMethod) o).getMethod().getName());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始处理拦截&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (Long) httpServletRequest.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【拦截器】耗时 &quot;</span> + (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime() - start));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;处理拦截之后&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (Long) httpServletRequest.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;【拦截器】耗时 &quot;</span> + (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime() - start));<br>        System.out.println(<span class="hljs-string">&quot;异常信息 &quot;</span> + e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TimeInterceptor</code>实现了<code>HandlerInterceptor</code>接口的三个方法。</p><ul><li><code>preHandle</code>方法在处理拦截之前执行</li><li><code>postHandle</code>只有当被拦截的方法没有抛出异常成功时才会处理，</li><li><code>afterCompletion</code>方法无论被拦截的方法抛出异常与否都会执行。</li></ul><p>通过这三个方法的参数可以看到，相较于过滤器，拦截器多了Object和Exception对象，所以可以获取的信息比过滤器要多的多。但拦截器仍无法获取到方法的参数等信息，我们可以通过切面编程来实现这个目的，具体可参考[<a href="https://mrbird.cc/Spring-Boot-AOP%20log.html]">https://mrbird.cc/Spring-Boot-AOP%20log.html]</a>(<a href="https://mrbird.cc/Spring-Boot-AOP">https://mrbird.cc/Spring-Boot-AOP</a> log.html)。</p><p>要使拦截器在Spring Boot中生效，还需要如下两步配置：</p><p>1.在拦截器类上加入<code>@Component</code>注解；</p><p>2.在<code>WebConfig</code>中通过<code>InterceptorRegistry</code>注册过滤器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TimeInterceptor timeInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(timeInterceptor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目，访问<a href="http://localhost:8080/user/1%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/user/1，控制台输出如下：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">处理拦截之前<br>cc.mrbird.controller.UserController<br>get<br>1<br>开始处理拦截<br>【拦截器】耗时 24<br>处理拦截之后<br>【拦截器】耗时 24<br>异常信息 null<br></code></pre></td></tr></table></figure><p>从输出中我们可以了解到三个方法的执行顺序，并且三个方法都被执行了。</p><p>我们在<code>UserController</code>的<code>get</code>方法中手动抛出一个异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@GetMapping(&quot;/&#123;id:\\d+&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>    System.out.println(id);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;user not exist&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>重启项目后，访问<a href="http://localhost:8080/user/1%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/user/1，控制台输出如下：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">处理拦截之前<br>cc.mrbird.controller.UserController<br>get<br>1<br>处理拦截之后<br>【拦截器】耗时 0<br>异常信息 java.lang.RuntimeException: user not exist<br></code></pre></td></tr></table></figure><p>可看到，<code>postHandle</code>方法并没有被执行。</p><h1 id="3-执行时机对比"><a href="#3-执行时机对比" class="headerlink" title="3.执行时机对比"></a>3.执行时机对比</h1><p>我们将过滤器和拦截器都配置上，然后启动项目访问<a href="http://localhost:8080/user/1%EF%BC%9A">http://localhost:8080/user/1：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">开始执行过滤器<br>处理拦截之前<br>cc.mrbird.controller.UserController<br>get<br>1<br>开始处理拦截<br>【拦截器】耗时 25<br>处理拦截之后<br>【拦截器】耗时 25<br>异常信息 null<br>【过滤器】耗时 34<br>结束执行过滤器<br></code></pre></td></tr></table></figure><p>可看到过滤器要先于拦截器执行，晚于拦截器结束。下图很好的描述了它们的执行时间区别：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031605045.png" alt="32361-20180530095349427-444141538.png"></p><blockquote><p><strong>本文作者：</strong> MrBird</p><p><strong>本文链接：</strong> <a href="http://mrbird.cc/Spring-Boot-Filter-Interceptor.html">http://mrbird.cc/Spring-Boot-Filter-Interceptor.html</a></p><p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot中的json技术</title>
      <link href="/2020/12/04/springboot%E4%B8%AD%E7%9A%84json%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/12/04/springboot%E4%B8%AD%E7%9A%84json%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>平日里在项目中处理JSON一般用的都是阿里巴巴的Fastjson，后来发现使用Spring Boot内置的Jackson来完成JSON的序列化和反序列化操作也挺方便。Jackson不但可以完成简单的序列化和反序列化操作，也能实现复杂的个性化的序列化和反序列化操作。</p><h1 id="1-自定义ObjectMapper"><a href="#1-自定义ObjectMapper" class="headerlink" title="1.自定义ObjectMapper"></a>1.自定义ObjectMapper</h1><p>我们都知道，在Spring中使用<code>@ResponseBody</code>注解可以将方法返回的对象序列化成JSON，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;getuser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUserName(<span class="hljs-string">&quot;mrbird&quot;</span>);<br>    user.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6222176558369919436L</span>;<br>    <br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;birthday&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1522634892365</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可看到时间默认以时间戳的形式输出，如果想要改变这个默认行为，我们可以自定义一个ObjectMapper来替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">getObjectMapper</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        mapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>        <span class="hljs-keyword">return</span> mapper;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面配置获取了ObjectMapper对象，并且设置了时间格式。再次访问<code>getuser</code>，页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;birthday&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2018-04-02 10:14:24&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="2-序列化-对象转json"><a href="#2-序列化-对象转json" class="headerlink" title="2.序列化(对象转json)"></a>2.序列化(对象转json)</h1><p>Jackson通过使用mapper的<code>writeValueAsString</code>方法将Java对象序列化为JSON格式字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ObjectMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;serialization&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">serialization</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUserName(<span class="hljs-string">&quot;mrbird&quot;</span>);<br>        user.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-反序列化"><a href="#3-反序列化" class="headerlink" title="3.反序列化"></a>3.反序列化</h1><p>使用<code>@ResponseBody</code>注解可以使对象序列化为JSON格式字符串，除此之外，Jackson也提供了反序列化方法。</p><h2 id="3-1树遍历-解析json获取值"><a href="#3-1树遍历-解析json获取值" class="headerlink" title="3.1树遍历(解析json获取值)"></a>3.1树遍历(解析json获取值)</h2><p>当采用树遍历的方式时，JSON被读入到JsonNode对象中，可以像操作XML DOM那样读取JSON。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ObjectMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;readjsonstring&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">readJsonString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;mrbird\&quot;,\&quot;age\&quot;:26&#125;&quot;</span>;<br>        <span class="hljs-type">JsonNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mapper.readTree(json);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> node.get(<span class="hljs-string">&quot;name&quot;</span>).asText();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> node.get(<span class="hljs-string">&quot;age&quot;</span>).asInt();<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; &quot;</span> + age;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>readTree</code>方法可以接受一个字符串或者字节数组、文件、InputStream等， 返回JsonNode作为根节点，你可以像操作XML DOM那样操作遍历JsonNode以获取数据。</p><p>解析多级JSON例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;mrbird\&quot;,\&quot;hobby\&quot;:&#123;\&quot;first\&quot;:\&quot;sleep\&quot;,\&quot;second\&quot;:\&quot;eat\&quot;&#125;&#125;&quot;</span>;;<br><span class="hljs-type">JsonNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mapper.readTree(json);<br><span class="hljs-type">JsonNode</span> <span class="hljs-variable">hobby</span> <span class="hljs-operator">=</span> node.get(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> hobby.get(<span class="hljs-string">&quot;first&quot;</span>).asText();<br></code></pre></td></tr></table></figure><h2 id="3-2绑定对象-json转对象"><a href="#3-2绑定对象-json转对象" class="headerlink" title="3.2绑定对象(json转对象)"></a>3.2绑定对象(json转对象)</h2><p>我们也可以将Java对象和JSON数据进行绑定，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ObjectMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;readjsonasobject&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">readJsonAsObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;mrbird\&quot;,\&quot;age\&quot;:26&#125;&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.readValue(json, User.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> user.getUserName();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> user.getAge();<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; &quot;</span> + age;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-Jackson注解"><a href="#4-Jackson注解" class="headerlink" title="4.Jackson注解"></a>4.Jackson注解</h1><p>Jackson包含了一些实用的注解：</p><h2 id="4-1-JsonProperty"><a href="#4-1-JsonProperty" class="headerlink" title="4.1@JsonProperty"></a>4.1@JsonProperty</h2><p><code>@JsonProperty</code>，作用在属性上，用来为JSON Key指定一个别名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonProperty(&quot;bth&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br></code></pre></td></tr></table></figure><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;bth&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2018-04-02 10:38:37&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>key birthday已经被替换为了bth。</p><h2 id="4-2-Jsonlgnore"><a href="#4-2-Jsonlgnore" class="headerlink" title="4.2@Jsonlgnore"></a>4.2@Jsonlgnore</h2><p><code>@Jsonlgnore</code>，<strong>作用在属性上，用来忽略此属性。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnore</span><br><span class="hljs-keyword">private</span> String password;<br></code></pre></td></tr></table></figure><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;bth&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2018-04-02 10:40:45&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>password属性已被忽略。</p><h2 id="4-3-JsonIgnoreProperties"><a href="#4-3-JsonIgnoreProperties" class="headerlink" title="4.3@JsonIgnoreProperties"></a>4.3@JsonIgnoreProperties</h2><p><code>@JsonIgnoreProperties</code>，<strong>忽略一组属性，作用于类上</strong>，比如<code>JsonIgnoreProperties(&#123; &quot;password&quot;, &quot;age&quot; &#125;)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnoreProperties(&#123; &quot;password&quot;, &quot;age&quot; &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;bth&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2018-04-02 10:45:34&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-JsonFormat"><a href="#4-4-JsonFormat" class="headerlink" title="4.4@JsonFormat"></a>4.4@JsonFormat</h2><p><code>@JsonFormat</code>，<strong>用于日期格式化</strong>，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br></code></pre></td></tr></table></figure><h2 id="4-5-JsonNaming"><a href="#4-5-JsonNaming" class="headerlink" title="4.5@JsonNaming"></a>4.5@JsonNaming</h2><p><code>@JsonNaming</code>，用于<strong>指定一个命名策略</strong>，作用于类或者属性上。Jackson自带了多种命名策略，你可以实现自己的命名策略，比如输出的key 由Java命名方式转为下面线命名方法 —— userName转化为user-name。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonNaming(PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;user_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;bth&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2018-04-02 10:52:12&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-JsonSerialize"><a href="#4-6-JsonSerialize" class="headerlink" title="4.6@JsonSerialize"></a>4.6@JsonSerialize</h2><p><code>@JsonSerialize</code>，<strong>指定一个实现类来自定义序列化</strong>。类必须实现<code>JsonSerializer</code>接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> com.example.pojo.User;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonSerializer</span>&lt;User&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(User user, JsonGenerator generator, SerializerProvider provider)</span><br>            <span class="hljs-keyword">throws</span> IOException, JsonProcessingException &#123;<br>        generator.writeStartObject();<br>        generator.writeStringField(<span class="hljs-string">&quot;user-name&quot;</span>, user.getUserName());<br>        generator.writeEndObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中我们仅仅序列化userName属性，且输出的key是<code>user-name</code>。 使用注解<code>@JsonSerialize</code>来指定User对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonSerialize(using = UserSerializer.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;user-name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-7-JsonDeserialize"><a href="#4-7-JsonDeserialize" class="headerlink" title="4.7@JsonDeserialize"></a>4.7@JsonDeserialize</h2><p><code>@JsonDeserialize</code>，<strong>用户自定义反序列化</strong>，同<code>@JsonSerialize</code> ，类需要实现<code>JsonDeserializer</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> com.example.pojo.User;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonParser;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonNode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDeserializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonDeserializer</span>&lt;User&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">deserialize</span><span class="hljs-params">(JsonParser parser, DeserializationContext context)</span><br>            <span class="hljs-keyword">throws</span> IOException, JsonProcessingException &#123;<br>        <span class="hljs-type">JsonNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> parser.getCodec().readTree(parser);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> node.get(<span class="hljs-string">&quot;user-name&quot;</span>).asText();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUserName(userName);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用注解<code>@JsonDeserialize</code>来指定User对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonDeserialize</span> (using = UserDeserializer.class)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ObjectMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;readjsonasobject&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">readJsonAsObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;user-name\&quot;:\&quot;mrbird\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.readValue(json, User.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> user.getUserName();<br>        <span class="hljs-keyword">return</span> name;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>readjsonasobject</code>，页面输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mrbird<br></code></pre></td></tr></table></figure><h2 id="4-8-JsonView"><a href="#4-8-JsonView" class="headerlink" title="4.8@JsonView"></a>4.8@JsonView</h2><p><code>@JsonView</code>，作用在类或者属性上，用来定义一个序列化组。 比如对于User对象，某些情况下只返回userName属性就行，而某些情况下需要返回全部属性。 因此User对象可以定义成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6222176558369919436L</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserNameView</span> &#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AllUserFieldView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UserNameView</span> &#123;&#125;;<br>    <br>    <span class="hljs-meta">@JsonView(UserNameView.class)</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <br>    <span class="hljs-meta">@JsonView(AllUserFieldView.class)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-meta">@JsonView(AllUserFieldView.class)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <br>    <span class="hljs-meta">@JsonView(AllUserFieldView.class)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>User定义了两个接口类，一个为<code>userNameView</code>，另外一个为<code>AllUserFieldView</code>继承了<code>userNameView</code>接口。这两个接口代表了两个序列化组的名称。属性userName使用了<code>@JsonView(UserNameView.class)</code>，而剩下属性使用了<code>@JsonView(AllUserFieldView.class)</code>。</p><p>Spring中Controller方法允许使用<code>@JsonView</code>指定一个组名，被序列化的对象只有在这个组的属性才会被序列化，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonView(User.UserNameView.class)</span><br><span class="hljs-meta">@RequestMapping(&quot;getuser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUserName(<span class="hljs-string">&quot;mrbird&quot;</span>);<br>    user.setAge(<span class="hljs-number">26</span>);<br>    user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>    user.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果将<code>@JsonView(User.UserNameView.class)</code>替换为<code>@JsonView(User.AllUserFieldView.class)</code>，输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">26</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;birthday&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2018-04-02 11:24:00&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>因为接口<code>AllUserFieldView</code>继承了接口<code>UserNameView</code>所以userName也会被输出。</p><h1 id="5-集合的反序列化-json转集合"><a href="#5-集合的反序列化-json转集合" class="headerlink" title="5.集合的反序列化(json转集合)"></a>5.集合的反序列化(json转集合)</h1><p>在Controller方法中，可以使用<code>＠RequestBody</code>将提交的JSON自动映射到方法参数上，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;updateuser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; list)</span>&#123;<br>    <span class="hljs-keyword">return</span> list.size();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面方法可以接受如下一个JSON请求，并自动映射到User对象上：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;mrbird&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">26</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;userName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;scott&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">27</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>Spring Boot 能自动识别出List对象包含的是User类，因为在方法中定义的泛型的类型会被保留在字节码中，所以Spring Boot能识别List包含的泛型类型从而能正确反序列化。</p><p>有些情况下，集合对象并没有包含泛型定义，如下代码所示，反序列化并不能得到期望的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ObjectMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;customize&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">customize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;\&quot;userName\&quot;:\&quot;mrbird\&quot;,\&quot;age\&quot;:26&#125;,&#123;\&quot;userName\&quot;:\&quot;scott\&quot;,\&quot;age\&quot;:27&#125;]&quot;</span>;<br>    List&lt;User&gt; list = mapper.readValue(jsonStr, List.class);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (User user : list) &#123;<br>        msg += user.getUserName();<br>    &#125;<br>    <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>customize</code>，控制台抛出异常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.example.pojo.User<br></code></pre></td></tr></table></figure><p>这是因为在运行时刻，泛型己经被擦除了（不同于方法参数定义的泛型，不会被擦除）。为了提供泛型信息，Jackson提供了JavaType ，用来指明集合类型，将上述方法改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ObjectMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;customize&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">customize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;\&quot;userName\&quot;:\&quot;mrbird\&quot;,\&quot;age\&quot;:26&#125;,&#123;\&quot;userName\&quot;:\&quot;scott\&quot;,\&quot;age\&quot;:27&#125;]&quot;</span>;<br>    <span class="hljs-type">JavaType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> mapper.getTypeFactory().constructParametricType(List.class, User.class);<br>    List&lt;User&gt; list = mapper.readValue(jsonStr, type);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (User user : list) &#123;<br>        msg += user.getUserName();<br>    &#125;<br>    <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>customize</code>，页面输出：<code>mrbirdscott</code>。</p><p>源码连接<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/18.Spring-Boot-Jackson">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/18.Spring-Boot-Jackson</a></p><p>From: [<a href="https://mrbird.cc/Spring-Boot%20JSON.html]">https://mrbird.cc/Spring-Boot%20JSON.html]</a>(</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql面试题</title>
      <link href="/2020/12/04/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/12/04/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-执行一条查询语句的内部执行过程？"><a href="#1-执行一条查询语句的内部执行过程？" class="headerlink" title="1.执行一条查询语句的内部执行过程？"></a>1.执行一条查询语句的内部执行过程？</h4><p>答：MySQL 执行一条查询的流程如下：</p><ul><li>客户端先通过连接器连接到 MySQL 服务器；</li><li>连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器；</li><li>分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器；</li><li>优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好；</li><li>优化器执行完就进入执行器，执行器则开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回。</li></ul><h4 id="2-查询缓存有什么优缺点？"><a href="#2-查询缓存有什么优缺点？" class="headerlink" title="2.查询缓存有什么优缺点？"></a>2.查询缓存有什么优缺点？</h4><p>答：<code>MySQL</code> 查询缓存功能是在连接器之后发生的，它的优点是效率高，如果已经有缓存则会直接返回结果。</p><p>查询缓存的缺点是失效太频繁导致缓存命中率比较低，任何更新表操作都会清空查询缓存，因此导致查询缓存非常容易失效。</p><h4 id="3-常用引擎都有哪些？"><a href="#3-常用引擎都有哪些？" class="headerlink" title="3.常用引擎都有哪些？"></a>3.常用引擎都有哪些？</h4><p>答：<code>MySQL</code> 的常用引擎有 <code>InnoDB</code>、<code>MyISAM</code>、<code>Memory</code> 等，从 <code>MySQL 5.5.5</code> 版本开始 <code>InnoDB</code> 就成为了默认的存储引擎。</p><h4 id="4-InnoDB-和-MyISAM-区别？"><a href="#4-InnoDB-和-MyISAM-区别？" class="headerlink" title="4. InnoDB 和 MyISAM 区别？"></a>4. InnoDB 和 MyISAM 区别？</h4><p>答：<code>InnoDB</code> 和 <code>MyISAM</code> <strong>最大的区别是 <code>InnoDB</code> 支持事务，而 <code>MyISAM</code> 不支持事务</strong>，它们其他主要区别如下：</p><ul><li><code>InnoDB</code> 支持崩溃后安全恢复，<code>MyISAM</code> 不支持崩溃后安全恢复；</li><li><code>InnoDB</code> 支持行级锁，<code>MyISAM</code> 不支持行级锁，只支持到表锁；</li><li><strong><code>InnoDB</code> 支持外键，<code>MyISAM</code> 不支持外键；</strong></li><li><code>MyISAM</code> 性能比 <code>InnoDB</code> 高；</li><li><code>MyISAM</code> 支持 <code>FULLTEXT</code> 类型的全文索引，<code>InnoDB</code> 不支持 <code>FULLTEXT</code> 类型的全文索引，但是 <code>InnoDB</code> 可以使用 <code>sphinx</code> 插件支持全文索引，并且效果更好；</li><li><code>InnoDB</code> 主键查询性能高于 <code>MyISAM</code>。</li></ul><h4 id="5-回表查询？"><a href="#5-回表查询？" class="headerlink" title="5.回表查询？"></a>5.回表查询？</h4><p>答：普通索引查询到主键索引后，回到主键索引树搜索的过程，我们称为回表查询。</p><h4 id="6-如果把一个-InnoDB-表的主键删掉，是不是就没有主键，就没办法进行回表查询了？"><a href="#6-如果把一个-InnoDB-表的主键删掉，是不是就没有主键，就没办法进行回表查询了？" class="headerlink" title="6.如果把一个 InnoDB 表的主键删掉，是不是就没有主键，就没办法进行回表查询了？"></a>6.如果把一个 InnoDB 表的主键删掉，是不是就没有主键，就没办法进行回表查询了？</h4><p>答：不是，如果把主键删掉了，那么 InnoDB 会自己生成一个长度为 6 字节的 <code>rowid</code> 作为主键。</p><h4 id="7-一张自增表中有三条数据，删除两条数据之后重启数据库，再新增一条数据，此时这条数据的-ID-是几？"><a href="#7-一张自增表中有三条数据，删除两条数据之后重启数据库，再新增一条数据，此时这条数据的-ID-是几？" class="headerlink" title="7.一张自增表中有三条数据，删除两条数据之后重启数据库，再新增一条数据，此时这条数据的 ID 是几？"></a>7.一张自增表中有三条数据，删除两条数据之后重启数据库，再新增一条数据，此时这条数据的 ID 是几？</h4><p>答：如果这张表的引擎是 <code>MyISAM</code>，那么 <code>ID=4</code>，如果是 <code>InnoDB</code> 那么 <code>ID=2</code>（MySQL 8 之前的版本）。</p><h4 id="8-独立表空间和共享表空间？区别？"><a href="#8-独立表空间和共享表空间？区别？" class="headerlink" title="8.独立表空间和共享表空间？区别？"></a>8.独立表空间和共享表空间？区别？</h4><p>答：共享表空间指的是数据库的所有表数据，索引文件全部放在一个文件中，默认这个共享表空间的文件路径在 <code>data</code> 目录下。</p><p>独立表空间：每一个表都将会生成以独立的文件方式来进行存储。</p><p>共享表空间和独立表空间最大的区别是如果把表放在共享表空间，即使表删除了空间也不会删除，因此表依然很大，而独立表空间如果删除表就会清除空间。</p><h4 id="9-清空表数据性能最好的语句是？"><a href="#9-清空表数据性能最好的语句是？" class="headerlink" title="9.清空表数据性能最好的语句是？"></a>9.清空表数据性能最好的语句是？</h4><p>A：delete from t<br>B：delete t<br>C：drop table t<br>D：truncate table t</p><p>答：D</p><p>题目解析：<strong>truncate 清除表数据不会写日志，delete 要写日志，因此 truncate 的效率要高于 delete。</strong></p><h4 id="10-唯一索引和普通索引哪个性能更好？"><a href="#10-唯一索引和普通索引哪个性能更好？" class="headerlink" title="10.唯一索引和普通索引哪个性能更好？"></a>10.唯一索引和普通索引哪个性能更好？</h4><p>答：唯一索引和普通索引的性能对比分为以下两种情况：</p><ul><li>对于查询来说两者都是从索引树进行查询，性能几乎没有任何区别；</li><li>对于更新操作来说，因为唯一索引需要先将数据读取到内存，然后需要判断是否有冲突，因此比普通索引要多了判断操作，从而性能就比普通索引性能要低。</li></ul><h4 id="11-left-join-和-right-join-区别？"><a href="#11-left-join-和-right-join-区别？" class="headerlink" title="11.left join 和 right join 区别？"></a>11.left join 和 right join 区别？</h4><p>答：left join 和 right join 的区别如下：</p><ul><li>left join（左联结），返回左表全部记录和右表联结字段相等的记录；</li><li>right join（右联结），返回右表全部记录和左表联结字段相等的记录。</li></ul><h4 id="12-最左匹配原则？生效原则？"><a href="#12-最左匹配原则？生效原则？" class="headerlink" title="12.最左匹配原则？生效原则？"></a>12.最左匹配原则？生效原则？</h4><p>答：最左匹配原则也叫最左前缀原则，是 MySQL 中的一个重要原则，指的是索引以最左边为起点任何连续的索引都能匹配上，当遇到范围查询（&gt;、&lt;、between、like）就会停止匹配。 生效原则来看以下示例，比如表中有一个联合索引字段 index(a,b,c)：</p><ul><li>where a&#x3D;1 只使用了索引 a；</li><li>where a&#x3D;1 and b&#x3D;2 只使用了索引 a,b；</li><li>where a&#x3D;1 and b&#x3D;2 and c&#x3D;3 使用a,b,c；</li><li>where b&#x3D;1 or where c&#x3D;1 不使用索引；</li><li>where a&#x3D;1 and c&#x3D;3 只使用了索引 a；</li><li>where a&#x3D;3 and b like ‘xx%’ and c&#x3D;3 只使用了索引 a,b。</li></ul><h4 id="13-以下-or-查询有什么问题吗？该如何优化？"><a href="#13-以下-or-查询有什么问题吗？该如何优化？" class="headerlink" title="13.以下 or 查询有什么问题吗？该如何优化？"></a>13.以下 or 查询有什么问题吗？该如何优化？</h4><blockquote><p>select * from t where num&#x3D;10 or num&#x3D;20;</p></blockquote><p>答：如果使用 or 查询会使 MySQL 放弃索引而全表扫描，可以改为：</p><blockquote><p>select * from t where num&#x3D;10</p><p>union</p><p>select * from t where num&#x3D;20;</p></blockquote><h4 id="14-事务是什么？它有什么特性？"><a href="#14-事务是什么？它有什么特性？" class="headerlink" title="14.事务是什么？它有什么特性？"></a>14.事务是什么？它有什么特性？</h4><p>答：事务是一系列的数据库操作，是数据库应用的基本单位。</p><p>在 <code>MySQL</code> 中只有 <code>InnoDB</code> 引擎支持事务，它的四个特性如下：</p><ul><li>原子性（<code>Atomic</code>），要么全部执行，要么全部不执行；</li><li>一致性（<code>Consistency</code>），事务的执行使得数据库从一种正确状态转化为另一种正确状态；</li><li>隔离性（<code>Isolation</code>），在事务正确提交之前，不允许把该事务对数据的任何改变提供给其他事务；</li><li>持久性（<code>Durability</code>），事务提交后，其结果永久保存在数据库中。</li></ul><h4 id="15-MySQL-中有几种事务隔离级别？分别是什么？"><a href="#15-MySQL-中有几种事务隔离级别？分别是什么？" class="headerlink" title="15.MySQL 中有几种事务隔离级别？分别是什么？"></a>15.MySQL 中有几种事务隔离级别？分别是什么？</h4><p>答：<code>MySQL</code> 中有四种事务隔离级别，分别是：</p><ul><li><code>read uncommited</code>，未提交读，读到未提交数据；</li><li><code>read committed</code>，读已提交，也叫不可重复读，两次读取到的数据不一致；</li><li><code>repetable read</code>，可重复读；</li><li><code>serializable</code>，串行化，读写数据都会锁住整张表，数据操作不会出错，但并发性能极低，开发中很少用到。</li></ul><p><strong>MySQL 默认使用 <code>repetable read</code> 的事务隔离级别。</strong></p><h4 id="16-如何设置-MySQL-的事务隔离级别？"><a href="#16-如何设置-MySQL-的事务隔离级别？" class="headerlink" title="16.如何设置 MySQL 的事务隔离级别？"></a>16.如何设置 MySQL 的事务隔离级别？</h4><p>答：MySQL 事务隔离级别 <code>mysql.cnf</code> 文件里设置的（默认目录 <code>/etc/my.cnf</code>），在文件的文末添加配置：</p><blockquote><p>transaction-isolation &#x3D; REPEATABLE-READ</p></blockquote><p>可用的配置值：<code>READ-UNCOMMITTED</code>、<code>READ-COMMITTED</code>、<code>REPEATABLE-READ</code>、<code>SERIALIZABLE</code>。</p><h4 id="17-MySQL-出现了中文乱码该如何解决？"><a href="#17-MySQL-出现了中文乱码该如何解决？" class="headerlink" title="17.MySQL 出现了中文乱码该如何解决？"></a>17.MySQL 出现了中文乱码该如何解决？</h4><p>答：解决 MySQL 中文乱码的问题，可以设置全局编码或设置某个数据库或表的编码为 utf8。 设置全局编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> character_set_client<span class="hljs-operator">=</span><span class="hljs-string">&#x27;utf8&#x27;</span>;<br><span class="hljs-keyword">set</span> character_set_connection<span class="hljs-operator">=</span><span class="hljs-string">&#x27;utf8&#x27;</span>;<br><span class="hljs-keyword">set</span> character_set_results<span class="hljs-operator">=</span><span class="hljs-string">&#x27;utf8&#x27;</span>;<br></code></pre></td></tr></table></figure><p>设置数据库的编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> database db <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br></code></pre></td></tr></table></figure><p>设置表的编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br></code></pre></td></tr></table></figure><h4 id="18-InnoDB-为什么要使用-B-树，而不是-B-树、Hash、红黑树或二叉树？"><a href="#18-InnoDB-为什么要使用-B-树，而不是-B-树、Hash、红黑树或二叉树？" class="headerlink" title="18.InnoDB 为什么要使用 B+ 树，而不是 B 树、Hash、红黑树或二叉树？"></a>18.InnoDB 为什么要使用 B+ 树，而不是 B 树、Hash、红黑树或二叉树？</h4><p>答：因为 B 树、Hash、红黑树或二叉树存在以下问题。</p><ul><li>B 树：不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出），指针少的情况下要保存大量数据，只能增加树的高度，导致 IO 操作变多，查询性能变低。</li><li>Hash：虽然可以快速定位，但是没有顺序，IO 复杂度高。</li><li>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且 IO 代价高。</li><li>红黑树：树的高度随着数据量增加而增加，IO 代价高。</li></ul><h4 id="19-MySQL-是如何处理死锁？"><a href="#19-MySQL-是如何处理死锁？" class="headerlink" title="19.MySQL 是如何处理死锁？"></a>19.MySQL 是如何处理死锁？</h4><p>答：MySQL 对待死锁常见的两种策略：</p><ul><li>通过 innodb_lock_wait_timeout 来设置超时时间，一直等待直到超时；</li><li>发起死锁检测，发现死锁之后，主动回滚死锁中的某一个事务，让其他事务继续执行。</li></ul><h4 id="20-什么是全局锁？它的应用场景有哪些？"><a href="#20-什么是全局锁？它的应用场景有哪些？" class="headerlink" title="20.什么是全局锁？它的应用场景有哪些？"></a>20.什么是全局锁？它的应用场景有哪些？</h4><p>答：全局锁就是对整个数据库实例加锁，它的典型使用场景就是做全量逻辑备份，这个时候整个库会处于完全的只读状态。</p><h4 id="21-使用全局锁会导致什么问题？"><a href="#21-使用全局锁会导致什么问题？" class="headerlink" title="21.使用全局锁会导致什么问题？"></a>21.使用全局锁会导致什么问题？</h4><p>答：使用全局锁会使整个系统不能执行更新操作，所有的更新业务会出于等待状态；如果你是在从库进行备份，则会导致主从同步严重延迟。</p><h4 id="22-InnoDB-存储引擎有几种锁算法？"><a href="#22-InnoDB-存储引擎有几种锁算法？" class="headerlink" title="22.InnoDB 存储引擎有几种锁算法？"></a>22.InnoDB 存储引擎有几种锁算法？</h4><p>答：InnoDB 的锁算法包括以下三种：</p><ul><li>Record Lock — 单个行记录上的锁；</li><li>Gap Lock — 间隙锁，锁定一个范围，不包括记录本身；</li><li>Next-Key Lock — 锁定一个范围，包括记录本身。</li></ul><h4 id="23-InnoDB-如何实现行锁？"><a href="#23-InnoDB-如何实现行锁？" class="headerlink" title="23.InnoDB 如何实现行锁？"></a>23.InnoDB 如何实现行锁？</h4><p>答：只有通过索引条件检索数据，InnoDB 才使用行级锁，否则 InnoDB 将使用表锁。使用 for update 来实现行锁，具体脚本如下：</p><blockquote><p>select * from t where id&#x3D;1 for update</p></blockquote><p>其中 id 字段必须有索引。</p><h4 id="24-MySQL-性能指标都有哪些？如何得到这些指标？"><a href="#24-MySQL-性能指标都有哪些？如何得到这些指标？" class="headerlink" title="24.MySQL 性能指标都有哪些？如何得到这些指标？"></a>24.MySQL 性能指标都有哪些？如何得到这些指标？</h4><p>答：MySQL 最重要的性能指标有以下两个：</p><ul><li>QPS（Queries Per Second），每秒查询数，一台数据库每秒能够处理的查询次数；</li><li>TPS（Transactions Per Second），每秒处理事务数。</li></ul><p>这些性能指标可以通过 show status 来查询当前数据库状态的结果信息中估算出来，show status 会有 300 多条状态信息记录，其中以下这些信息 QPS 和 TPS 有关系：</p><ul><li>Uptime，服务器已经运行的时间，单位秒；</li><li>Questions，已经发送给数据库查询数；</li><li>Com_select，查询次数，实际查询次数；</li><li>Com_insert，插入次数；</li><li>Com_delete，删除次数；</li><li>Com_update，更新次数；</li><li>Com_commit，事务次数；</li><li>Com_rollback，回滚次数。</li></ul><h4 id="25-MySQL-中的重要日志分为哪几个？"><a href="#25-MySQL-中的重要日志分为哪几个？" class="headerlink" title="25.MySQL 中的重要日志分为哪几个？"></a>25.MySQL 中的重要日志分为哪几个？</h4><p><strong>① 错误日志</strong>：用来记录 MySQL 服务器运行过程中的错误信息，比如，无法加载 MySQL 数据库的数据文件，或权限不正确等都会被记录在此，还有复制环境下，从服务器进程的信息也会被记录进错误日志。默认情况下，错误日志是开启的，且无法被禁止。默认情况下，错误日志是存储在数据库的数据文件目录中，名称为 hostname.err，其中 hostname 为服务器主机名。在 MySQL 5.5.7 之前，数据库管理员可以删除很长时间之前的错误日志，以节省服务器上的硬盘空间， MySQL 5.5.7 之后，服务器将关闭此项功能，只能使用重命名原来的错误日志文件，手动冲洗日志创建一个新的，命令为：</p><blockquote><p>mv hostname.err  hostname.err.old</p><p>mysqladmin flush-logs</p></blockquote><p><strong>② 查询日志</strong>：查询日志在 MySQL 中被称为 general log（通用日志），查询日志里的内容不要被“查询日志”误导，认为里面只存储 select 语句，其实不然，查询日志里面记录了数据库执行的所有命令，不管语句是否正确，都会被记录，具体原因如下:</p><ul><li>insert 查询为了避免数据冲突，如果此前插入过数据，则当前插入的数据如果跟主键或唯一键的数据重复那肯定会报错；</li><li>update 时也会查询因为更新的时候很可能会更新某一块数据；</li><li>delete 查询，只删除符合条件的数据；</li></ul><p>因此都会产生日志，在并发操作非常多的场景下，查询信息会非常多，那么如果都记录下来会导致 IO 非常大，影响 MySQL 性能。因此如果不是在调试环境下，是不建议开启查询日志功能的。</p><p>查询日志的开启有助于帮助我们分析哪些语句执行密集，执行密集的 select 语句对应的数据是否能够被缓存，同时也可以帮助我们分析问题，因此，可以根据自己的实际情况来决定是否开启查询日志。</p><p>查询日志模式是关闭的，可以通过以下命令开启查询日志：</p><blockquote><p>set global general_log&#x3D;1</p><p>set global log_output&#x3D;’table’;</p></blockquote><p>general_log&#x3D;1 为开启查询日志，0 为关闭查询日志，这个设置命令即时生效，不用重启 MySQL 服务器。</p><p><strong>③ 慢日志</strong>：慢查询会导致 CPU、IOPS、内存消耗过高，当数据库遇到性能瓶颈时，大部分时间都是由于慢查询导致的。开启慢查询日志，可以让 MySQL 记录下查询超过指定时间的语句，之后运维人员通过定位分析，能够很好的优化数据库性能。默认情况下，慢查询日志是不开启的，只有手动开启了，慢查询才会被记录到慢查询日志中。使用如下命令记录当前数据库的慢查询语句：</p><blockquote><p>set global slow_query_log&#x3D;’ON’;</p></blockquote><p>使用 set global slow_query_log&#x3D;’ON’ 开启慢查询日志，只是对当前数据库有效，如果 MySQL 数据库重启后就会失效。因此如果要永久生效，就要修改配置文件 my.cnf，设置 slow_query_log&#x3D;1 并重启 MySQL 服务器。</p><p><strong>④ redo log（重做日志）</strong>：为了最大程度的避免数据写入时，因为 IO 瓶颈造成的性能问题，MySQL 采用了这样一种缓存机制，先将数据写入内存中，再批量把内存中的数据统一刷回磁盘。为了避免将数据刷回磁盘过程中，因为掉电或系统故障带来的数据丢失问题，InnoDB 采用 redo log 来解决此问题。</p><p><strong>⑤ undo log（回滚日志）</strong>：用于存储日志被修改前的值，从而保证如果修改出现异常，可以使用 undo log 日志来实现回滚操作。</p><p>undo log 和 redo log 记录物理日志不一样，它是逻辑日志，可以认为当 delete 一条记录时，undo log 中会记录一条对应的 insert 记录，反之亦然，当 update 一条记录时，它记录一条对应相反的 update 记录，当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚。undo log 默认存放在共享表空间中，在 ySQL 5.6 中，undo log 的存放位置还可以通过变量 innodb_undo_directory 来自定义存放目录，默认值为“.”表示 datadir 目录。</p><p><strong>⑥ bin log（二进制日志）</strong>：是一个二进制文件，主要记录所有数据库表结构变更，比如，CREATE、ALTER TABLE 等，以及表数据修改，比如，INSERT、UPDATE、DELETE 的所有操作，bin log 中记录了对 MySQL 数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其他额外信息，但是它不记录 SELECT、SHOW 等那些不修改数据的 SQL 语句。 binlog 的作用如下：</p><ul><li>恢复（recovery）：某些数据的恢复需要二进制日志。比如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行 point-in-time 的恢复；</li><li>复制（replication）：其原理与恢复类似，通过复制和执行二进制日志使一台远程的 MySQL 数据库（一般称为 slave 或者 standby）与一台 MySQL 数据库（一般称为 master 或者 primary）进行实时同步；</li><li>审计（audit）：用户可以通过二进制日志中的信息来进行审计，判断是否有对数据库进行注入攻击。</li></ul><p>除了上面介绍的几个作用外，binlog 对于事务存储引擎的崩溃恢复也有非常重要的作用，在开启 binlog 的情况下，为了保证 binlog 与 redo 的一致性，MySQL 将采用事务的两阶段提交协议。当 MySQL 系统发生崩溃时，事务在存储引擎内部的状态可能为 prepared（准备状态）和 commit（提交状态）两种，对于 prepared 状态的事务，是进行提交操作还是进行回滚操作，这时需要参考 binlog，如果事务在 binlog 中存在，那么将其提交；如果不在 binlog 中存在，那么将其回滚，这样就保证了数据在主库和从库之间的一致性。</p><p>binlog 默认是关闭状态，可以在 MySQL 配置文件（my.cnf）中通过配置参数 log-bin &#x3D; [base-name] 开启记录 binlog 日志，如果不指定 base-name，则默认二进制日志文件名为主机名，并以自增的数字作为后缀，比如：mysql-bin.000001，所在目录为数据库所在目录（datadir）。</p><p>通过以下命令来查询 binlog 是否开启：</p><blockquote><p>show variables like ‘log_%’;</p></blockquote><p>binlog 格式分为 STATEMENT、ROW 和 MIXED 三种。</p><ul><li>STATEMENT 格式的 binlog 记录的是数据库上执行的原生 SQL 语句。这种格式的优点是简单，简单地记录和执行这些语句，能够让主备保持同步，在主服务器上执行的 SQL 语句，在从服务器上执行同样的语句。另一个好处是二进制日志里的时间更加紧凑，因此相对而言，基于语句的复制模式不会使用太多带宽，同时也节约磁盘空间，并且通过 mysqlbinlog 工具容易读懂其中的内容。缺点就是同一条 SQL 在主库和从库上执行的时间可能稍微或很大不相同，因此在传输的二进制日志中，除了查询语句，还包括了一些元数据信息，如当前的时间戳。即便如此，还存在着一些无法被正确复制的 SQL，比如，使用 INSERT INTO TB1 VALUE(CUURENT_DATE()) 这一条使用函数的语句插入的数据复制到当前从服务器上来就会发生变化，存储过程和触发器在使用基于语句的复制模式时也可能存在问题；另外一个问题就是基于语句的复制必须是串行化的，比如，InnoDB 的 next-key 锁等，并不是所有的存储引擎都支持基于语句的复制。</li><li>ROW 格式是从 MySQL 5.1 开始支持基于行的复制，也就是基于数据的复制，基于行的更改。这种方式会将实际数据记录在二进制日志中，它有其自身的一些优点和缺点，最大的好处是可以正确地复制每一行数据，一些语句可以被更加有效地复制，另外就是几乎没有基于行的复制模式无法处理的场景，对于所有的 SQL 构造、触发器、存储过程等都能正确执行；它的缺点就是二进制日志可能会很大，而且不直观，因此，你不能使用 mysqlbinlog 来查看二进制日志，也无法通过看二进制日志判断当前执行到那一条 SQL 语句。现在对于 ROW 格式的二进制日志基本是标配了，主要是因为它的优势远远大于缺点，并且由于 ROW 格式记录行数据，因此可以基于这种模式做一些 DBA 工具，比如数据恢复，不同数据库之间数据同步等。</li><li>MIXED 也是 MySQL 默认使用的二进制日志记录方式，但 MIXED 格式默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。比如用到 UUID()、USER()、CURRENT_USER()、ROW_COUNT() 等无法确定的函数。</li></ul><h4 id="26-redo-log-和-binlog-有什么区别？"><a href="#26-redo-log-和-binlog-有什么区别？" class="headerlink" title="26.redo log 和 binlog 有什么区别？"></a>26.redo log 和 binlog 有什么区别？</h4><p><code>redo log</code>（重做日志）和 <code>binlog</code>（归档日志）都是 <code>MySQL</code> 的重要的日志，它们的区别如下：</p><ul><li><code>redo log</code> 是物理日志，记录的是“在某个数据页上做了什么修改”；</li><li><code>binlog</code> 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”；</li><li><code>redo log</code> 是 <code>InnoDB</code> 引擎特有的，<code>binlog</code> 是 <code>MySQL</code> 的 <code>Server</code> 层实现的，所有引擎都可以使用；</li><li><code>redo log</code> 是循环写的，空间固定会用完，<code>binlog</code> 是可以追加写入的，“追加写”是指 <code>binlog</code> 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ul><p>最开始 <code>MySQL</code> 里并没有 <code>InnoDB</code> 引擎，<code>MySQL</code> 自带的引擎是 <code>MyISAM</code>，但是 <code>MyISAM</code> 没有 <code>crash-safe</code> 的能力，<code>binlog</code> 日志只能用于归档。而 <code>InnoDB</code> 是另一个公司以插件形式引入 <code>MySQL</code> 的，既然只依靠 <code>binlog</code> 是没有 <code>crash-safe</code> 能力的，因此 <code>InnoDB</code> 使用另外一套日志系统，也就是 <code>redo log</code> 来实现 <code>crash-safe</code> 能力。</p><h4 id="27-慢查询日志的获取方式有哪些？"><a href="#27-慢查询日志的获取方式有哪些？" class="headerlink" title="27.慢查询日志的获取方式有哪些？"></a>27.慢查询日志的获取方式有哪些？</h4><p>答：慢查询日志的常见获取方式如下。</p><ul><li>使用 <code>MySQL</code> 自带功能，开启慢查询日志，在 <code>MySQL</code> 的安装目录下找到 <code>my.cnf</code> 文件设置 <code>slow-query-log=On</code> 开启慢查询，慢查询默认时长为 <code>10s</code>，默认存储文件名为 <code>host_name-slow.log</code>。</li><li>使用三方开源方案 <code>zabbix</code>，<code>zabbix</code> 是一个基于 <code>Web</code> 界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案，能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位&#x2F;解决存在的各种问题。</li></ul><h4 id="28-如何定位慢查询？"><a href="#28-如何定位慢查询？" class="headerlink" title="28.如何定位慢查询？"></a>28.如何定位慢查询？</h4><p>答：使用 MySQL 中的 <code>explain</code> 分析执行语句，比如：</p><blockquote><p>explain select * from t where id&#x3D;5;</p></blockquote><p>如下图所示：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404121644693.png" alt="img"></p><p>其中：</p><ul><li><code>id</code> — 选择标识符，id 越大优先级越高，越先被执行</li><li><code>select_type</code> — 表示查询的类型。</li><li><code>table</code> — 输出结果集的表</li><li><code>partitions</code> — 匹配的分区</li><li><code>type</code> — 表示表的连接类型</li><li><code>possible_keys</code> — 表示查询时，可能使用的索引</li><li><code>key</code> — 表示实际使用的索引</li><li><code>key_len</code> — 索引字段的长度</li><li><code>ref</code>— 列与索引的比较</li><li><code>rows</code> — 大概估算的行数</li><li><code>filtered</code> — 按表条件过滤的行百分比</li><li><code>Extra</code> — 执行情况的描述和说明</li></ul><p>其中最重要的就是 type 字段，type 值类型如下：</p><ul><li><code>all</code> — 扫描全表数据</li><li><code>index</code> — 遍历索引</li><li><code>range</code> — 索引范围查找</li><li><code>index_subquery</code> — 在子查询中使用 <code>ref</code></li><li><code>unique_subquery</code> — 在子查询中使用 <code>eq_ref</code></li><li><code>ref_or_null</code> — 对 null 进行索引的优化的 <code>ref</code></li><li><code>fulltext</code> — 使用全文索引</li><li><code>ref</code> — 使用非唯一索引查找数据</li><li><code>eq_ref</code> — 在 join 查询中使用主键或唯一索引关联</li><li><code>const</code> — 将一个主键放置到 <code>where</code> 后面作为条件查询， <code>MySQL</code> 优化器就能把这次查询优化转化为一个常量，如何转化以及何时转化，这个取决于优化器，这个比 <code>eq_ref</code> 效率高一点</li></ul><h4 id="29-MySQL-中常见的读写分离方案有哪些？"><a href="#29-MySQL-中常见的读写分离方案有哪些？" class="headerlink" title="29.MySQL 中常见的读写分离方案有哪些？"></a>29.MySQL 中常见的读写分离方案有哪些？</h4><p>答：<code>MySQL</code> 中常见的读写分离方案通常为以下两种：</p><ul><li>使用 <code>MySQL</code> 官方提供的数据库代理产品 <code>MySql ProxySQL</code> 搭建自动分配的数据库读写分离环境；</li><li>在程序层面配置多数据源使用代码实现读写分离。</li></ul><h4 id="30-怎样保证主备数据库无延迟？"><a href="#30-怎样保证主备数据库无延迟？" class="headerlink" title="30.怎样保证主备数据库无延迟？"></a>30.怎样保证主备数据库无延迟？</h4><p>答：通常保证主备数据库无延迟有以下三种方法。</p><ul><li>每次从库执行查询请求前，先判断 <code>seconds_behind_master</code> 是否已经等于 <code>0</code>。如果还不等于 <code>0</code> ，那就必须等到这个参数变为 <code>0</code> 才能执行查询请求，<code>seconds_behind_master</code> 参数是用来衡量主备延迟时间的长短。</li><li>对比位点确保主备无延迟。<code>Master_Log_File</code> 和 <code>Read_Master_Log_Pos</code>，表示的是读到的主库的最新位点，<code>Relay_Master_Log_File</code> 和 <code>Exec_Master_Log_Pos</code>，表示的是备库执行的最新位点。</li><li>对比 <code>GTID</code> 集合确保主备无延迟。<code>Auto_Position=1</code> ，表示这对主备关系使用了 <code>GTID</code> 协议。<code>Retrieved_Gtid_Set</code>，是备库收到的所有日志的 <code>GTID</code> 集合；<code>Executed_Gtid_Set</code>，是备库所有已经执行完成的 <code>GTID</code> 集合。</li></ul><h4 id="31-什么是-MySQL-多实例，如何配置-MySQL-多实例？"><a href="#31-什么是-MySQL-多实例，如何配置-MySQL-多实例？" class="headerlink" title="31.什么是 MySQL 多实例，如何配置 MySQL 多实例？"></a>31.什么是 MySQL 多实例，如何配置 MySQL 多实例？</h4><p>答：MySQL 多实例就是在同一台服务器上启用多个 <code>MySQL</code> 服务，它们监听不同的端口，运行多个服务进程，它们相互独立，互不影响的对外提供服务，便于节约服务器资源与后期架构扩展。 多实例的配置方法有两种：</p><ul><li>一个实例一个配置文件，不同端口；</li><li>同一配置文件（<code>my.cnf</code>）下配置不同实例，基于 <code>MySQL</code> 的 <code>d_multi</code> 工具。</li></ul><h4 id="32-表的优化策略有哪些？"><a href="#32-表的优化策略有哪些？" class="headerlink" title="32.表的优化策略有哪些？"></a>32.表的优化策略有哪些？</h4><p>常见的大表优化策略如下。</p><ul><li><strong>读写分离</strong>，主库负责写，从库负责读。</li><li><strong>垂直分区</strong>，根据数据属性单独拆表甚至单独拆库。</li><li><strong>水平分区</strong>，保持表结构不变，根据策略存储数据分片，这样每一片数据被分散到不同的表或者库中。水平拆分只是解决了单一表数据过大的问题，表数据还在同一台机器上，对于并发能力没有什么意义，因此水平拆分最好分库。另外分片事务难以解决，跨节点 join 性能较差。</li></ul><h4 id="33-数据库分片方案有哪些？"><a href="#33-数据库分片方案有哪些？" class="headerlink" title="33.数据库分片方案有哪些？"></a>33.数据库分片方案有哪些？</h4><p>答：数据库创建的分片方案有两种方式：客户端代理方式和中间件代理方式。</p><ul><li>客户端代理 — 分片逻辑在应用端，封装在 <code>jar</code> 包中，通过修改或者封装 <code>JDBC</code> 层来实现，比如 <code>Sharding-JDBC</code>、阿里 <code>TDDL</code> 等。</li><li>中间件代理 — 在应用层和数据层中间加了一个代理层。分片逻辑统一维护在中间件服务中，比如 <code>MyCat</code>、网易的 <code>DDB</code> 都是中间件代理的典型代表。</li></ul><h4 id="34-查询语句的优化方案有哪些？"><a href="#34-查询语句的优化方案有哪些？" class="headerlink" title="34.查询语句的优化方案有哪些？"></a>34.查询语句的优化方案有哪些？</h4><ul><li>不做列运算，把计算都放入各个业务系统实现；</li><li>查询语句尽可能简单，大语句拆小语句，减少锁时间；</li><li>不使用 select * 查询；</li><li>or 查询改写成 in 查询；</li><li>不用函数和触发器；</li><li>避免 <code>%xx</code> 查询；</li><li>少用 <code>join</code> 查询；</li><li>使用同类型比较，比如 <code>&#39;123&#39;</code> 和 ‘123’、<code>123</code> 和 <code>123</code>；</li><li>尽量避免在 <code>where</code> 子句中使用 !&#x3D; 或者 <code>&lt;&gt;</code> 操作符，查询引用会放弃索引而进行全表扫描；</li><li>列表数据使用分页查询，每页数据量不要太大。</li></ul><h4 id="35-MySQL-毫无规律的异常重启，可能产生的原因是什么？该如何解决？"><a href="#35-MySQL-毫无规律的异常重启，可能产生的原因是什么？该如何解决？" class="headerlink" title="35.MySQL 毫无规律的异常重启，可能产生的原因是什么？该如何解决？"></a>35.MySQL 毫无规律的异常重启，可能产生的原因是什么？该如何解决？</h4><p>「参考答案」可能是积累的长连接导致内存占用太多，被系统强行杀掉导致的异常重启，因为在 MySQL 中长连接在执行过程中使用的临时内存对象，只有在连接断开的时候才会释放，这就会导致内存不断飙升，解决方案如下：</p><ul><li>定期断开空闲的长连接；</li><li>如果是用的是 MySQL 5.7 以上的版本，可以定期执行 <code>mysql_reset_connection</code> 重新初始化连接资源，这个过程会释放之前使用的内存资源，恢复到连接刚初始化的状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot的异常处理</title>
      <link href="/2020/12/04/springboot%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2020/12/04/springboot%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot对异常的处理有一套默认的机制：当应用中产生异常时，Spring Boot根据发送请求头中的<code>accept</code>是否包含<code>text/html</code>来分别返回不同的响应信息。当从浏览器地址栏中访问应用接口时，请求头中的<code>accept</code>便会包含<code>text/html</code>信息，产生异常时，Spring Boot通过<code>org.springframework.web.servlet.ModelAndView</code>对象来装载异常信息，并以HTML的格式返回；而当从客户端访问应用接口产生异常时（客户端访问时，请求头中的<code>accept</code>不包含<code>text/html</code>），Spring Boot则以JSON的格式返回异常信息。下面来验证一下。</p><h1 id="1-默认异常处理机制"><a href="#1-默认异常处理机制" class="headerlink" title="1.默认异常处理机制"></a>1.默认异常处理机制</h1><p>假设应用中有如下一个Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id:\\d+&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;user not exist&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中我们主动的抛出了一个<code>RuntimeException</code>，使用浏览器访问<a href="http://localhost:8080/user/1%EF%BC%9A">http://localhost:8080/user/1：</a></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031115638.png" alt="QQ截图20180701163610.png"></p><p>可看到页面返回了一些异常描述，并且请求头的<code>accpet</code>包含了<code>text/html</code>片段。</p><p>接着使用模拟发送REST请求的Chrome插件<a href="https://restlet.com/modules/client/">Restlet Client</a>发送<a href="http://localhost:8080/user/1%EF%BC%9A">http://localhost:8080/user/1：</a></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031116661.png" alt="QQ截图20180701165348.png"></p><p>可以看到请求头的<code>accept</code>值为<code>*/*</code>，并且返回一段JSON格式的信息。</p><p>查看Spring Boot的<code>BasicErrorController</code>类便可看到这一默认机制的具体实现：</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031117940.png" alt="QQ图片20180701165727.png"></p><p>可看到<code>errorHtml</code>和<code>error</code>方法的请求地址和方法是一样的，唯一的区别就是<code>errorHtml</code>通过<code>produces = &#123;&quot;text/html&quot;&#125;</code>判断请求头的<code>accpet</code>属性中是否包含<code>text/html</code>，如果包含，便走该方法。</p><h1 id="2-自定义html异常页面"><a href="#2-自定义html异常页面" class="headerlink" title="2.自定义html异常页面"></a>2.自定义html异常页面</h1><p>我们可以通过在<code>src/main/resources/resources/error</code>路径下定义友好的异常页面，比如定义一个500.html页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>500<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    系统内部异常<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后再次通过浏览器访问:<a href="http://localhost:8080/user/1%EF%BC%9A">http://localhost:8080/user/1：</a></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031117448.png" alt="QQ截图20180701170558.png"></p><p>同样的，我们也可以定义404.html等常见的HTTP状态码对应的异常页面。</p><p>通过自定义html异常页面并不会影响客户端发送请求异常返回的结果。</p><h1 id="3-自定义异常处理"><a href="#3-自定义异常处理" class="headerlink" title="3.自定义异常处理"></a>3.自定义异常处理</h1><p>除了可以通过自定义html异常页面来改变浏览器访问接口时产生的异常信息，我们也可以自定义异常处理来改表默认的客户端访问接口产生的异常信息。</p><p>我们手动定义一个<code>UserNotExistException</code>，继承<code>RuntimeException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserNotExistException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1574716826948451793L</span>;<br><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserNotExistException</span><span class="hljs-params">(String id)</span>&#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;user not exist&quot;</span>);<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后定义一个Controller异常处理类<code>ControllerExceptionHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(UserNotExistException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">handleUserNotExistsException</span><span class="hljs-params">(UserNotExistException e)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;id&quot;</span>, e.getId());<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>, e.getMessage());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中注解<code>@ExceptionHandler</code>指定了要处理的异常类型，注解<code>@ResponseStatus</code>指定异常处理方法返回的HTTP状态码为<code>HttpStatus.INTERNAL_SERVER_ERROR</code>，即500。<code>HttpStatus</code>是一个spring自带的枚举类型，封装了常见的HTTP状态码及描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">HttpStatus</span> &#123;<br>    CONTINUE(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;Continue&quot;</span>),<br>    SWITCHING_PROTOCOLS(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;Switching Protocols&quot;</span>),<br>    PROCESSING(<span class="hljs-number">102</span>, <span class="hljs-string">&quot;Processing&quot;</span>),<br>    CHECKPOINT(<span class="hljs-number">103</span>, <span class="hljs-string">&quot;Checkpoint&quot;</span>),<br>    OK(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;OK&quot;</span>),<br>    CREATED(<span class="hljs-number">201</span>, <span class="hljs-string">&quot;Created&quot;</span>),<br>    ACCEPTED(<span class="hljs-number">202</span>, <span class="hljs-string">&quot;Accepted&quot;</span>),<br>    NON_AUTHORITATIVE_INFORMATION(<span class="hljs-number">203</span>, <span class="hljs-string">&quot;Non-Authoritative Information&quot;</span>),<br>    NO_CONTENT(<span class="hljs-number">204</span>, <span class="hljs-string">&quot;No Content&quot;</span>),<br>    RESET_CONTENT(<span class="hljs-number">205</span>, <span class="hljs-string">&quot;Reset Content&quot;</span>),<br>    PARTIAL_CONTENT(<span class="hljs-number">206</span>, <span class="hljs-string">&quot;Partial Content&quot;</span>),<br>    MULTI_STATUS(<span class="hljs-number">207</span>, <span class="hljs-string">&quot;Multi-Status&quot;</span>),<br>    ALREADY_REPORTED(<span class="hljs-number">208</span>, <span class="hljs-string">&quot;Already Reported&quot;</span>),<br>    IM_USED(<span class="hljs-number">226</span>, <span class="hljs-string">&quot;IM Used&quot;</span>),<br>    MULTIPLE_CHOICES(<span class="hljs-number">300</span>, <span class="hljs-string">&quot;Multiple Choices&quot;</span>),<br>    MOVED_PERMANENTLY(<span class="hljs-number">301</span>, <span class="hljs-string">&quot;Moved Permanently&quot;</span>),<br>    FOUND(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;Found&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    MOVED_TEMPORARILY(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;Moved Temporarily&quot;</span>),<br>    SEE_OTHER(<span class="hljs-number">303</span>, <span class="hljs-string">&quot;See Other&quot;</span>),<br>    NOT_MODIFIED(<span class="hljs-number">304</span>, <span class="hljs-string">&quot;Not Modified&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    USE_PROXY(<span class="hljs-number">305</span>, <span class="hljs-string">&quot;Use Proxy&quot;</span>),<br>    TEMPORARY_REDIRECT(<span class="hljs-number">307</span>, <span class="hljs-string">&quot;Temporary Redirect&quot;</span>),<br>    PERMANENT_REDIRECT(<span class="hljs-number">308</span>, <span class="hljs-string">&quot;Permanent Redirect&quot;</span>),<br>    BAD_REQUEST(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;Bad Request&quot;</span>),<br>    UNAUTHORIZED(<span class="hljs-number">401</span>, <span class="hljs-string">&quot;Unauthorized&quot;</span>),<br>    PAYMENT_REQUIRED(<span class="hljs-number">402</span>, <span class="hljs-string">&quot;Payment Required&quot;</span>),<br>    FORBIDDEN(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;Forbidden&quot;</span>),<br>    NOT_FOUND(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;Not Found&quot;</span>),<br>    METHOD_NOT_ALLOWED(<span class="hljs-number">405</span>, <span class="hljs-string">&quot;Method Not Allowed&quot;</span>),<br>    NOT_ACCEPTABLE(<span class="hljs-number">406</span>, <span class="hljs-string">&quot;Not Acceptable&quot;</span>),<br>    PROXY_AUTHENTICATION_REQUIRED(<span class="hljs-number">407</span>, <span class="hljs-string">&quot;Proxy Authentication Required&quot;</span>),<br>    REQUEST_TIMEOUT(<span class="hljs-number">408</span>, <span class="hljs-string">&quot;Request Timeout&quot;</span>),<br>    CONFLICT(<span class="hljs-number">409</span>, <span class="hljs-string">&quot;Conflict&quot;</span>),<br>    GONE(<span class="hljs-number">410</span>, <span class="hljs-string">&quot;Gone&quot;</span>),<br>    LENGTH_REQUIRED(<span class="hljs-number">411</span>, <span class="hljs-string">&quot;Length Required&quot;</span>),<br>    PRECONDITION_FAILED(<span class="hljs-number">412</span>, <span class="hljs-string">&quot;Precondition Failed&quot;</span>),<br>    PAYLOAD_TOO_LARGE(<span class="hljs-number">413</span>, <span class="hljs-string">&quot;Payload Too Large&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    REQUEST_ENTITY_TOO_LARGE(<span class="hljs-number">413</span>, <span class="hljs-string">&quot;Request Entity Too Large&quot;</span>),<br>    URI_TOO_LONG(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;URI Too Long&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    REQUEST_URI_TOO_LONG(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;Request-URI Too Long&quot;</span>),<br>    UNSUPPORTED_MEDIA_TYPE(<span class="hljs-number">415</span>, <span class="hljs-string">&quot;Unsupported Media Type&quot;</span>),<br>    REQUESTED_RANGE_NOT_SATISFIABLE(<span class="hljs-number">416</span>, <span class="hljs-string">&quot;Requested range not satisfiable&quot;</span>),<br>    EXPECTATION_FAILED(<span class="hljs-number">417</span>, <span class="hljs-string">&quot;Expectation Failed&quot;</span>),<br>    I_AM_A_TEAPOT(<span class="hljs-number">418</span>, <span class="hljs-string">&quot;I&#x27;m a teapot&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    INSUFFICIENT_SPACE_ON_RESOURCE(<span class="hljs-number">419</span>, <span class="hljs-string">&quot;Insufficient Space On Resource&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    METHOD_FAILURE(<span class="hljs-number">420</span>, <span class="hljs-string">&quot;Method Failure&quot;</span>),<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    DESTINATION_LOCKED(<span class="hljs-number">421</span>, <span class="hljs-string">&quot;Destination Locked&quot;</span>),<br>    UNPROCESSABLE_ENTITY(<span class="hljs-number">422</span>, <span class="hljs-string">&quot;Unprocessable Entity&quot;</span>),<br>    LOCKED(<span class="hljs-number">423</span>, <span class="hljs-string">&quot;Locked&quot;</span>),<br>    FAILED_DEPENDENCY(<span class="hljs-number">424</span>, <span class="hljs-string">&quot;Failed Dependency&quot;</span>),<br>    UPGRADE_REQUIRED(<span class="hljs-number">426</span>, <span class="hljs-string">&quot;Upgrade Required&quot;</span>),<br>    PRECONDITION_REQUIRED(<span class="hljs-number">428</span>, <span class="hljs-string">&quot;Precondition Required&quot;</span>),<br>    TOO_MANY_REQUESTS(<span class="hljs-number">429</span>, <span class="hljs-string">&quot;Too Many Requests&quot;</span>),<br>    REQUEST_HEADER_FIELDS_TOO_LARGE(<span class="hljs-number">431</span>, <span class="hljs-string">&quot;Request Header Fields Too Large&quot;</span>),<br>    UNAVAILABLE_FOR_LEGAL_REASONS(<span class="hljs-number">451</span>, <span class="hljs-string">&quot;Unavailable For Legal Reasons&quot;</span>),<br>    INTERNAL_SERVER_ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;Internal Server Error&quot;</span>),<br>    NOT_IMPLEMENTED(<span class="hljs-number">501</span>, <span class="hljs-string">&quot;Not Implemented&quot;</span>),<br>    BAD_GATEWAY(<span class="hljs-number">502</span>, <span class="hljs-string">&quot;Bad Gateway&quot;</span>),<br>    SERVICE_UNAVAILABLE(<span class="hljs-number">503</span>, <span class="hljs-string">&quot;Service Unavailable&quot;</span>),<br>    GATEWAY_TIMEOUT(<span class="hljs-number">504</span>, <span class="hljs-string">&quot;Gateway Timeout&quot;</span>),<br>    HTTP_VERSION_NOT_SUPPORTED(<span class="hljs-number">505</span>, <span class="hljs-string">&quot;HTTP Version not supported&quot;</span>),<br>    VARIANT_ALSO_NEGOTIATES(<span class="hljs-number">506</span>, <span class="hljs-string">&quot;Variant Also Negotiates&quot;</span>),<br>    INSUFFICIENT_STORAGE(<span class="hljs-number">507</span>, <span class="hljs-string">&quot;Insufficient Storage&quot;</span>),<br>    LOOP_DETECTED(<span class="hljs-number">508</span>, <span class="hljs-string">&quot;Loop Detected&quot;</span>),<br>    BANDWIDTH_LIMIT_EXCEEDED(<span class="hljs-number">509</span>, <span class="hljs-string">&quot;Bandwidth Limit Exceeded&quot;</span>),<br>    NOT_EXTENDED(<span class="hljs-number">510</span>, <span class="hljs-string">&quot;Not Extended&quot;</span>),<br>    NETWORK_AUTHENTICATION_REQUIRED(<span class="hljs-number">511</span>, <span class="hljs-string">&quot;Network Authentication Required&quot;</span>);<br>    ...<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编写完自定义异常处理逻辑后，我们将UserController中的方法抛出的异常改为<code>UserNotExistException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@GetMapping(&quot;/&#123;id:\\d+&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotExistException</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>重启项目，使用Restlet Client再次访问<a href="http://localhost:8080/user/1%EF%BC%8C%E5%93%8D%E5%BA%94%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/user/1，响应如下：</a></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031117083.png" alt="QQ图片20180701172030.png"></p><p><a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/25.Spring-Boot-Exception">源码链接</a></p><ul><li><strong>本文作者：</strong> MrBird</li><li><strong>本文链接：</strong> <a href="http://mrbird.cc/Spring-Boot-Exception.html">http://mrbird.cc/Spring-Boot-Exception.html</a></li><li><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明出处！</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用springboot发送邮件</title>
      <link href="/2020/12/04/%E4%BD%BF%E7%94%A8Spring%20Boot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2020/12/04/%E4%BD%BF%E7%94%A8Spring%20Boot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在项目的维护过程中，我们通常会在应用中加入短信或者邮件预警功能，比如当应用出现异常宕机时应该及时地将预警信息发送给运维或者开发人员，本文将介绍如何在Spring Boot中发送邮件。在Spring Boot中发送邮件使用的是Spring提供的org.springframework.mail.javamail.JavaMailSender，其提供了许多简单易用的方法，可发送简单的邮件、HTML格式的邮件、带附件的邮件，并且可以创建邮件模板。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>在Spring Boot中发送邮件，需要用到spring-boot-starter-mail，引入spring-boot-starter-mail：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h1><p>在application.yml中进行简单的配置（以163邮件为例）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.163.com</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">你的账号</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">你的密码</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">mail:</span><br>        <span class="hljs-attr">smtp:</span><br>          <span class="hljs-attr">auth:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">starttls:</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>spring.mail.username，spring.mail.password填写自己的邮箱账号**密码(smtp服务的授权码)**即可。</p><h1 id="发送简单的邮件"><a href="#发送简单的邮件" class="headerlink" title="发送简单的邮件"></a>发送简单的邮件</h1><p>编写EmailController，注入JavaMailSender:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;sendSimpleEmail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendSimpleEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>            message.setFrom(from);<br>            message.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            message.setSubject(<span class="hljs-string">&quot;一封简单的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            message.setText(<span class="hljs-string">&quot;使用Spring Boot发送简单邮件。&quot;</span>); <span class="hljs-comment">// 内容</span><br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问<a href="http://localhost/email/sendSimpleEmail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendSimpleEmail，提示发送成功：</a></p><h1 id="发送HTML格式的邮件"><a href="#发送HTML格式的邮件" class="headerlink" title="发送HTML格式的邮件"></a>发送HTML格式的邮件</h1><p>改造EmailController，SimpleMailMessage替换为MimeMessage：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;sendHtmlEmail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendHtmlEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;一封HTML格式的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            <span class="hljs-comment">// 带HTML格式的内容</span><br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&lt;p style=&#x27;color:#6db33f&#x27;&gt;使用Spring Boot发送HTML格式邮件。&lt;/p&gt;&quot;</span>);<br>            helper.setText(sb.toString(), <span class="hljs-literal">true</span>);<br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>helper.setText(sb.toString(), true);中的true表示发送HTML格式邮件。启动项目，访问<a href="http://localhost/email/sendHtmlEmail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%96%87%E6%9C%AC%E5%B7%B2%E7%BB%8F%E5%8A%A0%E4%B8%8A%E4%BA%86%E9%A2%9C%E8%89%B2#6db33f%EF%BC%9A">http://localhost/email/sendHtmlEmail，提示发送成功，可看到文本已经加上了颜色#6db33f：</a></p><h1 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h1><p>发送带附件的邮件和普通邮件相比，其实就只是多了个传入附件的过程。不过使用的仍是MimeMessage：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springboot.demo.controller;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;sendAttachmentsMail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendAttachmentsMail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;一封带附件的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            helper.setText(<span class="hljs-string">&quot;详情参见附件内容！&quot;</span>); <span class="hljs-comment">// 内容</span><br>            <span class="hljs-comment">// 传入附件</span><br>            <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/static/file/项目文档.docx&quot;</span>));<br>            helper.addAttachment(<span class="hljs-string">&quot;项目文档.docx&quot;</span>, file);<br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问<a href="http://localhost/email/sendAttachmentsMail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendAttachmentsMail，提示发送成功：</a></p><h1 id="发送带静态资源的邮件"><a href="#发送带静态资源的邮件" class="headerlink" title="发送带静态资源的邮件"></a>发送带静态资源的邮件</h1><p>发送带静态资源的邮件其实就是在发送HTML邮件的基础上嵌入静态资源（比如图片），嵌入静态资源的过程和传入附件类似，唯一的区别在于需要标识资源的cid：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springboot.demo.controller;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;sendInlineMail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendInlineMail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;一封带静态资源的邮件&quot;</span>); <span class="hljs-comment">// 标题</span><br>            helper.setText(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;博客图：&lt;img src=&#x27;cid:img&#x27;/&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 内容</span><br>            <span class="hljs-comment">// 传入附件</span><br>            <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/static/img/sunshine.png&quot;</span>));<br>            helper.addInline(<span class="hljs-string">&quot;img&quot;</span>, file); <br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>helper.addInline(“img”, file);中的img和图片标签里cid后的名称相对应。启动项目访问<a href="http://localhost/email/sendInlineMail%EF%BC%8C%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendInlineMail，提示发送成功：</a></p><h1 id="使用模板发送邮件"><a href="#使用模板发送邮件" class="headerlink" title="使用模板发送邮件"></a>使用模板发送邮件</h1><p>在发送验证码等情况下可以创建一个邮件的模板，唯一的变量为验证码。这个例子中使用的模板解析引擎为Thymeleaf，所以首先引入Thymeleaf依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在template目录下创建一个emailTemplate.html模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    您好，您的验证码为&#123;code&#125;，请在两分钟内使用完成操作。<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发送模板邮件，本质上还是发送HTML邮件，只不过多了绑定变量的过程，详细如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springboot.demo.controller;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.thymeleaf.TemplateEngine;<br><span class="hljs-keyword">import</span> org.thymeleaf.context.Context;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/email&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender jms;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String from;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TemplateEngine templateEngine;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;sendTemplateEmail&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendTemplateEmail</span><span class="hljs-params">(String code)</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            message = jms.createMimeMessage();<br>            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>            helper.setFrom(from); <br>            helper.setTo(<span class="hljs-string">&quot;888888@qq.com&quot;</span>); <span class="hljs-comment">// 接收地址</span><br>            helper.setSubject(<span class="hljs-string">&quot;邮件摸板测试&quot;</span>); <span class="hljs-comment">// 标题</span><br>            <span class="hljs-comment">// 处理邮件模板</span><br>            <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>            context.setVariable(<span class="hljs-string">&quot;code&quot;</span>, code);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> templateEngine.process(<span class="hljs-string">&quot;emailTemplate&quot;</span>, context);<br>            helper.setText(template, <span class="hljs-literal">true</span>);<br>            jms.send(message);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中code对应模板里的${code}变量。启动项目，访问<a href="http://localhost/email/sendTemplateEmail?code=EOS9%EF%BC%8C%E9%A1%B5%E9%9D%A2%E6%8F%90%E7%A4%BA%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%EF%BC%9A">http://localhost/email/sendTemplateEmail?code=EOS9，页面提示发送成功：</a></p><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/22.Spring-Boot-Email">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/22.Spring-Boot-Email</a></p></blockquote><blockquote><p>本文作者： MrBird<br>本文链接： <a href="http://mrbird.cc/Spring-Boot-Email.html">http://mrbird.cc/Spring-Boot-Email.html</a><br>版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池Executors</title>
      <link href="/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0Executors/"/>
      <url>/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0Executors/</url>
      
        <content type="html"><![CDATA[<p>线程池的创建分为两种方式：ThreadPoolExecutor 和 Executors</p><h1 id="Executors可以创建6种线程池"><a href="#Executors可以创建6种线程池" class="headerlink" title="Executors可以创建6种线程池:"></a>Executors可以创建6种线程池:</h1><ol><li>FixedThreadPool(n)：创建一个数量固定的线程池，超出的任务会在队列中等待空闲的线程，可用于控制程序的最大并发数。</li><li>CachedThreadPool()：短时间内处理大量工作的线程池，会根据任务数量产生对应的线程，并试图缓存线程以便重复使用，如果限制 60 秒没被使用，则会被移除缓存。</li><li>SingleThreadExecutor()：创建一个单线程线程池。</li><li>ScheduledThreadPool(n)：创建一个数量固定的线程池，支持执行定时性或周期性任务。</li><li>SingleThreadScheduledExecutor()：此线程池就是单线程的 newScheduledThreadPool。</li><li>WorkStealingPool(n)：Java 8 新增创建线程池的方法，创建时如果不设置任何参数，则以当前机器处理器个数作为线程个数，此线程池会并行处理任务，不能保证执行顺序。</li></ol><h2 id="FixedThreadPool-OOM"><a href="#FixedThreadPool-OOM" class="headerlink" title="FixedThreadPool (OOM)"></a>FixedThreadPool (OOM)</h2><p>创建固定个数的线程池，具体示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">fixedThreadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    fixedThreadPool.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentTime - &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">//以上程序执行结果如下：</span><br><br>   <span class="hljs-comment">// CurrentTime - 2019-06-27 20:58:58</span><br><br>    <span class="hljs-comment">//CurrentTime - 2019-06-27 20:58:58</span><br><br>   <span class="hljs-comment">// CurrentTime - 2019-06-27 20:58:59</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，newFixedThreadPool(2) 确实是创建了两个线程，在执行了一轮（2 次）之后，停了一秒，有了空闲线程，才执行第三次。</p></blockquote><h2 id="CachedThreadPool-OOM"><a href="#CachedThreadPool-OOM" class="headerlink" title="CachedThreadPool (OOM)"></a>CachedThreadPool (OOM)</h2><p>根据实际需要自动创建带缓存功能的线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">cachedThreadPool</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    cachedThreadPool.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentTime - &quot;</span> +<br>                           LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br>以上程序执行结果如下：<br><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">24</span>:<span class="hljs-number">46</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，newCachedThreadPool 在短时间内会创建多个线程来处理对应的任务，并试图把它们进行缓存以便重复使用。</p></blockquote><h2 id="SingleThreadExecutor-OOM"><a href="#SingleThreadExecutor-OOM" class="headerlink" title="SingleThreadExecutor  (OOM)"></a>SingleThreadExecutor  (OOM)</h2><p>创建单个线程的线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">singleThreadExecutor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    singleThreadExecutor.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentTime - &quot;</span> +<br>                           LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-comment">//以上程序执行结果如下：</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span>:<span class="hljs-number">35</span><br>        CurrentTime - <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">27</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span>:<span class="hljs-number">36</span><br></code></pre></td></tr></table></figure><h2 id="ScheduledThreadPool-OOM"><a href="#ScheduledThreadPool-OOM" class="headerlink" title="ScheduledThreadPool (OOM)"></a>ScheduledThreadPool (OOM)</h2><p>创建一个可以执行周期性任务的线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">scheduledThreadPool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br>scheduledThreadPool.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;ThreadPool：&quot;</span> + LocalDateTime.now());<br>&#125;, <span class="hljs-number">1L</span>, TimeUnit.SECONDS);<br>System.out.println(<span class="hljs-string">&quot;CurrentTime：&quot;</span> + LocalDateTime.now());<br><br><span class="hljs-comment">//以上程序执行结果如下：</span><br>CurrentTime：<span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-27T21:<span class="hljs-number">54</span>:<span class="hljs-number">21.881</span><br>ThreadPool：<span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-27T21:<span class="hljs-number">54</span>:<span class="hljs-number">22.845</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，我们设置的 1 秒后执行的任务生效了。</p></blockquote><h2 id="SingleThreadScheduledExecutor"><a href="#SingleThreadScheduledExecutor" class="headerlink" title="SingleThreadScheduledExecutor"></a>SingleThreadScheduledExecutor</h2><p>创建一个可以执行周期性任务的单线程池，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">singleThreadScheduledExecutor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadScheduledExecutor();<br>singleThreadScheduledExecutor.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;ThreadPool：&quot;</span> + LocalDateTime.now());<br>&#125;, <span class="hljs-number">1L</span>, TimeUnit.SECONDS);<br>System.out.println(<span class="hljs-string">&quot;CurrentTime：&quot;</span> + LocalDateTime.now());<br></code></pre></td></tr></table></figure><h2 id="WorkStealingPool"><a href="#WorkStealingPool" class="headerlink" title="WorkStealingPool"></a>WorkStealingPool</h2><p><strong>Java 8 新增的创建线程池的方式，可根据当前电脑 CPU 处理器数量生成相应个数的线程池，使用代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">workStealingPool</span> <span class="hljs-operator">=</span>  Executors.newWorkStealingPool();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">finalNumber</span> <span class="hljs-operator">=</span> i;<br>    workStealingPool.execute(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;I：&quot;</span> + finalNumber);<br>    &#125;);<br>&#125;<br>Thread.sleep(<span class="hljs-number">5000</span>);<br><br><span class="hljs-comment">//以上程序执行结果如下：</span><br>        I：<span class="hljs-number">0</span><br>        I：<span class="hljs-number">3</span><br>        I：<span class="hljs-number">2</span><br>        I：<span class="hljs-number">1</span><br>        I：<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><blockquote><p>根据执行结果可以看出，newWorkStealingPool 是并行处理任务的，并不能保证执行顺序。</p></blockquote><h1 id="ThreadPoolExecutor-VS-Executors"><a href="#ThreadPoolExecutor-VS-Executors" class="headerlink" title="ThreadPoolExecutor VS Executors"></a>ThreadPoolExecutor VS Executors</h1><ul><li>ThreadPoolExecutor 创建线程池的方式相对传统，而 Executors 提供了更多的线程池类型（6 种），但很不幸的消息是在实际开发中并不推荐使用 Executors 的方式来创建线程池。</li></ul><blockquote><p>《阿里巴巴 Java 开发手册》中对于线程池的创建也是这样规定的，内容如下：</p></blockquote><blockquote><p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的读者更加明确线程池的运行规则，规避资源耗尽的风险。</p></blockquote><h2 id="Executors-创建线程池对象的弊端"><a href="#Executors-创建线程池对象的弊端" class="headerlink" title="Executors 创建线程池对象的弊端:"></a>Executors 创建线程池对象的弊端:</h2><p>FixedThreadPool 和 SingleThreadPool</p><blockquote><p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM(OutOfMemoryError 的缩写，指内存溢出的意思)。</p></blockquote><p>CachedThreadPool 和 ScheduledThreadPool</p><blockquote><p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p></blockquote><p>举个栗子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">maxFixedThreadPool</span> <span class="hljs-operator">=</span>  Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;<br>    maxFixedThreadPool.execute(()-&gt;&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后设置 JVM（Java 虚拟机）的启动参数： -Xmx10m -Xms10m （设置 JVM 最大运行内存等于 10M）运行程序，会抛出 OOM 异常，信息如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.OutOfMemoryError: GC overhead limit exceeded<br><br> at java.util.concurrent.LinkedBlockingQueue.offer(LinkedBlockingQueue.java:<span class="hljs-number">416</span>)<br><br> at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="hljs-number">1371</span>)<br><br> at xxx.main(xxx.java:<span class="hljs-number">127</span>)<br></code></pre></td></tr></table></figure><p>为什么 Executors 会存在 OOM 的缺陷？</p><p>通过以上代码，找到了 FixedThreadPool 的源码，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                      <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到创建 FixedThreadPool 使用了 LinkedBlockingQueue 作为任务队列，继续查看 LinkedBlockingQueue 的源码就会发现问题的根源，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedBlockingQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(Integer.MAX_VALUE);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>当使用 LinkedBlockingQueue 并没有给它指定长度的时候，默认长度为 Integer.MAX_VALUE，这样就会导致程序会给线程池队列添加超多个任务，因为任务量太大就有造成 OOM 的风险。</strong></p><hr><h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><h2 id="Executors-能创建单线程的线程池吗？怎么创建？"><a href="#Executors-能创建单线程的线程池吗？怎么创建？" class="headerlink" title="Executors 能创建单线程的线程池吗？怎么创建？"></a>Executors 能创建单线程的线程池吗？怎么创建？</h2><p>答：Executors 可以创建单线程线程池，创建分为两种方式：</p><ol><li>Executors.newSingleThreadExecutor()：创建一个单线程线程池。</li><li>Executors.newSingleThreadScheduledExecutor()：创建一个可以执行周期性任务的单线程池。</li></ol><h2 id="Executors-中哪个线程适合执行短时间内大量任务？"><a href="#Executors-中哪个线程适合执行短时间内大量任务？" class="headerlink" title="Executors 中哪个线程适合执行短时间内大量任务？"></a>Executors 中哪个线程适合执行短时间内大量任务？</h2><p>答：newCachedThreadPool() 适合处理大量短时间工作任务。它会试图缓存线程并重用，如果没有缓存任务就会新创建任务，如果线程的限制时间超过六十秒，则会被移除线程池，因此它比较适合短时间内处理大量任务。</p><h2 id="可以执行周期性任务的线程池都有哪些？"><a href="#可以执行周期性任务的线程池都有哪些？" class="headerlink" title="可以执行周期性任务的线程池都有哪些？"></a>可以执行周期性任务的线程池都有哪些？</h2><p>答：可执行周期性任务的线程池有两个，分别是：newScheduledThreadPool() 和 newSingleThreadScheduledExecutor()，其中 newSingleThreadScheduledExecutor() 是 newScheduledThreadPool() 的单线程版本。</p><h2 id="JDK-8-新增了什么线程池？有什么特点？"><a href="#JDK-8-新增了什么线程池？有什么特点？" class="headerlink" title="JDK 8 新增了什么线程池？有什么特点？"></a>JDK 8 新增了什么线程池？有什么特点？</h2><p>答：JDK 8 新增的线程池是 newWorkStealingPool(n)，如果不指定并发数（也就是不指定 n），newWorkStealingPool() 会根据当前 CPU 处理器数量生成相应个数的线程池。<strong>它的特点是并行处理任务的，不能保证任务的执行顺序。</strong></p><h2 id="newFixedThreadPool-和-ThreadPoolExecutor-有什么关系？"><a href="#newFixedThreadPool-和-ThreadPoolExecutor-有什么关系？" class="headerlink" title="newFixedThreadPool 和 ThreadPoolExecutor 有什么关系？"></a>newFixedThreadPool 和 ThreadPoolExecutor 有什么关系？</h2><p>答：newFixedThreadPool 是 ThreadPoolExecutor 包装，newFixedThreadPool 底层也是通过 ThreadPoolExecutor 实现的。</p><h2 id="单线程的线程池存在的意义是什么？"><a href="#单线程的线程池存在的意义是什么？" class="headerlink" title="单线程的线程池存在的意义是什么？"></a>单线程的线程池存在的意义是什么？</h2><p>答：单线程线程池提供了队列功能，如果有多个任务会排队执行，<strong>可以保证任务执行的顺序性</strong>。单线程线程池也可以重复利用已有线程，减低系统创建和销毁线程的性能开销。</p><h2 id="线程池为什么建议使用-ThreadPoolExecutor-创建，而非-Executors？"><a href="#线程池为什么建议使用-ThreadPoolExecutor-创建，而非-Executors？" class="headerlink" title="线程池为什么建议使用 ThreadPoolExecutor 创建，而非 Executors？"></a>线程池为什么建议使用 ThreadPoolExecutor 创建，而非 Executors？</h2><p>答：使用 ThreadPoolExecutor 能让开发者更加明确线程池的运行规则，避免资源耗尽的风险。</p><p>Executors 返回线程池的缺点如下：</p><p>FixedThreadPool 和 SingleThreadPool 允许请求队列长度为 Integer.MAX_VALUE，可能会堆积大量请求，可能会导致内存溢出；</p><p>CachedThreadPool 和 ScheduledThreadPool 允许创建线程数量为 Integer.MAX_VALUE，创建大量线程，可能会导致内存溢出。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 线程池 </tag>
            
            <tag> executors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/12/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/12/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>正则表达式用于文本内容的查找和替换。</p><p><a href="https://regexr.com/">正则表达式在线工具</a></p><h1 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符 ."></a>匹配单个字符 <code>.</code></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>.</code> 可以用来匹配任何的<strong>单个字符</strong>，但是在绝大多数实现里面，<strong>不能匹配换行符</strong>；</p><p><code>.</code> 是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 <code>.</code> ，那么要用 <code>\</code> 进行转义，即在 <code>.</code> 前面加上 <code>\</code> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h2><p>正则表达式一般是区分大小写的，但也有些实现不区分。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//正则表达式</span><br>C.C2018<br><span class="hljs-comment">//匹配结果</span><br>My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> CyC2018<br></code></pre></td></tr></table></figure><h1 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符 [ ]"></a>匹配一组字符 <code>[ ]</code></h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><code>[ ]</code>定义一个字符集合；</p><p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在<code>[ ]</code>中使用。</p><p><code>-</code> <strong>只有在 <code>[ ]</code>之间才是元字符，在 [ ] 之外就是一个普通字符；</strong></p><p><code>^</code> <strong>在 <code>[ ]</code>中是取非操作</strong>。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p><strong>匹配以 abc 为开头且最后一个字母不为数字的字符串：</strong></p><ul><li><p>**正则表达式 <code>abc[^0-9]</code> **</p></li><li><p><strong>匹配结果</strong></p><ol><li><p><strong>abcd</strong></p></li><li><p>abc1</p></li><li><p>abc2</p></li></ol></li></ul><h1 id="使用元字符"><a href="#使用元字符" class="headerlink" title="使用元字符"></a>使用元字符</h1><h2 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h2><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>[\b]</td><td>回退（删除）一个字符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr></tbody></table><p><strong><code>\r\n</code>是 Windows 中的文本行结束标签，在 Unix&#x2F;Linux 则是<code>\n</code></strong></p><p><strong><code>\r\n\r\n</code> 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</strong></p><h2 id="匹配特定的字符"><a href="#匹配特定的字符" class="headerlink" title="匹配特定的字符"></a>匹配特定的字符</h2><h3 id="数字元字符-d"><a href="#数字元字符-d" class="headerlink" title="数字元字符 \d"></a>数字元字符 <code>\d</code></h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><strong>\d</strong></td><td>数字字符，等价于 <code>[0-9]</code></td></tr><tr><td><strong><code>\D</code></strong></td><td>非数字字符，等价于 <code>[^0-9]</code></td></tr></tbody></table><h3 id="字母数字元字符-w"><a href="#字母数字元字符-w" class="headerlink" title="字母数字元字符 \w"></a>字母数字元字符 <code>\w</code></h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\w</code></td><td>大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]</td></tr><tr><td><code>\W</code></td><td>对 \w 取非</td></tr></tbody></table><h3 id="空白字符元字符-s"><a href="#空白字符元字符-s" class="headerlink" title="空白字符元字符 \s"></a>空白字符元字符 <code>\s</code></h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\s</code></td><td>任何一个空白字符，等价于 <code>[\f\n\r\t\v]</code></td></tr><tr><td><code>\S</code></td><td>对 <code>\s</code> 取非</td></tr></tbody></table><p><code>\x</code> 匹配十六进制字符，<code>\0</code> 匹配八进制，例如 <code>\xA</code> 对应值为 <code>10</code> 的 ASCII 字符 ，即 <code>\n</code>。</p><h1 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h1><h2 id=""><a href="#" class="headerlink" title="+ * ?"></a><code>+</code> <code>*</code> <code>?</code></h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li><strong><code>+</code></strong> 匹配 1 个或者多个字符</li><li><code>*</code> 匹配 0 个或者多个字符</li><li><strong><code>?</code></strong> 匹配 0 个或者 1 个字符</li></ul><h3 id="示例-匹配邮箱地址"><a href="#示例-匹配邮箱地址" class="headerlink" title="示例:匹配邮箱地址"></a>示例:匹配邮箱地址</h3><p><strong>正则表达式 <code>[\w.]+@\w+\.\w+</code></strong></p><p><code>[\w.]</code> 匹配的是<strong>字母数字或者 <code>.</code></strong> ，在其后面加上 <code>+</code> ，表示<strong>匹配多次</strong>。在字符集合 <code>[ ]</code> 里，<code>.</code> 不是元字符；</p><p><strong>匹配结果</strong>   <code>abc.def@qq.com</code></p><p>​</p><h2 id="n-m"><a href="#n-m" class="headerlink" title="n m"></a><code>n m</code></h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>{n}</strong> 匹配 n 个字符</li><li><strong>{m,n}</strong> 匹配 m~n 个字符</li><li><strong>{m,}</strong> 至少匹配 m 个字符</li></ul><p><code>*</code> 和 <code>+</code> 都是贪婪型元字符，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m,n}? 。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例:"></a>示例:</h3><p><strong>正则表达式</strong>   <code>a.+c</code></p><p><strong>匹配结果</strong>  abcabcabc</p><p>由于 <code>+</code> 是贪婪型的，因此 <code>.+</code> 会匹配更可能多的内容，所以会把整个 <code>abcabcabc</code> 文本都匹配，而不是只匹配前面的 <code>abc</code> 文本。用懒惰型可以实现匹配前面的:<code>a.+?c</code>  匹配出 <code>abc</code>。</p><h1 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h1><h2 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h2><p><strong><code>\b</code></strong> 可以匹配一个单词的边界，边界是指位于 <code>\w</code> 和 <code>\W</code> 之间的位置；**<code>\B</code>** 匹配一个不是单词边界的位置。</p><p><code>\b</code> 只匹配位置，不匹配字符，因此 <code>\babc\b</code> 匹配出来的结果为 <code>3</code> 个字符。</p><h2 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界 ^  $"></a>字符串边界 <code>^  $</code></h2><p><strong><code>^</code></strong> 匹配整个字符串的开头，**<code>$</code>** 匹配结尾。</p><p><strong><code>^</code> 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</strong></p><p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p><h3 id="示例-匹配代码中以-开始的注释行"><a href="#示例-匹配代码中以-开始的注释行" class="headerlink" title="示例:匹配代码中以 // 开始的注释行"></a>示例:匹配代码中以 <code>//</code> 开始的注释行</h3><p><strong>正则表达式</strong> <code>^\s*\/\/.*$</code></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/image-20240314180056035.png" alt="image-20240314180056035"></p><p><strong>匹配结果</strong></p><ol><li>public void fun() {</li><li><strong>&#x2F;&#x2F; 注释 1</strong></li><li>int a &#x3D; 1;</li><li>int b &#x3D; 2;</li><li><strong>&#x2F;&#x2F; 注释 2</strong></li><li>int c &#x3D; a + b;</li><li>}</li></ol><h1 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式 ( )"></a>使用子表达式 <code>( )</code></h1><p>使用 <strong><code>( )</code></strong> 定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 <code>*</code> 等元字符。</p><p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p><h2 id="示例-ab-2"><a href="#示例-ab-2" class="headerlink" title="示例: (ab){2,}"></a>示例: <code>(ab)&#123;2,&#125;</code></h2><p><strong>说明</strong>:最少2个<code>ab</code>  </p><p><strong>匹配结果</strong> <code>ababab</code></p><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例: |"></a>示例: <code>|</code></h2><p><strong><code>|</code></strong> 是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p><p><strong>正则表达式</strong> <code>(19|20)\d&#123;2&#125;</code></p><p><strong>说明</strong>:<code>19</code>或<code>20</code>后面跟<code>2</code>个数字</p><p><strong>匹配结果</strong></p><ol><li><strong>1900</strong></li><li><strong>2010</strong></li><li>1020</li></ol><h2 id="示例-匹配-IP-地址。"><a href="#示例-匹配-IP-地址。" class="headerlink" title="**示例:**匹配 IP 地址。"></a>**示例:**匹配 IP 地址。</h2><p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p><ul><li>一位数字</li><li>不以 0 开头的两位数字</li><li>1 开头的三位数</li><li>2 开头，第 2 位是 0-4 的三位数</li><li>25 开头，第 3 位是 0-5 的三位数</li></ul><p><strong>正则表达式</strong></p><p>​<code>((25[0-5]|(2[0-4]\d)|(1\d&#123;2&#125;)|([1-9]\d)|(\d))\.)&#123;3&#125;(25[0-5]|(2[0-4]\d)|(1\d&#123;2&#125;)|([1-9]\d)|(\d))</code></p><p><strong>说明</strong></p><p><code>&#123;3&#125;</code>之前匹配<code>xxx.xxx.xxx.</code></p><p><code>&#123;3&#125;</code>之后匹配最后一部分<code>xxx</code></p><p><strong>匹配结果</strong></p><ol><li><strong>192.168.0.1</strong></li><li>00.00.00.00</li><li>555.555.555.555</li></ol><h1 id="回溯引用-n"><a href="#回溯引用-n" class="headerlink" title="回溯引用 \n"></a>回溯引用 <code>\n</code></h1><p>回溯引用使用 <strong><code>\n</code></strong> 来引用某个子表达式，其中 <code>n</code> 代表的是<strong>子表达式的序号</strong>，从 <code>1</code> 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 <code>abc</code>，那么回溯引用部分也需要匹配 <code>abc</code> 。</p><h2 id="示例-匹配-HTML-中合法的标题元素。"><a href="#示例-匹配-HTML-中合法的标题元素。" class="headerlink" title="示例:匹配 HTML 中合法的标题元素。"></a>示例:匹配 HTML 中合法的标题元素。</h2><p><strong>正则表达式</strong> <code>&lt;(h[1-6])&gt;\w*?&lt;\/\1&gt;</code></p><p><code>\1</code> 将回溯引用子表达式 <code>(h[1-6])</code> 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p><p><strong>匹配结果</strong>(加粗表示匹配到)</p><ol><li><strong><code>&lt;h1&gt;x&lt;/h1&gt;</code></strong></li><li><strong><code>&lt;h2&gt;x&lt;/h2&gt;</code></strong></li><li><code>&lt;h1&gt;x&lt;/h3&gt;</code></li></ol><h2 id="示例-替换-修改电话号码格式"><a href="#示例-替换-修改电话号码格式" class="headerlink" title="示例:替换-修改电话号码格式"></a>示例:替换-修改电话号码格式</h2><p><strong>需要用到两个正则表达式。</strong></p><p>把<code>313-555-1234</code>  替换格式为 <code>(313) 555-1234</code></p><p><strong>查找正则表达式</strong>  <code>(\d&#123;3&#125;)(-)(\d&#123;3&#125;)(-)(\d&#123;4&#125;)</code></p><p>**替换正则表达式 **  <code>($1) $3-$5</code></p><p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p><p><strong>结果</strong>  <code>(313) 555-1234</code></p><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\l</td><td>把下个字符转换为小写</td></tr><tr><td>\u</td><td>把下个字符转换为大写</td></tr><tr><td>\L</td><td>把\L 和\E 之间的字符全部转换为小写</td></tr><tr><td>\U</td><td>把\U 和\E 之间的字符全部转换为大写</td></tr><tr><td>\E</td><td>结束\L 或者\U</td></tr></tbody></table><p>示例:把文本的第二个和第三个字符转换为大写。</p><p><strong>文本</strong>  <code>abcd</code></p><p>**查找 ** <code>(\w)(\w&#123;2&#125;)(\w)</code></p><p>**替换 ** <code>$1\U$2\E$3</code></p><p><strong>结果</strong>  <code>aBCd</code></p><h1 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h1><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。</p><p>向前查找使用 <strong><code>?=</code></strong> 定义，它规定了尾部匹配的内容，这个匹配的内容在 <code>?=</code> 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 <code>?&lt;=</code> 定义（注: JavaScript 不支持向后匹配，Java 对其支持也不完善）。</p><h2 id="示例-查找出邮件地址-字符前面的部分。"><a href="#示例-查找出邮件地址-字符前面的部分。" class="headerlink" title="示例:查找出邮件地址 @ 字符前面的部分。"></a>示例:查找出邮件地址 @ 字符前面的部分。</h2><p>**正则表达式 ** <code>\w+(?=@)</code></p><p><strong>结果</strong></p><p><strong>abc</strong> @qq.com</p><p>对向前和向后查找取非，只要把 &#x3D; 替换成 ! 即可，比如 (?&#x3D;) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p><h1 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h1><h2 id="回溯引用条件"><a href="#回溯引用条件" class="headerlink" title="回溯引用条件"></a>回溯引用条件</h2><p>条件为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p><p><strong>正则表达式</strong>  <code>(\()?abc(?(1)\))</code></p><p>子表达式 <code>(\()</code> 匹配一个左括号，其后的 <code>?</code> 表示匹配 <code>0</code> 个或者 <code>1</code> 个。 <code>?(1)</code> 为条件，当子表达式 <code>1</code> 匹配时条件成立，需要执行 <code>)</code> 匹配，也就是匹配右括号。</p><p><strong>结果</strong></p><ol><li><strong>(abc)</strong></li><li><strong>abc</strong></li><li>(abc</li></ol><h2 id="前后查找条件"><a href="#前后查找条件" class="headerlink" title="前后查找条件"></a>前后查找条件</h2><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p><p>**正则表达式 ** <code>\d&#123;5&#125;(?(?=-)-\d&#123;4&#125;)</code></p><p><code>?(?=-)</code> 为前向查找条件，只有在以 <code>-</code> 为前向查找的结尾能匹配 <code>\d&#123;5&#125;</code> ，才继续匹配 <code>-\d&#123;4&#125;</code> 。</p><p><strong>结果</strong></p><ol><li><strong>11111</strong></li><li>22222-</li><li><strong>33333-4444</strong></li></ol><p><a href="https://www.cyc2018.xyz/%E5%85%B6%E5%AE%83/%E7%BC%96%E7%A0%81%E5%AE%9E%E8%B7%B5/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0">文章来源</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池ThreadPollExecutor</title>
      <link href="/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ThreadPoolExecutor/"/>
      <url>/2020/12/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ThreadPoolExecutor/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要使用线程池？"><a href="#为什么要使用线程池？" class="headerlink" title="为什么要使用线程池？"></a>为什么要使用线程池？</h1><ul><li>可重复使用已有线程，避免对象创建、消亡和过度切换的性能开销。</li><li>避免创建大量同类线程所导致的资源过度竞争和内存溢出的问题。</li><li>支持更多功能，比如延迟任务线程池（newScheduledThreadPool）和缓存线程池（newCachedThreadPool）等。</li></ul><h1 id="ThreadPoolExecutor-的使用"><a href="#ThreadPoolExecutor-的使用" class="headerlink" title="ThreadPoolExecutor 的使用"></a>ThreadPoolExecutor 的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>(<span class="hljs-number">100</span>));<br>threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 执行线程池</span><br>        System.out.println(<span class="hljs-string">&quot;Hello, Java.&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上程序执行结果如下：</p><blockquote><p>Hello, Java.</p></blockquote><h1 id="ThreadPoolExecutor-参数说明"><a href="#ThreadPoolExecutor-参数说明" class="headerlink" title="ThreadPoolExecutor 参数说明"></a>ThreadPoolExecutor 参数说明</h1><p>ThreadPoolExecutor 构造方法有以下四个，如下图所示：</p><p><img src="https://i.loli.net/2021/03/03/kwm7yRKcWuqlhXD.png" alt="20200818_13415697"></p><p>其中最后一个构造方法有 7 个构造参数，包含了前三个方法的构造参数，这 7 个参数名称如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其代表的含义如下：</p><h2 id="①-corePoolSize"><a href="#①-corePoolSize" class="headerlink" title="① corePoolSize"></a>① corePoolSize</h2><p>线程池中的<strong>核心线程数，默认情况下核心线程一直存活在线程池中</strong>，如果将 ThreadPoolExecutor 的 allowCoreThreadTimeOut 属性设为 true，如果线程池一直闲置并超过了 keepAliveTime 所指定的时间，核心线程就会被终止。</p><h2 id="②-maximumPoolSize"><a href="#②-maximumPoolSize" class="headerlink" title="② maximumPoolSize"></a>② maximumPoolSize</h2><p>最大线程数，当线程不够时能够创建的最大线程数。</p><h2 id="③-keepAliveTime"><a href="#③-keepAliveTime" class="headerlink" title="③ keepAliveTime"></a>③ keepAliveTime</h2><p><strong>线程池的闲置超时时间</strong>，默认情况下对非核心线程生效，如果闲置时间超过这个时间，非核心线程就会被回收。如果 ThreadPoolExecutor 的 allowCoreThreadTimeOut 设为 true 的时候，核心线程如果超过闲置时长也会被回收。</p><h2 id="④-unit"><a href="#④-unit" class="headerlink" title="④ unit"></a>④ unit</h2><p>配合 keepAliveTime 使用，用来标识 keepAliveTime 的时间单位。</p><h2 id="⑤-workQueue"><a href="#⑤-workQueue" class="headerlink" title="⑤ workQueue"></a>⑤ workQueue</h2><p>线程池中的<strong>任务队列</strong>，使用 execute() 或 submit() 方法提交的任务都会存储在此队列中。</p><h2 id="⑥-threadFactory"><a href="#⑥-threadFactory" class="headerlink" title="⑥ threadFactory"></a>⑥ threadFactory</h2><p>为线程池提供创建新线程的线程工厂。</p><h2 id="⑦-rejectedExecutionHandler"><a href="#⑦-rejectedExecutionHandler" class="headerlink" title="⑦ rejectedExecutionHandler"></a>⑦ rejectedExecutionHandler</h2><p>线程池任务队列超过最大值之后的拒绝策略，RejectedExecutionHandler 是一个接口，里面只有一个 rejectedExecution 方法，可在此方法内添加任务超出最大值的事件处理。ThreadPoolExecutor 也提供了 4 种默认的拒绝策略：</p><ul><li>new ThreadPoolExecutor.DiscardPolicy()：丢弃掉该任务，不进行处理</li><li>new ThreadPoolExecutor.DiscardOldestPolicy()：丢弃队列里最近的一个任务，并执行当前任务</li><li>new ThreadPoolExecutor.AbortPolicy()：直接抛出 RejectedExecutionException 异常</li><li>new ThreadPoolExecutor.CallerRunsPolicy()：既不抛弃任务也不抛出异常，直接使用主线程来执行此任务</li></ul><h1 id="含所有参数的代码示例"><a href="#含所有参数的代码示例" class="headerlink" title="含所有参数的代码示例"></a>含所有参数的代码示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">2</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThreadFactory</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        threadPool.allowCoreThreadTimeOut(<span class="hljs-literal">true</span>);<span class="hljs-comment">//核心线程如果超过闲置时长也会被回收</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    System.out.println(Thread.currentThread().getName());<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">2000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyThread&quot;</span> + count.addAndGet(<span class="hljs-number">1</span>);<br>        t.setName(threadName);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="执行方法-execute-VS-submit"><a href="#执行方法-execute-VS-submit" class="headerlink" title="执行方法 execute() VS submit()"></a>执行方法 execute() VS submit()</h1><p>execute() 和 submit() 都是用来执行线程池的，区别在于 submit() 方法可以接收线程池执行的返回值。</p><p>下面分别来看两个方法的具体使用和区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程池</span><br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>(<span class="hljs-number">100</span>));<br><span class="hljs-comment">// execute 使用</span><br>threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, Java.&quot;</span>);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// submit 使用</span><br>Future&lt;String&gt; future = threadPoolExecutor.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, 老王.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Success&quot;</span>;<br>    &#125;<br>&#125;);<br>System.out.println(future.get());<br></code></pre></td></tr></table></figure><p>以上程序执行结果如下：</p><blockquote><p>Hello, Java.</p><p>Hello, 老王.</p><p>Success</p></blockquote><h1 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h1><p>线程池关闭，可以使用 shutdown() 或 shutdownNow() 方法，它们的区别是：</p><ul><li><strong>shutdown()：不会立即终止线程池，而是要等所有任务队列中的任务都执行完后才会终止。执行完 shutdown 方法之后，线程池就不会再接受新任务了。</strong></li><li>shutdownNow()：执行该方法，线程池的状态立刻变成 STOP 状态，并试图停止所有正在执行的线程，不再处理还在池队列中等待的任务，执行此方法会返回未执行的任务。</li></ul><p>下面用代码来模拟 shutdown() 之后，给线程池添加任务，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">threadPoolExecutor.execute(() -&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;I&#x27;m &quot;</span> + i);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;);<br>threadPoolExecutor.shutdown();<br>threadPoolExecutor.execute(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;I&#x27;m Java.&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上程序执行结果如下：</p><blockquote><p>I’m 0</p><p>Exception in thread “main” java.util.concurrent.RejectedExecutionException: Task com.interview.chapter5.Section2<code>$$Lambda$2</code>&#x2F;1828972342@568db2f2 rejected from java.util.concurrent.ThreadPoolExecutor@378bf509[Shutting down, pool size &#x3D; 1, active threads &#x3D; 1, queued tasks &#x3D; 0, completed tasks &#x3D; 0]</p><p>I’m 1</p></blockquote><p>可以看出，shutdown() 之后就不会再接受新的任务了，不过之前的任务会被执行完成。</p><h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><h2 id="ThreadPoolExecutor-有哪些常用的方法？"><a href="#ThreadPoolExecutor-有哪些常用的方法？" class="headerlink" title="ThreadPoolExecutor 有哪些常用的方法？"></a>ThreadPoolExecutor 有哪些常用的方法？</h2><p>答：常用方法如下所示：</p><ul><li>submit()&#x2F;execute()：执行线程池</li><li>shutdown()&#x2F;shutdownNow()：终止线程池</li><li>isShutdown()：判断线程是否终止</li><li>getActiveCount()：正在运行的线程数</li><li>getCorePoolSize()：获取核心线程数</li><li>getMaximumPoolSize()：获取最大线程数</li><li>getQueue()：获取线程池中的任务队列</li><li>allowCoreThreadTimeOut(boolean)：设置空闲时是否回收核心线程</li></ul><h2 id="以下程序执行的结果是什么？"><a href="#以下程序执行的结果是什么？" class="headerlink" title="以下程序执行的结果是什么？"></a>以下程序执行的结果是什么？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>());<br>threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;I：&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;);<br>threadPoolExecutor.shutdownNow();<br>System.out.println(<span class="hljs-string">&quot;Java&quot;</span>);<br></code></pre></td></tr></table></figure><p>答：程序执行的结果是：</p><blockquote><p>I：0</p><p>Java</p><p>java.lang.InterruptedException: sleep interrupted（报错信息）</p><p>I：1</p></blockquote><p>题目解析：因为程序中使用了 <code>shutdownNow()</code> 会导致程序执行一次之后报错，抛出 <code>sleep interrupted</code> 异常，又因为本身有 try&#x2F;catch，所以程序会继续执行打印 <code>I：1</code> 。</p><h2 id="submit-和-execute-区别？"><a href="#submit-和-execute-区别？" class="headerlink" title="submit() 和 execute() 区别？"></a>submit() 和 execute() 区别？</h2><p>答：submit() 和 execute() 都是用来执行线程池的，只不过使用 execute() 执行线程池不能有返回方法，而使用 submit() 可以使用 Future 接收线程池执行的返回值。</p><p>submit() 方法源码（JDK 8）如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; <span class="hljs-keyword">task</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">task</span> == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    RunnableFuture&lt;T&gt; ftask = newTaskFor(<span class="hljs-keyword">task</span>);<br>    execute(ftask);<br>    <span class="hljs-keyword">return</span> ftask;<br>&#125;<br></code></pre></td></tr></table></figure><p>execute() 源码（JDK 8）如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">Runnable command</span>) &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">//..... 其他</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ThreadPoolExecutor-都需要哪些参数？"><a href="#ThreadPoolExecutor-都需要哪些参数？" class="headerlink" title="ThreadPoolExecutor 都需要哪些参数？"></a>ThreadPoolExecutor 都需要哪些参数？</h2><p>答：ThreadPoolExecutor 最多包含以下七个参数：</p><ul><li>corePoolSize：线程池中的核心线程数</li><li>maximumPoolSize：线程池中最大线程数</li><li>keepAliveTime：闲置超时时间</li><li>unit：keepAliveTime 超时时间的单位（时&#x2F;分&#x2F;秒等）</li><li>workQueue：线程池中的任务队列</li><li>threadFactory：为线程池提供创建新线程的线程工厂</li><li>rejectedExecutionHandler：线程池任务队列超过最大值之后的拒绝策略</li></ul><h2 id="shutdownNow-和-shutdown-区别"><a href="#shutdownNow-和-shutdown-区别" class="headerlink" title="shutdownNow() 和 shutdown() 区别"></a>shutdownNow() 和 shutdown() 区别</h2><p>答：shutdownNow() 和 shutdown() 都是用来终止线程池的，它们的区别是，使用 shutdown() 程序不会报错，也不会立即终止线程，它会等待线程池中的缓存任务执行完之后再退出，执行了 shutdown() 之后就不能给线程池添加新任务了；<strong>shutdownNow() 会试图立马停止任务，如果线程池中还有缓存任务正在执行，则会抛出 java.lang.InterruptedException: sleep interrupted 异常。</strong></p><h2 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h2><p>答：当线程池中有任务需要执行时，线程池会判断如果线程数量没有超过核心数量就会新建线程池进行任务执行，</p><p>​如果线程池中的线程数量已经超过核心线程数，这时候任务就会被放入任务队列中排队等待执行；</p><p>​如果任务队列超过最大队列数，并且线程池没有达到最大线程数，就会新建线程来执行任务；</p><p>​如果超过了最大线程数，就会执行拒绝执行策略。</p><h2 id="以下线程名称被打印了几次？"><a href="#以下线程名称被打印了几次？" class="headerlink" title="以下线程名称被打印了几次？"></a>以下线程名称被打印了几次？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                <span class="hljs-number">10L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">2</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardPolicy());<br>threadPool.allowCoreThreadTimeOut(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 打印线程名称</span><br>            System.out.println(Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>答：线程名被打印了 3 次。<br>题目解析：线程池第 1 次执行任务时，会新创建任务并执行；第 2 次执行任务时，因为没有空闲线程所以会把任务放入队列；第 3 次同样把任务放入队列，因为队列最多可以放两条数据，所以第 4 次之后的执行都会被舍弃（没有定义拒绝策略），于是就打印了 3 次线程名称。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
            <tag> threadPollExecutor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取ip地址工具类</title>
      <link href="/2020/12/04/%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2020/12/04/%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmile.studysb.utils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IPUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取IP地址</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址</span><br><span class="hljs-comment">     * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIpAddr</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;x-forwarded-for&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;Proxy-Client-IP&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;WL-Proxy-Client-IP&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getRemoteAddr();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip) ? <span class="hljs-string">&quot;127.0.0.1&quot;</span> : ip;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取httpServerletRequest工具类</title>
      <link href="/2020/12/04/%E8%8E%B7%E5%8F%96HttpServletRequest/"/>
      <url>/2020/12/04/%E8%8E%B7%E5%8F%96HttpServletRequest/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmile.studysb.utils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取HttpServletRequest</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpContextUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpServletRequest <span class="hljs-title function_">getHttpServletRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> httpServerletRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis自定义插入主键</title>
      <link href="/2020/12/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%BB%E9%94%AEID/"/>
      <url>/2020/12/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%BB%E9%94%AEID/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Order这个属性设为after,before这个执行顺序都是相对于下面的insert into这个sql的;<br>Order设为before:那么就先执行selectkey这个标签的sgl,再将这条sql生成的uuid set到User里面去,然后再执行insert into将这个已经带uuid为id的这个User insert到数据库中.</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自增主键之UUID--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.test.mybatis.po.User&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--只要不是自增主键,那么order都设置为before--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">selectkey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">resultrype</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span>&gt;</span><br>  SELECT UUID()<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">selectkey</span>&gt;</span><br>  INSERT INTO USER (ID,USERNAME,BIRTHDAY,SEX,ADDRESS)<br>  VALUES (#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合</title>
      <link href="/2020/12/04/%E9%9B%86%E5%90%88/"/>
      <url>/2020/12/04/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="一-集合和数组的区别"><a href="#一-集合和数组的区别" class="headerlink" title="一. 集合和数组的区别"></a>一. 集合和数组的区别</h1><p>1.<strong>数组是固定长度的；集合可变长度的。</strong></p><p>2.数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</p><p>3.数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</p><h1 id="二-常用的集合类有哪些？"><a href="#二-常用的集合类有哪些？" class="headerlink" title="二. 常用的集合类有哪些？"></a>二. 常用的集合类有哪些？</h1><p><strong>Map接口和Collection接口是所有集合框架的父接口：</strong></p><p>1.Collection接口的子接口包括：Set接口和List接口</p><p>2.Map接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap以及Properties等</p><p>3.Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等</p><p>4.List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等</p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404120948461.png" alt="image-20240412094848348"></p><h1 id="三-List-Set-Map用法"><a href="#三-List-Set-Map用法" class="headerlink" title="三. List Set Map用法:"></a>三. List Set Map用法:</h1><p>Collection集合主要有List和Set两大接口</p><p>1.List：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList 和 Vector。</p><p>2.Set：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及 TreeSet。</p><p>Map是一个键值对集合，存储键、值和之间的映射。Key无序，唯一；value 不要求有序，允许重复。Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。</p><p>Map 的常用实现类：HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap</p><h1 id="四-集合框架底层数据结构"><a href="#四-集合框架底层数据结构" class="headerlink" title="四. 集合框架底层数据结构"></a>四. 集合框架底层数据结构</h1><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a><strong>Collection</strong></h2><h3 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a><strong>1.List</strong></h3><ul><li><p><u><strong>Arraylist：Object数组</strong></u></p></li><li><p>Vector：Object数组</p></li><li><p>LinkedList：双向循环链表</p></li></ul><h3 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a><strong>2.Set</strong></h3><ul><li><p><strong>HashSet（无序，唯一）：基于 HashMap 实现的，底层采用 HashMap 来保存元素</strong></p></li><li><p>LinkedHashSet：LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的LinkedHashMap 其内部是基于 Hashmap 实现一样，不过还是有一点点区别的。</p></li><li><p>TreeSet（有序，唯一）：红黑树(自平衡的排序二叉树。)</p></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h2><ul><li><p><strong>HashMap</strong>：JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</p></li><li><p><strong>LinkedHashMap</strong>：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</p></li><li><p><strong>HashTable</strong>：数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的</p></li><li><p><strong>TreeMap</strong>：红黑树（自平衡的排序二叉树）</p></li></ul><h1 id="五-哪些集合类是线程安全的？"><a href="#五-哪些集合类是线程安全的？" class="headerlink" title="五. 哪些集合类是线程安全的？"></a>五. 哪些集合类是线程安全的？</h1><ul><li><p><strong>vector</strong>：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。</p></li><li><p><strong>statck</strong>：堆栈类，先进后出。</p></li><li><p><strong>hashtable</strong>：就比hashmap多了个线程安全。</p></li><li><p><strong>enumeration</strong>：枚举，相当于迭代器。</p></li></ul><h1 id="六-怎么确保一个集合不能被修改？"><a href="#六-怎么确保一个集合不能被修改？" class="headerlink" title="六. 怎么确保一个集合不能被修改？"></a>六. 怎么确保一个集合不能被修改？</h1><p>可以使用 <code>Collections. unmodifiableCollection(Collection c)</code> 方法来创建一个只读集合，这样改变集合的任何操作都会抛出 <code>Java. lang. UnsupportedOperationException</code> 异常。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;x&quot;</span>);<br>Collection&lt;String&gt; clist = Collections.unmodifiableCollection(list);<br>clist.add(<span class="hljs-string">&quot;y&quot;</span>);<span class="hljs-comment">//运行时此行报错</span><br>System.out.println(list.size());<br></code></pre></td></tr></table></figure><h1 id="七-迭代器-Iterator"><a href="#七-迭代器-Iterator" class="headerlink" title="七. 迭代器 Iterator"></a>七. 迭代器 Iterator</h1><blockquote><p><strong>terator 接口提供遍历任何 Collection 的接口</strong>。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，<strong>迭代器允许调用者在迭代过程中移除元素。</strong></p></blockquote><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用?"></a>怎么用?</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>Iterator&lt;string&gt; it =list.iterator();<br><span class="hljs-keyword">while</span>(it. hasNext())&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> it. next();<br>System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点?"></a>特点?</h2><blockquote><p>Iterator 的特点是<strong>只能单向遍历</strong>，但是更加<strong>安全</strong>，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 <code>ConcurrentModificationException</code> 异常。</p></blockquote><h2 id="边遍历边修改Collection的唯一正确方式"><a href="#边遍历边修改Collection的唯一正确方式" class="headerlink" title="边遍历边修改Collection的唯一正确方式?"></a>边遍历边修改<code>Collection</code>的唯一正确方式?</h2><blockquote><p><strong>使用 Iterator.remove() 方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//正确</span><br>Iterator&lt;Integer&gt; it = list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>  <span class="hljs-comment">// do something</span><br>it.remove();<br>&#125;<br><span class="hljs-comment">//错误</span><br><span class="hljs-comment">//运行以下错误代码会报 ConcurrentModificationException 异常。这是因为当使用 foreach(for(Integer i : list)) 语句时，会自动生成一个iterator 来遍历该 list，但同时该 list 正在被 Iterator.remove() 修改。Java 一般不允许一个线程在遍历 Collection 时另一个线程修改它。</span><br><span class="hljs-keyword">for</span>(Integer i : list)&#123; <br>  list.remove(i)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八-遍历-List"><a href="#八-遍历-List" class="headerlink" title="八. 遍历 List"></a>八. 遍历 List</h1><h2 id="遍历方式有以下几种："><a href="#遍历方式有以下几种：" class="headerlink" title="遍历方式有以下几种："></a>遍历方式有以下几种：</h2><ol><li><strong>for 循环遍历</strong>，基于计数器。在集合外部维护一个计数器，然后依次读取每一个位置的元素，当读取到最后一个元素后停止。</li><li><strong>迭代器遍历，Iterator</strong>。Iterator 是面向对象的一个设计模式，目的是屏蔽不同数据集合的特点，统一遍历集合的接口。Java 在 Collections 中支持了 Iterator 模式。</li><li><strong>foreach 循环遍历</strong>。foreach 内部也是采用了 Iterator 的方式实现，使用时不需要显式声明 Iterator 或计数器。优点是代码简洁，不易出错；缺点是只能做简单的遍历，不能在遍历过程中操作数据集合，例如删除、替换。</li></ol><h2 id="最佳实践："><a href="#最佳实践：" class="headerlink" title="最佳实践："></a><strong>最佳实践</strong>：</h2><p>​<code>Java Collections</code> 框架中提供了一个 <strong><code>RandomAccess</code></strong> 接口，用来标记 <code>List</code> 实现是否支持 <code>Random Access</code>。</p><p>​如果一个集合实现了该接口，就意味着它支持 <code>Random Access</code>，按位置读取元素的平均时间复杂度为 <code>O(1)</code>，如<code>ArrayList</code>。</p><p>​如果没有实现该接口，表示不支持 <code>Random Access</code>，如<code>LinkedList</code>。</p><p>​ <strong>推荐的做法就是</strong>，<strong>支持 Random Access 的列表可用 for 循环遍历，否则建议用 Iterator 或 foreach 遍历。</strong></p><h1 id="九-数组和-List-转换"><a href="#九-数组和-List-转换" class="headerlink" title="九. 数组和 List 转换"></a>九. 数组和 <code>List</code> 转换</h1><ul><li>**数组转 <code>List</code>**：使用 <code>Arrays. asList(array)</code> 进行转换。</li><li><strong><code>List</code> 转数组</strong>：使用 <code>List</code> 自带的 <code>toArray()</code> 方法。</li></ul><h1 id="十-ArrayList-和-LinkedList-的区别是什么？"><a href="#十-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="十. ArrayList 和 LinkedList 的区别是什么？"></a>十. ArrayList 和 LinkedList 的区别是什么？</h1><ul><li><p><strong>数据结构实现</strong>：<code>ArrayList</code> 是<strong>动态数组</strong>的数据结构实现，而 <code>LinkedList</code> 是<strong>双向链表</strong>的数据结构实现。</p></li><li><p><strong>随机访问效率</strong>：<code>ArrayList</code> 比 <code>LinkedList</code> 在随机访问的时候效率要高，因为 <code>LinkedList</code> 是线性的数据存储方式，所以需要移动指针从前往后依次查找。</p></li><li><p><strong>增加和删除效率</strong>：在非首尾的增加和删除操作，<code>LinkedList</code> 要比 <code>ArrayList</code> 效率要高，因为 <code>ArrayList</code> 增删操作要影响数组内的其他数据的下标。</p></li><li><p><strong>内存空间占用</strong>：<code>LinkedList</code> 比 <code>ArrayList</code> 更占内存，因为 <code>LinkedList</code> 的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。</p></li><li><p><strong>线程安全</strong>：<code>ArrayList</code> 和 <code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</p></li></ul><blockquote><p><u>**综合来说，在需要频繁读取集合中的元素时，更推荐使用 <code>ArrayList</code>，而在插入和删除操作较多时，更推荐使用 <code>LinkedList</code>**。</u></p></blockquote><p><strong>补充：数据结构基础之双向链表</strong></p><blockquote><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</p></blockquote><h1 id="十一-ArrayList-和-Vector-的区别是什么？"><a href="#十一-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="十一. ArrayList 和 Vector 的区别是什么？"></a>十一. ArrayList 和 Vector 的区别是什么？</h1><ul><li><p>这两个类都实现了 <code>List</code> 接口（<code>List</code> 接口继承了 <code>Collection</code> 接口），他们<strong>都是有序集合</strong></p></li><li><p><strong>线程安全</strong>：<code>Vector</code> 使用了 <code>Synchronized</code> 来实现线程同步，是线程安全的，而 <code>ArrayList</code> 是非线程安全的。</p></li><li><p><strong>性能</strong>：<code>ArrayList</code> 在性能方面要优于 <code>Vector</code>。</p></li><li><p><strong>扩容</strong>：<code>ArrayList</code> 和 <code>Vector</code> 都会根据实际的需要动态的调整容量，只不过在 <code>Vector</code> 扩容每次会增加 <code>1 倍</code>，而 <code>ArrayList</code> 只会增加 <code>50%</code>。</p></li></ul><p><code>Vector</code>类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问<code>Vector</code>的话代码要在同步操作上耗费大量的时间。</p><p><code>Arraylist</code>不是同步的，所以在不需要保证线程安全时时建议使用<code>Arraylist</code>。</p><h1 id="十二-多线程场景下如何使用-ArrayList？"><a href="#十二-多线程场景下如何使用-ArrayList？" class="headerlink" title="十二. 多线程场景下如何使用 ArrayList？"></a>十二. 多线程场景下如何使用 ArrayList？</h1><p><code>ArrayList</code> 不是线程安全的，如果遇到多线程场景，可以通过 <code>Collections</code> 的 <code>synchronizedList</code> 方法将其转换成线程安全的容器后再使用。例如像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;string&gt; synchronizedList = Collections.synchronizedList(list);<br>synchronizedList.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>synchronizedList.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; synchronizedList.size(); i++) &#123; <br>  System.out.println(synchronizedList.get(i));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十三-说一下-HashMap-的实现原理？"><a href="#十三-说一下-HashMap-的实现原理？" class="headerlink" title="十三. 说一下 HashMap 的实现原理？"></a>十三. 说一下 HashMap 的实现原理？</h1><p><strong>HashMap概述</strong>：HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并<strong>允许使用<code>null</code>值和<code>null</code>键</strong>。此类<strong>不保证映射的顺序</strong>，特别是它不保证该顺序恒久不变。</p><h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a><strong>HashMap的数据结构</strong></h2><p>在<code>Java</code>编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，<code>HashMap</code>也不例外。**<code>HashMap</code>实际上是一个“链表散列”的数据结构，即数组和链表的结合体。**</p><h2 id="HashMap存取值原理及过程"><a href="#HashMap存取值原理及过程" class="headerlink" title="HashMap存取值原理及过程"></a>HashMap存取值原理及过程</h2><p><strong>HashMap 基于 Hash 算法实现的</strong></p><p>1.当我们往<code>Hashmap</code>中<code>put</code>元素时，利用<code>key</code>的<code>hashCode</code>重新<code>hash</code>计算出当前对象的元素在数组中的下标</p><p>2.存储时，如果出现<code>hash</code>值相同的<code>key</code>，此时有两种情况。(1)如果<code>key</code>相同，则覆盖原始值；(2)如果<code>key</code>不同（出现冲突），则将当前的<code>key-value</code>放入链表中</p><p>3.获取时，直接找到<code>hash</code>值对应的下标，在进一步判断<code>key</code>是否相同，从而找到对应值。</p><p>4.理解了以上过程就不难明白<u><strong><code>HashMap</code>是如何解决<code>hash</code>冲突的问题，核心就是使用了数组的存储方式，然后将冲突的<code>key</code>的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。</strong></u></p><p><strong>需要注意<code>Jdk 1.8</code>中对<code>HashMap</code>的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的<code>O(n)</code>到<code>O(logn)</code></strong></p><h1 id="十四-为什么HashMap中String、Integer这样的包装类适合作为K？"><a href="#十四-为什么HashMap中String、Integer这样的包装类适合作为K？" class="headerlink" title="十四. 为什么HashMap中String、Integer这样的包装类适合作为K？"></a>十四. 为什么HashMap中String、Integer这样的包装类适合作为K？</h1><p>答：<code>String</code>、<code>Integer</code>等包装类的特性能够保证<code>Hash</code>值的不可更改性和计算准确性，能够有效的减少Hash碰撞的几率</p><p>都是<code>final</code>类型，即不可变性，保证<code>key</code>的不可更改性，不会存在获取<code>hash</code>值不同的情况</p><p>内部已重写了<code>equals()</code>、<code>hashCode()</code>等方法，遵守了<code>HashMap</code>内部的规范（不清楚可以去上面看看<code>putValue</code>的过程），不容易出现Hash值计算错误的情况；</p><p>转载:<a href="https://mp.weixin.qq.com/s/MvdGDLm2qhwbgz6GxEV5vQ">https://mp.weixin.qq.com/s/MvdGDLm2qhwbgz6GxEV5vQ</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言论自由工具类</title>
      <link href="/2020/12/04/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2020/12/04/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.util;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicReference;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.IntStream;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreedomOfSpeechUtil</span> &#123;<br>    <span class="hljs-comment">//加密字典</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; charMapEnc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//解密字典</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; charMapDec = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//准备基础字符:3500个常用汉字 英文字母大小写 符号 数字0-9</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">letters</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;一乙二十丁厂七卜人入八九几儿了力乃刀又三于干亏士工土才寸下大丈与万上小口巾山千乞川亿个勺久凡及夕丸么广亡门义之尸弓己&quot;</span> +<br>                <span class="hljs-string">&quot;已子卫也女飞刃习叉马乡丰王井开夫天无元专云扎艺木五支厅不太犬区历尤友匹车巨牙屯比互切瓦止少日中冈贝内水见午牛手毛气升长仁什片仆化&quot;</span> +<br>                <span class="hljs-string">&quot;仇币仍仅斤爪反介父从今凶分乏公仓月氏勿欠风丹匀乌凤勾文六方火为斗忆订计户认心尺引丑巴孔队办以允予劝双书幻玉刊示末未击打巧正扑扒功&quot;</span> +<br>                <span class="hljs-string">&quot;扔去甘世古节本术可丙左厉右石布龙平灭轧东卡北占业旧帅归且旦目叶甲申叮电号田由史只央兄叼叫另叨叹四生失禾丘付仗代仙们仪白仔他斥瓜乎&quot;</span> +<br>                <span class="hljs-string">&quot;丛令用甩印乐句匆册犯外处冬鸟务包饥主市立闪兰半汁汇头汉宁穴它讨写让礼训必议讯记永司尼民出辽奶奴加召皮边发孕圣对台矛纠母幼丝式刑动&quot;</span> +<br>                <span class="hljs-string">&quot;扛寺吉扣考托老执巩圾扩扫地扬场耳共芒亚芝朽朴机权过臣再协西压厌在有百存而页匠夸夺灰达列死成夹轨邪划迈毕至此贞师尘尖劣光当早吐吓虫&quot;</span> +<br>                <span class="hljs-string">&quot;曲团同吊吃因吸吗屿帆岁回岂刚则肉网年朱先丢舌竹迁乔伟传乒乓休伍伏优伐延件任伤价份华仰仿伙伪自血向似后行舟全会杀合兆企众爷伞创肌朵&quot;</span> +<br>                <span class="hljs-string">&quot;杂危旬旨负各名多争色壮冲冰庄庆亦刘齐交次衣产决充妄闭问闯羊并关米灯州汗污江池汤忙兴宇守宅字安讲军许论农讽设访寻那迅尽导异孙阵阳收&quot;</span> +<br>                <span class="hljs-string">&quot;阶阴防奸如妇好她妈戏羽观欢买红纤级约纪驰巡寿弄麦形进戒吞远违运扶抚坛技坏扰拒找批扯址走抄坝贡攻赤折抓扮抢孝均抛投坟抗坑坊抖护壳志&quot;</span> +<br>                <span class="hljs-string">&quot;扭块声把报却劫芽花芹芬苍芳严芦劳克苏杆杠杜材村杏极李杨求更束豆两丽医辰励否还歼来连步坚旱盯呈时吴助县里呆园旷围呀吨足邮男困吵串员&quot;</span> +<br>                <span class="hljs-string">&quot;听吩吹呜吧吼别岗帐财针钉告我乱利秃秀私每兵估体何但伸作伯伶佣低你住位伴身皂佛近彻役返余希坐谷妥含邻岔肝肚肠龟免狂犹角删条卵岛迎饭&quot;</span> +<br>                <span class="hljs-string">&quot;饮系言冻状亩况床库疗应冷这序辛弃冶忘闲间闷判灶灿弟汪沙汽沃泛沟没沈沉怀忧快完宋宏牢究穷灾良证启评补初社识诉诊词译君灵即层尿尾迟局&quot;</span> +<br>                <span class="hljs-string">&quot;改张忌际陆阿陈阻附妙妖妨努忍劲鸡驱纯纱纳纲驳纵纷纸纹纺驴纽奉玩环武青责现表规抹拢拔拣担坦押抽拐拖拍者顶拆拥抵拘势抱垃拉拦拌幸招坡&quot;</span> +<br>                <span class="hljs-string">&quot;披拨择抬其取苦若茂苹苗英范直茄茎茅林枝杯柜析板松枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奇奋态欧垄妻轰顷转斩轮软到非叔肯齿些虎虏肾贤&quot;</span> +<br>                <span class="hljs-string">&quot;尚旺具果味昆国昌畅明易昂典固忠咐呼鸣咏呢岸岩帖罗帜岭凯败贩购图钓制知垂牧物乖刮秆和季委佳侍供使例版侄侦侧凭侨佩货依的迫质欣征往爬&quot;</span> +<br>                <span class="hljs-string">&quot;彼径所舍金命斧爸采受乳贪念贫肤肺肢肿胀朋股肥服胁周昏鱼兔狐忽狗备饰饱饲变京享店夜庙府底剂郊废净盲放刻育闸闹郑券卷单炒炊炕炎炉沫浅&quot;</span> +<br>                <span class="hljs-string">&quot;法泄河沾泪油泊沿泡注泻泳泥沸波泼泽治怖性怕怜怪学宝宗定宜审宙官空帘实试郎诗肩房诚衬衫视话诞询该详建肃录隶居届刷屈弦承孟孤陕降限妹&quot;</span> +<br>                <span class="hljs-string">&quot;姑姐姓始驾参艰线练组细驶织终驻驼绍经贯奏春帮珍玻毒型挂封持项垮挎城挠政赴赵挡挺括拴拾挑指垫挣挤拼挖按挥挪某甚革荐巷带草茧茶荒茫荡&quot;</span> +<br>                <span class="hljs-string">&quot;荣故胡南药标枯柄栋相查柏柳柱柿栏树要咸威歪研砖厘厚砌砍面耐耍牵残殃轻鸦皆背战点临览竖省削尝是盼眨哄显哑冒映星昨畏趴胃贵界虹虾蚁思&quot;</span> +<br>                <span class="hljs-string">&quot;蚂虽品咽骂哗咱响哈咬咳哪炭峡罚贱贴骨钞钟钢钥钩卸缸拜看矩怎牲选适秒香种秋科重复竿段便俩贷顺修保促侮俭俗俘信皇泉鬼侵追俊盾待律很须&quot;</span> +<br>                <span class="hljs-string">&quot;叙剑逃食盆胆胜胞胖脉勉狭狮独狡狱狠贸怨急饶蚀饺饼弯将奖哀亭亮度迹庭疮疯疫疤姿亲音帝施闻阀阁差养美姜叛送类迷前首逆总炼炸炮烂剃洁洪&quot;</span> +<br>                <span class="hljs-string">&quot;洒浇浊洞测洗活派洽染济洋洲浑浓津恒恢恰恼恨举觉宣室宫宪突穿窃客冠语扁袄祖神祝误诱说诵垦退既屋昼费陡眉孩除险院娃姥姨姻娇怒架贺盈勇&quot;</span> +<br>                <span class="hljs-string">&quot;怠柔垒绑绒结绕骄绘给络骆绝绞统耕耗艳泰珠班素蚕顽盏匪捞栽捕振载赶起盐捎捏埋捉捆捐损都哲逝捡换挽热恐壶挨耻耽恭莲莫荷获晋恶真框桂档&quot;</span> +<br>                <span class="hljs-string">&quot;桐株桥桃格校核样根索哥速逗栗配翅辱唇夏础破原套逐烈殊顾轿较顿毙致柴桌虑监紧党晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钱钳钻铁铃铅缺&quot;</span> +<br>                <span class="hljs-string">&quot;氧特牺造乘敌秤租积秧秩称秘透笔笑笋债借值倚倾倒倘俱倡候俯倍倦健臭射躬息徒徐舰舱般航途拿爹爱颂翁脆脂胸胳脏胶脑狸狼逢留皱饿恋桨浆衰&quot;</span> +<br>                <span class="hljs-string">&quot;高席准座脊症病疾疼疲效离唐资凉站剖竞部旁旅畜阅羞瓶拳粉料益兼烤烘烦烧烛烟递涛浙涝酒涉消浩海涂浴浮流润浪浸涨烫涌悟悄悔悦害宽家宵宴&quot;</span> +<br>                <span class="hljs-string">&quot;宾窄容宰案请朗诸读扇袜袖袍被祥课谁调冤谅谈谊剥恳展剧屑弱陵陶陷陪娱娘通能难预桑绢绣验继球理捧堵描域掩捷排掉堆推掀授教掏掠培接控探&quot;</span> +<br>                <span class="hljs-string">&quot;据掘职基著勒黄萌萝菌菜萄菊萍菠营械梦梢梅检梳梯桶救副票戚爽聋袭盛雪辅辆虚雀堂常匙晨睁眯眼悬野啦晚啄距跃略蛇累唱患唯崖崭崇圈铜铲银&quot;</span> +<br>                <span class="hljs-string">&quot;甜梨犁移笨笼笛符第敏做袋悠偿偶偷您售停偏假得衔盘船斜盒鸽悉欲彩领脚脖脸脱象够猜猪猎猫猛馅馆凑减毫麻痒痕廊康庸鹿盗章竟商族旋望率着&quot;</span> +<br>                <span class="hljs-string">&quot;盖粘粗粒断剪兽清添淋淹渠渐混渔淘液淡深婆梁渗情惜惭悼惧惕惊惨惯寇寄宿窑密谋谎祸谜逮敢屠弹随蛋隆隐婚婶颈绩绪续骑绳维绵绸绿琴斑替款&quot;</span> +<br>                <span class="hljs-string">&quot;堪搭塔越趁趋超提堤博揭喜插揪搜煮援裁搁搂搅握揉斯期欺联散惹葬葛董葡敬葱落朝辜葵棒棋植森椅椒棵棍棉棚棕惠惑逼厨厦硬确雁殖裂雄暂雅辈&quot;</span> +<br>                <span class="hljs-string">&quot;悲紫辉敞赏掌晴暑最量喷晶喇遇喊景践跌跑遗蛙蛛蜓喝喂喘喉幅帽赌赔黑铸铺链销锁锄锅锈锋锐短智毯鹅剩稍程稀税筐等筑策筛筒答筋筝傲傅牌堡&quot;</span> +<br>                <span class="hljs-string">&quot;集焦傍储奥街惩御循艇舒番释禽腊脾腔鲁猾猴然馋装蛮就痛童阔善羡普粪尊道曾焰港湖渣湿温渴滑湾渡游滋溉愤慌惰愧愉慨割寒富窜窝窗遍裕裤裙&quot;</span> +<br>                <span class="hljs-string">&quot;谢谣谦属屡强粥疏隔隙絮嫂登缎缓编骗缘瑞魂肆摄摸填搏塌鼓摆携搬摇搞塘摊蒜勤鹊蓝墓幕蓬蓄蒙蒸献禁楚想槐榆楼概赖酬感碍碑碎碰碗碌雷零雾&quot;</span> +<br>                <span class="hljs-string">&quot;雹输督龄鉴睛睡睬鄙愚暖盟歇暗照跨跳跪路跟遣蛾蜂嗓置罪罩错锡锣锤锦键锯矮辞稠愁筹签简毁舅鼠催傻像躲微愈遥腰腥腹腾腿触解酱痰廉新韵意&quot;</span> +<br>                <span class="hljs-string">&quot;粮数煎塑慈煤煌满漠源滤滥滔溪溜滚滨粱滩慎誉塞谨福群殿辟障嫌嫁叠缝缠静碧璃墙撇嘉摧截誓境摘摔聚蔽慕暮蔑模榴榜榨歌遭酷酿酸磁愿需弊裳&quot;</span> +<br>                <span class="hljs-string">&quot;颗嗽蜻蜡蝇蜘赚锹锻舞稳算箩管僚鼻魄貌膜膊膀鲜疑馒裹敲豪膏遮腐瘦辣竭端旗精歉熄熔漆漂漫滴演漏慢寨赛察蜜谱嫩翠熊凳骡缩慧撕撒趣趟撑播&quot;</span> +<br>                <span class="hljs-string">&quot;撞撤增聪鞋蕉蔬横槽樱橡飘醋醉震霉瞒题暴瞎影踢踏踩踪蝶蝴嘱墨镇靠稻黎稿稼箱箭篇僵躺僻德艘膝膛熟摩颜毅糊遵潜潮懂额慰劈操燕薯薪薄颠橘&quot;</span> +<br>                <span class="hljs-string">&quot;整融醒餐嘴蹄器赠默镜赞篮邀衡膨雕磨凝辨辩糖糕燃澡激懒壁避缴戴擦鞠藏霜霞瞧蹈螺穗繁辫赢糟糠燥臂翼骤鞭覆蹦镰翻鹰警攀蹲颤瓣爆疆壤耀躁&quot;</span> +<br>                <span class="hljs-string">&quot;嚼嚷籍魔灌蠢霸露囊罐匕刁丐歹戈夭仑讥冗邓艾夯凸卢叭叽皿凹囚矢乍尔冯玄邦迂邢芋芍吏夷吁吕吆屹廷迄臼仲伦伊肋旭匈凫妆亥汛讳讶讹讼诀弛&quot;</span> +<br>                <span class="hljs-string">&quot;阱驮驯纫玖玛韧抠扼汞扳抡坎坞抑拟抒芙芜苇芥芯芭杖杉巫杈甫匣轩卤肖吱吠呕呐吟呛吻吭邑囤吮岖牡佑佃伺囱肛肘甸狈鸠彤灸刨庇吝庐闰兑灼沐&quot;</span> +<br>                <span class="hljs-string">&quot;沛汰沥沦汹沧沪忱诅诈罕屁坠妓姊妒纬玫卦坷坯拓坪坤拄拧拂拙拇拗茉昔苛苫苟苞茁苔枉枢枚枫杭郁矾奈奄殴歧卓昙哎咕呵咙呻咒咆咖帕账贬贮氛&quot;</span> +<br>                <span class="hljs-string">&quot;秉岳侠侥侣侈卑刽刹肴觅忿瓮肮肪狞庞疟疙疚卒氓炬沽沮泣泞泌沼怔怯宠宛衩祈诡帚屉弧弥陋陌函姆虱叁绅驹绊绎契贰玷玲珊拭拷拱挟垢垛拯荆茸&quot;</span> +<br>                <span class="hljs-string">&quot;茬荚茵茴荞荠荤荧荔栈柑栅柠枷勃柬砂泵砚鸥轴韭虐昧盹咧昵昭盅勋哆咪哟幽钙钝钠钦钧钮毡氢秕俏俄俐侯徊衍胚胧胎狰饵峦奕咨飒闺闽籽娄烁炫&quot;</span> +<br>                <span class="hljs-string">&quot;洼柒涎洛恃恍恬恤宦诫诬祠诲屏屎逊陨姚娜蚤骇耘耙秦匿埂捂捍袁捌挫挚捣捅埃耿聂荸莽莱莉莹莺梆栖桦栓桅桩贾酌砸砰砾殉逞哮唠哺剔蚌蚜畔蚣&quot;</span> +<br>                <span class="hljs-string">&quot;蚪蚓哩圃鸯唁哼唆峭唧峻赂赃钾铆氨秫笆俺赁倔殷耸舀豺豹颁胯胰脐脓逛卿鸵鸳馁凌凄衷郭斋疹紊瓷羔烙浦涡涣涤涧涕涩悍悯窍诺诽袒谆祟恕娩骏&quot;</span> +<br>                <span class="hljs-string">&quot;琐麸琉琅措捺捶赦埠捻掐掂掖掷掸掺勘聊娶菱菲萎菩萤乾萧萨菇彬梗梧梭曹酝酗厢硅硕奢盔匾颅彪眶晤曼晦冕啡畦趾啃蛆蚯蛉蛀唬唾啤啥啸崎逻崔&quot;</span> +<br>                <span class="hljs-string">&quot;崩婴赊铐铛铝铡铣铭矫秸秽笙笤偎傀躯兜衅徘徙舶舷舵敛翎脯逸凰猖祭烹庶庵痊阎阐眷焊焕鸿涯淑淌淮淆渊淫淳淤淀涮涵惦悴惋寂窒谍谐裆袱祷谒&quot;</span> +<br>                <span class="hljs-string">&quot;谓谚尉堕隅婉颇绰绷综绽缀巢琳琢琼揍堰揩揽揖彭揣搀搓壹搔葫募蒋蒂韩棱椰焚椎棺榔椭粟棘酣酥硝硫颊雳翘凿棠晰鼎喳遏晾畴跋跛蛔蜒蛤鹃喻啼&quot;</span> +<br>                <span class="hljs-string">&quot;喧嵌赋赎赐锉锌甥掰氮氯黍筏牍粤逾腌腋腕猩猬惫敦痘痢痪竣翔奠遂焙滞湘渤渺溃溅湃愕惶寓窖窘雇谤犀隘媒媚婿缅缆缔缕骚瑟鹉瑰搪聘斟靴靶蓖&quot;</span> +<br>                <span class="hljs-string">&quot;蒿蒲蓉楔椿楷榄楞楣酪碘硼碉辐辑频睹睦瞄嗜嗦暇畸跷跺蜈蜗蜕蛹嗅嗡嗤署蜀幌锚锥锨锭锰稚颓筷魁衙腻腮腺鹏肄猿颖煞雏馍馏禀痹廓痴靖誊漓溢&quot;</span> +<br>                <span class="hljs-string">&quot;溯溶滓溺寞窥窟寝褂裸谬媳嫉缚缤剿赘熬赫蔫摹蔓蔗蔼熙蔚兢榛榕酵碟碴碱碳辕辖雌墅嘁踊蝉嘀幔镀舔熏箍箕箫舆僧孵瘩瘟彰粹漱漩漾慷寡寥谭褐&quot;</span> +<br>                <span class="hljs-string">&quot;褪隧嫡缨撵撩撮撬擒墩撰鞍蕊蕴樊樟橄敷豌醇磕磅碾憋嘶嘲嘹蝠蝎蝌蝗蝙嘿幢镊镐稽篓膘鲤鲫褒瘪瘤瘫凛澎潭潦澳潘澈澜澄憔懊憎翩褥谴鹤憨履嬉&quot;</span> +<br>                <span class="hljs-string">&quot;豫缭撼擂擅蕾薛薇擎翰噩橱橙瓢蟥霍霎辙冀踱蹂蟆螃螟噪鹦黔穆篡篷篙篱儒膳鲸瘾瘸糙燎濒憾懈窿缰壕藐檬檐檩檀礁磷了瞬瞳瞪曙蹋蟋蟀嚎赡镣魏&quot;</span> +<br>                <span class="hljs-string">&quot;簇儡徽爵朦臊鳄糜癌懦豁臀藕藤瞻嚣鳍癞瀑襟璧戳攒孽蘑藻鳖蹭蹬簸簿蟹靡癣羹鬓攘蠕巍鳞糯譬霹躏髓蘸镶瓤矗&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lettersEn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lettersCharectorEn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!@#$%^&amp;*()_+=-[]&#123;&#125;\\|/*-+.&#x27;;:,.&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lettersCharectorCh</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;．，？［］｛｝！＠＃＄％＾＆＊（）－＿／＊－＋　  &quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nums</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;9728135046&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> letters+lettersEn+lettersCharectorCh+lettersCharectorEn+nums;<br>        <span class="hljs-comment">//打乱顺序</span><br>        <span class="hljs-type">char</span>[] charArray = str.toCharArray();<br>        List&lt;Character&gt; charList = IntStream.range(<span class="hljs-number">0</span>, charArray.length)<br>                .mapToObj(i -&gt; charArray[i])<br>                .collect(Collectors.toList());<br>        Collections.shuffle(charList);<br>        <span class="hljs-type">char</span>[] shuffledCharArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[charList.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; charList.size(); i++) &#123;<br>            shuffledCharArray[i] = charList.get(i);<br>        &#125;<br>        str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(shuffledCharArray);<br>        <span class="hljs-comment">//构造加密字典</span><br>        AtomicReference&lt;String&gt; str2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;(str);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">finalStr</span> <span class="hljs-operator">=</span> str;<br>        str.chars().forEach(c-&gt;&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Character.toString((<span class="hljs-type">char</span>)c);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">valIndex</span> <span class="hljs-operator">=</span> finalStr.indexOf(c) + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (valIndex== finalStr.length())&#123;<br>                <span class="hljs-comment">//说明遍历到了最后一个字符</span><br>                val = str2.get();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                val = Character.toString(finalStr.charAt(valIndex));<br>                str2.getAndSet(str2.get().replace(val, <span class="hljs-string">&quot;&quot;</span>));<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(val))&#123;<br>                charMapEnc.put(key,val);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//构造解密字典</span><br>        charMapEnc.entrySet().forEach(e-&gt;&#123;<br>            charMapDec.put(e.getValue(),e.getKey());<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密\解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target 要加密\解密的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 1-加密,2解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encOrDec</span><span class="hljs-params">(String target,Integer type)</span>&#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">if</span> (Objects.equals(<span class="hljs-number">1</span>,type))&#123;<br>            <span class="hljs-comment">//加密</span><br>            target.chars().forEach(c-&gt;&#123;<br>                sb.append(charMapEnc.get(Character.toString((<span class="hljs-type">char</span>)c)));<br>            &#125;);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//解密</span><br>            target.chars().forEach(c-&gt;&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Character.toString((<span class="hljs-type">char</span>)c);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> charMapDec.get(key);<br>                sb.append(val);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
            <tag> 3500常用汉字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot单元测试</title>
      <link href="/2020/12/02/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/12/02/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot提供了一些实用程序和注解，用来帮助我们测试应用程序，在SpringBoot中开启单元测试只需引入<code>spring-boot-starter-test</code>即可，其包含了一些主流的测试库。本文主要介绍基于Service和Controller的单元测试。</p></blockquote><h1 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行Maven命令<code>dependency:tree</code>可看到其包含了以下依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[INFO] +- org.springframework.boot:spring-boot-starter-test:jar:1.5.9.RELEASE:test<br>[INFO] |  +- org.springframework.boot:spring-boot-test:jar:1.5.9.RELEASE:test<br>[INFO] |  +- org.springframework.boot:spring-boot-test-autoconfigure:jar:1.5.9.RELEASE:test<br>[INFO] |  +- com.jayway.jsonpath:json-path:jar:2.2.0:test<br>[INFO] |  |  +- net.minidev:json-smart:jar:2.2.1:test<br>[INFO] |  |  |  \- net.minidev:accessors-smart:jar:1.1:test<br>[INFO] |  |  |     \- org.ow2.asm:asm:jar:5.0.3:test<br>[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.25:compile<br>[INFO] |  +- junit:junit:jar:4.12:test<br>[INFO] |  +- org.assertj:assertj-core:jar:2.6.0:test<br>[INFO] |  +- org.mockito:mockito-core:jar:1.10.19:test<br>[INFO] |  |  \- org.objenesis:objenesis:jar:2.1:test<br>[INFO] |  +- org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] |  +- org.hamcrest:hamcrest-library:jar:1.3:test<br>[INFO] |  +- org.skyscreamer:jsonassert:jar:1.4.0:test<br>[INFO] |  |  \- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test<br>[INFO] |  +- org.springframework:spring-core:jar:4.3.13.RELEASE:compile<br>[INFO] |  \- org.springframework:spring-test:jar:4.3.13.RELEASE:test<br></code></pre></td></tr></table></figure><ul><li>JUnit，标准的单元测试Java应用程序；</li><li>Spring Test &amp; Spring Boot Test，对Spring Boot应用程序的单元测试提供支持；</li><li>Mockito, Java mocking框架，用于模拟任何Spring管理的Bean，比如在单元测试中模拟一个第三方系统Service接口返回的数据，而不会去真正调用第三方系统；</li><li>AssertJ，一个流畅的assertion库，同时也提供了更多的期望值与测试返回值的比较方式；</li><li>Hamcrest，库的匹配对象（也称为约束或谓词）；</li><li>JsonPath，提供类似XPath那样的符号来获取JSON数据片段；</li><li>JSONassert，对JSON对象或者JSON字符串断言的库。</li></ul><p>一个标准的Spring Boot测试单元应有如下的代码结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationTest</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、知识准备"><a href="#2、知识准备" class="headerlink" title="2、知识准备"></a>2、知识准备</h1><h2 id="2-1-JUnit4注解"><a href="#2-1-JUnit4注解" class="headerlink" title="2.1.JUnit4注解"></a>2.1.JUnit4注解</h2><p>JUnit4中包含了几个比较重要的注解：<code>@BeforeClass</code>、<code>@AfterClass</code>、<code>@Before</code>、<code>@After</code>和<code>@Test</code>。</p><p><strong><code>@BeforeClass</code>和<code>@AfterClass</code>在每个类加载的开始和结束时运行，必须为静态方法；</strong></p><p><strong><code>@Before</code>和<code>@After</code>则在每个测试方法开始之前和结束之后运行。</strong></p><p>见如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeClassTest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before class test&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeTest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before test&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test 1+1=2&quot;</span>);<br>        Assert.assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test 2+2=4&quot;</span>);<br>        Assert.assertEquals(<span class="hljs-number">4</span>, <span class="hljs-number">2</span> + <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterTest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after test&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterClassTest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after class test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">...<br>before class test<br>before test<br>test 1+1=2<br>after test<br>before test<br>test 2+2=4<br>after test<br>after class test<br>...<br></code></pre></td></tr></table></figure><p>从上面的输出可以看出各个注解的运行时机。</p><h2 id="2-2-Assert"><a href="#2-2-Assert" class="headerlink" title="2.2.Assert"></a>2.2.Assert</h2><p>上面代码中，我们使用了Assert类提供的assert口方法，下面列出了一些常用的assert方法：</p><ul><li><code>assertEquals(&quot;message&quot;,A,B)</code>，判断A对象和B对象是否相等，这个判断在比较两个对象时调用了<code>equals()</code>方法。</li><li><code>assertSame(&quot;message&quot;,A,B)</code>，判断A对象与B对象是否相同，使用的是<code>==</code>操作符。</li><li><code>assertTrue(&quot;message&quot;,A)</code>，判断A条件是否为真。</li><li><code>assertFalse(&quot;message&quot;,A)</code>，判断A条件是否不为真。</li><li><code>assertNotNull(&quot;message&quot;,A)</code>，判断A对象是否不为<code>null</code>。</li><li><code>assertArrayEquals(&quot;message&quot;,A,B)</code>，判断A数组与B数组是否相等。</li></ul><h2 id="2-3-MockMvc"><a href="#2-3-MockMvc" class="headerlink" title="2.3.MockMvc"></a>2.3.MockMvc</h2><p>下文中，对Controller的测试需要用到MockMvc技术。MockMvc，从字面上来看指的是模拟的MVC，即其可以模拟一个MVC环境，向Controller发送请求然后得到响应。</p><p>在单元测试中，使用MockMvc前需要进行初始化，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> MockMvc mockMvc;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WebApplicationContext wac;<br><br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupMockMvc</span><span class="hljs-params">()</span>&#123;<br>    mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-1-MockMvc模拟MVC请求"><a href="#2-3-1-MockMvc模拟MVC请求" class="headerlink" title="2.3.1 MockMvc模拟MVC请求"></a>2.3.1 MockMvc模拟MVC请求</h3><p><strong>模拟一个get请求：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hello?name=&#123;name&#125;&quot;</span>,<span class="hljs-string">&quot;mrbird&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>模拟一个post请求</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><strong>模拟文件上传：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.fileUpload(<span class="hljs-string">&quot;/fileupload&quot;</span>).file(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;文件内容&quot;</span>.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>)));<br></code></pre></td></tr></table></figure><p><strong>模拟请求参数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模拟发送一个message参数，值为hello</span><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hello&quot;</span>).param(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>));<br><span class="hljs-comment">// 模拟提交一个checkbox值，name为hobby，值为sleep和eat</span><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/saveHobby&quot;</span>).param(<span class="hljs-string">&quot;hobby&quot;</span>, <span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;eat&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>也可以直接使用<code>MultiValueMap</code>构建参数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">MultiValueMap&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;String, String&gt;();<br>params.add(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;mrbird&quot;</span>);<br>params.add(<span class="hljs-string">&quot;hobby&quot;</span>, <span class="hljs-string">&quot;sleep&quot;</span>);<br>params.add(<span class="hljs-string">&quot;hobby&quot;</span>, <span class="hljs-string">&quot;eat&quot;</span>);<br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hobby/save&quot;</span>).params(params));<br></code></pre></td></tr></table></figure><p><strong>模拟发送JSON参数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;username\&quot;:\&quot;Dopa\&quot;,\&quot;passwd\&quot;:\&quot;ac3af72d9f95161a502fd326865c2f15\&quot;,\&quot;status\&quot;:\&quot;1\&quot;&#125;&quot;</span>;<br>mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">&quot;/user/save&quot;</span>).content(jsonStr.getBytes()));<br></code></pre></td></tr></table></figure><p>实际测试中，要手动编写这么长的JSON格式字符串很繁琐也很容易出错，可以借助Spring Boot自带的Jackson技术来序列化一个Java对象（可参考<a href="https://mrbird.cc/Spring-Boot%E4%B8%AD%E7%9A%84JSON%E6%8A%80%E6%9C%AF.html">Spring Boot中的JSON技术</a>），如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUsername(<span class="hljs-string">&quot;Dopa&quot;</span>);<br>user.setPasswd(<span class="hljs-string">&quot;ac3af72d9f95161a502fd326865c2f15&quot;</span>);<br>user.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">userJson</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">&quot;/user/save&quot;</span>).content(userJson.getBytes()));<br></code></pre></td></tr></table></figure><p>其中，mapper为<code>com.fasterxml.jackson.databind.ObjectMapper</code>对象。</p><p><strong>模拟Session和Cookie：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>).sessionAttr(name, value));<br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>).cookie(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(name, value)));<br></code></pre></td></tr></table></figure><p><strong>设置请求的Content-Type：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>).contentType(MediaType.APPLICATION_JSON_UTF8));<br></code></pre></td></tr></table></figure><p><strong>设置返回格式为JSON：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>).accept(MediaType.APPLICATION_JSON));<br></code></pre></td></tr></table></figure><p><strong>模拟HTTP请求头：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>).header(name, values));<br></code></pre></td></tr></table></figure><h3 id="2-3-2MockMvc处理返回结果"><a href="#2-3-2MockMvc处理返回结果" class="headerlink" title="2.3.2MockMvc处理返回结果"></a>2.<strong>3.2MockMvc处理返回结果</strong></h3><p>期望成功调用，即HTTP Status为200：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>))<br>    .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>期望返回内容是<code>application/json</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>))<br>    .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));<br></code></pre></td></tr></table></figure><p>检查返回JSON数据中某个值的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>))<br>    .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;$.username&quot;</span>).value(<span class="hljs-string">&quot;mrbird&quot;</span>));<br></code></pre></td></tr></table></figure><p>这里使用到了<code>jsonPath</code>，<code>$</code>代表了JSON的根节点。更多关于<code>jsonPath</code>的介绍可参考 <a href="https://github.com/json-path/JsonPath%E3%80%82">https://github.com/json-path/JsonPath。</a></p><p>判断Controller方法是否返回某视图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.view().name(<span class="hljs-string">&quot;index.html&quot;</span>));<br></code></pre></td></tr></table></figure><p>比较Model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>))<br>    .andExpect(MockMvcResultMatchers.model().size(<span class="hljs-number">1</span>))<br>    .andExpect(MockMvcResultMatchers.model().attributeExists(<span class="hljs-string">&quot;password&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.model().attribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;mrbird&quot;</span>));<br></code></pre></td></tr></table></figure><p>比较forward或者redirect：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.forwardedUrl(<span class="hljs-string">&quot;index.html&quot;</span>));<br><span class="hljs-comment">// 或者</span><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.redirectedUrl(<span class="hljs-string">&quot;index.html&quot;</span>));<br></code></pre></td></tr></table></figure><p>比较返回内容，使用<code>content()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回内容为hello</span><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.content().string(<span class="hljs-string">&quot;hello&quot;</span>));<br><br><span class="hljs-comment">// 返回内容是XML，并且与xmlCotent一样</span><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.content().xml(xmlContent));<br><br><span class="hljs-comment">// 返回内容是JSON ，并且与jsonContent一样</span><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andExpect(MockMvcResultMatchers.content().json(jsonContent));<br></code></pre></td></tr></table></figure><p>输出响应结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/index&quot;</span>))<br>    .andDo(MockMvcResultHandlers.print());<br></code></pre></td></tr></table></figure><h1 id="3、-测试Service"><a href="#3、-测试Service" class="headerlink" title="3、 测试Service"></a>3、 测试Service</h1><p>现有如下Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseService</span>&lt;User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findByName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(User.class);<br>        example.createCriteria().andCondition(<span class="hljs-string">&quot;username=&quot;</span>, userName);<br>        List&lt;User&gt; userList = <span class="hljs-built_in">this</span>.selectByExample(example);<br>        <span class="hljs-keyword">if</span> (userList.size() != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> userList.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写一个该Service的单元测试，测试<code>findByName</code>方法是否有效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userService.findByName(<span class="hljs-string">&quot;scott&quot;</span>);<br>        Assert.assertEquals(<span class="hljs-string">&quot;用户名为scott&quot;</span>, <span class="hljs-string">&quot;scott&quot;</span>, user.getUsername());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，JUnit没有报错说明测试通过，即<code>UserService</code>的<code>findByName</code>方法可行。</p><p>此外，和在Controller中引用Service相比，<strong>在测试单元中对Service测试完毕后，数据能自动回滚，只需要在测试方法上加上<code>@Transactional</code>注解</strong>，比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setId(<span class="hljs-built_in">this</span>.userService.getSequence(<span class="hljs-string">&quot;seq_user&quot;</span>));<br>    user.setUsername(<span class="hljs-string">&quot;JUnit&quot;</span>);<br>    user.setPasswd(<span class="hljs-string">&quot;123456&quot;</span>);<br>    user.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>    user.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-built_in">this</span>.userService.save(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行，测试通过，查看数据库发现数据并没有被插入，这样很好的<strong>避免了不必要的数据污染</strong>。</p><h1 id="4、-测试Controller"><a href="#4、-测试Controller" class="headerlink" title="4、 测试Controller"></a>4、 测试Controller</h1><p>现有如下Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;user/&#123;userName&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;userName&quot;)</span> String userName)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userService.findByName(userName);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;user/save&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService.saveUser(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在编写一个针对于该Controller<code>getUserByName(@PathVariable(value = &quot;userName&quot;) String userName)</code>方法的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserControllerTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MockMvc mockMvc;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebApplicationContext wac;<br>    <br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupMockMvc</span><span class="hljs-params">()</span>&#123;<br>        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        mockMvc.perform(<br>            MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/user/&#123;userName&#125;&quot;</span>, <span class="hljs-string">&quot;scott&quot;</span>)<br>            .contentType(MediaType.APPLICATION_JSON_UTF8))<br>        .andExpect(MockMvcResultMatchers.status().isOk())<br>        .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;$.username&quot;</span>).value(<span class="hljs-string">&quot;scott&quot;</span>))<br>        .andDo(MockMvcResultHandlers.print());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，JUnit通过，控制台输出过程如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">MockHttpServletRequest:<br>      HTTP Method = GET<br>      Request URI = /user/scott<br>       Parameters = &#123;&#125;<br>          Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;<br><br>Handler:<br>             Type = demo.springboot.test.controller.UserController<br>           Method = public demo.springboot.test.domain.User demo.springboot.test.controller.UserController.getUserByName(java.lang.String)<br><br>Async:<br>    Async started = false<br>     Async result = null<br><br>Resolved Exception:<br>             Type = null<br><br>ModelAndView:<br>        View name = null<br>             View = null<br>            Model = null<br><br>FlashMap:<br>       Attributes = null<br><br>MockHttpServletResponse:<br>           Status = 200<br>    Error message = null<br>          Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;<br>     Content type = application/json;charset=UTF-8<br>             Body = &#123;&quot;id&quot;:23,&quot;username&quot;:&quot;scott&quot;,&quot;passwd&quot;:&quot;ac3af72d9f95161a502fd326865c2f15&quot;,&quot;createTime&quot;:1514535399000,&quot;status&quot;:&quot;1&quot;&#125;<br>    Forwarded URL = null<br>   Redirected URL = null<br>          Cookies = []<br></code></pre></td></tr></table></figure><p>继续编写一个针对于该Controller<code>saveUser(@RequestBody User user)</code>方法的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserControllerTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MockMvc mockMvc;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebApplicationContext wac;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    ObjectMapper mapper;<br>    <br>    <br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupMockMvc</span><span class="hljs-params">()</span>&#123;<br>        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;Dopa&quot;</span>);<br>        user.setPasswd(<span class="hljs-string">&quot;ac3af72d9f95161a502fd326865c2f15&quot;</span>);<br>        user.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">userJson</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>        mockMvc.perform(<br>            MockMvcRequestBuilders.post(<span class="hljs-string">&quot;/user/save&quot;</span>)<br>            .contentType(MediaType.APPLICATION_JSON_UTF8)<br>            .content(userJson.getBytes()))<br>        .andExpect(MockMvcResultMatchers.status().isOk())<br>        .andDo(MockMvcResultHandlers.print());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行过程如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">MockHttpServletRequest:<br>      HTTP Method = POST<br>      Request URI = /user/save<br>       Parameters = &#123;&#125;<br>          Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;<br><br>Handler:<br>             Type = demo.springboot.test.controller.UserController<br>           Method = public void demo.springboot.test.controller.UserController.saveUser(demo.springboot.test.domain.User)<br><br>Async:<br>    Async started = false<br>     Async result = null<br><br>Resolved Exception:<br>             Type = null<br><br>ModelAndView:<br>        View name = null<br>             View = null<br>            Model = null<br><br>FlashMap:<br>       Attributes = null<br><br>MockHttpServletResponse:<br>           Status = 200<br>    Error message = null<br>          Headers = &#123;&#125;<br>     Content type = null<br>             Body = <br>    Forwarded URL = null<br>   Redirected URL = null<br>          Cookies = []<br></code></pre></td></tr></table></figure><p>值得注意的是，在一个完整的系统中编写测试单元时，可能需要模拟一个登录用户信息Session，MockMvc也提供了解决方案，可在初始化的时候模拟一个HttpSession：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> MockMvc mockMvc;<br><span class="hljs-keyword">private</span> MockHttpSession session;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WebApplicationContext wac;<br><br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupMockMvc</span><span class="hljs-params">()</span>&#123;<br>    mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();<br>    session = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockHttpSession</span>();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;Dopa&quot;</span>);<br>    user.setPasswd(<span class="hljs-string">&quot;ac3af72d9f95161a502fd326865c2f15&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, user); <br>&#125;<br></code></pre></td></tr></table></figure><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/19.Spring-Boot-Testing">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/19.Spring-Boot-Testing</a></p><p>From: <a href="https://mrbird.cc/Spring-Boot%20TESTing.html">MyBird</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA热部署</title>
      <link href="/2020/12/02/springboot%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/12/02/springboot%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓的热部署就是在你修改了后端代码后不需要手动重启，工具会帮你快速的自动重启是修改生效。其深层原理是使用了两个<code>ClassLoader</code>，一个<code>Classloader</code>加载那些不会改变的类（第三方Jar包），另一个<code>ClassLoader</code>加载会更改的类，称为<code>restart ClassLoader</code>，这样在有代码更改的时候，原来的<code>restart ClassLoader</code> 被丢弃，重新创建一个<code>restart ClassLoader</code>，由于需要加载的类相比较少，所以实现了较快的重启时间。</p></blockquote><h1 id="1-引入依赖Devtools"><a href="#1-引入依赖Devtools" class="headerlink" title="1.引入依赖Devtools"></a>1.引入依赖Devtools</h1><p>搭建一个简单的Spring Boot项目，然后引入Spring-Boot-devtools：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），因为其采用的虚拟机机制，该项重启是很快的。</p><h1 id="2-开启Build-Automatically："><a href="#2-开启Build-Automatically：" class="headerlink" title="2.开启Build Automatically："></a>2.开启Build Automatically：</h1><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031451281.png" alt="image-20240403145135201"></p><h1 id="3-开启运行中热部署"><a href="#3-开启运行中热部署" class="headerlink" title="3.开启运行中热部署"></a>3.开启运行中热部署</h1><h2 id="3-1-低版本需要双击shift搜索registry"><a href="#3-1-低版本需要双击shift搜索registry" class="headerlink" title="3.1 低版本需要双击shift搜索registry"></a>3.1 <a href="https://so.csdn.net/so/search?q=%E4%BD%8E%E7%89%88%E6%9C%AC&spm=1001.2101.3001.7020">低版本</a>需要双击shift搜索registry</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031453153.png" alt="在这里插入图片描述"></p><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031453670.jpeg" alt="在这里插入图片描述"></p><h2 id="3-2-高版本设置如下所示"><a href="#3-2-高版本设置如下所示" class="headerlink" title="3.2 高版本设置如下所示"></a>3.2 高版本设置如下所示</h2><p><img src="https://nohurry-imgbed.oss-cn-qingdao.aliyuncs.com/imgs/202404031454212.png" alt="开启热部署"></p><h1 id="4-测试热部署"><a href="#4-测试热部署" class="headerlink" title="4.测试热部署"></a>4.测试热部署</h1><p>在入口类中添加一个方法，用于热部署测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplication</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello spring boot&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问<a href="http://localhost:8080/%EF%BC%8C%E9%A1%B5%E9%9D%A2%E8%BE%93%E5%87%BAhello">http://localhost:8080/，页面输出hello</a> spring boot。</p><p>将方法的返回值修改为hello world并在保存的瞬间，应用便重启好了，刷新页面，内容也将得到更改。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 热部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
